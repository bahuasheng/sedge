// $ANTLR 3.4 /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g 2012-02-22 16:40:30

package org.apache.pig.parser;

import org.apache.pig.data.DataType;
import org.apache.pig.impl.util.NumValCarrier;

import java.util.HashSet;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;


/**
 * Grammar file for Pig tree parser (visitor for default data type insertion).
 *
 * NOTE: THIS FILE IS BASED ON QueryParser.g, SO IF YOU CHANGE THAT FILE, YOU WILL 
 *       PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO THIS FILE AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class AstValidator extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AND", "AS", "ASC", "BAG", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CHARARRAY", "COGROUP", "COLON", "COMMA", "CROSS", "DCOLON", "DEFINE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "EQUAL", "EXECCOMMAND", "FALSE", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER_L", "IF", "IMPORT", "INNER", "INPUT", "INT", "INTEGER", "INTO", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FIELD_DEF_WITHOUT_IDENTIFIER", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "IDENTIFIER", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "NULL", "PARAMS", "QUERY", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL", "EVAL", "MATCHES"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AND=5;
    public static final int AS=6;
    public static final int ASC=7;
    public static final int BAG=8;
    public static final int BOOLEAN=9;
    public static final int BY=10;
    public static final int BYTEARRAY=11;
    public static final int CACHE=12;
    public static final int CHARARRAY=13;
    public static final int COGROUP=14;
    public static final int COLON=15;
    public static final int COMMA=16;
    public static final int CROSS=17;
    public static final int DCOLON=18;
    public static final int DEFINE=19;
    public static final int DESC=20;
    public static final int DIGIT=21;
    public static final int DISTINCT=22;
    public static final int DIV=23;
    public static final int DOLLAR=24;
    public static final int DOLLARVAR=25;
    public static final int DOUBLE=26;
    public static final int DOUBLENUMBER=27;
    public static final int DOUBLE_PERIOD=28;
    public static final int EQUAL=29;
    public static final int EXECCOMMAND=30;
    public static final int FALSE=31;
    public static final int FILTER=32;
    public static final int FLATTEN=33;
    public static final int FLOAT=34;
    public static final int FLOATINGPOINT=35;
    public static final int FLOATNUMBER=36;
    public static final int FOREACH=37;
    public static final int FULL=38;
    public static final int GENERATE=39;
    public static final int GROUP=40;
    public static final int ID=41;
    public static final int IDENTIFIER_L=42;
    public static final int IF=43;
    public static final int IMPORT=44;
    public static final int INNER=45;
    public static final int INPUT=46;
    public static final int INT=47;
    public static final int INTEGER=48;
    public static final int INTO=49;
    public static final int IS=50;
    public static final int JOIN=51;
    public static final int LEFT=52;
    public static final int LEFT_BRACKET=53;
    public static final int LEFT_CURLY=54;
    public static final int LEFT_PAREN=55;
    public static final int LETTER=56;
    public static final int LIMIT=57;
    public static final int LOAD=58;
    public static final int LONG=59;
    public static final int LONGINTEGER=60;
    public static final int MAP=61;
    public static final int MAPREDUCE=62;
    public static final int MINUS=63;
    public static final int ML_COMMENT=64;
    public static final int MULTILINE_QUOTEDSTRING=65;
    public static final int NOT=66;
    public static final int NUM_OP_EQ=67;
    public static final int NUM_OP_GT=68;
    public static final int NUM_OP_GTE=69;
    public static final int NUM_OP_LT=70;
    public static final int NUM_OP_LTE=71;
    public static final int NUM_OP_NE=72;
    public static final int ONSCHEMA=73;
    public static final int OR=74;
    public static final int ORDER=75;
    public static final int OTHERWISE=76;
    public static final int OUTER=77;
    public static final int OUTPUT=78;
    public static final int PARALLEL=79;
    public static final int PARTITION=80;
    public static final int PERCENT=81;
    public static final int PERIOD=82;
    public static final int PLUS=83;
    public static final int POUND=84;
    public static final int QMARK=85;
    public static final int QUOTEDSTRING=86;
    public static final int RETURNS=87;
    public static final int RIGHT=88;
    public static final int RIGHT_BRACKET=89;
    public static final int RIGHT_CURLY=90;
    public static final int RIGHT_PAREN=91;
    public static final int SAMPLE=92;
    public static final int SEMI_COLON=93;
    public static final int SHIP=94;
    public static final int SL_COMMENT=95;
    public static final int SPECIALCHAR=96;
    public static final int SPLIT=97;
    public static final int STAR=98;
    public static final int STDERROR=99;
    public static final int STDIN=100;
    public static final int STDOUT=101;
    public static final int STORE=102;
    public static final int STREAM=103;
    public static final int STR_OP_EQ=104;
    public static final int STR_OP_GT=105;
    public static final int STR_OP_GTE=106;
    public static final int STR_OP_LT=107;
    public static final int STR_OP_LTE=108;
    public static final int STR_OP_MATCHES=109;
    public static final int STR_OP_NE=110;
    public static final int THROUGH=111;
    public static final int TRUE=112;
    public static final int TUPLE=113;
    public static final int UNION=114;
    public static final int USING=115;
    public static final int VOID=116;
    public static final int WS=117;
    public static final int ANY=118;
    public static final int BAG_TYPE=119;
    public static final int BAG_TYPE_CAST=120;
    public static final int BAG_VAL=121;
    public static final int BIN_EXPR=122;
    public static final int BOOL=123;
    public static final int CAST_EXPR=124;
    public static final int COL_RANGE=125;
    public static final int EXPR_IN_PAREN=126;
    public static final int FIELD_DEF=127;
    public static final int FIELD_DEF_WITHOUT_IDENTIFIER=128;
    public static final int FOREACH_PLAN_COMPLEX=129;
    public static final int FOREACH_PLAN_SIMPLE=130;
    public static final int FUNC=131;
    public static final int FUNC_EVAL=132;
    public static final int FUNC_REF=133;
    public static final int IDENTIFIER=134;
    public static final int JOIN_ITEM=135;
    public static final int KEY_VAL_PAIR=136;
    public static final int MACRO_BODY=137;
    public static final int MACRO_DEF=138;
    public static final int MACRO_INLINE=139;
    public static final int MAP_TYPE=140;
    public static final int MAP_VAL=141;
    public static final int NEG=142;
    public static final int NESTED_CMD=143;
    public static final int NESTED_CMD_ASSI=144;
    public static final int NESTED_PROJ=145;
    public static final int NULL=146;
    public static final int PARAMS=147;
    public static final int QUERY=148;
    public static final int RETURN_VAL=149;
    public static final int SPLIT_BRANCH=150;
    public static final int STATEMENT=151;
    public static final int TOBAG=152;
    public static final int TOMAP=153;
    public static final int TOTUPLE=154;
    public static final int TUPLE_TYPE=155;
    public static final int TUPLE_TYPE_CAST=156;
    public static final int TUPLE_VAL=157;
    public static final int EVAL=158;
    public static final int MATCHES=159;

    // delegates
    public TreeParser[] getDelegates() {
        return new TreeParser[] {};
    }

    // delegators


    public AstValidator(TreeNodeStream input) {
        this(input, new RecognizerSharedState());
    }
    public AstValidator(TreeNodeStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return AstValidator.tokenNames; }
    public String getGrammarFileName() { return "/nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g"; }



    private static Log log = LogFactory.getLog( AstValidator.class );

    @Override
    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) 
    throws RecognitionException {
        throw new MismatchedTokenException( ttype, input );
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    throws RecognitionException {
        throw e;
    }

    private void validateSchemaAliasName(Set<String> fieldNames, CommonTree node, String name)
    throws DuplicatedSchemaAliasException {
        if( fieldNames.contains( name ) ) {
            throw new DuplicatedSchemaAliasException( input, 
                new SourceLocation( (PigParserNode)node ), name );
        } else {
            fieldNames.add( name );
        }
    }

    private void validateAliasRef(Set<String> aliases, CommonTree node, String alias)
    throws UndefinedAliasException {
        if( !aliases.contains( alias ) ) {
            throw new UndefinedAliasException( input, new SourceLocation( (PigParserNode)node ), alias );
        }
    }

    private void checkDuplication(int count, CommonTree node) throws ParserValidationException {
        if( count > 1 ) {
            throw new ParserValidationException( input, new SourceLocation( (PigParserNode)node ),
                "Duplicated command option" );
        }
    }

    private Set<String> aliases = new HashSet<String>();



    public static class query_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:98:1: query : ^( QUERY ( statement )* ) ;
    public final AstValidator.query_return query() throws RecognitionException {
        AstValidator.query_return retval = new AstValidator.query_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUERY1=null;
        AstValidator.statement_return statement2 =null;


        CommonTree QUERY1_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:98:7: ( ^( QUERY ( statement )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:98:9: ^( QUERY ( statement )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            QUERY1=(CommonTree)match(input,QUERY,FOLLOW_QUERY_in_query81); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUERY1_tree = (CommonTree)adaptor.dupNode(QUERY1);


            root_1 = (CommonTree)adaptor.becomeRoot(QUERY1_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:98:18: ( statement )*
                loop1:
                do {
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==SPLIT||LA1_0==STATEMENT) ) {
                        alt1=1;
                    }


                    switch (alt1) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:98:18: statement
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_statement_in_query83);
                	    statement2=statement();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, statement2.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop1;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:101:1: statement : ( general_statement | split_statement );
    public final AstValidator.statement_return statement() throws RecognitionException {
        AstValidator.statement_return retval = new AstValidator.statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.general_statement_return general_statement3 =null;

        AstValidator.split_statement_return split_statement4 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:101:11: ( general_statement | split_statement )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==STATEMENT) ) {
                alt2=1;
            }
            else if ( (LA2_0==SPLIT) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:101:13: general_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_general_statement_in_statement95);
                    general_statement3=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, general_statement3.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:102:13: split_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_statement_in_statement109);
                    split_statement4=split_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, split_statement4.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class split_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:105:1: split_statement : split_clause ;
    public final AstValidator.split_statement_return split_statement() throws RecognitionException {
        AstValidator.split_statement_return retval = new AstValidator.split_statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.split_clause_return split_clause5 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:105:17: ( split_clause )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:105:19: split_clause
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_split_clause_in_split_statement118);
            split_clause5=split_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, split_clause5.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_statement"


    public static class general_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:108:1: general_statement : ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) ;
    public final AstValidator.general_statement_return general_statement() throws RecognitionException {
        AstValidator.general_statement_return retval = new AstValidator.general_statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STATEMENT6=null;
        AstValidator.alias_return alias7 =null;

        AstValidator.op_clause_return op_clause8 =null;

        AstValidator.parallel_clause_return parallel_clause9 =null;


        CommonTree STATEMENT6_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:108:19: ( ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:108:21: ^( STATEMENT ( alias )? op_clause ( parallel_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STATEMENT6=(CommonTree)match(input,STATEMENT,FOLLOW_STATEMENT_in_general_statement129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STATEMENT6_tree = (CommonTree)adaptor.dupNode(STATEMENT6);


            root_1 = (CommonTree)adaptor.becomeRoot(STATEMENT6_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:108:34: ( alias )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IDENTIFIER) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:108:36: alias
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_general_statement133);
                    alias7=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, alias7.getTree());


                    if ( state.backtracking==0 ) { aliases.add( (alias7!=null?alias7.name:null) ); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_op_clause_in_general_statement140);
            op_clause8=op_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, op_clause8.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:108:87: ( parallel_clause )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==PARALLEL) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:108:87: parallel_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_parallel_clause_in_general_statement142);
                    parallel_clause9=parallel_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, parallel_clause9.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class parallel_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:111:1: parallel_clause : ^( PARALLEL INTEGER ) ;
    public final AstValidator.parallel_clause_return parallel_clause() throws RecognitionException {
        AstValidator.parallel_clause_return retval = new AstValidator.parallel_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PARALLEL10=null;
        CommonTree INTEGER11=null;

        CommonTree PARALLEL10_tree=null;
        CommonTree INTEGER11_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:111:17: ( ^( PARALLEL INTEGER ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:111:19: ^( PARALLEL INTEGER )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PARALLEL10=(CommonTree)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL10_tree = (CommonTree)adaptor.dupNode(PARALLEL10);


            root_1 = (CommonTree)adaptor.becomeRoot(PARALLEL10_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            INTEGER11=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER11_tree = (CommonTree)adaptor.dupNode(INTEGER11);


            adaptor.addChild(root_1, INTEGER11_tree);
            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class alias_return extends TreeRuleReturnScope {
        public String name;
        public CommonTree node;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:114:1: alias returns [String name, CommonTree node] : IDENTIFIER ;
    public final AstValidator.alias_return alias() throws RecognitionException {
        AstValidator.alias_return retval = new AstValidator.alias_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree IDENTIFIER12=null;

        CommonTree IDENTIFIER12_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:115:2: ( IDENTIFIER )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:115:4: IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            IDENTIFIER12=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER12_tree = (CommonTree)adaptor.dupNode(IDENTIFIER12);


            adaptor.addChild(root_0, IDENTIFIER12_tree);
            }


            if ( state.backtracking==0 ) { 
                   retval.name = (IDENTIFIER12!=null?IDENTIFIER12.getText():null);
                   retval.node = IDENTIFIER12;
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias"


    public static class op_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:122:1: op_clause : ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause | split_clause | foreach_clause );
    public final AstValidator.op_clause_return op_clause() throws RecognitionException {
        AstValidator.op_clause_return retval = new AstValidator.op_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.define_clause_return define_clause13 =null;

        AstValidator.load_clause_return load_clause14 =null;

        AstValidator.group_clause_return group_clause15 =null;

        AstValidator.store_clause_return store_clause16 =null;

        AstValidator.filter_clause_return filter_clause17 =null;

        AstValidator.distinct_clause_return distinct_clause18 =null;

        AstValidator.limit_clause_return limit_clause19 =null;

        AstValidator.sample_clause_return sample_clause20 =null;

        AstValidator.order_clause_return order_clause21 =null;

        AstValidator.cross_clause_return cross_clause22 =null;

        AstValidator.join_clause_return join_clause23 =null;

        AstValidator.union_clause_return union_clause24 =null;

        AstValidator.stream_clause_return stream_clause25 =null;

        AstValidator.mr_clause_return mr_clause26 =null;

        AstValidator.split_clause_return split_clause27 =null;

        AstValidator.foreach_clause_return foreach_clause28 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:122:11: ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause | split_clause | foreach_clause )
            int alt5=16;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt5=1;
                }
                break;
            case LOAD:
                {
                alt5=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt5=3;
                }
                break;
            case STORE:
                {
                alt5=4;
                }
                break;
            case FILTER:
                {
                alt5=5;
                }
                break;
            case DISTINCT:
                {
                alt5=6;
                }
                break;
            case LIMIT:
                {
                alt5=7;
                }
                break;
            case SAMPLE:
                {
                alt5=8;
                }
                break;
            case ORDER:
                {
                alt5=9;
                }
                break;
            case CROSS:
                {
                alt5=10;
                }
                break;
            case JOIN:
                {
                alt5=11;
                }
                break;
            case UNION:
                {
                alt5=12;
                }
                break;
            case STREAM:
                {
                alt5=13;
                }
                break;
            case MAPREDUCE:
                {
                alt5=14;
                }
                break;
            case SPLIT:
                {
                alt5=15;
                }
                break;
            case FOREACH:
                {
                alt5=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:122:13: define_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_define_clause_in_op_clause187);
                    define_clause13=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, define_clause13.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:123:13: load_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_load_clause_in_op_clause202);
                    load_clause14=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, load_clause14.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:124:13: group_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_group_clause_in_op_clause216);
                    group_clause15=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, group_clause15.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:125:13: store_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_store_clause_in_op_clause230);
                    store_clause16=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, store_clause16.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:126:13: filter_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_filter_clause_in_op_clause244);
                    filter_clause17=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, filter_clause17.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:127:13: distinct_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_distinct_clause_in_op_clause258);
                    distinct_clause18=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, distinct_clause18.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:128:13: limit_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_limit_clause_in_op_clause272);
                    limit_clause19=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, limit_clause19.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:129:13: sample_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sample_clause_in_op_clause286);
                    sample_clause20=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sample_clause20.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:130:13: order_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_order_clause_in_op_clause300);
                    order_clause21=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, order_clause21.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:131:13: cross_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cross_clause_in_op_clause314);
                    cross_clause22=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cross_clause22.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:132:13: join_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_clause_in_op_clause328);
                    join_clause23=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_clause23.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:133:13: union_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_union_clause_in_op_clause342);
                    union_clause24=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, union_clause24.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:134:13: stream_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_stream_clause_in_op_clause356);
                    stream_clause25=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, stream_clause25.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:135:13: mr_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_mr_clause_in_op_clause370);
                    mr_clause26=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, mr_clause26.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:136:13: split_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_clause_in_op_clause384);
                    split_clause27=split_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, split_clause27.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:137:13: foreach_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_foreach_clause_in_op_clause398);
                    foreach_clause28=foreach_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, foreach_clause28.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class define_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:140:1: define_clause : ^( DEFINE alias ( cmd | func_clause ) ) ;
    public final AstValidator.define_clause_return define_clause() throws RecognitionException {
        AstValidator.define_clause_return retval = new AstValidator.define_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DEFINE29=null;
        AstValidator.alias_return alias30 =null;

        AstValidator.cmd_return cmd31 =null;

        AstValidator.func_clause_return func_clause32 =null;


        CommonTree DEFINE29_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:140:15: ( ^( DEFINE alias ( cmd | func_clause ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:140:17: ^( DEFINE alias ( cmd | func_clause ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DEFINE29=(CommonTree)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINE29_tree = (CommonTree)adaptor.dupNode(DEFINE29);


            root_1 = (CommonTree)adaptor.becomeRoot(DEFINE29_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_define_clause411);
            alias30=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias30.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:140:33: ( cmd | func_clause )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==EXECCOMMAND) ) {
                alt6=1;
            }
            else if ( (LA6_0==FUNC||LA6_0==FUNC_REF) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:140:35: cmd
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cmd_in_define_clause415);
                    cmd31=cmd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cmd31.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:140:41: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_define_clause419);
                    func_clause32=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause32.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class cmd_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:143:1: cmd : ^( EXECCOMMAND ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ) ;
    public final AstValidator.cmd_return cmd() throws RecognitionException {
        AstValidator.cmd_return retval = new AstValidator.cmd_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree EXECCOMMAND33=null;
        AstValidator.ship_clause_return ship_clause34 =null;

        AstValidator.cache_clause_return cache_clause35 =null;

        AstValidator.input_clause_return input_clause36 =null;

        AstValidator.output_clause_return output_clause37 =null;

        AstValidator.error_clause_return error_clause38 =null;


        CommonTree EXECCOMMAND33_tree=null;


            int ship = 0;
            int cache = 0;
            int in = 0;
            int out = 0;
            int error = 0;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:151:2: ( ^( EXECCOMMAND ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:151:4: ^( EXECCOMMAND ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            EXECCOMMAND33=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND33_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND33);


            root_1 = (CommonTree)adaptor.becomeRoot(EXECCOMMAND33_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:151:19: ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
                loop7:
                do {
                    int alt7=6;
                    switch ( input.LA(1) ) {
                    case SHIP:
                        {
                        alt7=1;
                        }
                        break;
                    case CACHE:
                        {
                        alt7=2;
                        }
                        break;
                    case INPUT:
                        {
                        alt7=3;
                        }
                        break;
                    case OUTPUT:
                        {
                        alt7=4;
                        }
                        break;
                    case STDERROR:
                        {
                        alt7=5;
                        }
                        break;

                    }

                    switch (alt7) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:151:21: ship_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_ship_clause_in_cmd444);
                	    ship_clause34=ship_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, ship_clause34.getTree());


                	    if ( state.backtracking==0 ) { checkDuplication( ++ship, (ship_clause34!=null?((CommonTree)ship_clause34.start):null) ); }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 2 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:152:21: cache_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_cache_clause_in_cmd468);
                	    cache_clause35=cache_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, cache_clause35.getTree());


                	    if ( state.backtracking==0 ) { checkDuplication( ++cache, (cache_clause35!=null?((CommonTree)cache_clause35.start):null) ); }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 3 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:153:21: input_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_input_clause_in_cmd492);
                	    input_clause36=input_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, input_clause36.getTree());


                	    if ( state.backtracking==0 ) { checkDuplication( ++in, (input_clause36!=null?((CommonTree)input_clause36.start):null) ); }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 4 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:154:21: output_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_output_clause_in_cmd517);
                	    output_clause37=output_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, output_clause37.getTree());


                	    if ( state.backtracking==0 ) { checkDuplication( ++out, (output_clause37!=null?((CommonTree)output_clause37.start):null) ); }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 5 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:155:21: error_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_error_clause_in_cmd542);
                	    error_clause38=error_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, error_clause38.getTree());


                	    if ( state.backtracking==0 ) { checkDuplication( ++error, (error_clause38!=null?((CommonTree)error_clause38.start):null) ); }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop7;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class ship_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:160:1: ship_clause : ^( SHIP ( path_list )? ) ;
    public final AstValidator.ship_clause_return ship_clause() throws RecognitionException {
        AstValidator.ship_clause_return retval = new AstValidator.ship_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SHIP39=null;
        AstValidator.path_list_return path_list40 =null;


        CommonTree SHIP39_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:160:13: ( ^( SHIP ( path_list )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:160:15: ^( SHIP ( path_list )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SHIP39=(CommonTree)match(input,SHIP,FOLLOW_SHIP_in_ship_clause581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP39_tree = (CommonTree)adaptor.dupNode(SHIP39);


            root_1 = (CommonTree)adaptor.becomeRoot(SHIP39_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:160:23: ( path_list )?
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==QUOTEDSTRING) ) {
                    alt8=1;
                }
                switch (alt8) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:160:23: path_list
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_path_list_in_ship_clause583);
                        path_list40=path_list();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, path_list40.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:163:1: path_list : ( QUOTEDSTRING )+ ;
    public final AstValidator.path_list_return path_list() throws RecognitionException {
        AstValidator.path_list_return retval = new AstValidator.path_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING41=null;

        CommonTree QUOTEDSTRING41_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:163:11: ( ( QUOTEDSTRING )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:163:13: ( QUOTEDSTRING )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:163:13: ( QUOTEDSTRING )+
            int cnt9=0;
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==QUOTEDSTRING) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:163:13: QUOTEDSTRING
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    QUOTEDSTRING41=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list595); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    QUOTEDSTRING41_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING41);


            	    adaptor.addChild(root_0, QUOTEDSTRING41_tree);
            	    }


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt9 >= 1 ) break loop9;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(9, input);
                        throw eee;
                }
                cnt9++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:166:1: cache_clause : ^( CACHE path_list ) ;
    public final AstValidator.cache_clause_return cache_clause() throws RecognitionException {
        AstValidator.cache_clause_return retval = new AstValidator.cache_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CACHE42=null;
        AstValidator.path_list_return path_list43 =null;


        CommonTree CACHE42_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:166:14: ( ^( CACHE path_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:166:16: ^( CACHE path_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CACHE42=(CommonTree)match(input,CACHE,FOLLOW_CACHE_in_cache_clause607); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE42_tree = (CommonTree)adaptor.dupNode(CACHE42);


            root_1 = (CommonTree)adaptor.becomeRoot(CACHE42_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_path_list_in_cache_clause609);
            path_list43=path_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, path_list43.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:169:1: input_clause : ^( INPUT ( stream_cmd )+ ) ;
    public final AstValidator.input_clause_return input_clause() throws RecognitionException {
        AstValidator.input_clause_return retval = new AstValidator.input_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree INPUT44=null;
        AstValidator.stream_cmd_return stream_cmd45 =null;


        CommonTree INPUT44_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:169:14: ( ^( INPUT ( stream_cmd )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:169:16: ^( INPUT ( stream_cmd )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            INPUT44=(CommonTree)match(input,INPUT,FOLLOW_INPUT_in_input_clause622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT44_tree = (CommonTree)adaptor.dupNode(INPUT44);


            root_1 = (CommonTree)adaptor.becomeRoot(INPUT44_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:169:25: ( stream_cmd )+
            int cnt10=0;
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==QUOTEDSTRING||(LA10_0 >= STDIN && LA10_0 <= STDOUT)) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:169:25: stream_cmd
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_stream_cmd_in_input_clause624);
            	    stream_cmd45=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, stream_cmd45.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class stream_cmd_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:172:1: stream_cmd : ( ^( STDIN ( func_clause )? ) | ^( STDOUT ( func_clause )? ) | ^( QUOTEDSTRING ( func_clause )? ) );
    public final AstValidator.stream_cmd_return stream_cmd() throws RecognitionException {
        AstValidator.stream_cmd_return retval = new AstValidator.stream_cmd_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STDIN46=null;
        CommonTree STDOUT48=null;
        CommonTree QUOTEDSTRING50=null;
        AstValidator.func_clause_return func_clause47 =null;

        AstValidator.func_clause_return func_clause49 =null;

        AstValidator.func_clause_return func_clause51 =null;


        CommonTree STDIN46_tree=null;
        CommonTree STDOUT48_tree=null;
        CommonTree QUOTEDSTRING50_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:172:12: ( ^( STDIN ( func_clause )? ) | ^( STDOUT ( func_clause )? ) | ^( QUOTEDSTRING ( func_clause )? ) )
            int alt14=3;
            switch ( input.LA(1) ) {
            case STDIN:
                {
                alt14=1;
                }
                break;
            case STDOUT:
                {
                alt14=2;
                }
                break;
            case QUOTEDSTRING:
                {
                alt14=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:172:14: ^( STDIN ( func_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STDIN46=(CommonTree)match(input,STDIN,FOLLOW_STDIN_in_stream_cmd638); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN46_tree = (CommonTree)adaptor.dupNode(STDIN46);


                    root_1 = (CommonTree)adaptor.becomeRoot(STDIN46_tree, root_1);
                    }


                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:172:23: ( func_clause )?
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==FUNC||LA11_0==FUNC_REF) ) {
                            alt11=1;
                        }
                        switch (alt11) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:172:23: func_clause
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd640);
                                func_clause47=func_clause();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause47.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:173:14: ^( STDOUT ( func_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STDOUT48=(CommonTree)match(input,STDOUT,FOLLOW_STDOUT_in_stream_cmd660); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT48_tree = (CommonTree)adaptor.dupNode(STDOUT48);


                    root_1 = (CommonTree)adaptor.becomeRoot(STDOUT48_tree, root_1);
                    }


                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:173:24: ( func_clause )?
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==FUNC||LA12_0==FUNC_REF) ) {
                            alt12=1;
                        }
                        switch (alt12) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:173:24: func_clause
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd662);
                                func_clause49=func_clause();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause49.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:174:14: ^( QUOTEDSTRING ( func_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    QUOTEDSTRING50=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_stream_cmd682); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING50_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING50);


                    root_1 = (CommonTree)adaptor.becomeRoot(QUOTEDSTRING50_tree, root_1);
                    }


                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:174:30: ( func_clause )?
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==FUNC||LA13_0==FUNC_REF) ) {
                            alt13=1;
                        }
                        switch (alt13) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:174:30: func_clause
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd684);
                                func_clause51=func_clause();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause51.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class output_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:177:1: output_clause : ^( OUTPUT ( stream_cmd )+ ) ;
    public final AstValidator.output_clause_return output_clause() throws RecognitionException {
        AstValidator.output_clause_return retval = new AstValidator.output_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OUTPUT52=null;
        AstValidator.stream_cmd_return stream_cmd53 =null;


        CommonTree OUTPUT52_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:177:15: ( ^( OUTPUT ( stream_cmd )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:177:17: ^( OUTPUT ( stream_cmd )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            OUTPUT52=(CommonTree)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT52_tree = (CommonTree)adaptor.dupNode(OUTPUT52);


            root_1 = (CommonTree)adaptor.becomeRoot(OUTPUT52_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:177:27: ( stream_cmd )+
            int cnt15=0;
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==QUOTEDSTRING||(LA15_0 >= STDIN && LA15_0 <= STDOUT)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:177:27: stream_cmd
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_stream_cmd_in_output_clause700);
            	    stream_cmd53=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, stream_cmd53.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt15 >= 1 ) break loop15;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(15, input);
                        throw eee;
                }
                cnt15++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:180:1: error_clause : ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? ) ;
    public final AstValidator.error_clause_return error_clause() throws RecognitionException {
        AstValidator.error_clause_return retval = new AstValidator.error_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STDERROR54=null;
        CommonTree QUOTEDSTRING55=null;
        CommonTree INTEGER56=null;

        CommonTree STDERROR54_tree=null;
        CommonTree QUOTEDSTRING55_tree=null;
        CommonTree INTEGER56_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:180:14: ( ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:180:16: ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STDERROR54=(CommonTree)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR54_tree = (CommonTree)adaptor.dupNode(STDERROR54);


            root_1 = (CommonTree)adaptor.becomeRoot(STDERROR54_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:180:29: ( QUOTEDSTRING ( INTEGER )? )?
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==QUOTEDSTRING) ) {
                    alt17=1;
                }
                switch (alt17) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:180:31: QUOTEDSTRING ( INTEGER )?
                        {
                        _last = (CommonTree)input.LT(1);
                        QUOTEDSTRING55=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause719); if (state.failed) return retval;
                        if ( state.backtracking==0 ) {
                        QUOTEDSTRING55_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING55);


                        adaptor.addChild(root_1, QUOTEDSTRING55_tree);
                        }


                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:180:44: ( INTEGER )?
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==INTEGER) ) {
                            alt16=1;
                        }
                        switch (alt16) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:180:44: INTEGER
                                {
                                _last = (CommonTree)input.LT(1);
                                INTEGER56=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause721); if (state.failed) return retval;
                                if ( state.backtracking==0 ) {
                                INTEGER56_tree = (CommonTree)adaptor.dupNode(INTEGER56);


                                adaptor.addChild(root_1, INTEGER56_tree);
                                }


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:183:1: load_clause : ^( LOAD filename ( func_clause )? ( as_clause )? ) ;
    public final AstValidator.load_clause_return load_clause() throws RecognitionException {
        AstValidator.load_clause_return retval = new AstValidator.load_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LOAD57=null;
        AstValidator.filename_return filename58 =null;

        AstValidator.func_clause_return func_clause59 =null;

        AstValidator.as_clause_return as_clause60 =null;


        CommonTree LOAD57_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:183:13: ( ^( LOAD filename ( func_clause )? ( as_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:183:15: ^( LOAD filename ( func_clause )? ( as_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LOAD57=(CommonTree)match(input,LOAD,FOLLOW_LOAD_in_load_clause738); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD57_tree = (CommonTree)adaptor.dupNode(LOAD57);


            root_1 = (CommonTree)adaptor.becomeRoot(LOAD57_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_filename_in_load_clause740);
            filename58=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, filename58.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:183:32: ( func_clause )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FUNC||LA18_0==FUNC_REF) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:183:32: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_load_clause742);
                    func_clause59=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause59.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:183:45: ( as_clause )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==AS) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:183:45: as_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_as_clause_in_load_clause745);
                    as_clause60=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, as_clause60.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class filename_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filename"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:186:1: filename : QUOTEDSTRING ;
    public final AstValidator.filename_return filename() throws RecognitionException {
        AstValidator.filename_return retval = new AstValidator.filename_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING61=null;

        CommonTree QUOTEDSTRING61_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:186:10: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:186:12: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING61=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_filename757); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING61_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING61);


            adaptor.addChild(root_0, QUOTEDSTRING61_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filename"


    public static class as_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:189:1: as_clause : ^( AS field_def_list ) ;
    public final AstValidator.as_clause_return as_clause() throws RecognitionException {
        AstValidator.as_clause_return retval = new AstValidator.as_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree AS62=null;
        AstValidator.field_def_list_return field_def_list63 =null;


        CommonTree AS62_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:189:10: ( ^( AS field_def_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:189:12: ^( AS field_def_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            AS62=(CommonTree)match(input,AS,FOLLOW_AS_in_as_clause767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS62_tree = (CommonTree)adaptor.dupNode(AS62);


            root_1 = (CommonTree)adaptor.becomeRoot(AS62_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_field_def_list_in_as_clause769);
            field_def_list63=field_def_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, field_def_list63.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class field_def_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:192:1: field_def[Set<String> fieldNames, NumValCarrier nvc] : ( ^( FIELD_DEF IDENTIFIER ( type )? ) | ^( FIELD_DEF_WITHOUT_IDENTIFIER type ) );
    public final AstValidator.field_def_return field_def(Set<String> fieldNames, NumValCarrier nvc) throws RecognitionException, DuplicatedSchemaAliasException {
        AstValidator.field_def_return retval = new AstValidator.field_def_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FIELD_DEF64=null;
        CommonTree IDENTIFIER65=null;
        CommonTree FIELD_DEF_WITHOUT_IDENTIFIER67=null;
        AstValidator.type_return type66 =null;

        AstValidator.type_return type68 =null;


        CommonTree FIELD_DEF64_tree=null;
        CommonTree IDENTIFIER65_tree=null;
        CommonTree FIELD_DEF_WITHOUT_IDENTIFIER67_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:193:2: ( ^( FIELD_DEF IDENTIFIER ( type )? ) | ^( FIELD_DEF_WITHOUT_IDENTIFIER type ) )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==FIELD_DEF) ) {
                alt21=1;
            }
            else if ( (LA21_0==FIELD_DEF_WITHOUT_IDENTIFIER) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }
            switch (alt21) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:193:4: ^( FIELD_DEF IDENTIFIER ( type )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FIELD_DEF64=(CommonTree)match(input,FIELD_DEF,FOLLOW_FIELD_DEF_in_field_def788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIELD_DEF64_tree = (CommonTree)adaptor.dupNode(FIELD_DEF64);


                    root_1 = (CommonTree)adaptor.becomeRoot(FIELD_DEF64_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER65=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_field_def790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER65_tree = (CommonTree)adaptor.dupNode(IDENTIFIER65);


                    adaptor.addChild(root_1, IDENTIFIER65_tree);
                    }


                    if ( state.backtracking==0 ) { validateSchemaAliasName( fieldNames, IDENTIFIER65, (IDENTIFIER65!=null?IDENTIFIER65.getText():null) ); }

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:193:102: ( type )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==BOOLEAN||LA20_0==BYTEARRAY||LA20_0==CHARARRAY||LA20_0==DOUBLE||LA20_0==FLOAT||LA20_0==INT||LA20_0==LONG||LA20_0==BAG_TYPE||LA20_0==MAP_TYPE||LA20_0==TUPLE_TYPE) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:193:102: type
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_type_in_field_def794);
                            type66=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, type66.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:194:4: ^( FIELD_DEF_WITHOUT_IDENTIFIER type )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FIELD_DEF_WITHOUT_IDENTIFIER67=(CommonTree)match(input,FIELD_DEF_WITHOUT_IDENTIFIER,FOLLOW_FIELD_DEF_WITHOUT_IDENTIFIER_in_field_def804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIELD_DEF_WITHOUT_IDENTIFIER67_tree = (CommonTree)adaptor.dupNode(FIELD_DEF_WITHOUT_IDENTIFIER67);


                    root_1 = (CommonTree)adaptor.becomeRoot(FIELD_DEF_WITHOUT_IDENTIFIER67_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_in_field_def806);
                    type68=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type68.getTree());


                    if ( state.backtracking==0 ) { validateSchemaAliasName ( fieldNames, FIELD_DEF_WITHOUT_IDENTIFIER67, nvc.makeNameFromDataType ( (type68!=null?type68.typev:0) ) ); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    protected static class field_def_list_scope {
        Set<String> fieldNames;
        NumValCarrier nvc;
    }
    protected Stack field_def_list_stack = new Stack();


    public static class field_def_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:197:1: field_def_list : ( field_def[$field_def_list::fieldNames, $field_def_list::nvc] )+ ;
    public final AstValidator.field_def_list_return field_def_list() throws RecognitionException, DuplicatedSchemaAliasException {
        field_def_list_stack.push(new field_def_list_scope());
        AstValidator.field_def_list_return retval = new AstValidator.field_def_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.field_def_return field_def69 =null;




            ((field_def_list_scope)field_def_list_stack.peek()).fieldNames = new HashSet<String>();
            ((field_def_list_scope)field_def_list_stack.peek()).nvc = new NumValCarrier();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:206:2: ( ( field_def[$field_def_list::fieldNames, $field_def_list::nvc] )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:206:4: ( field_def[$field_def_list::fieldNames, $field_def_list::nvc] )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:206:4: ( field_def[$field_def_list::fieldNames, $field_def_list::nvc] )+
            int cnt22=0;
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( ((LA22_0 >= FIELD_DEF && LA22_0 <= FIELD_DEF_WITHOUT_IDENTIFIER)) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:206:6: field_def[$field_def_list::fieldNames, $field_def_list::nvc]
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_field_def_in_field_def_list834);
            	    field_def69=field_def(((field_def_list_scope)field_def_list_stack.peek()).fieldNames, ((field_def_list_scope)field_def_list_stack.peek()).nvc);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, field_def69.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt22 >= 1 ) break loop22;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(22, input);
                        throw eee;
                }
                cnt22++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            field_def_list_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class type_return extends TreeRuleReturnScope {
        public byte typev;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:209:1: type returns [byte typev] : ( simple_type | tuple_type | bag_type | map_type );
    public final AstValidator.type_return type() throws RecognitionException {
        AstValidator.type_return retval = new AstValidator.type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.simple_type_return simple_type70 =null;

        AstValidator.tuple_type_return tuple_type71 =null;

        AstValidator.bag_type_return bag_type72 =null;

        AstValidator.map_type_return map_type73 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:210:3: ( simple_type | tuple_type | bag_type | map_type )
            int alt23=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt23=1;
                }
                break;
            case TUPLE_TYPE:
                {
                alt23=2;
                }
                break;
            case BAG_TYPE:
                {
                alt23=3;
                }
                break;
            case MAP_TYPE:
                {
                alt23=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }

            switch (alt23) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:210:5: simple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_type_in_type853);
                    simple_type70=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_type70.getTree());


                    if ( state.backtracking==0 ) { retval.typev = (simple_type70!=null?simple_type70.typev:0); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:211:5: tuple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_type_in_type861);
                    tuple_type71=tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple_type71.getTree());


                    if ( state.backtracking==0 ) { retval.typev = DataType.TUPLE; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:212:5: bag_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_type_in_type869);
                    bag_type72=bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag_type72.getTree());


                    if ( state.backtracking==0 ) { retval.typev = DataType.BAG; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:213:5: map_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_type_in_type877);
                    map_type73=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map_type73.getTree());


                    if ( state.backtracking==0 ) { retval.typev = DataType.MAP; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class simple_type_return extends TreeRuleReturnScope {
        public byte typev;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:216:1: simple_type returns [byte typev] : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY );
    public final AstValidator.simple_type_return simple_type() throws RecognitionException {
        AstValidator.simple_type_return retval = new AstValidator.simple_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BOOLEAN74=null;
        CommonTree INT75=null;
        CommonTree LONG76=null;
        CommonTree FLOAT77=null;
        CommonTree DOUBLE78=null;
        CommonTree CHARARRAY79=null;
        CommonTree BYTEARRAY80=null;

        CommonTree BOOLEAN74_tree=null;
        CommonTree INT75_tree=null;
        CommonTree LONG76_tree=null;
        CommonTree FLOAT77_tree=null;
        CommonTree DOUBLE78_tree=null;
        CommonTree CHARARRAY79_tree=null;
        CommonTree BYTEARRAY80_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:217:3: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY )
            int alt24=7;
            switch ( input.LA(1) ) {
            case BOOLEAN:
                {
                alt24=1;
                }
                break;
            case INT:
                {
                alt24=2;
                }
                break;
            case LONG:
                {
                alt24=3;
                }
                break;
            case FLOAT:
                {
                alt24=4;
                }
                break;
            case DOUBLE:
                {
                alt24=5;
                }
                break;
            case CHARARRAY:
                {
                alt24=6;
                }
                break;
            case BYTEARRAY:
                {
                alt24=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }

            switch (alt24) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:217:5: BOOLEAN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BOOLEAN74=(CommonTree)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_simple_type894); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLEAN74_tree = (CommonTree)adaptor.dupNode(BOOLEAN74);


                    adaptor.addChild(root_0, BOOLEAN74_tree);
                    }


                    if ( state.backtracking==0 ) { retval.typev = DataType.BOOLEAN; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:218:5: INT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INT75=(CommonTree)match(input,INT,FOLLOW_INT_in_simple_type902); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT75_tree = (CommonTree)adaptor.dupNode(INT75);


                    adaptor.addChild(root_0, INT75_tree);
                    }


                    if ( state.backtracking==0 ) { retval.typev = DataType.INTEGER; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:219:5: LONG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LONG76=(CommonTree)match(input,LONG,FOLLOW_LONG_in_simple_type910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG76_tree = (CommonTree)adaptor.dupNode(LONG76);


                    adaptor.addChild(root_0, LONG76_tree);
                    }


                    if ( state.backtracking==0 ) { retval.typev = DataType.LONG; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:220:5: FLOAT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLOAT77=(CommonTree)match(input,FLOAT,FOLLOW_FLOAT_in_simple_type918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT77_tree = (CommonTree)adaptor.dupNode(FLOAT77);


                    adaptor.addChild(root_0, FLOAT77_tree);
                    }


                    if ( state.backtracking==0 ) { retval.typev = DataType.FLOAT; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:221:5: DOUBLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DOUBLE78=(CommonTree)match(input,DOUBLE,FOLLOW_DOUBLE_in_simple_type926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE78_tree = (CommonTree)adaptor.dupNode(DOUBLE78);


                    adaptor.addChild(root_0, DOUBLE78_tree);
                    }


                    if ( state.backtracking==0 ) { retval.typev = DataType.DOUBLE; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:222:5: CHARARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CHARARRAY79=(CommonTree)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_simple_type934); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY79_tree = (CommonTree)adaptor.dupNode(CHARARRAY79);


                    adaptor.addChild(root_0, CHARARRAY79_tree);
                    }


                    if ( state.backtracking==0 ) { retval.typev = DataType.CHARARRAY; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:223:5: BYTEARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BYTEARRAY80=(CommonTree)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_simple_type942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY80_tree = (CommonTree)adaptor.dupNode(BYTEARRAY80);


                    adaptor.addChild(root_0, BYTEARRAY80_tree);
                    }


                    if ( state.backtracking==0 ) { retval.typev = DataType.BYTEARRAY; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class tuple_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:226:1: tuple_type : ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final AstValidator.tuple_type_return tuple_type() throws RecognitionException {
        AstValidator.tuple_type_return retval = new AstValidator.tuple_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_TYPE81=null;
        AstValidator.field_def_list_return field_def_list82 =null;


        CommonTree TUPLE_TYPE81_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:226:12: ( ^( TUPLE_TYPE ( field_def_list )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:226:14: ^( TUPLE_TYPE ( field_def_list )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_TYPE81=(CommonTree)match(input,TUPLE_TYPE,FOLLOW_TUPLE_TYPE_in_tuple_type955); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_TYPE81_tree = (CommonTree)adaptor.dupNode(TUPLE_TYPE81);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_TYPE81_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:226:28: ( field_def_list )?
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( ((LA25_0 >= FIELD_DEF && LA25_0 <= FIELD_DEF_WITHOUT_IDENTIFIER)) ) {
                    alt25=1;
                }
                switch (alt25) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:226:28: field_def_list
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_field_def_list_in_tuple_type957);
                        field_def_list82=field_def_list();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, field_def_list82.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class bag_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:229:1: bag_type : ^( BAG_TYPE ( IDENTIFIER )? ( tuple_type )? ) ;
    public final AstValidator.bag_type_return bag_type() throws RecognitionException {
        AstValidator.bag_type_return retval = new AstValidator.bag_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_TYPE83=null;
        CommonTree IDENTIFIER84=null;
        AstValidator.tuple_type_return tuple_type85 =null;


        CommonTree BAG_TYPE83_tree=null;
        CommonTree IDENTIFIER84_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:229:10: ( ^( BAG_TYPE ( IDENTIFIER )? ( tuple_type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:229:12: ^( BAG_TYPE ( IDENTIFIER )? ( tuple_type )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_TYPE83=(CommonTree)match(input,BAG_TYPE,FOLLOW_BAG_TYPE_in_bag_type971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_TYPE83_tree = (CommonTree)adaptor.dupNode(BAG_TYPE83);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_TYPE83_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:229:24: ( IDENTIFIER )?
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==IDENTIFIER) ) {
                    alt26=1;
                }
                switch (alt26) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:229:24: IDENTIFIER
                        {
                        _last = (CommonTree)input.LT(1);
                        IDENTIFIER84=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_bag_type973); if (state.failed) return retval;
                        if ( state.backtracking==0 ) {
                        IDENTIFIER84_tree = (CommonTree)adaptor.dupNode(IDENTIFIER84);


                        adaptor.addChild(root_1, IDENTIFIER84_tree);
                        }


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:229:36: ( tuple_type )?
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==TUPLE_TYPE) ) {
                    alt27=1;
                }
                switch (alt27) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:229:36: tuple_type
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_tuple_type_in_bag_type976);
                        tuple_type85=tuple_type();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, tuple_type85.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type"


    public static class map_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:232:1: map_type : ^( MAP_TYPE ( type )? ) ;
    public final AstValidator.map_type_return map_type() throws RecognitionException {
        AstValidator.map_type_return retval = new AstValidator.map_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAP_TYPE86=null;
        AstValidator.type_return type87 =null;


        CommonTree MAP_TYPE86_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:232:10: ( ^( MAP_TYPE ( type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:232:12: ^( MAP_TYPE ( type )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAP_TYPE86=(CommonTree)match(input,MAP_TYPE,FOLLOW_MAP_TYPE_in_map_type990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAP_TYPE86_tree = (CommonTree)adaptor.dupNode(MAP_TYPE86);


            root_1 = (CommonTree)adaptor.becomeRoot(MAP_TYPE86_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:232:24: ( type )?
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==BOOLEAN||LA28_0==BYTEARRAY||LA28_0==CHARARRAY||LA28_0==DOUBLE||LA28_0==FLOAT||LA28_0==INT||LA28_0==LONG||LA28_0==BAG_TYPE||LA28_0==MAP_TYPE||LA28_0==TUPLE_TYPE) ) {
                    alt28=1;
                }
                switch (alt28) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:232:24: type
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_type_in_map_type992);
                        type87=type();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, type87.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class func_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:235:1: func_clause : ( ^( FUNC_REF func_name ) | ^( FUNC func_name ( func_args )? ) );
    public final AstValidator.func_clause_return func_clause() throws RecognitionException {
        AstValidator.func_clause_return retval = new AstValidator.func_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FUNC_REF88=null;
        CommonTree FUNC90=null;
        AstValidator.func_name_return func_name89 =null;

        AstValidator.func_name_return func_name91 =null;

        AstValidator.func_args_return func_args92 =null;


        CommonTree FUNC_REF88_tree=null;
        CommonTree FUNC90_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:235:13: ( ^( FUNC_REF func_name ) | ^( FUNC func_name ( func_args )? ) )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==FUNC_REF) ) {
                alt30=1;
            }
            else if ( (LA30_0==FUNC) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:235:15: ^( FUNC_REF func_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC_REF88=(CommonTree)match(input,FUNC_REF,FOLLOW_FUNC_REF_in_func_clause1006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC_REF88_tree = (CommonTree)adaptor.dupNode(FUNC_REF88);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC_REF88_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_clause1008);
                    func_name89=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name89.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:236:15: ^( FUNC func_name ( func_args )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC90=(CommonTree)match(input,FUNC,FOLLOW_FUNC_in_func_clause1028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC90_tree = (CommonTree)adaptor.dupNode(FUNC90);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC90_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_clause1030);
                    func_name91=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name91.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:236:33: ( func_args )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==MULTILINE_QUOTEDSTRING||LA29_0==QUOTEDSTRING) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:236:33: func_args
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_func_args_in_func_clause1032);
                            func_args92=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, func_args92.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:239:1: func_name : eid ( ( PERIOD | DOLLAR ) eid )* ;
    public final AstValidator.func_name_return func_name() throws RecognitionException {
        AstValidator.func_name_return retval = new AstValidator.func_name_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set94=null;
        AstValidator.eid_return eid93 =null;

        AstValidator.eid_return eid95 =null;


        CommonTree set94_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:239:11: ( eid ( ( PERIOD | DOLLAR ) eid )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:239:13: eid ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_eid_in_func_name1044);
            eid93=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, eid93.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:239:17: ( ( PERIOD | DOLLAR ) eid )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==DOLLAR||LA31_0==PERIOD) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:239:19: ( PERIOD | DOLLAR ) eid
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    set94=(CommonTree)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) {
            	        set94_tree = (CommonTree)adaptor.dupNode(set94);


            	        adaptor.addChild(root_0, set94_tree);
            	        }

            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_eid_in_func_name1058);
            	    eid95=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, eid95.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_string_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args_string"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:242:1: func_args_string : ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING );
    public final AstValidator.func_args_string_return func_args_string() throws RecognitionException {
        AstValidator.func_args_string_return retval = new AstValidator.func_args_string_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set96=null;

        CommonTree set96_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:242:18: ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set96=(CommonTree)input.LT(1);

            if ( input.LA(1)==MULTILINE_QUOTEDSTRING||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set96_tree = (CommonTree)adaptor.dupNode(set96);


                adaptor.addChild(root_0, set96_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args_string"


    public static class func_args_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:245:1: func_args : ( func_args_string )+ ;
    public final AstValidator.func_args_return func_args() throws RecognitionException {
        AstValidator.func_args_return retval = new AstValidator.func_args_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.func_args_string_return func_args_string97 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:245:11: ( ( func_args_string )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:245:13: ( func_args_string )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:245:13: ( func_args_string )+
            int cnt32=0;
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==MULTILINE_QUOTEDSTRING||LA32_0==QUOTEDSTRING) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:245:13: func_args_string
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_func_args_string_in_func_args1083);
            	    func_args_string97=func_args_string();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, func_args_string97.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt32 >= 1 ) break loop32;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(32, input);
                        throw eee;
                }
                cnt32++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    protected static class group_clause_scope {
        int arity;
    }
    protected Stack group_clause_stack = new Stack();


    public static class group_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:248:1: group_clause : ^( ( GROUP | COGROUP ) ( group_item )+ ( group_type )? ( partition_clause )? ) ;
    public final AstValidator.group_clause_return group_clause() throws RecognitionException {
        group_clause_stack.push(new group_clause_scope());
        AstValidator.group_clause_return retval = new AstValidator.group_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set98=null;
        AstValidator.group_item_return group_item99 =null;

        AstValidator.group_type_return group_type100 =null;

        AstValidator.partition_clause_return partition_clause101 =null;


        CommonTree set98_tree=null;


            ((group_clause_scope)group_clause_stack.peek()).arity = 0;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:255:2: ( ^( ( GROUP | COGROUP ) ( group_item )+ ( group_type )? ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:255:4: ^( ( GROUP | COGROUP ) ( group_item )+ ( group_type )? ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            set98=(CommonTree)input.LT(1);

            if ( input.LA(1)==COGROUP||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set98_tree = (CommonTree)adaptor.dupNode(set98);


                root_1 = (CommonTree)adaptor.becomeRoot(set98_tree, root_1);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:255:27: ( group_item )+
            int cnt33=0;
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==COGROUP||LA33_0==CROSS||LA33_0==DEFINE||LA33_0==DISTINCT||LA33_0==FILTER||LA33_0==FOREACH||LA33_0==GROUP||LA33_0==JOIN||(LA33_0 >= LIMIT && LA33_0 <= LOAD)||LA33_0==MAPREDUCE||LA33_0==ORDER||LA33_0==SAMPLE||LA33_0==SPLIT||(LA33_0 >= STORE && LA33_0 <= STREAM)||LA33_0==UNION||LA33_0==IDENTIFIER) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:255:27: group_item
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_group_item_in_group_clause1115);
            	    group_item99=group_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, group_item99.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt33 >= 1 ) break loop33;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(33, input);
                        throw eee;
                }
                cnt33++;
            } while (true);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:255:39: ( group_type )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==QUOTEDSTRING) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:255:39: group_type
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_group_type_in_group_clause1118);
                    group_type100=group_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, group_type100.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:255:51: ( partition_clause )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==PARTITION) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:255:51: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_group_clause1121);
                    partition_clause101=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause101.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            group_clause_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:258:1: group_type : QUOTEDSTRING ;
    public final AstValidator.group_type_return group_type() throws RecognitionException {
        AstValidator.group_type_return retval = new AstValidator.group_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING102=null;

        CommonTree QUOTEDSTRING102_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:258:12: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:258:14: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING102=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_type1133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING102_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING102);


            adaptor.addChild(root_0, QUOTEDSTRING102_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_type"


    public static class group_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:261:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final AstValidator.group_item_return group_item() throws RecognitionException {
        AstValidator.group_item_return retval = new AstValidator.group_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ALL105=null;
        CommonTree ANY106=null;
        CommonTree set107=null;
        AstValidator.rel_return rel103 =null;

        AstValidator.join_group_by_clause_return join_group_by_clause104 =null;


        CommonTree ALL105_tree=null;
        CommonTree ANY106_tree=null;
        CommonTree set107_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:262:2: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:262:4: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_group_item1144);
            rel103=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, rel103.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:262:8: ( join_group_by_clause | ALL | ANY )
            int alt36=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt36=1;
                }
                break;
            case ALL:
                {
                alt36=2;
                }
                break;
            case ANY:
                {
                alt36=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }

            switch (alt36) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:262:10: join_group_by_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item1148);
                    join_group_by_clause104=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_group_by_clause104.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:262:33: ALL
                    {
                    _last = (CommonTree)input.LT(1);
                    ALL105=(CommonTree)match(input,ALL,FOLLOW_ALL_in_group_item1152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL105_tree = (CommonTree)adaptor.dupNode(ALL105);


                    adaptor.addChild(root_0, ALL105_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:262:39: ANY
                    {
                    _last = (CommonTree)input.LT(1);
                    ANY106=(CommonTree)match(input,ANY,FOLLOW_ANY_in_group_item1156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY106_tree = (CommonTree)adaptor.dupNode(ANY106);


                    adaptor.addChild(root_0, ANY106_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:262:45: ( INNER | OUTER )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==INNER||LA37_0==OUTER) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
                    {
                    _last = (CommonTree)input.LT(1);
                    set107=(CommonTree)input.LT(1);

                    if ( input.LA(1)==INNER||input.LA(1)==OUTER ) {
                        input.consume();
                        if ( state.backtracking==0 ) {
                        set107_tree = (CommonTree)adaptor.dupNode(set107);


                        adaptor.addChild(root_0, set107_tree);
                        }

                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                   if( ((group_clause_scope)group_clause_stack.peek()).arity == 0 ) {
                       // For the first input
                       ((group_clause_scope)group_clause_stack.peek()).arity = (join_group_by_clause104!=null?join_group_by_clause104.exprCount:0);
                   } else if( (join_group_by_clause104!=null?join_group_by_clause104.exprCount:0) != ((group_clause_scope)group_clause_stack.peek()).arity ) {
                       throw new ParserValidationException( input, new SourceLocation( (PigParserNode)((CommonTree)retval.start) ),
                           "The arity of the group by columns do not match." );
                   }
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class rel_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:274:1: rel : ( alias | op_clause ( parallel_clause )? );
    public final AstValidator.rel_return rel() throws RecognitionException {
        AstValidator.rel_return retval = new AstValidator.rel_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.alias_return alias108 =null;

        AstValidator.op_clause_return op_clause109 =null;

        AstValidator.parallel_clause_return parallel_clause110 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:274:5: ( alias | op_clause ( parallel_clause )? )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==IDENTIFIER) ) {
                alt39=1;
            }
            else if ( (LA39_0==COGROUP||LA39_0==CROSS||LA39_0==DEFINE||LA39_0==DISTINCT||LA39_0==FILTER||LA39_0==FOREACH||LA39_0==GROUP||LA39_0==JOIN||(LA39_0 >= LIMIT && LA39_0 <= LOAD)||LA39_0==MAPREDUCE||LA39_0==ORDER||LA39_0==SAMPLE||LA39_0==SPLIT||(LA39_0 >= STORE && LA39_0 <= STREAM)||LA39_0==UNION) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:274:7: alias
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_rel1183);
                    alias108=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias108.getTree());


                    if ( state.backtracking==0 ) {  validateAliasRef( aliases, (alias108!=null?alias108.node:null), (alias108!=null?alias108.name:null) ); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:275:7: op_clause ( parallel_clause )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_op_clause_in_rel1193);
                    op_clause109=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, op_clause109.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:275:17: ( parallel_clause )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==PARALLEL) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:275:17: parallel_clause
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_parallel_clause_in_rel1195);
                            parallel_clause110=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, parallel_clause110.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class flatten_generated_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:1: flatten_generated_item : ( flatten_clause | col_range | expr | STAR ) ( field_def_list )? ;
    public final AstValidator.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        AstValidator.flatten_generated_item_return retval = new AstValidator.flatten_generated_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR114=null;
        AstValidator.flatten_clause_return flatten_clause111 =null;

        AstValidator.col_range_return col_range112 =null;

        AstValidator.expr_return expr113 =null;

        AstValidator.field_def_list_return field_def_list115 =null;


        CommonTree STAR114_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:24: ( ( flatten_clause | col_range | expr | STAR ) ( field_def_list )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:26: ( flatten_clause | col_range | expr | STAR ) ( field_def_list )?
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:26: ( flatten_clause | col_range | expr | STAR )
            int alt40=4;
            switch ( input.LA(1) ) {
            case FLATTEN:
                {
                alt40=1;
                }
                break;
            case COL_RANGE:
                {
                alt40=2;
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt40=3;
                }
                break;
            case STAR:
                {
                int LA40_4 = input.LA(2);

                if ( (LA40_4==DOWN) ) {
                    alt40=3;
                }
                else if ( (LA40_4==EOF||LA40_4==UP||LA40_4==DIV||LA40_4==DOLLARVAR||LA40_4==DOUBLENUMBER||LA40_4==FALSE||LA40_4==FLATTEN||LA40_4==FLOATNUMBER||LA40_4==GROUP||LA40_4==INTEGER||LA40_4==LONGINTEGER||LA40_4==MINUS||LA40_4==PERCENT||LA40_4==PLUS||LA40_4==QUOTEDSTRING||LA40_4==STAR||LA40_4==TRUE||(LA40_4 >= BAG_VAL && LA40_4 <= BIN_EXPR)||(LA40_4 >= CAST_EXPR && LA40_4 <= FIELD_DEF_WITHOUT_IDENTIFIER)||LA40_4==FUNC_EVAL||LA40_4==IDENTIFIER||(LA40_4 >= MAP_VAL && LA40_4 <= NEG)||LA40_4==NULL||LA40_4==TUPLE_VAL) ) {
                    alt40=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }

            switch (alt40) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:28: flatten_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item1207);
                    flatten_clause111=flatten_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, flatten_clause111.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:45: col_range
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_flatten_generated_item1211);
                    col_range112=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range112.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:57: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_flatten_generated_item1215);
                    expr113=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr113.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:64: STAR
                    {
                    _last = (CommonTree)input.LT(1);
                    STAR114=(CommonTree)match(input,STAR,FOLLOW_STAR_in_flatten_generated_item1219); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR114_tree = (CommonTree)adaptor.dupNode(STAR114);


                    adaptor.addChild(root_0, STAR114_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:71: ( field_def_list )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0 >= FIELD_DEF && LA41_0 <= FIELD_DEF_WITHOUT_IDENTIFIER)) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:278:71: field_def_list
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item1223);
                    field_def_list115=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, field_def_list115.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class flatten_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:281:1: flatten_clause : ^( FLATTEN expr ) ;
    public final AstValidator.flatten_clause_return flatten_clause() throws RecognitionException {
        AstValidator.flatten_clause_return retval = new AstValidator.flatten_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FLATTEN116=null;
        AstValidator.expr_return expr117 =null;


        CommonTree FLATTEN116_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:281:16: ( ^( FLATTEN expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:281:18: ^( FLATTEN expr )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FLATTEN116=(CommonTree)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause1235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN116_tree = (CommonTree)adaptor.dupNode(FLATTEN116);


            root_1 = (CommonTree)adaptor.becomeRoot(FLATTEN116_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_flatten_clause1237);
            expr117=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr117.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class store_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:284:1: store_clause : ^( STORE rel filename ( func_clause )? ) ;
    public final AstValidator.store_clause_return store_clause() throws RecognitionException {
        AstValidator.store_clause_return retval = new AstValidator.store_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STORE118=null;
        AstValidator.rel_return rel119 =null;

        AstValidator.filename_return filename120 =null;

        AstValidator.func_clause_return func_clause121 =null;


        CommonTree STORE118_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:284:14: ( ^( STORE rel filename ( func_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:284:16: ^( STORE rel filename ( func_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STORE118=(CommonTree)match(input,STORE,FOLLOW_STORE_in_store_clause1250); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE118_tree = (CommonTree)adaptor.dupNode(STORE118);


            root_1 = (CommonTree)adaptor.becomeRoot(STORE118_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_store_clause1252);
            rel119=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel119.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_filename_in_store_clause1254);
            filename120=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, filename120.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:284:38: ( func_clause )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==FUNC||LA42_0==FUNC_REF) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:284:38: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_store_clause1256);
                    func_clause121=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause121.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class filter_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:287:1: filter_clause : ^( FILTER rel cond ) ;
    public final AstValidator.filter_clause_return filter_clause() throws RecognitionException {
        AstValidator.filter_clause_return retval = new AstValidator.filter_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FILTER122=null;
        AstValidator.rel_return rel123 =null;

        AstValidator.cond_return cond124 =null;


        CommonTree FILTER122_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:287:15: ( ^( FILTER rel cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:287:17: ^( FILTER rel cond )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FILTER122=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_filter_clause1270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER122_tree = (CommonTree)adaptor.dupNode(FILTER122);


            root_1 = (CommonTree)adaptor.becomeRoot(FILTER122_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_filter_clause1272);
            rel123=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel123.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_filter_clause1274);
            cond124=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond124.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class cond_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:290:1: cond : ( ^( OR cond cond ) | ^( AND cond cond ) | ^( NOT cond ) | ^( NULL expr ( NOT )? ) | ^( rel_op expr expr ) | func_eval );
    public final AstValidator.cond_return cond() throws RecognitionException {
        AstValidator.cond_return retval = new AstValidator.cond_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OR125=null;
        CommonTree AND128=null;
        CommonTree NOT131=null;
        CommonTree NULL133=null;
        CommonTree NOT135=null;
        AstValidator.cond_return cond126 =null;

        AstValidator.cond_return cond127 =null;

        AstValidator.cond_return cond129 =null;

        AstValidator.cond_return cond130 =null;

        AstValidator.cond_return cond132 =null;

        AstValidator.expr_return expr134 =null;

        AstValidator.rel_op_return rel_op136 =null;

        AstValidator.expr_return expr137 =null;

        AstValidator.expr_return expr138 =null;

        AstValidator.func_eval_return func_eval139 =null;


        CommonTree OR125_tree=null;
        CommonTree AND128_tree=null;
        CommonTree NOT131_tree=null;
        CommonTree NULL133_tree=null;
        CommonTree NOT135_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:290:6: ( ^( OR cond cond ) | ^( AND cond cond ) | ^( NOT cond ) | ^( NULL expr ( NOT )? ) | ^( rel_op expr expr ) | func_eval )
            int alt44=6;
            switch ( input.LA(1) ) {
            case OR:
                {
                alt44=1;
                }
                break;
            case AND:
                {
                alt44=2;
                }
                break;
            case NOT:
                {
                alt44=3;
                }
                break;
            case NULL:
                {
                alt44=4;
                }
                break;
            case NUM_OP_EQ:
            case NUM_OP_GT:
            case NUM_OP_GTE:
            case NUM_OP_LT:
            case NUM_OP_LTE:
            case NUM_OP_NE:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt44=5;
                }
                break;
            case FUNC_EVAL:
                {
                alt44=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }

            switch (alt44) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:290:8: ^( OR cond cond )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    OR125=(CommonTree)match(input,OR,FOLLOW_OR_in_cond1287); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR125_tree = (CommonTree)adaptor.dupNode(OR125);


                    root_1 = (CommonTree)adaptor.becomeRoot(OR125_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1289);
                    cond126=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond126.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1291);
                    cond127=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond127.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:291:8: ^( AND cond cond )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    AND128=(CommonTree)match(input,AND,FOLLOW_AND_in_cond1304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND128_tree = (CommonTree)adaptor.dupNode(AND128);


                    root_1 = (CommonTree)adaptor.becomeRoot(AND128_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1306);
                    cond129=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond129.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1308);
                    cond130=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond130.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:292:8: ^( NOT cond )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NOT131=(CommonTree)match(input,NOT,FOLLOW_NOT_in_cond1321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT131_tree = (CommonTree)adaptor.dupNode(NOT131);


                    root_1 = (CommonTree)adaptor.becomeRoot(NOT131_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1323);
                    cond132=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond132.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:293:8: ^( NULL expr ( NOT )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NULL133=(CommonTree)match(input,NULL,FOLLOW_NULL_in_cond1336); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL133_tree = (CommonTree)adaptor.dupNode(NULL133);


                    root_1 = (CommonTree)adaptor.becomeRoot(NULL133_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1338);
                    expr134=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr134.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:293:21: ( NOT )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==NOT) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:293:21: NOT
                            {
                            _last = (CommonTree)input.LT(1);
                            NOT135=(CommonTree)match(input,NOT,FOLLOW_NOT_in_cond1340); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT135_tree = (CommonTree)adaptor.dupNode(NOT135);


                            adaptor.addChild(root_1, NOT135_tree);
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:294:8: ^( rel_op expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_in_cond1354);
                    rel_op136=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_1 = (CommonTree)adaptor.becomeRoot(rel_op136.getTree(), root_1);


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1356);
                    expr137=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr137.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1358);
                    expr138=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr138.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:295:8: func_eval
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_eval_in_cond1369);
                    func_eval139=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, func_eval139.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class func_eval_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_eval"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:298:1: func_eval : ^( FUNC_EVAL func_name ( real_arg )* ) ;
    public final AstValidator.func_eval_return func_eval() throws RecognitionException {
        AstValidator.func_eval_return retval = new AstValidator.func_eval_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FUNC_EVAL140=null;
        AstValidator.func_name_return func_name141 =null;

        AstValidator.real_arg_return real_arg142 =null;


        CommonTree FUNC_EVAL140_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:298:10: ( ^( FUNC_EVAL func_name ( real_arg )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:298:12: ^( FUNC_EVAL func_name ( real_arg )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FUNC_EVAL140=(CommonTree)match(input,FUNC_EVAL,FOLLOW_FUNC_EVAL_in_func_eval1379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNC_EVAL140_tree = (CommonTree)adaptor.dupNode(FUNC_EVAL140);


            root_1 = (CommonTree)adaptor.becomeRoot(FUNC_EVAL140_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_func_name_in_func_eval1381);
            func_name141=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, func_name141.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:298:35: ( real_arg )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==DIV||LA45_0==DOLLARVAR||LA45_0==DOUBLENUMBER||LA45_0==FALSE||LA45_0==FLOATNUMBER||LA45_0==GROUP||LA45_0==INTEGER||LA45_0==LONGINTEGER||LA45_0==MINUS||LA45_0==PERCENT||LA45_0==PLUS||LA45_0==QUOTEDSTRING||LA45_0==STAR||LA45_0==TRUE||(LA45_0 >= BAG_VAL && LA45_0 <= BIN_EXPR)||(LA45_0 >= CAST_EXPR && LA45_0 <= EXPR_IN_PAREN)||LA45_0==FUNC_EVAL||LA45_0==IDENTIFIER||(LA45_0 >= MAP_VAL && LA45_0 <= NEG)||LA45_0==NULL||LA45_0==TUPLE_VAL) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:298:35: real_arg
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_real_arg_in_func_eval1383);
            	    real_arg142=real_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, real_arg142.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_eval"


    public static class real_arg_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:301:1: real_arg : ( expr | STAR | col_range );
    public final AstValidator.real_arg_return real_arg() throws RecognitionException {
        AstValidator.real_arg_return retval = new AstValidator.real_arg_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR144=null;
        AstValidator.expr_return expr143 =null;

        AstValidator.col_range_return col_range145 =null;


        CommonTree STAR144_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:301:10: ( expr | STAR | col_range )
            int alt46=3;
            switch ( input.LA(1) ) {
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt46=1;
                }
                break;
            case STAR:
                {
                int LA46_2 = input.LA(2);

                if ( (LA46_2==DOWN) ) {
                    alt46=1;
                }
                else if ( (LA46_2==EOF||LA46_2==UP||LA46_2==DIV||LA46_2==DOLLARVAR||LA46_2==DOUBLENUMBER||LA46_2==FALSE||LA46_2==FLOATNUMBER||LA46_2==GROUP||LA46_2==INTEGER||LA46_2==LONGINTEGER||LA46_2==MINUS||LA46_2==PERCENT||LA46_2==PLUS||LA46_2==QUOTEDSTRING||LA46_2==STAR||LA46_2==TRUE||(LA46_2 >= BAG_VAL && LA46_2 <= BIN_EXPR)||(LA46_2 >= CAST_EXPR && LA46_2 <= EXPR_IN_PAREN)||LA46_2==FUNC_EVAL||LA46_2==IDENTIFIER||(LA46_2 >= MAP_VAL && LA46_2 <= NEG)||LA46_2==NULL||LA46_2==TUPLE_VAL) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 2, input);

                    throw nvae;

                }
                }
                break;
            case COL_RANGE:
                {
                alt46=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }

            switch (alt46) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:301:12: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_real_arg1395);
                    expr143=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr143.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:301:19: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR144=(CommonTree)match(input,STAR,FOLLOW_STAR_in_real_arg1399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR144_tree = (CommonTree)adaptor.dupNode(STAR144);


                    adaptor.addChild(root_0, STAR144_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:301:26: col_range
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_real_arg1403);
                    col_range145=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range145.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:304:1: expr : ( ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( PERCENT expr expr ) | ^( CAST_EXPR type expr ) | const_expr | var_expr | ^( NEG expr ) | ^( CAST_EXPR type_cast expr ) | ^( EXPR_IN_PAREN expr ) );
    public final AstValidator.expr_return expr() throws RecognitionException {
        AstValidator.expr_return retval = new AstValidator.expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PLUS146=null;
        CommonTree MINUS149=null;
        CommonTree STAR152=null;
        CommonTree DIV155=null;
        CommonTree PERCENT158=null;
        CommonTree CAST_EXPR161=null;
        CommonTree NEG166=null;
        CommonTree CAST_EXPR168=null;
        CommonTree EXPR_IN_PAREN171=null;
        AstValidator.expr_return expr147 =null;

        AstValidator.expr_return expr148 =null;

        AstValidator.expr_return expr150 =null;

        AstValidator.expr_return expr151 =null;

        AstValidator.expr_return expr153 =null;

        AstValidator.expr_return expr154 =null;

        AstValidator.expr_return expr156 =null;

        AstValidator.expr_return expr157 =null;

        AstValidator.expr_return expr159 =null;

        AstValidator.expr_return expr160 =null;

        AstValidator.type_return type162 =null;

        AstValidator.expr_return expr163 =null;

        AstValidator.const_expr_return const_expr164 =null;

        AstValidator.var_expr_return var_expr165 =null;

        AstValidator.expr_return expr167 =null;

        AstValidator.type_cast_return type_cast169 =null;

        AstValidator.expr_return expr170 =null;

        AstValidator.expr_return expr172 =null;


        CommonTree PLUS146_tree=null;
        CommonTree MINUS149_tree=null;
        CommonTree STAR152_tree=null;
        CommonTree DIV155_tree=null;
        CommonTree PERCENT158_tree=null;
        CommonTree CAST_EXPR161_tree=null;
        CommonTree NEG166_tree=null;
        CommonTree CAST_EXPR168_tree=null;
        CommonTree EXPR_IN_PAREN171_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:304:6: ( ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( PERCENT expr expr ) | ^( CAST_EXPR type expr ) | const_expr | var_expr | ^( NEG expr ) | ^( CAST_EXPR type_cast expr ) | ^( EXPR_IN_PAREN expr ) )
            int alt47=11;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt47=1;
                }
                break;
            case MINUS:
                {
                int LA47_2 = input.LA(2);

                if ( (synpred86_AstValidator()) ) {
                    alt47=2;
                }
                else if ( (synpred91_AstValidator()) ) {
                    alt47=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 2, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                alt47=3;
                }
                break;
            case DIV:
                {
                alt47=4;
                }
                break;
            case PERCENT:
                {
                alt47=5;
                }
                break;
            case CAST_EXPR:
                {
                int LA47_6 = input.LA(2);

                if ( (synpred90_AstValidator()) ) {
                    alt47=6;
                }
                else if ( (synpred94_AstValidator()) ) {
                    alt47=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 6, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case MAP_VAL:
            case NULL:
            case TUPLE_VAL:
                {
                alt47=7;
                }
                break;
            case DOLLARVAR:
            case GROUP:
            case BIN_EXPR:
            case FUNC_EVAL:
            case IDENTIFIER:
                {
                alt47=8;
                }
                break;
            case NEG:
                {
                alt47=9;
                }
                break;
            case EXPR_IN_PAREN:
                {
                alt47=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }

            switch (alt47) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:304:8: ^( PLUS expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    PLUS146=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_expr1414); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS146_tree = (CommonTree)adaptor.dupNode(PLUS146);


                    root_1 = (CommonTree)adaptor.becomeRoot(PLUS146_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1416);
                    expr147=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr147.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1418);
                    expr148=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr148.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:305:8: ^( MINUS expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    MINUS149=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_expr1431); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS149_tree = (CommonTree)adaptor.dupNode(MINUS149);


                    root_1 = (CommonTree)adaptor.becomeRoot(MINUS149_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1433);
                    expr150=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr150.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1435);
                    expr151=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr151.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:306:8: ^( STAR expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STAR152=(CommonTree)match(input,STAR,FOLLOW_STAR_in_expr1448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR152_tree = (CommonTree)adaptor.dupNode(STAR152);


                    root_1 = (CommonTree)adaptor.becomeRoot(STAR152_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1450);
                    expr153=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr153.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1452);
                    expr154=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr154.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:307:8: ^( DIV expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    DIV155=(CommonTree)match(input,DIV,FOLLOW_DIV_in_expr1465); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV155_tree = (CommonTree)adaptor.dupNode(DIV155);


                    root_1 = (CommonTree)adaptor.becomeRoot(DIV155_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1467);
                    expr156=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr156.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1469);
                    expr157=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr157.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:308:8: ^( PERCENT expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    PERCENT158=(CommonTree)match(input,PERCENT,FOLLOW_PERCENT_in_expr1482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PERCENT158_tree = (CommonTree)adaptor.dupNode(PERCENT158);


                    root_1 = (CommonTree)adaptor.becomeRoot(PERCENT158_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1484);
                    expr159=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr159.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1486);
                    expr160=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr160.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:309:8: ^( CAST_EXPR type expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    CAST_EXPR161=(CommonTree)match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_expr1499); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST_EXPR161_tree = (CommonTree)adaptor.dupNode(CAST_EXPR161);


                    root_1 = (CommonTree)adaptor.becomeRoot(CAST_EXPR161_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_in_expr1501);
                    type162=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type162.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1503);
                    expr163=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr163.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:310:8: const_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_const_expr_in_expr1514);
                    const_expr164=const_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, const_expr164.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:311:8: var_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_var_expr_in_expr1523);
                    var_expr165=var_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, var_expr165.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:312:8: ^( NEG expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NEG166=(CommonTree)match(input,NEG,FOLLOW_NEG_in_expr1534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEG166_tree = (CommonTree)adaptor.dupNode(NEG166);


                    root_1 = (CommonTree)adaptor.becomeRoot(NEG166_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1536);
                    expr167=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr167.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:313:8: ^( CAST_EXPR type_cast expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    CAST_EXPR168=(CommonTree)match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_expr1549); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST_EXPR168_tree = (CommonTree)adaptor.dupNode(CAST_EXPR168);


                    root_1 = (CommonTree)adaptor.becomeRoot(CAST_EXPR168_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_cast_in_expr1551);
                    type_cast169=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type_cast169.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1553);
                    expr170=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr170.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:314:8: ^( EXPR_IN_PAREN expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    EXPR_IN_PAREN171=(CommonTree)match(input,EXPR_IN_PAREN,FOLLOW_EXPR_IN_PAREN_in_expr1566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXPR_IN_PAREN171_tree = (CommonTree)adaptor.dupNode(EXPR_IN_PAREN171);


                    root_1 = (CommonTree)adaptor.becomeRoot(EXPR_IN_PAREN171_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1568);
                    expr172=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr172.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class type_cast_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:317:1: type_cast : ( simple_type | map_type | tuple_type_cast | bag_type_cast );
    public final AstValidator.type_cast_return type_cast() throws RecognitionException {
        AstValidator.type_cast_return retval = new AstValidator.type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.simple_type_return simple_type173 =null;

        AstValidator.map_type_return map_type174 =null;

        AstValidator.tuple_type_cast_return tuple_type_cast175 =null;

        AstValidator.bag_type_cast_return bag_type_cast176 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:317:11: ( simple_type | map_type | tuple_type_cast | bag_type_cast )
            int alt48=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt48=1;
                }
                break;
            case MAP_TYPE:
                {
                alt48=2;
                }
                break;
            case TUPLE_TYPE_CAST:
                {
                alt48=3;
                }
                break;
            case BAG_TYPE_CAST:
                {
                alt48=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }

            switch (alt48) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:317:13: simple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_type_in_type_cast1579);
                    simple_type173=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_type173.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:317:27: map_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_type_in_type_cast1583);
                    map_type174=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map_type174.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:317:38: tuple_type_cast
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_type_cast_in_type_cast1587);
                    tuple_type_cast175=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple_type_cast175.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:317:56: bag_type_cast
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_type_cast_in_type_cast1591);
                    bag_type_cast176=bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag_type_cast176.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast"


    public static class tuple_type_cast_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:320:1: tuple_type_cast : ^( TUPLE_TYPE_CAST ( type_cast )* ) ;
    public final AstValidator.tuple_type_cast_return tuple_type_cast() throws RecognitionException {
        AstValidator.tuple_type_cast_return retval = new AstValidator.tuple_type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_TYPE_CAST177=null;
        AstValidator.type_cast_return type_cast178 =null;


        CommonTree TUPLE_TYPE_CAST177_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:320:17: ( ^( TUPLE_TYPE_CAST ( type_cast )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:320:19: ^( TUPLE_TYPE_CAST ( type_cast )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_TYPE_CAST177=(CommonTree)match(input,TUPLE_TYPE_CAST,FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast1602); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_TYPE_CAST177_tree = (CommonTree)adaptor.dupNode(TUPLE_TYPE_CAST177);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_TYPE_CAST177_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:320:38: ( type_cast )*
                loop49:
                do {
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==BOOLEAN||LA49_0==BYTEARRAY||LA49_0==CHARARRAY||LA49_0==DOUBLE||LA49_0==FLOAT||LA49_0==INT||LA49_0==LONG||LA49_0==BAG_TYPE_CAST||LA49_0==MAP_TYPE||LA49_0==TUPLE_TYPE_CAST) ) {
                        alt49=1;
                    }


                    switch (alt49) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:320:38: type_cast
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_type_cast_in_tuple_type_cast1604);
                	    type_cast178=type_cast();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, type_cast178.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop49;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type_cast"


    public static class bag_type_cast_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:323:1: bag_type_cast : ^( BAG_TYPE_CAST ( tuple_type_cast )? ) ;
    public final AstValidator.bag_type_cast_return bag_type_cast() throws RecognitionException {
        AstValidator.bag_type_cast_return retval = new AstValidator.bag_type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_TYPE_CAST179=null;
        AstValidator.tuple_type_cast_return tuple_type_cast180 =null;


        CommonTree BAG_TYPE_CAST179_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:323:15: ( ^( BAG_TYPE_CAST ( tuple_type_cast )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:323:17: ^( BAG_TYPE_CAST ( tuple_type_cast )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_TYPE_CAST179=(CommonTree)match(input,BAG_TYPE_CAST,FOLLOW_BAG_TYPE_CAST_in_bag_type_cast1618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_TYPE_CAST179_tree = (CommonTree)adaptor.dupNode(BAG_TYPE_CAST179);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_TYPE_CAST179_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:323:34: ( tuple_type_cast )?
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==TUPLE_TYPE_CAST) ) {
                    alt50=1;
                }
                switch (alt50) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:323:34: tuple_type_cast
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_tuple_type_cast_in_bag_type_cast1620);
                        tuple_type_cast180=tuple_type_cast();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, tuple_type_cast180.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type_cast"


    public static class var_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "var_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:326:1: var_expr : projectable_expr ( dot_proj | pound_proj )* ;
    public final AstValidator.var_expr_return var_expr() throws RecognitionException {
        AstValidator.var_expr_return retval = new AstValidator.var_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.projectable_expr_return projectable_expr181 =null;

        AstValidator.dot_proj_return dot_proj182 =null;

        AstValidator.pound_proj_return pound_proj183 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:326:10: ( projectable_expr ( dot_proj | pound_proj )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:326:12: projectable_expr ( dot_proj | pound_proj )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_projectable_expr_in_var_expr1632);
            projectable_expr181=projectable_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, projectable_expr181.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:326:29: ( dot_proj | pound_proj )*
            loop51:
            do {
                int alt51=3;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==PERIOD) ) {
                    alt51=1;
                }
                else if ( (LA51_0==POUND) ) {
                    alt51=2;
                }


                switch (alt51) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:326:31: dot_proj
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_dot_proj_in_var_expr1636);
            	    dot_proj182=dot_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dot_proj182.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:326:42: pound_proj
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_pound_proj_in_var_expr1640);
            	    pound_proj183=pound_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, pound_proj183.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "var_expr"


    public static class projectable_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projectable_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:329:1: projectable_expr : ( func_eval | col_ref | bin_expr );
    public final AstValidator.projectable_expr_return projectable_expr() throws RecognitionException {
        AstValidator.projectable_expr_return retval = new AstValidator.projectable_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.func_eval_return func_eval184 =null;

        AstValidator.col_ref_return col_ref185 =null;

        AstValidator.bin_expr_return bin_expr186 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:329:17: ( func_eval | col_ref | bin_expr )
            int alt52=3;
            switch ( input.LA(1) ) {
            case FUNC_EVAL:
                {
                alt52=1;
                }
                break;
            case DOLLARVAR:
            case GROUP:
            case IDENTIFIER:
                {
                alt52=2;
                }
                break;
            case BIN_EXPR:
                {
                alt52=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }

            switch (alt52) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:329:19: func_eval
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_eval_in_projectable_expr1651);
                    func_eval184=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, func_eval184.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:329:31: col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_projectable_expr1655);
                    col_ref185=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref185.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:329:41: bin_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bin_expr_in_projectable_expr1659);
                    bin_expr186=bin_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bin_expr186.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projectable_expr"


    public static class dot_proj_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dot_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:332:1: dot_proj : ^( PERIOD ( col_alias_or_index )+ ) ;
    public final AstValidator.dot_proj_return dot_proj() throws RecognitionException {
        AstValidator.dot_proj_return retval = new AstValidator.dot_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PERIOD187=null;
        AstValidator.col_alias_or_index_return col_alias_or_index188 =null;


        CommonTree PERIOD187_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:332:10: ( ^( PERIOD ( col_alias_or_index )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:332:12: ^( PERIOD ( col_alias_or_index )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PERIOD187=(CommonTree)match(input,PERIOD,FOLLOW_PERIOD_in_dot_proj1670); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PERIOD187_tree = (CommonTree)adaptor.dupNode(PERIOD187);


            root_1 = (CommonTree)adaptor.becomeRoot(PERIOD187_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:332:22: ( col_alias_or_index )+
            int cnt53=0;
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==DOLLARVAR||LA53_0==GROUP||LA53_0==IDENTIFIER) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:332:22: col_alias_or_index
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj1672);
            	    col_alias_or_index188=col_alias_or_index();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, col_alias_or_index188.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt53 >= 1 ) break loop53;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(53, input);
                        throw eee;
                }
                cnt53++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dot_proj"


    public static class col_alias_or_index_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias_or_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:335:1: col_alias_or_index : ( col_alias | col_index );
    public final AstValidator.col_alias_or_index_return col_alias_or_index() throws RecognitionException {
        AstValidator.col_alias_or_index_return retval = new AstValidator.col_alias_or_index_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.col_alias_return col_alias189 =null;

        AstValidator.col_index_return col_index190 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:335:20: ( col_alias | col_index )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==GROUP||LA54_0==IDENTIFIER) ) {
                alt54=1;
            }
            else if ( (LA54_0==DOLLARVAR) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:335:22: col_alias
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_alias_in_col_alias_or_index1684);
                    col_alias189=col_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_alias189.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:335:34: col_index
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_index_in_col_alias_or_index1688);
                    col_index190=col_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_index190.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias_or_index"


    public static class col_alias_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:338:1: col_alias : ( GROUP | IDENTIFIER );
    public final AstValidator.col_alias_return col_alias() throws RecognitionException {
        AstValidator.col_alias_return retval = new AstValidator.col_alias_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set191=null;

        CommonTree set191_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:338:11: ( GROUP | IDENTIFIER )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set191=(CommonTree)input.LT(1);

            if ( input.LA(1)==GROUP||input.LA(1)==IDENTIFIER ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set191_tree = (CommonTree)adaptor.dupNode(set191);


                adaptor.addChild(root_0, set191_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias"


    public static class col_index_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:341:1: col_index : DOLLARVAR ;
    public final AstValidator.col_index_return col_index() throws RecognitionException {
        AstValidator.col_index_return retval = new AstValidator.col_index_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOLLARVAR192=null;

        CommonTree DOLLARVAR192_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:341:11: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:341:13: DOLLARVAR
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            DOLLARVAR192=(CommonTree)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_col_index1710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR192_tree = (CommonTree)adaptor.dupNode(DOLLARVAR192);


            adaptor.addChild(root_0, DOLLARVAR192_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_index"


    public static class col_range_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:344:1: col_range : ^( COL_RANGE ( col_ref )? DOUBLE_PERIOD ( col_ref )? ) ;
    public final AstValidator.col_range_return col_range() throws RecognitionException {
        AstValidator.col_range_return retval = new AstValidator.col_range_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COL_RANGE193=null;
        CommonTree DOUBLE_PERIOD195=null;
        AstValidator.col_ref_return col_ref194 =null;

        AstValidator.col_ref_return col_ref196 =null;


        CommonTree COL_RANGE193_tree=null;
        CommonTree DOUBLE_PERIOD195_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:344:11: ( ^( COL_RANGE ( col_ref )? DOUBLE_PERIOD ( col_ref )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:344:14: ^( COL_RANGE ( col_ref )? DOUBLE_PERIOD ( col_ref )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            COL_RANGE193=(CommonTree)match(input,COL_RANGE,FOLLOW_COL_RANGE_in_col_range1721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COL_RANGE193_tree = (CommonTree)adaptor.dupNode(COL_RANGE193);


            root_1 = (CommonTree)adaptor.becomeRoot(COL_RANGE193_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:344:26: ( col_ref )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==DOLLARVAR||LA55_0==GROUP||LA55_0==IDENTIFIER) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:344:26: col_ref
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_col_range1723);
                    col_ref194=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, col_ref194.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            DOUBLE_PERIOD195=(CommonTree)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range1726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOUBLE_PERIOD195_tree = (CommonTree)adaptor.dupNode(DOUBLE_PERIOD195);


            adaptor.addChild(root_1, DOUBLE_PERIOD195_tree);
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:344:49: ( col_ref )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==DOLLARVAR||LA56_0==GROUP||LA56_0==IDENTIFIER) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:344:49: col_ref
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_col_range1728);
                    col_ref196=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, col_ref196.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class pound_proj_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pound_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:348:1: pound_proj : ^( POUND ( QUOTEDSTRING | NULL ) ) ;
    public final AstValidator.pound_proj_return pound_proj() throws RecognitionException {
        AstValidator.pound_proj_return retval = new AstValidator.pound_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree POUND197=null;
        CommonTree set198=null;

        CommonTree POUND197_tree=null;
        CommonTree set198_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:348:12: ( ^( POUND ( QUOTEDSTRING | NULL ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:348:14: ^( POUND ( QUOTEDSTRING | NULL ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            POUND197=(CommonTree)match(input,POUND,FOLLOW_POUND_in_pound_proj1742); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            POUND197_tree = (CommonTree)adaptor.dupNode(POUND197);


            root_1 = (CommonTree)adaptor.becomeRoot(POUND197_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            set198=(CommonTree)input.LT(1);

            if ( input.LA(1)==QUOTEDSTRING||input.LA(1)==NULL ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set198_tree = (CommonTree)adaptor.dupNode(set198);


                adaptor.addChild(root_1, set198_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pound_proj"


    public static class bin_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bin_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:351:1: bin_expr : ^( BIN_EXPR cond expr expr ) ;
    public final AstValidator.bin_expr_return bin_expr() throws RecognitionException {
        AstValidator.bin_expr_return retval = new AstValidator.bin_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BIN_EXPR199=null;
        AstValidator.cond_return cond200 =null;

        AstValidator.expr_return expr201 =null;

        AstValidator.expr_return expr202 =null;


        CommonTree BIN_EXPR199_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:351:10: ( ^( BIN_EXPR cond expr expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:351:12: ^( BIN_EXPR cond expr expr )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BIN_EXPR199=(CommonTree)match(input,BIN_EXPR,FOLLOW_BIN_EXPR_in_bin_expr1765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIN_EXPR199_tree = (CommonTree)adaptor.dupNode(BIN_EXPR199);


            root_1 = (CommonTree)adaptor.becomeRoot(BIN_EXPR199_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_bin_expr1767);
            cond200=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond200.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_bin_expr1769);
            expr201=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr201.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_bin_expr1771);
            expr202=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr202.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bin_expr"


    public static class limit_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:1: limit_clause : ^( LIMIT rel ( INTEGER | LONGINTEGER | expr ) ) ;
    public final AstValidator.limit_clause_return limit_clause() throws RecognitionException {
        AstValidator.limit_clause_return retval = new AstValidator.limit_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LIMIT203=null;
        CommonTree INTEGER205=null;
        CommonTree LONGINTEGER206=null;
        AstValidator.rel_return rel204 =null;

        AstValidator.expr_return expr207 =null;


        CommonTree LIMIT203_tree=null;
        CommonTree INTEGER205_tree=null;
        CommonTree LONGINTEGER206_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:14: ( ^( LIMIT rel ( INTEGER | LONGINTEGER | expr ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:16: ^( LIMIT rel ( INTEGER | LONGINTEGER | expr ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LIMIT203=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause1784); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT203_tree = (CommonTree)adaptor.dupNode(LIMIT203);


            root_1 = (CommonTree)adaptor.becomeRoot(LIMIT203_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_limit_clause1786);
            rel204=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel204.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:29: ( INTEGER | LONGINTEGER | expr )
            int alt57=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                int LA57_1 = input.LA(2);

                if ( (synpred110_AstValidator()) ) {
                    alt57=1;
                }
                else if ( (true) ) {
                    alt57=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 1, input);

                    throw nvae;

                }
                }
                break;
            case LONGINTEGER:
                {
                int LA57_2 = input.LA(2);

                if ( (synpred111_AstValidator()) ) {
                    alt57=2;
                }
                else if ( (true) ) {
                    alt57=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 2, input);

                    throw nvae;

                }
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case STAR:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt57=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }

            switch (alt57) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:31: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER205=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_limit_clause1790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER205_tree = (CommonTree)adaptor.dupNode(INTEGER205);


                    adaptor.addChild(root_1, INTEGER205_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:41: LONGINTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    LONGINTEGER206=(CommonTree)match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_limit_clause1794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINTEGER206_tree = (CommonTree)adaptor.dupNode(LONGINTEGER206);


                    adaptor.addChild(root_1, LONGINTEGER206_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:55: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_limit_clause1798);
                    expr207=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr207.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:357:1: sample_clause : ^( SAMPLE rel ( DOUBLENUMBER | expr ) ) ;
    public final AstValidator.sample_clause_return sample_clause() throws RecognitionException {
        AstValidator.sample_clause_return retval = new AstValidator.sample_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SAMPLE208=null;
        CommonTree DOUBLENUMBER210=null;
        AstValidator.rel_return rel209 =null;

        AstValidator.expr_return expr211 =null;


        CommonTree SAMPLE208_tree=null;
        CommonTree DOUBLENUMBER210_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:357:15: ( ^( SAMPLE rel ( DOUBLENUMBER | expr ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:357:17: ^( SAMPLE rel ( DOUBLENUMBER | expr ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SAMPLE208=(CommonTree)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause1813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE208_tree = (CommonTree)adaptor.dupNode(SAMPLE208);


            root_1 = (CommonTree)adaptor.becomeRoot(SAMPLE208_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_sample_clause1815);
            rel209=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel209.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:357:31: ( DOUBLENUMBER | expr )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==DOUBLENUMBER) ) {
                int LA58_1 = input.LA(2);

                if ( (synpred112_AstValidator()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==DIV||LA58_0==DOLLARVAR||LA58_0==FALSE||LA58_0==FLOATNUMBER||LA58_0==GROUP||LA58_0==INTEGER||LA58_0==LONGINTEGER||LA58_0==MINUS||LA58_0==PERCENT||LA58_0==PLUS||LA58_0==QUOTEDSTRING||LA58_0==STAR||LA58_0==TRUE||(LA58_0 >= BAG_VAL && LA58_0 <= BIN_EXPR)||LA58_0==CAST_EXPR||LA58_0==EXPR_IN_PAREN||LA58_0==FUNC_EVAL||LA58_0==IDENTIFIER||(LA58_0 >= MAP_VAL && LA58_0 <= NEG)||LA58_0==NULL||LA58_0==TUPLE_VAL) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:357:33: DOUBLENUMBER
                    {
                    _last = (CommonTree)input.LT(1);
                    DOUBLENUMBER210=(CommonTree)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_sample_clause1819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER210_tree = (CommonTree)adaptor.dupNode(DOUBLENUMBER210);


                    adaptor.addChild(root_1, DOUBLENUMBER210_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:357:48: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_sample_clause1823);
                    expr211=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr211.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class order_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:360:1: order_clause : ^( ORDER rel order_by_clause ( func_clause )? ) ;
    public final AstValidator.order_clause_return order_clause() throws RecognitionException {
        AstValidator.order_clause_return retval = new AstValidator.order_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ORDER212=null;
        AstValidator.rel_return rel213 =null;

        AstValidator.order_by_clause_return order_by_clause214 =null;

        AstValidator.func_clause_return func_clause215 =null;


        CommonTree ORDER212_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:360:14: ( ^( ORDER rel order_by_clause ( func_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:360:16: ^( ORDER rel order_by_clause ( func_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            ORDER212=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_order_clause1838); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER212_tree = (CommonTree)adaptor.dupNode(ORDER212);


            root_1 = (CommonTree)adaptor.becomeRoot(ORDER212_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_order_clause1840);
            rel213=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel213.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_clause_in_order_clause1842);
            order_by_clause214=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, order_by_clause214.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:360:45: ( func_clause )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==FUNC||LA59_0==FUNC_REF) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:360:45: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_order_clause1844);
                    func_clause215=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause215.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:363:1: order_by_clause : ( STAR ( ASC | DESC )? | ( order_col )+ );
    public final AstValidator.order_by_clause_return order_by_clause() throws RecognitionException {
        AstValidator.order_by_clause_return retval = new AstValidator.order_by_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR216=null;
        CommonTree set217=null;
        AstValidator.order_col_return order_col218 =null;


        CommonTree STAR216_tree=null;
        CommonTree set217_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:363:17: ( STAR ( ASC | DESC )? | ( order_col )+ )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==STAR) ) {
                alt62=1;
            }
            else if ( (LA62_0==DOLLARVAR||LA62_0==GROUP||LA62_0==COL_RANGE||LA62_0==IDENTIFIER) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:363:19: STAR ( ASC | DESC )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR216=(CommonTree)match(input,STAR,FOLLOW_STAR_in_order_by_clause1856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR216_tree = (CommonTree)adaptor.dupNode(STAR216);


                    adaptor.addChild(root_0, STAR216_tree);
                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:363:24: ( ASC | DESC )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==ASC||LA60_0==DESC) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
                            {
                            _last = (CommonTree)input.LT(1);
                            set217=(CommonTree)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) {
                                set217_tree = (CommonTree)adaptor.dupNode(set217);


                                adaptor.addChild(root_0, set217_tree);
                                }

                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:364:19: ( order_col )+
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:364:19: ( order_col )+
                    int cnt61=0;
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);

                        if ( (LA61_0==DOLLARVAR||LA61_0==GROUP||LA61_0==COL_RANGE||LA61_0==IDENTIFIER) ) {
                            alt61=1;
                        }


                        switch (alt61) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:364:19: order_col
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_order_col_in_order_by_clause1887);
                    	    order_col218=order_col();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, order_col218.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt61 >= 1 ) break loop61;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(61, input);
                                throw eee;
                        }
                        cnt61++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:367:1: order_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? );
    public final AstValidator.order_col_return order_col() throws RecognitionException {
        AstValidator.order_col_return retval = new AstValidator.order_col_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set220=null;
        CommonTree set222=null;
        AstValidator.col_range_return col_range219 =null;

        AstValidator.col_ref_return col_ref221 =null;


        CommonTree set220_tree=null;
        CommonTree set222_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:367:11: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==COL_RANGE) ) {
                alt65=1;
            }
            else if ( (LA65_0==DOLLARVAR||LA65_0==GROUP||LA65_0==IDENTIFIER) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:367:13: col_range ( ASC | DESC )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_order_col1897);
                    col_range219=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range219.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:367:23: ( ASC | DESC )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==ASC||LA63_0==DESC) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
                            {
                            _last = (CommonTree)input.LT(1);
                            set220=(CommonTree)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) {
                                set220_tree = (CommonTree)adaptor.dupNode(set220);


                                adaptor.addChild(root_0, set220_tree);
                                }

                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:368:13: col_ref ( ASC | DESC )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_order_col1920);
                    col_ref221=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref221.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:368:21: ( ASC | DESC )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==ASC||LA64_0==DESC) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
                            {
                            _last = (CommonTree)input.LT(1);
                            set222=(CommonTree)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) {
                                set222_tree = (CommonTree)adaptor.dupNode(set222);


                                adaptor.addChild(root_0, set222_tree);
                                }

                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:371:1: distinct_clause : ^( DISTINCT rel ( partition_clause )? ) ;
    public final AstValidator.distinct_clause_return distinct_clause() throws RecognitionException {
        AstValidator.distinct_clause_return retval = new AstValidator.distinct_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DISTINCT223=null;
        AstValidator.rel_return rel224 =null;

        AstValidator.partition_clause_return partition_clause225 =null;


        CommonTree DISTINCT223_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:371:17: ( ^( DISTINCT rel ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:371:19: ^( DISTINCT rel ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DISTINCT223=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause1942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT223_tree = (CommonTree)adaptor.dupNode(DISTINCT223);


            root_1 = (CommonTree)adaptor.becomeRoot(DISTINCT223_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_distinct_clause1944);
            rel224=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel224.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:371:35: ( partition_clause )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==PARTITION) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:371:35: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause1946);
                    partition_clause225=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause225.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:374:1: partition_clause : ^( PARTITION func_name ) ;
    public final AstValidator.partition_clause_return partition_clause() throws RecognitionException {
        AstValidator.partition_clause_return retval = new AstValidator.partition_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PARTITION226=null;
        AstValidator.func_name_return func_name227 =null;


        CommonTree PARTITION226_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:374:18: ( ^( PARTITION func_name ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:374:20: ^( PARTITION func_name )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PARTITION226=(CommonTree)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause1960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION226_tree = (CommonTree)adaptor.dupNode(PARTITION226);


            root_1 = (CommonTree)adaptor.becomeRoot(PARTITION226_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_func_name_in_partition_clause1962);
            func_name227=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, func_name227.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class cross_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:377:1: cross_clause : ^( CROSS rel_list ( partition_clause )? ) ;
    public final AstValidator.cross_clause_return cross_clause() throws RecognitionException {
        AstValidator.cross_clause_return retval = new AstValidator.cross_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CROSS228=null;
        AstValidator.rel_list_return rel_list229 =null;

        AstValidator.partition_clause_return partition_clause230 =null;


        CommonTree CROSS228_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:377:14: ( ^( CROSS rel_list ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:377:16: ^( CROSS rel_list ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CROSS228=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_cross_clause1975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS228_tree = (CommonTree)adaptor.dupNode(CROSS228);


            root_1 = (CommonTree)adaptor.becomeRoot(CROSS228_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_list_in_cross_clause1977);
            rel_list229=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel_list229.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:377:34: ( partition_clause )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==PARTITION) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:377:34: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_cross_clause1979);
                    partition_clause230=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause230.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class rel_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:380:1: rel_list : ( rel )+ ;
    public final AstValidator.rel_list_return rel_list() throws RecognitionException {
        AstValidator.rel_list_return retval = new AstValidator.rel_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.rel_return rel231 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:380:10: ( ( rel )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:380:12: ( rel )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:380:12: ( rel )+
            int cnt68=0;
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==COGROUP||LA68_0==CROSS||LA68_0==DEFINE||LA68_0==DISTINCT||LA68_0==FILTER||LA68_0==FOREACH||LA68_0==GROUP||LA68_0==JOIN||(LA68_0 >= LIMIT && LA68_0 <= LOAD)||LA68_0==MAPREDUCE||LA68_0==ORDER||LA68_0==SAMPLE||LA68_0==SPLIT||(LA68_0 >= STORE && LA68_0 <= STREAM)||LA68_0==UNION||LA68_0==IDENTIFIER) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:380:12: rel
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_rel_in_rel_list1991);
            	    rel231=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, rel231.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        throw eee;
                }
                cnt68++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    protected static class join_clause_scope {
        int arity;
    }
    protected Stack join_clause_stack = new Stack();


    public static class join_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:383:1: join_clause : ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? ) ;
    public final AstValidator.join_clause_return join_clause() throws RecognitionException {
        join_clause_stack.push(new join_clause_scope());
        AstValidator.join_clause_return retval = new AstValidator.join_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree JOIN232=null;
        AstValidator.join_sub_clause_return join_sub_clause233 =null;

        AstValidator.join_type_return join_type234 =null;

        AstValidator.partition_clause_return partition_clause235 =null;


        CommonTree JOIN232_tree=null;


            ((join_clause_scope)join_clause_stack.peek()).arity = 0;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:390:2: ( ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:390:4: ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            JOIN232=(CommonTree)match(input,JOIN,FOLLOW_JOIN_in_join_clause2013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN232_tree = (CommonTree)adaptor.dupNode(JOIN232);


            root_1 = (CommonTree)adaptor.becomeRoot(JOIN232_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_join_sub_clause_in_join_clause2015);
            join_sub_clause233=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, join_sub_clause233.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:390:28: ( join_type )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==QUOTEDSTRING) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:390:28: join_type
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_type_in_join_clause2017);
                    join_type234=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, join_type234.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:390:39: ( partition_clause )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==PARTITION) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:390:39: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_join_clause2020);
                    partition_clause235=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause235.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            join_clause_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:393:1: join_type : QUOTEDSTRING ;
    public final AstValidator.join_type_return join_type() throws RecognitionException {
        AstValidator.join_type_return retval = new AstValidator.join_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING236=null;

        CommonTree QUOTEDSTRING236_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:393:11: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:393:13: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING236=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type2032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING236_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING236);


            adaptor.addChild(root_0, QUOTEDSTRING236_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:396:1: join_sub_clause : ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item | ( join_item )+ );
    public final AstValidator.join_sub_clause_return join_sub_clause() throws RecognitionException {
        AstValidator.join_sub_clause_return retval = new AstValidator.join_sub_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set238=null;
        CommonTree OUTER239=null;
        AstValidator.join_item_return join_item237 =null;

        AstValidator.join_item_return join_item240 =null;

        AstValidator.join_item_return join_item241 =null;


        CommonTree set238_tree=null;
        CommonTree OUTER239_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:397:2: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item | ( join_item )+ )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==JOIN_ITEM) ) {
                int LA73_1 = input.LA(2);

                if ( (synpred131_AstValidator()) ) {
                    alt73=1;
                }
                else if ( (true) ) {
                    alt73=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }
            switch (alt73) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:397:4: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_item_in_join_sub_clause2042);
                    join_item237=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_item237.getTree());


                    _last = (CommonTree)input.LT(1);
                    set238=(CommonTree)input.LT(1);

                    if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
                        input.consume();
                        if ( state.backtracking==0 ) {
                        set238_tree = (CommonTree)adaptor.dupNode(set238);


                        adaptor.addChild(root_0, set238_tree);
                        }

                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:397:38: ( OUTER )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==OUTER) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:397:38: OUTER
                            {
                            _last = (CommonTree)input.LT(1);
                            OUTER239=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause2058); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER239_tree = (CommonTree)adaptor.dupNode(OUTER239);


                            adaptor.addChild(root_0, OUTER239_tree);
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_item_in_join_sub_clause2061);
                    join_item240=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_item240.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:398:4: ( join_item )+
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:398:4: ( join_item )+
                    int cnt72=0;
                    loop72:
                    do {
                        int alt72=2;
                        int LA72_0 = input.LA(1);

                        if ( (LA72_0==JOIN_ITEM) ) {
                            alt72=1;
                        }


                        switch (alt72) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:398:4: join_item
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_join_item_in_join_sub_clause2066);
                    	    join_item241=join_item();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, join_item241.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt72 >= 1 ) break loop72;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(72, input);
                                throw eee;
                        }
                        cnt72++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:401:1: join_item : ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final AstValidator.join_item_return join_item() throws RecognitionException {
        AstValidator.join_item_return retval = new AstValidator.join_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree JOIN_ITEM242=null;
        AstValidator.rel_return rel243 =null;

        AstValidator.join_group_by_clause_return join_group_by_clause244 =null;


        CommonTree JOIN_ITEM242_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:402:2: ( ^( JOIN_ITEM rel join_group_by_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:402:4: ^( JOIN_ITEM rel join_group_by_clause )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            JOIN_ITEM242=(CommonTree)match(input,JOIN_ITEM,FOLLOW_JOIN_ITEM_in_join_item2079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN_ITEM242_tree = (CommonTree)adaptor.dupNode(JOIN_ITEM242);


            root_1 = (CommonTree)adaptor.becomeRoot(JOIN_ITEM242_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_join_item2081);
            rel243=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel243.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_join_group_by_clause_in_join_item2083);
            join_group_by_clause244=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, join_group_by_clause244.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   if( ((join_clause_scope)join_clause_stack.peek()).arity == 0 ) {
                       // For the first input
                       ((join_clause_scope)join_clause_stack.peek()).arity = (join_group_by_clause244!=null?join_group_by_clause244.exprCount:0);
                   } else if( (join_group_by_clause244!=null?join_group_by_clause244.exprCount:0) != ((join_clause_scope)join_clause_stack.peek()).arity ) {
                       throw new ParserValidationException( input, new SourceLocation( (PigParserNode)((CommonTree)retval.start) ),
                           "The arity of the join columns do not match." );
                   }
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends TreeRuleReturnScope {
        public int exprCount;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:414:1: join_group_by_clause returns [int exprCount] : ^( BY ( join_group_by_expr )+ ) ;
    public final AstValidator.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        AstValidator.join_group_by_clause_return retval = new AstValidator.join_group_by_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BY245=null;
        AstValidator.join_group_by_expr_return join_group_by_expr246 =null;


        CommonTree BY245_tree=null;


            retval.exprCount = 0;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:418:2: ( ^( BY ( join_group_by_expr )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:418:4: ^( BY ( join_group_by_expr )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BY245=(CommonTree)match(input,BY,FOLLOW_BY_in_join_group_by_clause2110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY245_tree = (CommonTree)adaptor.dupNode(BY245);


            root_1 = (CommonTree)adaptor.becomeRoot(BY245_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:418:10: ( join_group_by_expr )+
            int cnt74=0;
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==DIV||LA74_0==DOLLARVAR||LA74_0==DOUBLENUMBER||LA74_0==FALSE||LA74_0==FLOATNUMBER||LA74_0==GROUP||LA74_0==INTEGER||LA74_0==LONGINTEGER||LA74_0==MINUS||LA74_0==PERCENT||LA74_0==PLUS||LA74_0==QUOTEDSTRING||LA74_0==STAR||LA74_0==TRUE||(LA74_0 >= BAG_VAL && LA74_0 <= BIN_EXPR)||(LA74_0 >= CAST_EXPR && LA74_0 <= EXPR_IN_PAREN)||LA74_0==FUNC_EVAL||LA74_0==IDENTIFIER||(LA74_0 >= MAP_VAL && LA74_0 <= NEG)||LA74_0==NULL||LA74_0==TUPLE_VAL) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:418:12: join_group_by_expr
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_clause2114);
            	    join_group_by_expr246=join_group_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, join_group_by_expr246.getTree());


            	    if ( state.backtracking==0 ) { retval.exprCount++; }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt74 >= 1 ) break loop74;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(74, input);
                        throw eee;
                }
                cnt74++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class join_group_by_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:421:1: join_group_by_expr : ( col_range | expr | STAR );
    public final AstValidator.join_group_by_expr_return join_group_by_expr() throws RecognitionException {
        AstValidator.join_group_by_expr_return retval = new AstValidator.join_group_by_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR249=null;
        AstValidator.col_range_return col_range247 =null;

        AstValidator.expr_return expr248 =null;


        CommonTree STAR249_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:421:20: ( col_range | expr | STAR )
            int alt75=3;
            switch ( input.LA(1) ) {
            case COL_RANGE:
                {
                alt75=1;
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt75=2;
                }
                break;
            case STAR:
                {
                int LA75_3 = input.LA(2);

                if ( (LA75_3==DOWN) ) {
                    alt75=2;
                }
                else if ( (LA75_3==EOF||LA75_3==UP||LA75_3==DIV||LA75_3==DOLLARVAR||LA75_3==DOUBLENUMBER||LA75_3==FALSE||LA75_3==FLOATNUMBER||LA75_3==GROUP||LA75_3==INTEGER||LA75_3==LONGINTEGER||LA75_3==MINUS||LA75_3==PERCENT||LA75_3==PLUS||LA75_3==QUOTEDSTRING||LA75_3==STAR||LA75_3==TRUE||(LA75_3 >= BAG_VAL && LA75_3 <= BIN_EXPR)||(LA75_3 >= CAST_EXPR && LA75_3 <= EXPR_IN_PAREN)||LA75_3==FUNC_EVAL||LA75_3==IDENTIFIER||(LA75_3 >= MAP_VAL && LA75_3 <= NEG)||LA75_3==NULL||LA75_3==TUPLE_VAL) ) {
                    alt75=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }

            switch (alt75) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:421:22: col_range
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_join_group_by_expr2130);
                    col_range247=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range247.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:421:35: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_join_group_by_expr2135);
                    expr248=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr248.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:421:42: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR249=(CommonTree)match(input,STAR,FOLLOW_STAR_in_join_group_by_expr2139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR249_tree = (CommonTree)adaptor.dupNode(STAR249);


                    adaptor.addChild(root_0, STAR249_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr"


    public static class union_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:424:1: union_clause : ^( UNION ( ONSCHEMA )? rel_list ) ;
    public final AstValidator.union_clause_return union_clause() throws RecognitionException {
        AstValidator.union_clause_return retval = new AstValidator.union_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree UNION250=null;
        CommonTree ONSCHEMA251=null;
        AstValidator.rel_list_return rel_list252 =null;


        CommonTree UNION250_tree=null;
        CommonTree ONSCHEMA251_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:424:14: ( ^( UNION ( ONSCHEMA )? rel_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:424:16: ^( UNION ( ONSCHEMA )? rel_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            UNION250=(CommonTree)match(input,UNION,FOLLOW_UNION_in_union_clause2150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION250_tree = (CommonTree)adaptor.dupNode(UNION250);


            root_1 = (CommonTree)adaptor.becomeRoot(UNION250_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:424:25: ( ONSCHEMA )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==ONSCHEMA) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:424:25: ONSCHEMA
                    {
                    _last = (CommonTree)input.LT(1);
                    ONSCHEMA251=(CommonTree)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause2152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA251_tree = (CommonTree)adaptor.dupNode(ONSCHEMA251);


                    adaptor.addChild(root_1, ONSCHEMA251_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_list_in_union_clause2155);
            rel_list252=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel_list252.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    public static class foreach_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:427:1: foreach_clause : ^( FOREACH rel foreach_plan ) ;
    public final AstValidator.foreach_clause_return foreach_clause() throws RecognitionException {
        AstValidator.foreach_clause_return retval = new AstValidator.foreach_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH253=null;
        AstValidator.rel_return rel254 =null;

        AstValidator.foreach_plan_return foreach_plan255 =null;


        CommonTree FOREACH253_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:427:16: ( ^( FOREACH rel foreach_plan ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:427:18: ^( FOREACH rel foreach_plan )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FOREACH253=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause2168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH253_tree = (CommonTree)adaptor.dupNode(FOREACH253);


            root_1 = (CommonTree)adaptor.becomeRoot(FOREACH253_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_foreach_clause2170);
            rel254=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel254.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_foreach_plan_in_foreach_clause2172);
            foreach_plan255=foreach_plan();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, foreach_plan255.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_clause"


    public static class foreach_plan_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:430:1: foreach_plan : ( ^( FOREACH_PLAN_SIMPLE generate_clause ) | ^( FOREACH_PLAN_COMPLEX nested_blk ) );
    public final AstValidator.foreach_plan_return foreach_plan() throws RecognitionException {
        AstValidator.foreach_plan_return retval = new AstValidator.foreach_plan_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH_PLAN_SIMPLE256=null;
        CommonTree FOREACH_PLAN_COMPLEX258=null;
        AstValidator.generate_clause_return generate_clause257 =null;

        AstValidator.nested_blk_return nested_blk259 =null;


        CommonTree FOREACH_PLAN_SIMPLE256_tree=null;
        CommonTree FOREACH_PLAN_COMPLEX258_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:430:14: ( ^( FOREACH_PLAN_SIMPLE generate_clause ) | ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==FOREACH_PLAN_SIMPLE) ) {
                alt77=1;
            }
            else if ( (LA77_0==FOREACH_PLAN_COMPLEX) ) {
                alt77=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;

            }
            switch (alt77) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:430:16: ^( FOREACH_PLAN_SIMPLE generate_clause )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FOREACH_PLAN_SIMPLE256=(CommonTree)match(input,FOREACH_PLAN_SIMPLE,FOLLOW_FOREACH_PLAN_SIMPLE_in_foreach_plan2185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH_PLAN_SIMPLE256_tree = (CommonTree)adaptor.dupNode(FOREACH_PLAN_SIMPLE256);


                    root_1 = (CommonTree)adaptor.becomeRoot(FOREACH_PLAN_SIMPLE256_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_generate_clause_in_foreach_plan2187);
                    generate_clause257=generate_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, generate_clause257.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:431:16: ^( FOREACH_PLAN_COMPLEX nested_blk )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FOREACH_PLAN_COMPLEX258=(CommonTree)match(input,FOREACH_PLAN_COMPLEX,FOLLOW_FOREACH_PLAN_COMPLEX_in_foreach_plan2208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH_PLAN_COMPLEX258_tree = (CommonTree)adaptor.dupNode(FOREACH_PLAN_COMPLEX258);


                    root_1 = (CommonTree)adaptor.becomeRoot(FOREACH_PLAN_COMPLEX258_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_blk_in_foreach_plan2210);
                    nested_blk259=nested_blk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, nested_blk259.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan"


    protected static class nested_blk_scope {
        Set<String> ids;
    }
    protected Stack nested_blk_stack = new Stack();


    public static class nested_blk_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:434:1: nested_blk : ( nested_command )* generate_clause ;
    public final AstValidator.nested_blk_return nested_blk() throws RecognitionException {
        nested_blk_stack.push(new nested_blk_scope());
        AstValidator.nested_blk_return retval = new AstValidator.nested_blk_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.nested_command_return nested_command260 =null;

        AstValidator.generate_clause_return generate_clause261 =null;



         ((nested_blk_scope)nested_blk_stack.peek()).ids = new HashSet<String>(); 
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:437:2: ( ( nested_command )* generate_clause )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:437:4: ( nested_command )* generate_clause
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:437:4: ( nested_command )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0 >= NESTED_CMD && LA78_0 <= NESTED_CMD_ASSI)) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:437:4: nested_command
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_command_in_nested_blk2230);
            	    nested_command260=nested_command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_command260.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_generate_clause_in_nested_blk2233);
            generate_clause261=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, generate_clause261.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            nested_blk_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class generate_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:440:1: generate_clause : ^( GENERATE ( flatten_generated_item )+ ) ;
    public final AstValidator.generate_clause_return generate_clause() throws RecognitionException {
        AstValidator.generate_clause_return retval = new AstValidator.generate_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GENERATE262=null;
        AstValidator.flatten_generated_item_return flatten_generated_item263 =null;


        CommonTree GENERATE262_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:440:17: ( ^( GENERATE ( flatten_generated_item )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:440:19: ^( GENERATE ( flatten_generated_item )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            GENERATE262=(CommonTree)match(input,GENERATE,FOLLOW_GENERATE_in_generate_clause2244); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GENERATE262_tree = (CommonTree)adaptor.dupNode(GENERATE262);


            root_1 = (CommonTree)adaptor.becomeRoot(GENERATE262_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:440:31: ( flatten_generated_item )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==DIV||LA79_0==DOLLARVAR||LA79_0==DOUBLENUMBER||LA79_0==FALSE||LA79_0==FLATTEN||LA79_0==FLOATNUMBER||LA79_0==GROUP||LA79_0==INTEGER||LA79_0==LONGINTEGER||LA79_0==MINUS||LA79_0==PERCENT||LA79_0==PLUS||LA79_0==QUOTEDSTRING||LA79_0==STAR||LA79_0==TRUE||(LA79_0 >= BAG_VAL && LA79_0 <= BIN_EXPR)||(LA79_0 >= CAST_EXPR && LA79_0 <= EXPR_IN_PAREN)||LA79_0==FUNC_EVAL||LA79_0==IDENTIFIER||(LA79_0 >= MAP_VAL && LA79_0 <= NEG)||LA79_0==NULL||LA79_0==TUPLE_VAL) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:440:31: flatten_generated_item
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_flatten_generated_item_in_generate_clause2246);
            	    flatten_generated_item263=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, flatten_generated_item263.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generate_clause"


    public static class nested_command_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:443:1: nested_command : ( ^( NESTED_CMD IDENTIFIER nested_op ) | ^( NESTED_CMD_ASSI IDENTIFIER expr ) );
    public final AstValidator.nested_command_return nested_command() throws RecognitionException {
        AstValidator.nested_command_return retval = new AstValidator.nested_command_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NESTED_CMD264=null;
        CommonTree IDENTIFIER265=null;
        CommonTree NESTED_CMD_ASSI267=null;
        CommonTree IDENTIFIER268=null;
        AstValidator.nested_op_return nested_op266 =null;

        AstValidator.expr_return expr269 =null;


        CommonTree NESTED_CMD264_tree=null;
        CommonTree IDENTIFIER265_tree=null;
        CommonTree NESTED_CMD_ASSI267_tree=null;
        CommonTree IDENTIFIER268_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:444:2: ( ^( NESTED_CMD IDENTIFIER nested_op ) | ^( NESTED_CMD_ASSI IDENTIFIER expr ) )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==NESTED_CMD) ) {
                alt80=1;
            }
            else if ( (LA80_0==NESTED_CMD_ASSI) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }
            switch (alt80) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:444:4: ^( NESTED_CMD IDENTIFIER nested_op )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NESTED_CMD264=(CommonTree)match(input,NESTED_CMD,FOLLOW_NESTED_CMD_in_nested_command2261); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_CMD264_tree = (CommonTree)adaptor.dupNode(NESTED_CMD264);


                    root_1 = (CommonTree)adaptor.becomeRoot(NESTED_CMD264_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER265=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_nested_command2263); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER265_tree = (CommonTree)adaptor.dupNode(IDENTIFIER265);


                    adaptor.addChild(root_1, IDENTIFIER265_tree);
                    }


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_op_in_nested_command2265);
                    nested_op266=nested_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, nested_op266.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           ((nested_blk_scope)nested_blk_stack.peek()).ids.add( (IDENTIFIER265!=null?IDENTIFIER265.getText():null) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:448:4: ^( NESTED_CMD_ASSI IDENTIFIER expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NESTED_CMD_ASSI267=(CommonTree)match(input,NESTED_CMD_ASSI,FOLLOW_NESTED_CMD_ASSI_in_nested_command2279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_CMD_ASSI267_tree = (CommonTree)adaptor.dupNode(NESTED_CMD_ASSI267);


                    root_1 = (CommonTree)adaptor.becomeRoot(NESTED_CMD_ASSI267_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER268=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_nested_command2281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER268_tree = (CommonTree)adaptor.dupNode(IDENTIFIER268);


                    adaptor.addChild(root_1, IDENTIFIER268_tree);
                    }


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_nested_command2283);
                    expr269=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr269.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           ((nested_blk_scope)nested_blk_stack.peek()).ids.add( (IDENTIFIER268!=null?IDENTIFIER268.getText():null) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:454:1: nested_op : ( nested_proj | nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach );
    public final AstValidator.nested_op_return nested_op() throws RecognitionException {
        AstValidator.nested_op_return retval = new AstValidator.nested_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.nested_proj_return nested_proj270 =null;

        AstValidator.nested_filter_return nested_filter271 =null;

        AstValidator.nested_sort_return nested_sort272 =null;

        AstValidator.nested_distinct_return nested_distinct273 =null;

        AstValidator.nested_limit_return nested_limit274 =null;

        AstValidator.nested_cross_return nested_cross275 =null;

        AstValidator.nested_foreach_return nested_foreach276 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:454:11: ( nested_proj | nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach )
            int alt81=7;
            switch ( input.LA(1) ) {
            case NESTED_PROJ:
                {
                alt81=1;
                }
                break;
            case FILTER:
                {
                alt81=2;
                }
                break;
            case ORDER:
                {
                alt81=3;
                }
                break;
            case DISTINCT:
                {
                alt81=4;
                }
                break;
            case LIMIT:
                {
                alt81=5;
                }
                break;
            case CROSS:
                {
                alt81=6;
                }
                break;
            case FOREACH:
                {
                alt81=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }

            switch (alt81) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:454:13: nested_proj
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_proj_in_nested_op2299);
                    nested_proj270=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_proj270.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:455:13: nested_filter
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_filter_in_nested_op2313);
                    nested_filter271=nested_filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_filter271.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:456:13: nested_sort
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_sort_in_nested_op2327);
                    nested_sort272=nested_sort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_sort272.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:457:13: nested_distinct
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_distinct_in_nested_op2341);
                    nested_distinct273=nested_distinct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_distinct273.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:458:13: nested_limit
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_limit_in_nested_op2355);
                    nested_limit274=nested_limit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_limit274.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:459:13: nested_cross
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_cross_in_nested_op2369);
                    nested_cross275=nested_cross();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_cross275.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:460:13: nested_foreach
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_foreach_in_nested_op2383);
                    nested_foreach276=nested_foreach();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_foreach276.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:463:1: nested_proj : ^( NESTED_PROJ col_ref ( col_ref )+ ) ;
    public final AstValidator.nested_proj_return nested_proj() throws RecognitionException {
        AstValidator.nested_proj_return retval = new AstValidator.nested_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NESTED_PROJ277=null;
        AstValidator.col_ref_return col_ref278 =null;

        AstValidator.col_ref_return col_ref279 =null;


        CommonTree NESTED_PROJ277_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:463:13: ( ^( NESTED_PROJ col_ref ( col_ref )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:463:15: ^( NESTED_PROJ col_ref ( col_ref )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            NESTED_PROJ277=(CommonTree)match(input,NESTED_PROJ,FOLLOW_NESTED_PROJ_in_nested_proj2394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NESTED_PROJ277_tree = (CommonTree)adaptor.dupNode(NESTED_PROJ277);


            root_1 = (CommonTree)adaptor.becomeRoot(NESTED_PROJ277_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_col_ref_in_nested_proj2396);
            col_ref278=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, col_ref278.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:463:38: ( col_ref )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==DOLLARVAR||LA82_0==GROUP||LA82_0==IDENTIFIER) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:463:38: col_ref
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_col_ref_in_nested_proj2398);
            	    col_ref279=col_ref();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, col_ref279.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class nested_filter_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:466:1: nested_filter : ^( FILTER nested_op_input cond ) ;
    public final AstValidator.nested_filter_return nested_filter() throws RecognitionException {
        AstValidator.nested_filter_return retval = new AstValidator.nested_filter_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FILTER280=null;
        AstValidator.nested_op_input_return nested_op_input281 =null;

        AstValidator.cond_return cond282 =null;


        CommonTree FILTER280_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:467:2: ( ^( FILTER nested_op_input cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:467:4: ^( FILTER nested_op_input cond )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FILTER280=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_nested_filter2413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER280_tree = (CommonTree)adaptor.dupNode(FILTER280);


            root_1 = (CommonTree)adaptor.becomeRoot(FILTER280_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_filter2415);
            nested_op_input281=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input281.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_nested_filter2417);
            cond282=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond282.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:470:1: nested_sort : ^( ORDER nested_op_input order_by_clause ( func_clause )? ) ;
    public final AstValidator.nested_sort_return nested_sort() throws RecognitionException {
        AstValidator.nested_sort_return retval = new AstValidator.nested_sort_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ORDER283=null;
        AstValidator.nested_op_input_return nested_op_input284 =null;

        AstValidator.order_by_clause_return order_by_clause285 =null;

        AstValidator.func_clause_return func_clause286 =null;


        CommonTree ORDER283_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:470:13: ( ^( ORDER nested_op_input order_by_clause ( func_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:470:15: ^( ORDER nested_op_input order_by_clause ( func_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            ORDER283=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_nested_sort2430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER283_tree = (CommonTree)adaptor.dupNode(ORDER283);


            root_1 = (CommonTree)adaptor.becomeRoot(ORDER283_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_sort2432);
            nested_op_input284=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input284.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_clause_in_nested_sort2435);
            order_by_clause285=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, order_by_clause285.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:470:57: ( func_clause )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==FUNC||LA83_0==FUNC_REF) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:470:57: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_nested_sort2437);
                    func_clause286=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause286.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:473:1: nested_distinct : ^( DISTINCT nested_op_input ) ;
    public final AstValidator.nested_distinct_return nested_distinct() throws RecognitionException {
        AstValidator.nested_distinct_return retval = new AstValidator.nested_distinct_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DISTINCT287=null;
        AstValidator.nested_op_input_return nested_op_input288 =null;


        CommonTree DISTINCT287_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:473:17: ( ^( DISTINCT nested_op_input ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:473:19: ^( DISTINCT nested_op_input )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DISTINCT287=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct2451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT287_tree = (CommonTree)adaptor.dupNode(DISTINCT287);


            root_1 = (CommonTree)adaptor.becomeRoot(DISTINCT287_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_distinct2453);
            nested_op_input288=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input288.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:476:1: nested_limit : ^( LIMIT nested_op_input ( INTEGER | expr ) ) ;
    public final AstValidator.nested_limit_return nested_limit() throws RecognitionException {
        AstValidator.nested_limit_return retval = new AstValidator.nested_limit_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LIMIT289=null;
        CommonTree INTEGER291=null;
        AstValidator.nested_op_input_return nested_op_input290 =null;

        AstValidator.expr_return expr292 =null;


        CommonTree LIMIT289_tree=null;
        CommonTree INTEGER291_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:476:14: ( ^( LIMIT nested_op_input ( INTEGER | expr ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:476:16: ^( LIMIT nested_op_input ( INTEGER | expr ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LIMIT289=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit2466); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT289_tree = (CommonTree)adaptor.dupNode(LIMIT289);


            root_1 = (CommonTree)adaptor.becomeRoot(LIMIT289_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_limit2468);
            nested_op_input290=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input290.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:476:41: ( INTEGER | expr )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==INTEGER) ) {
                int LA84_1 = input.LA(2);

                if ( (synpred149_AstValidator()) ) {
                    alt84=1;
                }
                else if ( (true) ) {
                    alt84=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA84_0==DIV||LA84_0==DOLLARVAR||LA84_0==DOUBLENUMBER||LA84_0==FALSE||LA84_0==FLOATNUMBER||LA84_0==GROUP||LA84_0==LONGINTEGER||LA84_0==MINUS||LA84_0==PERCENT||LA84_0==PLUS||LA84_0==QUOTEDSTRING||LA84_0==STAR||LA84_0==TRUE||(LA84_0 >= BAG_VAL && LA84_0 <= BIN_EXPR)||LA84_0==CAST_EXPR||LA84_0==EXPR_IN_PAREN||LA84_0==FUNC_EVAL||LA84_0==IDENTIFIER||(LA84_0 >= MAP_VAL && LA84_0 <= NEG)||LA84_0==NULL||LA84_0==TUPLE_VAL) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }
            switch (alt84) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:476:43: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER291=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit2472); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER291_tree = (CommonTree)adaptor.dupNode(INTEGER291);


                    adaptor.addChild(root_1, INTEGER291_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:476:53: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_nested_limit2476);
                    expr292=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr292.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:479:1: nested_cross : ^( CROSS nested_op_input_list ) ;
    public final AstValidator.nested_cross_return nested_cross() throws RecognitionException {
        AstValidator.nested_cross_return retval = new AstValidator.nested_cross_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CROSS293=null;
        AstValidator.nested_op_input_list_return nested_op_input_list294 =null;


        CommonTree CROSS293_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:479:14: ( ^( CROSS nested_op_input_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:479:16: ^( CROSS nested_op_input_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CROSS293=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_nested_cross2491); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS293_tree = (CommonTree)adaptor.dupNode(CROSS293);


            root_1 = (CommonTree)adaptor.becomeRoot(CROSS293_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross2493);
            nested_op_input_list294=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input_list294.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    public static class nested_foreach_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:482:1: nested_foreach : ^( FOREACH nested_op_input generate_clause ) ;
    public final AstValidator.nested_foreach_return nested_foreach() throws RecognitionException {
        AstValidator.nested_foreach_return retval = new AstValidator.nested_foreach_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH295=null;
        AstValidator.nested_op_input_return nested_op_input296 =null;

        AstValidator.generate_clause_return generate_clause297 =null;


        CommonTree FOREACH295_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:482:16: ( ^( FOREACH nested_op_input generate_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:482:18: ^( FOREACH nested_op_input generate_clause )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FOREACH295=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach2506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH295_tree = (CommonTree)adaptor.dupNode(FOREACH295);


            root_1 = (CommonTree)adaptor.becomeRoot(FOREACH295_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_foreach2508);
            nested_op_input296=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input296.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_generate_clause_in_nested_foreach2510);
            generate_clause297=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, generate_clause297.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class nested_op_input_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:485:1: nested_op_input : ( col_ref | nested_proj );
    public final AstValidator.nested_op_input_return nested_op_input() throws RecognitionException {
        AstValidator.nested_op_input_return retval = new AstValidator.nested_op_input_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.col_ref_return col_ref298 =null;

        AstValidator.nested_proj_return nested_proj299 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:485:17: ( col_ref | nested_proj )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==DOLLARVAR||LA85_0==GROUP||LA85_0==IDENTIFIER) ) {
                alt85=1;
            }
            else if ( (LA85_0==NESTED_PROJ) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:485:19: col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_nested_op_input2521);
                    col_ref298=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref298.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:485:29: nested_proj
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_proj_in_nested_op_input2525);
                    nested_proj299=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_proj299.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class nested_op_input_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:488:1: nested_op_input_list : ( nested_op_input )+ ;
    public final AstValidator.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        AstValidator.nested_op_input_list_return retval = new AstValidator.nested_op_input_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.nested_op_input_return nested_op_input300 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:488:22: ( ( nested_op_input )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:488:24: ( nested_op_input )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:488:24: ( nested_op_input )+
            int cnt86=0;
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==DOLLARVAR||LA86_0==GROUP||LA86_0==IDENTIFIER||LA86_0==NESTED_PROJ) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:488:24: nested_op_input
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list2534);
            	    nested_op_input300=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_op_input300.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt86 >= 1 ) break loop86;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(86, input);
                        throw eee;
                }
                cnt86++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class stream_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:491:1: stream_clause : ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? ) ;
    public final AstValidator.stream_clause_return stream_clause() throws RecognitionException {
        AstValidator.stream_clause_return retval = new AstValidator.stream_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STREAM301=null;
        CommonTree set303=null;
        AstValidator.rel_return rel302 =null;

        AstValidator.as_clause_return as_clause304 =null;


        CommonTree STREAM301_tree=null;
        CommonTree set303_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:491:15: ( ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:491:17: ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STREAM301=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_stream_clause2546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM301_tree = (CommonTree)adaptor.dupNode(STREAM301);


            root_1 = (CommonTree)adaptor.becomeRoot(STREAM301_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_stream_clause2548);
            rel302=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel302.getTree());


            _last = (CommonTree)input.LT(1);
            set303=(CommonTree)input.LT(1);

            if ( input.LA(1)==EXECCOMMAND||input.LA(1)==IDENTIFIER ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set303_tree = (CommonTree)adaptor.dupNode(set303);


                adaptor.addChild(root_1, set303_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:491:60: ( as_clause )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==AS) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:491:60: as_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_as_clause_in_stream_clause2560);
                    as_clause304=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, as_clause304.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:494:1: mr_clause : ^( MAPREDUCE QUOTEDSTRING ( path_list )? store_clause load_clause ( EXECCOMMAND )? ) ;
    public final AstValidator.mr_clause_return mr_clause() throws RecognitionException {
        AstValidator.mr_clause_return retval = new AstValidator.mr_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAPREDUCE305=null;
        CommonTree QUOTEDSTRING306=null;
        CommonTree EXECCOMMAND310=null;
        AstValidator.path_list_return path_list307 =null;

        AstValidator.store_clause_return store_clause308 =null;

        AstValidator.load_clause_return load_clause309 =null;


        CommonTree MAPREDUCE305_tree=null;
        CommonTree QUOTEDSTRING306_tree=null;
        CommonTree EXECCOMMAND310_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:494:11: ( ^( MAPREDUCE QUOTEDSTRING ( path_list )? store_clause load_clause ( EXECCOMMAND )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:494:13: ^( MAPREDUCE QUOTEDSTRING ( path_list )? store_clause load_clause ( EXECCOMMAND )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAPREDUCE305=(CommonTree)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause2574); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE305_tree = (CommonTree)adaptor.dupNode(MAPREDUCE305);


            root_1 = (CommonTree)adaptor.becomeRoot(MAPREDUCE305_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING306=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause2576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING306_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING306);


            adaptor.addChild(root_1, QUOTEDSTRING306_tree);
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:494:39: ( path_list )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==QUOTEDSTRING) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:494:39: path_list
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_path_list_in_mr_clause2578);
                    path_list307=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, path_list307.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_store_clause_in_mr_clause2581);
            store_clause308=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, store_clause308.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_load_clause_in_mr_clause2583);
            load_clause309=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, load_clause309.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:494:75: ( EXECCOMMAND )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==EXECCOMMAND) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:494:75: EXECCOMMAND
                    {
                    _last = (CommonTree)input.LT(1);
                    EXECCOMMAND310=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause2585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND310_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND310);


                    adaptor.addChild(root_1, EXECCOMMAND310_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:497:1: split_clause : ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) ;
    public final AstValidator.split_clause_return split_clause() throws RecognitionException {
        AstValidator.split_clause_return retval = new AstValidator.split_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SPLIT311=null;
        AstValidator.rel_return rel312 =null;

        AstValidator.split_branch_return split_branch313 =null;

        AstValidator.split_otherwise_return split_otherwise314 =null;


        CommonTree SPLIT311_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:497:14: ( ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:497:16: ^( SPLIT rel ( split_branch )+ ( split_otherwise )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SPLIT311=(CommonTree)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause2599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT311_tree = (CommonTree)adaptor.dupNode(SPLIT311);


            root_1 = (CommonTree)adaptor.becomeRoot(SPLIT311_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_split_clause2601);
            rel312=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel312.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:497:29: ( split_branch )+
            int cnt90=0;
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==SPLIT_BRANCH) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:497:29: split_branch
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_split_branch_in_split_clause2603);
            	    split_branch313=split_branch();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, split_branch313.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt90 >= 1 ) break loop90;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(90, input);
                        throw eee;
                }
                cnt90++;
            } while (true);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:497:43: ( split_otherwise )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==OTHERWISE) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:497:43: split_otherwise
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_otherwise_in_split_clause2606);
                    split_otherwise314=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, split_otherwise314.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:500:1: split_branch : ^( SPLIT_BRANCH alias cond ) ;
    public final AstValidator.split_branch_return split_branch() throws RecognitionException {
        AstValidator.split_branch_return retval = new AstValidator.split_branch_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SPLIT_BRANCH315=null;
        AstValidator.alias_return alias316 =null;

        AstValidator.cond_return cond317 =null;


        CommonTree SPLIT_BRANCH315_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:501:2: ( ^( SPLIT_BRANCH alias cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:501:4: ^( SPLIT_BRANCH alias cond )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SPLIT_BRANCH315=(CommonTree)match(input,SPLIT_BRANCH,FOLLOW_SPLIT_BRANCH_in_split_branch2621); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT_BRANCH315_tree = (CommonTree)adaptor.dupNode(SPLIT_BRANCH315);


            root_1 = (CommonTree)adaptor.becomeRoot(SPLIT_BRANCH315_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_split_branch2623);
            alias316=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias316.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_split_branch2625);
            cond317=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond317.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   aliases.add( (alias316!=null?alias316.name:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:507:1: split_otherwise : ^( OTHERWISE alias ) ;
    public final AstValidator.split_otherwise_return split_otherwise() throws RecognitionException {
        AstValidator.split_otherwise_return retval = new AstValidator.split_otherwise_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OTHERWISE318=null;
        AstValidator.alias_return alias319 =null;


        CommonTree OTHERWISE318_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:507:18: ( ^( OTHERWISE alias ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:507:20: ^( OTHERWISE alias )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            OTHERWISE318=(CommonTree)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise2644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OTHERWISE318_tree = (CommonTree)adaptor.dupNode(OTHERWISE318);


            root_1 = (CommonTree)adaptor.becomeRoot(OTHERWISE318_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_split_otherwise2646);
            alias319=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias319.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   aliases.add( (alias319!=null?alias319.name:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class col_ref_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:513:1: col_ref : ( alias_col_ref | dollar_col_ref );
    public final AstValidator.col_ref_return col_ref() throws RecognitionException {
        AstValidator.col_ref_return retval = new AstValidator.col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.alias_col_ref_return alias_col_ref320 =null;

        AstValidator.dollar_col_ref_return dollar_col_ref321 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:513:9: ( alias_col_ref | dollar_col_ref )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==GROUP||LA92_0==IDENTIFIER) ) {
                alt92=1;
            }
            else if ( (LA92_0==DOLLARVAR) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:513:11: alias_col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_col_ref_in_col_ref2662);
                    alias_col_ref320=alias_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias_col_ref320.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:513:27: dollar_col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_dollar_col_ref_in_col_ref2666);
                    dollar_col_ref321=dollar_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dollar_col_ref321.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class alias_col_ref_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:516:1: alias_col_ref : ( GROUP | IDENTIFIER );
    public final AstValidator.alias_col_ref_return alias_col_ref() throws RecognitionException {
        AstValidator.alias_col_ref_return retval = new AstValidator.alias_col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set322=null;

        CommonTree set322_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:516:15: ( GROUP | IDENTIFIER )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set322=(CommonTree)input.LT(1);

            if ( input.LA(1)==GROUP||input.LA(1)==IDENTIFIER ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set322_tree = (CommonTree)adaptor.dupNode(set322);


                adaptor.addChild(root_0, set322_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias_col_ref"


    public static class dollar_col_ref_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dollar_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:519:1: dollar_col_ref : DOLLARVAR ;
    public final AstValidator.dollar_col_ref_return dollar_col_ref() throws RecognitionException {
        AstValidator.dollar_col_ref_return retval = new AstValidator.dollar_col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOLLARVAR323=null;

        CommonTree DOLLARVAR323_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:519:16: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:519:18: DOLLARVAR
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            DOLLARVAR323=(CommonTree)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_dollar_col_ref2688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR323_tree = (CommonTree)adaptor.dupNode(DOLLARVAR323);


            adaptor.addChild(root_0, DOLLARVAR323_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dollar_col_ref"


    public static class const_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:522:1: const_expr : literal ;
    public final AstValidator.const_expr_return const_expr() throws RecognitionException {
        AstValidator.const_expr_return retval = new AstValidator.const_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.literal_return literal324 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:522:12: ( literal )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:522:14: literal
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_literal_in_const_expr2697);
            literal324=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, literal324.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class literal_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:525:1: literal : ( scalar | map | bag | tuple );
    public final AstValidator.literal_return literal() throws RecognitionException {
        AstValidator.literal_return retval = new AstValidator.literal_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstValidator.scalar_return scalar325 =null;

        AstValidator.map_return map326 =null;

        AstValidator.bag_return bag327 =null;

        AstValidator.tuple_return tuple328 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:525:9: ( scalar | map | bag | tuple )
            int alt93=4;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case QUOTEDSTRING:
            case TRUE:
            case NULL:
                {
                alt93=1;
                }
                break;
            case MAP_VAL:
                {
                alt93=2;
                }
                break;
            case BAG_VAL:
                {
                alt93=3;
                }
                break;
            case TUPLE_VAL:
                {
                alt93=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }

            switch (alt93) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:525:11: scalar
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_scalar_in_literal2706);
                    scalar325=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, scalar325.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:525:20: map
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_in_literal2710);
                    map326=map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map326.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:525:26: bag
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_in_literal2714);
                    bag327=bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag327.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:525:32: tuple
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_in_literal2718);
                    tuple328=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple328.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class scalar_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:528:1: scalar : ( num_scalar | QUOTEDSTRING | NULL | TRUE | FALSE );
    public final AstValidator.scalar_return scalar() throws RecognitionException {
        AstValidator.scalar_return retval = new AstValidator.scalar_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING330=null;
        CommonTree NULL331=null;
        CommonTree TRUE332=null;
        CommonTree FALSE333=null;
        AstValidator.num_scalar_return num_scalar329 =null;


        CommonTree QUOTEDSTRING330_tree=null;
        CommonTree NULL331_tree=null;
        CommonTree TRUE332_tree=null;
        CommonTree FALSE333_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:528:8: ( num_scalar | QUOTEDSTRING | NULL | TRUE | FALSE )
            int alt94=5;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
                {
                alt94=1;
                }
                break;
            case QUOTEDSTRING:
                {
                alt94=2;
                }
                break;
            case NULL:
                {
                alt94=3;
                }
                break;
            case TRUE:
                {
                alt94=4;
                }
                break;
            case FALSE:
                {
                alt94=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }

            switch (alt94) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:528:10: num_scalar
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_num_scalar_in_scalar2727);
                    num_scalar329=num_scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, num_scalar329.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:528:23: QUOTEDSTRING
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    QUOTEDSTRING330=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_scalar2731); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING330_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING330);


                    adaptor.addChild(root_0, QUOTEDSTRING330_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:528:38: NULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NULL331=(CommonTree)match(input,NULL,FOLLOW_NULL_in_scalar2735); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL331_tree = (CommonTree)adaptor.dupNode(NULL331);


                    adaptor.addChild(root_0, NULL331_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:528:45: TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TRUE332=(CommonTree)match(input,TRUE,FOLLOW_TRUE_in_scalar2739); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE332_tree = (CommonTree)adaptor.dupNode(TRUE332);


                    adaptor.addChild(root_0, TRUE332_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:528:52: FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FALSE333=(CommonTree)match(input,FALSE,FOLLOW_FALSE_in_scalar2743); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE333_tree = (CommonTree)adaptor.dupNode(FALSE333);


                    adaptor.addChild(root_0, FALSE333_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class num_scalar_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "num_scalar"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:531:1: num_scalar : ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) ;
    public final AstValidator.num_scalar_return num_scalar() throws RecognitionException {
        AstValidator.num_scalar_return retval = new AstValidator.num_scalar_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MINUS334=null;
        CommonTree set335=null;

        CommonTree MINUS334_tree=null;
        CommonTree set335_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:531:12: ( ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:531:14: ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER )
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:531:14: ( MINUS )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==MINUS) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:531:14: MINUS
                    {
                    _last = (CommonTree)input.LT(1);
                    MINUS334=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_num_scalar2752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS334_tree = (CommonTree)adaptor.dupNode(MINUS334);


                    adaptor.addChild(root_0, MINUS334_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            set335=(CommonTree)input.LT(1);

            if ( input.LA(1)==DOUBLENUMBER||input.LA(1)==FLOATNUMBER||input.LA(1)==INTEGER||input.LA(1)==LONGINTEGER ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set335_tree = (CommonTree)adaptor.dupNode(set335);


                adaptor.addChild(root_0, set335_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "num_scalar"


    public static class map_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:534:1: map : ^( MAP_VAL ( keyvalue )* ) ;
    public final AstValidator.map_return map() throws RecognitionException {
        AstValidator.map_return retval = new AstValidator.map_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAP_VAL336=null;
        AstValidator.keyvalue_return keyvalue337 =null;


        CommonTree MAP_VAL336_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:534:5: ( ^( MAP_VAL ( keyvalue )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:534:7: ^( MAP_VAL ( keyvalue )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAP_VAL336=(CommonTree)match(input,MAP_VAL,FOLLOW_MAP_VAL_in_map2782); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAP_VAL336_tree = (CommonTree)adaptor.dupNode(MAP_VAL336);


            root_1 = (CommonTree)adaptor.becomeRoot(MAP_VAL336_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:534:18: ( keyvalue )*
                loop96:
                do {
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==KEY_VAL_PAIR) ) {
                        alt96=1;
                    }


                    switch (alt96) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:534:18: keyvalue
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_keyvalue_in_map2784);
                	    keyvalue337=keyvalue();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, keyvalue337.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop96;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map"


    public static class keyvalue_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:537:1: keyvalue : ^( KEY_VAL_PAIR map_key const_expr ) ;
    public final AstValidator.keyvalue_return keyvalue() throws RecognitionException {
        AstValidator.keyvalue_return retval = new AstValidator.keyvalue_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree KEY_VAL_PAIR338=null;
        AstValidator.map_key_return map_key339 =null;

        AstValidator.const_expr_return const_expr340 =null;


        CommonTree KEY_VAL_PAIR338_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:537:10: ( ^( KEY_VAL_PAIR map_key const_expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:537:12: ^( KEY_VAL_PAIR map_key const_expr )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            KEY_VAL_PAIR338=(CommonTree)match(input,KEY_VAL_PAIR,FOLLOW_KEY_VAL_PAIR_in_keyvalue2798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            KEY_VAL_PAIR338_tree = (CommonTree)adaptor.dupNode(KEY_VAL_PAIR338);


            root_1 = (CommonTree)adaptor.becomeRoot(KEY_VAL_PAIR338_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_map_key_in_keyvalue2800);
            map_key339=map_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, map_key339.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_const_expr_in_keyvalue2802);
            const_expr340=const_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, const_expr340.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class map_key_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_key"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:540:1: map_key : QUOTEDSTRING ;
    public final AstValidator.map_key_return map_key() throws RecognitionException {
        AstValidator.map_key_return retval = new AstValidator.map_key_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING341=null;

        CommonTree QUOTEDSTRING341_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:540:9: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:540:11: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING341=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_map_key2813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING341_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING341);


            adaptor.addChild(root_0, QUOTEDSTRING341_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_key"


    public static class bag_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:543:1: bag : ^( BAG_VAL ( tuple )* ) ;
    public final AstValidator.bag_return bag() throws RecognitionException {
        AstValidator.bag_return retval = new AstValidator.bag_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_VAL342=null;
        AstValidator.tuple_return tuple343 =null;


        CommonTree BAG_VAL342_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:543:5: ( ^( BAG_VAL ( tuple )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:543:7: ^( BAG_VAL ( tuple )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_VAL342=(CommonTree)match(input,BAG_VAL,FOLLOW_BAG_VAL_in_bag2824); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_VAL342_tree = (CommonTree)adaptor.dupNode(BAG_VAL342);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_VAL342_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:543:18: ( tuple )*
                loop97:
                do {
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==TUPLE_VAL) ) {
                        alt97=1;
                    }


                    switch (alt97) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:543:18: tuple
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_tuple_in_bag2826);
                	    tuple343=tuple();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, tuple343.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop97;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag"


    public static class tuple_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:546:1: tuple : ^( TUPLE_VAL ( literal )* ) ;
    public final AstValidator.tuple_return tuple() throws RecognitionException {
        AstValidator.tuple_return retval = new AstValidator.tuple_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_VAL344=null;
        AstValidator.literal_return literal345 =null;


        CommonTree TUPLE_VAL344_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:546:7: ( ^( TUPLE_VAL ( literal )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:546:9: ^( TUPLE_VAL ( literal )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_VAL344=(CommonTree)match(input,TUPLE_VAL,FOLLOW_TUPLE_VAL_in_tuple2840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_VAL344_tree = (CommonTree)adaptor.dupNode(TUPLE_VAL344);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_VAL344_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:546:22: ( literal )*
                loop98:
                do {
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==DOUBLENUMBER||LA98_0==FALSE||LA98_0==FLOATNUMBER||LA98_0==INTEGER||LA98_0==LONGINTEGER||LA98_0==MINUS||LA98_0==QUOTEDSTRING||LA98_0==TRUE||LA98_0==BAG_VAL||LA98_0==MAP_VAL||LA98_0==NULL||LA98_0==TUPLE_VAL) ) {
                        alt98=1;
                    }


                    switch (alt98) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:546:22: literal
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_literal_in_tuple2842);
                	    literal345=literal();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, literal345.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop98;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple"


    public static class eid_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:550:1: eid : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | MATCHES | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | EVAL | ASC | DESC | BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | NULL | TRUE | FALSE | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | IDENTIFIER | TOBAG | TOMAP | TOTUPLE );
    public final AstValidator.eid_return eid() throws RecognitionException {
        AstValidator.eid_return retval = new AstValidator.eid_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree IMPORT347=null;
        CommonTree RETURNS348=null;
        CommonTree DEFINE349=null;
        CommonTree LOAD350=null;
        CommonTree FILTER351=null;
        CommonTree FOREACH352=null;
        CommonTree MATCHES353=null;
        CommonTree ORDER354=null;
        CommonTree DISTINCT355=null;
        CommonTree COGROUP356=null;
        CommonTree JOIN357=null;
        CommonTree CROSS358=null;
        CommonTree UNION359=null;
        CommonTree SPLIT360=null;
        CommonTree INTO361=null;
        CommonTree IF362=null;
        CommonTree ALL363=null;
        CommonTree AS364=null;
        CommonTree BY365=null;
        CommonTree USING366=null;
        CommonTree INNER367=null;
        CommonTree OUTER368=null;
        CommonTree PARALLEL369=null;
        CommonTree PARTITION370=null;
        CommonTree GROUP371=null;
        CommonTree AND372=null;
        CommonTree OR373=null;
        CommonTree NOT374=null;
        CommonTree GENERATE375=null;
        CommonTree FLATTEN376=null;
        CommonTree EVAL377=null;
        CommonTree ASC378=null;
        CommonTree DESC379=null;
        CommonTree BOOLEAN380=null;
        CommonTree INT381=null;
        CommonTree LONG382=null;
        CommonTree FLOAT383=null;
        CommonTree DOUBLE384=null;
        CommonTree CHARARRAY385=null;
        CommonTree BYTEARRAY386=null;
        CommonTree BAG387=null;
        CommonTree TUPLE388=null;
        CommonTree MAP389=null;
        CommonTree IS390=null;
        CommonTree NULL391=null;
        CommonTree TRUE392=null;
        CommonTree FALSE393=null;
        CommonTree STREAM394=null;
        CommonTree THROUGH395=null;
        CommonTree STORE396=null;
        CommonTree MAPREDUCE397=null;
        CommonTree SHIP398=null;
        CommonTree CACHE399=null;
        CommonTree INPUT400=null;
        CommonTree OUTPUT401=null;
        CommonTree STDERROR402=null;
        CommonTree STDIN403=null;
        CommonTree STDOUT404=null;
        CommonTree LIMIT405=null;
        CommonTree SAMPLE406=null;
        CommonTree LEFT407=null;
        CommonTree RIGHT408=null;
        CommonTree FULL409=null;
        CommonTree IDENTIFIER410=null;
        CommonTree TOBAG411=null;
        CommonTree TOMAP412=null;
        CommonTree TOTUPLE413=null;
        AstValidator.rel_str_op_return rel_str_op346 =null;


        CommonTree IMPORT347_tree=null;
        CommonTree RETURNS348_tree=null;
        CommonTree DEFINE349_tree=null;
        CommonTree LOAD350_tree=null;
        CommonTree FILTER351_tree=null;
        CommonTree FOREACH352_tree=null;
        CommonTree MATCHES353_tree=null;
        CommonTree ORDER354_tree=null;
        CommonTree DISTINCT355_tree=null;
        CommonTree COGROUP356_tree=null;
        CommonTree JOIN357_tree=null;
        CommonTree CROSS358_tree=null;
        CommonTree UNION359_tree=null;
        CommonTree SPLIT360_tree=null;
        CommonTree INTO361_tree=null;
        CommonTree IF362_tree=null;
        CommonTree ALL363_tree=null;
        CommonTree AS364_tree=null;
        CommonTree BY365_tree=null;
        CommonTree USING366_tree=null;
        CommonTree INNER367_tree=null;
        CommonTree OUTER368_tree=null;
        CommonTree PARALLEL369_tree=null;
        CommonTree PARTITION370_tree=null;
        CommonTree GROUP371_tree=null;
        CommonTree AND372_tree=null;
        CommonTree OR373_tree=null;
        CommonTree NOT374_tree=null;
        CommonTree GENERATE375_tree=null;
        CommonTree FLATTEN376_tree=null;
        CommonTree EVAL377_tree=null;
        CommonTree ASC378_tree=null;
        CommonTree DESC379_tree=null;
        CommonTree BOOLEAN380_tree=null;
        CommonTree INT381_tree=null;
        CommonTree LONG382_tree=null;
        CommonTree FLOAT383_tree=null;
        CommonTree DOUBLE384_tree=null;
        CommonTree CHARARRAY385_tree=null;
        CommonTree BYTEARRAY386_tree=null;
        CommonTree BAG387_tree=null;
        CommonTree TUPLE388_tree=null;
        CommonTree MAP389_tree=null;
        CommonTree IS390_tree=null;
        CommonTree NULL391_tree=null;
        CommonTree TRUE392_tree=null;
        CommonTree FALSE393_tree=null;
        CommonTree STREAM394_tree=null;
        CommonTree THROUGH395_tree=null;
        CommonTree STORE396_tree=null;
        CommonTree MAPREDUCE397_tree=null;
        CommonTree SHIP398_tree=null;
        CommonTree CACHE399_tree=null;
        CommonTree INPUT400_tree=null;
        CommonTree OUTPUT401_tree=null;
        CommonTree STDERROR402_tree=null;
        CommonTree STDIN403_tree=null;
        CommonTree STDOUT404_tree=null;
        CommonTree LIMIT405_tree=null;
        CommonTree SAMPLE406_tree=null;
        CommonTree LEFT407_tree=null;
        CommonTree RIGHT408_tree=null;
        CommonTree FULL409_tree=null;
        CommonTree IDENTIFIER410_tree=null;
        CommonTree TOBAG411_tree=null;
        CommonTree TOMAP412_tree=null;
        CommonTree TOTUPLE413_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:550:5: ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | MATCHES | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | EVAL | ASC | DESC | BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | NULL | TRUE | FALSE | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | IDENTIFIER | TOBAG | TOMAP | TOTUPLE )
            int alt99=68;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt99=1;
                }
                break;
            case IMPORT:
                {
                alt99=2;
                }
                break;
            case RETURNS:
                {
                alt99=3;
                }
                break;
            case DEFINE:
                {
                alt99=4;
                }
                break;
            case LOAD:
                {
                alt99=5;
                }
                break;
            case FILTER:
                {
                alt99=6;
                }
                break;
            case FOREACH:
                {
                alt99=7;
                }
                break;
            case MATCHES:
                {
                alt99=8;
                }
                break;
            case ORDER:
                {
                alt99=9;
                }
                break;
            case DISTINCT:
                {
                alt99=10;
                }
                break;
            case COGROUP:
                {
                alt99=11;
                }
                break;
            case JOIN:
                {
                alt99=12;
                }
                break;
            case CROSS:
                {
                alt99=13;
                }
                break;
            case UNION:
                {
                alt99=14;
                }
                break;
            case SPLIT:
                {
                alt99=15;
                }
                break;
            case INTO:
                {
                alt99=16;
                }
                break;
            case IF:
                {
                alt99=17;
                }
                break;
            case ALL:
                {
                alt99=18;
                }
                break;
            case AS:
                {
                alt99=19;
                }
                break;
            case BY:
                {
                alt99=20;
                }
                break;
            case USING:
                {
                alt99=21;
                }
                break;
            case INNER:
                {
                alt99=22;
                }
                break;
            case OUTER:
                {
                alt99=23;
                }
                break;
            case PARALLEL:
                {
                alt99=24;
                }
                break;
            case PARTITION:
                {
                alt99=25;
                }
                break;
            case GROUP:
                {
                alt99=26;
                }
                break;
            case AND:
                {
                alt99=27;
                }
                break;
            case OR:
                {
                alt99=28;
                }
                break;
            case NOT:
                {
                alt99=29;
                }
                break;
            case GENERATE:
                {
                alt99=30;
                }
                break;
            case FLATTEN:
                {
                alt99=31;
                }
                break;
            case EVAL:
                {
                alt99=32;
                }
                break;
            case ASC:
                {
                alt99=33;
                }
                break;
            case DESC:
                {
                alt99=34;
                }
                break;
            case BOOLEAN:
                {
                alt99=35;
                }
                break;
            case INT:
                {
                alt99=36;
                }
                break;
            case LONG:
                {
                alt99=37;
                }
                break;
            case FLOAT:
                {
                alt99=38;
                }
                break;
            case DOUBLE:
                {
                alt99=39;
                }
                break;
            case CHARARRAY:
                {
                alt99=40;
                }
                break;
            case BYTEARRAY:
                {
                alt99=41;
                }
                break;
            case BAG:
                {
                alt99=42;
                }
                break;
            case TUPLE:
                {
                alt99=43;
                }
                break;
            case MAP:
                {
                alt99=44;
                }
                break;
            case IS:
                {
                alt99=45;
                }
                break;
            case NULL:
                {
                alt99=46;
                }
                break;
            case TRUE:
                {
                alt99=47;
                }
                break;
            case FALSE:
                {
                alt99=48;
                }
                break;
            case STREAM:
                {
                alt99=49;
                }
                break;
            case THROUGH:
                {
                alt99=50;
                }
                break;
            case STORE:
                {
                alt99=51;
                }
                break;
            case MAPREDUCE:
                {
                alt99=52;
                }
                break;
            case SHIP:
                {
                alt99=53;
                }
                break;
            case CACHE:
                {
                alt99=54;
                }
                break;
            case INPUT:
                {
                alt99=55;
                }
                break;
            case OUTPUT:
                {
                alt99=56;
                }
                break;
            case STDERROR:
                {
                alt99=57;
                }
                break;
            case STDIN:
                {
                alt99=58;
                }
                break;
            case STDOUT:
                {
                alt99=59;
                }
                break;
            case LIMIT:
                {
                alt99=60;
                }
                break;
            case SAMPLE:
                {
                alt99=61;
                }
                break;
            case LEFT:
                {
                alt99=62;
                }
                break;
            case RIGHT:
                {
                alt99=63;
                }
                break;
            case FULL:
                {
                alt99=64;
                }
                break;
            case IDENTIFIER:
                {
                alt99=65;
                }
                break;
            case TOBAG:
                {
                alt99=66;
                }
                break;
            case TOMAP:
                {
                alt99=67;
                }
                break;
            case TOTUPLE:
                {
                alt99=68;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }

            switch (alt99) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:550:7: rel_str_op
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_str_op_in_eid2855);
                    rel_str_op346=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_str_op346.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:551:7: IMPORT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IMPORT347=(CommonTree)match(input,IMPORT,FOLLOW_IMPORT_in_eid2863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT347_tree = (CommonTree)adaptor.dupNode(IMPORT347);


                    adaptor.addChild(root_0, IMPORT347_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:552:7: RETURNS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    RETURNS348=(CommonTree)match(input,RETURNS,FOLLOW_RETURNS_in_eid2871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS348_tree = (CommonTree)adaptor.dupNode(RETURNS348);


                    adaptor.addChild(root_0, RETURNS348_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:553:7: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DEFINE349=(CommonTree)match(input,DEFINE,FOLLOW_DEFINE_in_eid2879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE349_tree = (CommonTree)adaptor.dupNode(DEFINE349);


                    adaptor.addChild(root_0, DEFINE349_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:554:7: LOAD
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LOAD350=(CommonTree)match(input,LOAD,FOLLOW_LOAD_in_eid2887); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD350_tree = (CommonTree)adaptor.dupNode(LOAD350);


                    adaptor.addChild(root_0, LOAD350_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:555:7: FILTER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FILTER351=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_eid2895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER351_tree = (CommonTree)adaptor.dupNode(FILTER351);


                    adaptor.addChild(root_0, FILTER351_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:556:7: FOREACH
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FOREACH352=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_eid2903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH352_tree = (CommonTree)adaptor.dupNode(FOREACH352);


                    adaptor.addChild(root_0, FOREACH352_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:557:7: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MATCHES353=(CommonTree)match(input,MATCHES,FOLLOW_MATCHES_in_eid2911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES353_tree = (CommonTree)adaptor.dupNode(MATCHES353);


                    adaptor.addChild(root_0, MATCHES353_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:558:7: ORDER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ORDER354=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_eid2919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER354_tree = (CommonTree)adaptor.dupNode(ORDER354);


                    adaptor.addChild(root_0, ORDER354_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:559:7: DISTINCT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DISTINCT355=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid2927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT355_tree = (CommonTree)adaptor.dupNode(DISTINCT355);


                    adaptor.addChild(root_0, DISTINCT355_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:560:7: COGROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    COGROUP356=(CommonTree)match(input,COGROUP,FOLLOW_COGROUP_in_eid2935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP356_tree = (CommonTree)adaptor.dupNode(COGROUP356);


                    adaptor.addChild(root_0, COGROUP356_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:561:7: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    JOIN357=(CommonTree)match(input,JOIN,FOLLOW_JOIN_in_eid2943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN357_tree = (CommonTree)adaptor.dupNode(JOIN357);


                    adaptor.addChild(root_0, JOIN357_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:562:7: CROSS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CROSS358=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_eid2951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS358_tree = (CommonTree)adaptor.dupNode(CROSS358);


                    adaptor.addChild(root_0, CROSS358_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:563:7: UNION
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    UNION359=(CommonTree)match(input,UNION,FOLLOW_UNION_in_eid2959); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION359_tree = (CommonTree)adaptor.dupNode(UNION359);


                    adaptor.addChild(root_0, UNION359_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:564:7: SPLIT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SPLIT360=(CommonTree)match(input,SPLIT,FOLLOW_SPLIT_in_eid2967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT360_tree = (CommonTree)adaptor.dupNode(SPLIT360);


                    adaptor.addChild(root_0, SPLIT360_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:565:7: INTO
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INTO361=(CommonTree)match(input,INTO,FOLLOW_INTO_in_eid2975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO361_tree = (CommonTree)adaptor.dupNode(INTO361);


                    adaptor.addChild(root_0, INTO361_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 17 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:566:7: IF
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IF362=(CommonTree)match(input,IF,FOLLOW_IF_in_eid2983); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF362_tree = (CommonTree)adaptor.dupNode(IF362);


                    adaptor.addChild(root_0, IF362_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 18 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:567:7: ALL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ALL363=(CommonTree)match(input,ALL,FOLLOW_ALL_in_eid2991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL363_tree = (CommonTree)adaptor.dupNode(ALL363);


                    adaptor.addChild(root_0, ALL363_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 19 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:568:7: AS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    AS364=(CommonTree)match(input,AS,FOLLOW_AS_in_eid2999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS364_tree = (CommonTree)adaptor.dupNode(AS364);


                    adaptor.addChild(root_0, AS364_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 20 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:569:7: BY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BY365=(CommonTree)match(input,BY,FOLLOW_BY_in_eid3007); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY365_tree = (CommonTree)adaptor.dupNode(BY365);


                    adaptor.addChild(root_0, BY365_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 21 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:570:7: USING
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    USING366=(CommonTree)match(input,USING,FOLLOW_USING_in_eid3015); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING366_tree = (CommonTree)adaptor.dupNode(USING366);


                    adaptor.addChild(root_0, USING366_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 22 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:571:7: INNER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INNER367=(CommonTree)match(input,INNER,FOLLOW_INNER_in_eid3023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER367_tree = (CommonTree)adaptor.dupNode(INNER367);


                    adaptor.addChild(root_0, INNER367_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 23 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:572:7: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OUTER368=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_eid3031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER368_tree = (CommonTree)adaptor.dupNode(OUTER368);


                    adaptor.addChild(root_0, OUTER368_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 24 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:573:7: PARALLEL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    PARALLEL369=(CommonTree)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid3039); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL369_tree = (CommonTree)adaptor.dupNode(PARALLEL369);


                    adaptor.addChild(root_0, PARALLEL369_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 25 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:574:7: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    PARTITION370=(CommonTree)match(input,PARTITION,FOLLOW_PARTITION_in_eid3047); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION370_tree = (CommonTree)adaptor.dupNode(PARTITION370);


                    adaptor.addChild(root_0, PARTITION370_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 26 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:575:7: GROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GROUP371=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_eid3055); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP371_tree = (CommonTree)adaptor.dupNode(GROUP371);


                    adaptor.addChild(root_0, GROUP371_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 27 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:576:7: AND
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    AND372=(CommonTree)match(input,AND,FOLLOW_AND_in_eid3063); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND372_tree = (CommonTree)adaptor.dupNode(AND372);


                    adaptor.addChild(root_0, AND372_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 28 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:577:7: OR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OR373=(CommonTree)match(input,OR,FOLLOW_OR_in_eid3071); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR373_tree = (CommonTree)adaptor.dupNode(OR373);


                    adaptor.addChild(root_0, OR373_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 29 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:578:7: NOT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NOT374=(CommonTree)match(input,NOT,FOLLOW_NOT_in_eid3079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT374_tree = (CommonTree)adaptor.dupNode(NOT374);


                    adaptor.addChild(root_0, NOT374_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 30 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:579:7: GENERATE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GENERATE375=(CommonTree)match(input,GENERATE,FOLLOW_GENERATE_in_eid3087); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE375_tree = (CommonTree)adaptor.dupNode(GENERATE375);


                    adaptor.addChild(root_0, GENERATE375_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 31 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:580:7: FLATTEN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLATTEN376=(CommonTree)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid3095); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN376_tree = (CommonTree)adaptor.dupNode(FLATTEN376);


                    adaptor.addChild(root_0, FLATTEN376_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 32 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:581:7: EVAL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    EVAL377=(CommonTree)match(input,EVAL,FOLLOW_EVAL_in_eid3103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVAL377_tree = (CommonTree)adaptor.dupNode(EVAL377);


                    adaptor.addChild(root_0, EVAL377_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 33 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:582:7: ASC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ASC378=(CommonTree)match(input,ASC,FOLLOW_ASC_in_eid3111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC378_tree = (CommonTree)adaptor.dupNode(ASC378);


                    adaptor.addChild(root_0, ASC378_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 34 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:583:7: DESC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DESC379=(CommonTree)match(input,DESC,FOLLOW_DESC_in_eid3119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC379_tree = (CommonTree)adaptor.dupNode(DESC379);


                    adaptor.addChild(root_0, DESC379_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 35 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:584:7: BOOLEAN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BOOLEAN380=(CommonTree)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_eid3127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLEAN380_tree = (CommonTree)adaptor.dupNode(BOOLEAN380);


                    adaptor.addChild(root_0, BOOLEAN380_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 36 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:585:7: INT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INT381=(CommonTree)match(input,INT,FOLLOW_INT_in_eid3135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT381_tree = (CommonTree)adaptor.dupNode(INT381);


                    adaptor.addChild(root_0, INT381_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 37 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:586:7: LONG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LONG382=(CommonTree)match(input,LONG,FOLLOW_LONG_in_eid3143); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG382_tree = (CommonTree)adaptor.dupNode(LONG382);


                    adaptor.addChild(root_0, LONG382_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 38 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:587:7: FLOAT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLOAT383=(CommonTree)match(input,FLOAT,FOLLOW_FLOAT_in_eid3151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT383_tree = (CommonTree)adaptor.dupNode(FLOAT383);


                    adaptor.addChild(root_0, FLOAT383_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 39 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:588:7: DOUBLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DOUBLE384=(CommonTree)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid3159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE384_tree = (CommonTree)adaptor.dupNode(DOUBLE384);


                    adaptor.addChild(root_0, DOUBLE384_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 40 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:589:7: CHARARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CHARARRAY385=(CommonTree)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid3167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY385_tree = (CommonTree)adaptor.dupNode(CHARARRAY385);


                    adaptor.addChild(root_0, CHARARRAY385_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 41 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:590:7: BYTEARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BYTEARRAY386=(CommonTree)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid3175); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY386_tree = (CommonTree)adaptor.dupNode(BYTEARRAY386);


                    adaptor.addChild(root_0, BYTEARRAY386_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 42 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:591:7: BAG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BAG387=(CommonTree)match(input,BAG,FOLLOW_BAG_in_eid3183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG387_tree = (CommonTree)adaptor.dupNode(BAG387);


                    adaptor.addChild(root_0, BAG387_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 43 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:592:7: TUPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TUPLE388=(CommonTree)match(input,TUPLE,FOLLOW_TUPLE_in_eid3191); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE388_tree = (CommonTree)adaptor.dupNode(TUPLE388);


                    adaptor.addChild(root_0, TUPLE388_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 44 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:593:7: MAP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MAP389=(CommonTree)match(input,MAP,FOLLOW_MAP_in_eid3199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP389_tree = (CommonTree)adaptor.dupNode(MAP389);


                    adaptor.addChild(root_0, MAP389_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 45 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:594:7: IS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IS390=(CommonTree)match(input,IS,FOLLOW_IS_in_eid3207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS390_tree = (CommonTree)adaptor.dupNode(IS390);


                    adaptor.addChild(root_0, IS390_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 46 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:595:7: NULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NULL391=(CommonTree)match(input,NULL,FOLLOW_NULL_in_eid3215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL391_tree = (CommonTree)adaptor.dupNode(NULL391);


                    adaptor.addChild(root_0, NULL391_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 47 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:596:7: TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TRUE392=(CommonTree)match(input,TRUE,FOLLOW_TRUE_in_eid3223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE392_tree = (CommonTree)adaptor.dupNode(TRUE392);


                    adaptor.addChild(root_0, TRUE392_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 48 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:597:7: FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FALSE393=(CommonTree)match(input,FALSE,FOLLOW_FALSE_in_eid3231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE393_tree = (CommonTree)adaptor.dupNode(FALSE393);


                    adaptor.addChild(root_0, FALSE393_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 49 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:598:7: STREAM
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STREAM394=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_eid3239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM394_tree = (CommonTree)adaptor.dupNode(STREAM394);


                    adaptor.addChild(root_0, STREAM394_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 50 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:599:7: THROUGH
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    THROUGH395=(CommonTree)match(input,THROUGH,FOLLOW_THROUGH_in_eid3247); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH395_tree = (CommonTree)adaptor.dupNode(THROUGH395);


                    adaptor.addChild(root_0, THROUGH395_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 51 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:600:7: STORE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STORE396=(CommonTree)match(input,STORE,FOLLOW_STORE_in_eid3255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE396_tree = (CommonTree)adaptor.dupNode(STORE396);


                    adaptor.addChild(root_0, STORE396_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 52 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:601:7: MAPREDUCE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MAPREDUCE397=(CommonTree)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid3263); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE397_tree = (CommonTree)adaptor.dupNode(MAPREDUCE397);


                    adaptor.addChild(root_0, MAPREDUCE397_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 53 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:602:7: SHIP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SHIP398=(CommonTree)match(input,SHIP,FOLLOW_SHIP_in_eid3271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP398_tree = (CommonTree)adaptor.dupNode(SHIP398);


                    adaptor.addChild(root_0, SHIP398_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 54 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:603:7: CACHE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CACHE399=(CommonTree)match(input,CACHE,FOLLOW_CACHE_in_eid3279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE399_tree = (CommonTree)adaptor.dupNode(CACHE399);


                    adaptor.addChild(root_0, CACHE399_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 55 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:604:7: INPUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INPUT400=(CommonTree)match(input,INPUT,FOLLOW_INPUT_in_eid3287); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT400_tree = (CommonTree)adaptor.dupNode(INPUT400);


                    adaptor.addChild(root_0, INPUT400_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 56 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:605:7: OUTPUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OUTPUT401=(CommonTree)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid3295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT401_tree = (CommonTree)adaptor.dupNode(OUTPUT401);


                    adaptor.addChild(root_0, OUTPUT401_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 57 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:606:7: STDERROR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDERROR402=(CommonTree)match(input,STDERROR,FOLLOW_STDERROR_in_eid3303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR402_tree = (CommonTree)adaptor.dupNode(STDERROR402);


                    adaptor.addChild(root_0, STDERROR402_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 58 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:607:7: STDIN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDIN403=(CommonTree)match(input,STDIN,FOLLOW_STDIN_in_eid3311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN403_tree = (CommonTree)adaptor.dupNode(STDIN403);


                    adaptor.addChild(root_0, STDIN403_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 59 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:608:7: STDOUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDOUT404=(CommonTree)match(input,STDOUT,FOLLOW_STDOUT_in_eid3319); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT404_tree = (CommonTree)adaptor.dupNode(STDOUT404);


                    adaptor.addChild(root_0, STDOUT404_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 60 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:609:7: LIMIT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LIMIT405=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_eid3327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT405_tree = (CommonTree)adaptor.dupNode(LIMIT405);


                    adaptor.addChild(root_0, LIMIT405_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 61 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:610:7: SAMPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SAMPLE406=(CommonTree)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid3335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE406_tree = (CommonTree)adaptor.dupNode(SAMPLE406);


                    adaptor.addChild(root_0, SAMPLE406_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 62 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:611:7: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LEFT407=(CommonTree)match(input,LEFT,FOLLOW_LEFT_in_eid3343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT407_tree = (CommonTree)adaptor.dupNode(LEFT407);


                    adaptor.addChild(root_0, LEFT407_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 63 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:612:7: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    RIGHT408=(CommonTree)match(input,RIGHT,FOLLOW_RIGHT_in_eid3351); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT408_tree = (CommonTree)adaptor.dupNode(RIGHT408);


                    adaptor.addChild(root_0, RIGHT408_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 64 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:613:7: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FULL409=(CommonTree)match(input,FULL,FOLLOW_FULL_in_eid3359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL409_tree = (CommonTree)adaptor.dupNode(FULL409);


                    adaptor.addChild(root_0, FULL409_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 65 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:614:7: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER410=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_eid3367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER410_tree = (CommonTree)adaptor.dupNode(IDENTIFIER410);


                    adaptor.addChild(root_0, IDENTIFIER410_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 66 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:615:7: TOBAG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOBAG411=(CommonTree)match(input,TOBAG,FOLLOW_TOBAG_in_eid3375); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOBAG411_tree = (CommonTree)adaptor.dupNode(TOBAG411);


                    adaptor.addChild(root_0, TOBAG411_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 67 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:616:7: TOMAP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOMAP412=(CommonTree)match(input,TOMAP,FOLLOW_TOMAP_in_eid3383); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOMAP412_tree = (CommonTree)adaptor.dupNode(TOMAP412);


                    adaptor.addChild(root_0, TOMAP412_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 68 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:617:7: TOTUPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOTUPLE413=(CommonTree)match(input,TOTUPLE,FOLLOW_TOTUPLE_in_eid3391); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOTUPLE413_tree = (CommonTree)adaptor.dupNode(TOTUPLE413);


                    adaptor.addChild(root_0, TOTUPLE413_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:621:1: rel_op : ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES );
    public final AstValidator.rel_op_return rel_op() throws RecognitionException {
        AstValidator.rel_op_return retval = new AstValidator.rel_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_MATCHES420=null;
        AstValidator.rel_op_eq_return rel_op_eq414 =null;

        AstValidator.rel_op_ne_return rel_op_ne415 =null;

        AstValidator.rel_op_gt_return rel_op_gt416 =null;

        AstValidator.rel_op_gte_return rel_op_gte417 =null;

        AstValidator.rel_op_lt_return rel_op_lt418 =null;

        AstValidator.rel_op_lte_return rel_op_lte419 =null;


        CommonTree STR_OP_MATCHES420_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:621:8: ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES )
            int alt100=7;
            switch ( input.LA(1) ) {
            case NUM_OP_EQ:
            case STR_OP_EQ:
                {
                alt100=1;
                }
                break;
            case NUM_OP_NE:
            case STR_OP_NE:
                {
                alt100=2;
                }
                break;
            case NUM_OP_GT:
            case STR_OP_GT:
                {
                alt100=3;
                }
                break;
            case NUM_OP_GTE:
            case STR_OP_GTE:
                {
                alt100=4;
                }
                break;
            case NUM_OP_LT:
            case STR_OP_LT:
                {
                alt100=5;
                }
                break;
            case NUM_OP_LTE:
            case STR_OP_LTE:
                {
                alt100=6;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt100=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }

            switch (alt100) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:621:10: rel_op_eq
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_eq_in_rel_op3401);
                    rel_op_eq414=rel_op_eq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_eq414.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:622:10: rel_op_ne
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_ne_in_rel_op3412);
                    rel_op_ne415=rel_op_ne();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_ne415.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:623:10: rel_op_gt
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gt_in_rel_op3423);
                    rel_op_gt416=rel_op_gt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_gt416.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:624:10: rel_op_gte
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gte_in_rel_op3434);
                    rel_op_gte417=rel_op_gte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_gte417.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:625:10: rel_op_lt
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lt_in_rel_op3445);
                    rel_op_lt418=rel_op_lt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_lt418.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:626:10: rel_op_lte
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lte_in_rel_op3456);
                    rel_op_lte419=rel_op_lte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_lte419.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:627:10: STR_OP_MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_MATCHES420=(CommonTree)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_rel_op3467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES420_tree = (CommonTree)adaptor.dupNode(STR_OP_MATCHES420);


                    adaptor.addChild(root_0, STR_OP_MATCHES420_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_op_eq_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_eq"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:630:1: rel_op_eq : ( STR_OP_EQ | NUM_OP_EQ );
    public final AstValidator.rel_op_eq_return rel_op_eq() throws RecognitionException {
        AstValidator.rel_op_eq_return retval = new AstValidator.rel_op_eq_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set421=null;

        CommonTree set421_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:630:11: ( STR_OP_EQ | NUM_OP_EQ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set421=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_EQ||input.LA(1)==STR_OP_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set421_tree = (CommonTree)adaptor.dupNode(set421);


                adaptor.addChild(root_0, set421_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_eq"


    public static class rel_op_ne_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_ne"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:633:1: rel_op_ne : ( STR_OP_NE | NUM_OP_NE );
    public final AstValidator.rel_op_ne_return rel_op_ne() throws RecognitionException {
        AstValidator.rel_op_ne_return retval = new AstValidator.rel_op_ne_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set422=null;

        CommonTree set422_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:633:11: ( STR_OP_NE | NUM_OP_NE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set422=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_NE||input.LA(1)==STR_OP_NE ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set422_tree = (CommonTree)adaptor.dupNode(set422);


                adaptor.addChild(root_0, set422_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_ne"


    public static class rel_op_gt_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:636:1: rel_op_gt : ( STR_OP_GT | NUM_OP_GT );
    public final AstValidator.rel_op_gt_return rel_op_gt() throws RecognitionException {
        AstValidator.rel_op_gt_return retval = new AstValidator.rel_op_gt_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set423=null;

        CommonTree set423_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:636:11: ( STR_OP_GT | NUM_OP_GT )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set423=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_GT||input.LA(1)==STR_OP_GT ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set423_tree = (CommonTree)adaptor.dupNode(set423);


                adaptor.addChild(root_0, set423_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gt"


    public static class rel_op_gte_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:639:1: rel_op_gte : ( STR_OP_GTE | NUM_OP_GTE );
    public final AstValidator.rel_op_gte_return rel_op_gte() throws RecognitionException {
        AstValidator.rel_op_gte_return retval = new AstValidator.rel_op_gte_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set424=null;

        CommonTree set424_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:639:12: ( STR_OP_GTE | NUM_OP_GTE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set424=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_GTE||input.LA(1)==STR_OP_GTE ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set424_tree = (CommonTree)adaptor.dupNode(set424);


                adaptor.addChild(root_0, set424_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gte"


    public static class rel_op_lt_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:642:1: rel_op_lt : ( STR_OP_LT | NUM_OP_LT );
    public final AstValidator.rel_op_lt_return rel_op_lt() throws RecognitionException {
        AstValidator.rel_op_lt_return retval = new AstValidator.rel_op_lt_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set425=null;

        CommonTree set425_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:642:11: ( STR_OP_LT | NUM_OP_LT )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set425=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_LT||input.LA(1)==STR_OP_LT ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set425_tree = (CommonTree)adaptor.dupNode(set425);


                adaptor.addChild(root_0, set425_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lt"


    public static class rel_op_lte_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:645:1: rel_op_lte : ( STR_OP_LTE | NUM_OP_LTE );
    public final AstValidator.rel_op_lte_return rel_op_lte() throws RecognitionException {
        AstValidator.rel_op_lte_return retval = new AstValidator.rel_op_lte_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set426=null;

        CommonTree set426_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:645:12: ( STR_OP_LTE | NUM_OP_LTE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set426=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_LTE||input.LA(1)==STR_OP_LTE ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set426_tree = (CommonTree)adaptor.dupNode(set426);


                adaptor.addChild(root_0, set426_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lte"


    public static class rel_str_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:648:1: rel_str_op : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final AstValidator.rel_str_op_return rel_str_op() throws RecognitionException {
        AstValidator.rel_str_op_return retval = new AstValidator.rel_str_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set427=null;

        CommonTree set427_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:648:12: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set427=(CommonTree)input.LT(1);

            if ( (input.LA(1) >= STR_OP_EQ && input.LA(1) <= STR_OP_NE) ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set427_tree = (CommonTree)adaptor.dupNode(set427);


                adaptor.addChild(root_0, set427_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"

    // $ANTLR start synpred86_AstValidator
    public final void synpred86_AstValidator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:305:8: ( ^( MINUS expr expr ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:305:8: ^( MINUS expr expr )
        {
        match(input,MINUS,FOLLOW_MINUS_in_synpred86_AstValidator1431); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_expr_in_synpred86_AstValidator1433);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred86_AstValidator1435);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred86_AstValidator

    // $ANTLR start synpred90_AstValidator
    public final void synpred90_AstValidator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:309:8: ( ^( CAST_EXPR type expr ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:309:8: ^( CAST_EXPR type expr )
        {
        match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_synpred90_AstValidator1499); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred90_AstValidator1501);
        type();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred90_AstValidator1503);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred90_AstValidator

    // $ANTLR start synpred91_AstValidator
    public final void synpred91_AstValidator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:310:8: ( const_expr )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:310:8: const_expr
        {
        pushFollow(FOLLOW_const_expr_in_synpred91_AstValidator1514);
        const_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred91_AstValidator

    // $ANTLR start synpred94_AstValidator
    public final void synpred94_AstValidator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:313:8: ( ^( CAST_EXPR type_cast expr ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:313:8: ^( CAST_EXPR type_cast expr )
        {
        match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_synpred94_AstValidator1549); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_type_cast_in_synpred94_AstValidator1551);
        type_cast();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred94_AstValidator1553);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred94_AstValidator

    // $ANTLR start synpred110_AstValidator
    public final void synpred110_AstValidator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:31: ( INTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:31: INTEGER
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred110_AstValidator1790); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred110_AstValidator

    // $ANTLR start synpred111_AstValidator
    public final void synpred111_AstValidator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:41: ( LONGINTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:354:41: LONGINTEGER
        {
        match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_synpred111_AstValidator1794); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred111_AstValidator

    // $ANTLR start synpred112_AstValidator
    public final void synpred112_AstValidator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:357:33: ( DOUBLENUMBER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:357:33: DOUBLENUMBER
        {
        match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_synpred112_AstValidator1819); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred112_AstValidator

    // $ANTLR start synpred131_AstValidator
    public final void synpred131_AstValidator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:397:4: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:397:4: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item
        {
        pushFollow(FOLLOW_join_item_in_synpred131_AstValidator2042);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:397:38: ( OUTER )?
        int alt108=2;
        int LA108_0 = input.LA(1);

        if ( (LA108_0==OUTER) ) {
            alt108=1;
        }
        switch (alt108) {
            case 1 :
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:397:38: OUTER
                {
                match(input,OUTER,FOLLOW_OUTER_in_synpred131_AstValidator2058); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_join_item_in_synpred131_AstValidator2061);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred131_AstValidator

    // $ANTLR start synpred149_AstValidator
    public final void synpred149_AstValidator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:476:43: ( INTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstValidator.g:476:43: INTEGER
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred149_AstValidator2472); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred149_AstValidator

    // Delegated rules

    public final boolean synpred149_AstValidator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_AstValidator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_AstValidator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_AstValidator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_AstValidator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_AstValidator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_AstValidator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_AstValidator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_AstValidator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_AstValidator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_AstValidator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_AstValidator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_AstValidator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_AstValidator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_AstValidator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_AstValidator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_AstValidator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_AstValidator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_QUERY_in_query81 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_in_query83 = new BitSet(new long[]{0x0000000000000008L,0x0000000200000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_general_statement_in_statement95 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_statement_in_statement109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_split_statement118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATEMENT_in_general_statement129 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_general_statement133 = new BitSet(new long[]{0x46080121004A4000L,0x000400C210000800L});
    public static final BitSet FOLLOW_op_clause_in_general_statement140 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement142 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause156 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause158 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_op_clause384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_clause_in_op_clause398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause409 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_define_clause411 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_cmd_in_define_clause415 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_func_clause_in_define_clause419 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd440 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ship_clause_in_cmd444 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd468 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_input_clause_in_cmd492 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_output_clause_in_cmd517 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_error_clause_in_cmd542 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause581 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_path_list_in_ship_clause583 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list595 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause607 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_path_list_in_cache_clause609 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INPUT_in_input_clause622 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stream_cmd_in_input_clause624 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_STDIN_in_stream_cmd638 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd640 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STDOUT_in_stream_cmd660 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd662 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_stream_cmd682 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd684 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause698 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stream_cmd_in_output_clause700 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause714 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause719 = new BitSet(new long[]{0x0001000000000008L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause721 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOAD_in_load_clause738 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_filename_in_load_clause740 = new BitSet(new long[]{0x0000000000000048L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_load_clause742 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_as_clause_in_load_clause745 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_filename757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_as_clause767 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause769 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIELD_DEF_in_field_def788 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_field_def790 = new BitSet(new long[]{0x0800800404002A08L,0x0080000000000000L,0x0000000008001000L});
    public static final BitSet FOLLOW_type_in_field_def794 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIELD_DEF_WITHOUT_IDENTIFIER_in_field_def804 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_field_def806 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_field_def_in_field_def_list834 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_simple_type_in_type853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_in_type861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_in_type869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_simple_type894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_simple_type902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_simple_type910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_simple_type918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_simple_type926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_simple_type934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_simple_type942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_TYPE_in_tuple_type955 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_field_def_list_in_tuple_type957 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BAG_TYPE_in_bag_type971 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_bag_type973 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_tuple_type_in_bag_type976 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAP_TYPE_in_map_type990 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_map_type992 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNC_REF_in_func_clause1006 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_clause1008 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNC_in_func_clause1028 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_clause1030 = new BitSet(new long[]{0x0000000000000008L,0x0000000000400002L});
    public static final BitSet FOLLOW_func_args_in_func_clause1032 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_eid_in_func_name1044 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_set_in_func_name1048 = new BitSet(new long[]{0x6E1EF9E7845A7FF0L,0x000FFFFA5181EC04L,0x00000000C7040040L});
    public static final BitSet FOLLOW_eid_in_func_name1058 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args1083 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400002L});
    public static final BitSet FOLLOW_set_in_group_clause1105 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_group_item_in_group_clause1115 = new BitSet(new long[]{0x46080121004A4008L,0x000400C210410800L,0x0000000000000040L});
    public static final BitSet FOLLOW_group_type_in_group_clause1118 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause1121 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_type1133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_group_item1144 = new BitSet(new long[]{0x0000000000000410L,0x0040000000000000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item1148 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ALL_in_group_item1152 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ANY_in_group_item1156 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_alias_in_rel1183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_clause_in_rel1193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_parallel_clause_in_rel1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item1207 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_col_range_in_flatten_generated_item1211 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_flatten_generated_item1215 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_flatten_generated_item1219 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item1223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause1235 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_flatten_clause1237 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STORE_in_store_clause1250 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_store_clause1252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_filename_in_store_clause1254 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_store_clause1256 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause1270 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_filter_clause1272 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_filter_clause1274 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OR_in_cond1287 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1289 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_cond1291 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AND_in_cond1304 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1306 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_cond1308 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_in_cond1321 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1323 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NULL_in_cond1336 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1338 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_NOT_in_cond1340 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_op_in_cond1354 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1356 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond1358 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_func_eval_in_cond1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNC_EVAL_in_func_eval1379 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_eval1381 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_real_arg_in_func_eval1383 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_real_arg1395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_real_arg1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_expr1414 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1416 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1418 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_expr1431 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1433 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1435 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_expr1448 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1450 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1452 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIV_in_expr1465 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1467 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1469 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERCENT_in_expr1482 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1484 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1486 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_expr1499 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_expr1501 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1503 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_const_expr_in_expr1514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_expr_in_expr1523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEG_in_expr1534 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1536 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_expr1549 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_expr1551 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1553 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPR_IN_PAREN_in_expr1566 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1568 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_simple_type_in_type_cast1579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type_cast1583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_cast_in_type_cast1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_cast_in_type_cast1591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast1602 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast1604 = new BitSet(new long[]{0x0800800404002A08L,0x0100000000000000L,0x0000000010001000L});
    public static final BitSet FOLLOW_BAG_TYPE_CAST_in_bag_type_cast1618 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tuple_type_cast_in_bag_type_cast1620 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_projectable_expr_in_var_expr1632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_dot_proj_in_var_expr1636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_pound_proj_in_var_expr1640 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_func_eval_in_projectable_expr1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_projectable_expr1655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_projectable_expr1659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_dot_proj1670 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj1672 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_alias_in_col_alias_or_index1684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_index_in_col_alias_or_index1688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_col_index1710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COL_RANGE_in_col_range1721 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_ref_in_col_range1723 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range1726 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_ref_in_col_range1728 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_POUND_in_pound_proj1742 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_pound_proj1744 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BIN_EXPR_in_bin_expr1765 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_bin_expr1767 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_bin_expr1769 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_bin_expr1771 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause1784 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_limit_clause1786 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_INTEGER_in_limit_clause1790 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LONGINTEGER_in_limit_clause1794 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_limit_clause1798 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause1813 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_sample_clause1815 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_sample_clause1819 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_sample_clause1823 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ORDER_in_order_clause1838 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_order_clause1840 = new BitSet(new long[]{0x0000010002000000L,0x2000000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause1842 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_order_clause1844 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause1856 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_order_col_in_order_by_clause1887 = new BitSet(new long[]{0x0000010002000002L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_range_in_order_col1897 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_col_ref_in_order_col1920 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause1942 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_distinct_clause1944 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause1946 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause1960 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_partition_clause1962 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause1975 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause1977 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause1979 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_in_rel_list1991 = new BitSet(new long[]{0x46080121004A4002L,0x000400C210000800L,0x0000000000000040L});
    public static final BitSet FOLLOW_JOIN_in_join_clause2013 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause2015 = new BitSet(new long[]{0x0000000000000008L,0x0000000000410000L});
    public static final BitSet FOLLOW_join_type_in_join_clause2017 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause2020 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type2032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2042 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_join_sub_clause2044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause2058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_JOIN_ITEM_in_join_item2079 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_join_item2081 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item2083 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause2110 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_clause2114 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_col_range_in_join_group_by_expr2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_join_group_by_expr2135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_join_group_by_expr2139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause2150 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause2152 = new BitSet(new long[]{0x46080121004A4000L,0x000400C210000800L,0x0000000000000040L});
    public static final BitSet FOLLOW_rel_list_in_union_clause2155 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause2168 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_foreach_clause2170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_foreach_plan_in_foreach_clause2172 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_PLAN_SIMPLE_in_foreach_plan2185 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_generate_clause_in_foreach_plan2187 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_PLAN_COMPLEX_in_foreach_plan2208 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan2210 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_command_in_nested_blk2230 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_blk2233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_generate_clause2244 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause2246 = new BitSet(new long[]{0x900101128A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_NESTED_CMD_in_nested_command2261 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_nested_command2263 = new BitSet(new long[]{0x0200002100420000L,0x0000000000000800L,0x0000000000020000L});
    public static final BitSet FOLLOW_nested_op_in_nested_command2265 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NESTED_CMD_ASSI_in_nested_command2279 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_nested_command2281 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_nested_command2283 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op2313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op2327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op2341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op2355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op2369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NESTED_PROJ_in_nested_proj2394 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj2396 = new BitSet(new long[]{0x0000010002000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj2398 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter2413 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter2415 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_nested_filter2417 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort2430 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort2432 = new BitSet(new long[]{0x0000010002000000L,0x2000000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort2435 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_nested_sort2437 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct2451 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct2453 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit2466 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit2468 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit2472 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_nested_limit2476 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross2491 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross2493 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach2506 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach2508 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_foreach2510 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input2521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input2525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list2534 = new BitSet(new long[]{0x0000010002000002L,0x0000000000000000L,0x0000000000020040L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause2546 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_stream_clause2548 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_set_in_stream_clause2550 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause2560 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause2574 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause2576 = new BitSet(new long[]{0x0000000000000000L,0x0000004000400000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause2578 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause2581 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause2583 = new BitSet(new long[]{0x0000000040000008L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause2585 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause2599 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_split_clause2601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause2603 = new BitSet(new long[]{0x0000000000000008L,0x0000000000001000L,0x0000000000400000L});
    public static final BitSet FOLLOW_split_otherwise_in_split_clause2606 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SPLIT_BRANCH_in_split_branch2621 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_split_branch2623 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_split_branch2625 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise2644 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_split_otherwise2646 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_alias_col_ref_in_col_ref2662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dollar_col_ref_in_col_ref2666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_dollar_col_ref2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_const_expr2697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal2706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_in_literal2710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_in_literal2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_in_literal2718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_scalar_in_scalar2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_scalar2731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_scalar2735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_scalar2739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_scalar2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_num_scalar2752 = new BitSet(new long[]{0x1001001008000000L});
    public static final BitSet FOLLOW_set_in_num_scalar2755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_VAL_in_map2782 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_keyvalue_in_map2784 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KEY_VAL_PAIR_in_keyvalue2798 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_map_key_in_keyvalue2800 = new BitSet(new long[]{0x9001001088000000L,0x0201000000400000L,0x0000000020042000L});
    public static final BitSet FOLLOW_const_expr_in_keyvalue2802 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_map_key2813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_VAL_in_bag2824 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tuple_in_bag2826 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_TUPLE_VAL_in_tuple2840 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_literal_in_tuple2842 = new BitSet(new long[]{0x9001001088000008L,0x0201000000400000L,0x0000000020042000L});
    public static final BitSet FOLLOW_rel_str_op_in_eid2855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid2863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid2871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid2879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid2903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_eid2911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid2919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid2943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid2959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid2967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid2975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid2983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid2991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid2999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid3007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid3023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid3031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid3039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid3047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid3063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid3079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid3095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVAL_in_eid3103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid3111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid3119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_eid3127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid3135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid3143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid3151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid3159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid3167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid3175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid3183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid3191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid3199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid3207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_eid3215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid3223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid3231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid3239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid3247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid3255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid3263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid3271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid3279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid3287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid3295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid3303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid3311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid3319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid3327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid3335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid3351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid3359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_eid3367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOBAG_in_eid3375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOMAP_in_eid3383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOTUPLE_in_eid3391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_eq_in_rel_op3401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_ne_in_rel_op3412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gt_in_rel_op3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gte_in_rel_op3434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lt_in_rel_op3445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lte_in_rel_op3456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_rel_op3467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred86_AstValidator1431 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_synpred86_AstValidator1433 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_synpred86_AstValidator1435 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_synpred90_AstValidator1499 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_synpred90_AstValidator1501 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_synpred90_AstValidator1503 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_const_expr_in_synpred91_AstValidator1514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_EXPR_in_synpred94_AstValidator1549 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_synpred94_AstValidator1551 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_synpred94_AstValidator1553 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INTEGER_in_synpred110_AstValidator1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_synpred111_AstValidator1794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_synpred112_AstValidator1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_synpred131_AstValidator2042 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_synpred131_AstValidator2044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_OUTER_in_synpred131_AstValidator2058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_join_item_in_synpred131_AstValidator2061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred149_AstValidator2472 = new BitSet(new long[]{0x0000000000000002L});

}