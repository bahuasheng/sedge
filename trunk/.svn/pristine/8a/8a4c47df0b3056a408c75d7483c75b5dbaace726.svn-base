package edu.umass.cs.pig.test;

import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Map;
import java.util.Properties;
import java.util.Random;

import org.apache.pig.ExecType;
import org.apache.pig.PigServer;
import org.apache.pig.backend.executionengine.ExecException;
import org.apache.pig.data.DataBag;
import org.apache.pig.impl.PigContext;
import org.apache.pig.newplan.Operator;
import org.junit.BeforeClass;
import org.junit.Test;

public class TestExGen4SDSS {
	static PigContext pigContext = new PigContext(ExecType.LOCAL, new Properties());

//  private OSValidator z3 = OSValidator.get();
//  private Z3Context z4 = Z3Context.get();
  static int MAX = 100;
  static int MIN = 10;
  static String A, I;
  static int start = 0;
  static  File fileA, fileI;
  
  {
      try {
          pigContext.connect();
      } catch (ExecException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
      }
  }

  @BeforeClass
  public static void oneTimeSetup() throws Exception {
     

      fileA = File.createTempFile("dataA", ".dat");
      fileI = File.createTempFile("dataI", ".dat");
      
      writeData(fileA);
      writeData6(fileI);


      fileA.deleteOnExit();
      
      A = "'" + fileA.getPath() + "'";
      I = "'" + fileI.getPath() + "'";
   
      System.out.println("A : " + A + "\n" + "I : " + I + "\n");
      System.out.println("Test data created.");
  }
	
	private static void writeData(File dataFile) throws Exception {
	      // File dataFile = File.createTempFile(name, ".dat");
	      FileOutputStream dat = new FileOutputStream(dataFile);

	      Random rand = new Random();

	      for (int i = 0; i < MIN; i++)
	          dat.write((rand.nextInt(10) + "\t" + rand.nextInt(10) + "\n")
	                  .getBytes());

	      dat.close();
	  }
	
	private static void writeData6(File dataFile) throws Exception {
		  FileOutputStream dat = new FileOutputStream(dataFile);

	      Random rand = new Random();

	      for (int i = 0; i < MIN; i++)
	          dat.write(( rand.nextDouble() + "\t" + 10*rand.nextDouble() + "\n")
	                  .getBytes());

	      dat.close();
	}
	
	@Test
	  public void testBasic() throws Exception {

		  PigServer pigServer = new PigServer(pigContext);

	      pigServer.registerQuery("A = load " + A
	              + " using PigStorage() as (run : int, field : int);");
	      pigServer.registerQuery("B = filter A by run == 1336 and field ==11 ;");
	      Map<Operator, DataBag> derivedData = pigServer.getExamples2("B");

	      assertTrue(derivedData != null);
	  }//
	
	@Test
	  public void testGalaxies2Criteria() throws Exception {

		  PigServer pigServer = new PigServer(pigContext);

	      pigServer.registerQuery("A = load " + I
	              + " using PigStorage() as (r : double, extinction_r : double);");
	      pigServer.registerQuery("B = filter A by r < 22.0 and  r > 0.175 ;");
	      Map<Operator, DataBag> derivedData = pigServer.getExamples2("B");

	      assertTrue(derivedData != null);
	  }// 
	
	
	

}
