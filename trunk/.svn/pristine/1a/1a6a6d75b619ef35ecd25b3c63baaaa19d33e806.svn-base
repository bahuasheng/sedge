// $ANTLR 3.4 /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g 2012-02-22 16:40:35

package org.apache.pig.parser;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.pig.impl.PigContext;
import org.apache.pig.impl.builtin.GFAny;
import org.apache.pig.impl.logicalLayer.FrontendException;
import org.apache.pig.impl.streaming.StreamingCommand;
import org.apache.pig.impl.streaming.StreamingCommand.HandleSpec;
import org.apache.pig.impl.util.MultiMap;
import org.apache.pig.impl.util.NumValCarrier;
import org.apache.pig.impl.plan.PlanValidationException;
import org.apache.pig.newplan.Operator;
import org.apache.pig.newplan.logical.expression.AddExpression;
import org.apache.pig.newplan.logical.expression.AndExpression;
import org.apache.pig.newplan.logical.expression.BinCondExpression;
import org.apache.pig.newplan.logical.expression.CastExpression;
import org.apache.pig.newplan.logical.expression.ConstantExpression;
import org.apache.pig.newplan.logical.expression.DereferenceExpression;
import org.apache.pig.newplan.logical.expression.DivideExpression;
import org.apache.pig.newplan.logical.expression.EqualExpression;
import org.apache.pig.newplan.logical.expression.GreaterThanEqualExpression;
import org.apache.pig.newplan.logical.expression.GreaterThanExpression;
import org.apache.pig.newplan.logical.expression.IsNullExpression;
import org.apache.pig.newplan.logical.expression.LessThanEqualExpression;
import org.apache.pig.newplan.logical.expression.LessThanExpression;
import org.apache.pig.newplan.logical.expression.LogicalExpression;
import org.apache.pig.newplan.logical.expression.LogicalExpressionPlan;
import org.apache.pig.newplan.logical.expression.MapLookupExpression;
import org.apache.pig.newplan.logical.expression.ModExpression;
import org.apache.pig.newplan.logical.expression.MultiplyExpression;
import org.apache.pig.newplan.logical.expression.NegativeExpression;
import org.apache.pig.newplan.logical.expression.NotEqualExpression;
import org.apache.pig.newplan.logical.expression.NotExpression;
import org.apache.pig.newplan.logical.expression.OrExpression;
import org.apache.pig.newplan.logical.expression.ProjectExpression;
import org.apache.pig.newplan.logical.expression.RegexExpression;
import org.apache.pig.newplan.logical.expression.ScalarExpression;
import org.apache.pig.newplan.logical.expression.SubtractExpression;
import org.apache.pig.newplan.logical.expression.UserFuncExpression;
import org.apache.pig.newplan.logical.relational.LOCogroup;
import org.apache.pig.newplan.logical.relational.LOFilter;
import org.apache.pig.newplan.logical.relational.LOForEach;
import org.apache.pig.newplan.logical.relational.LOGenerate;
import org.apache.pig.newplan.logical.relational.LOLimit;
import org.apache.pig.newplan.logical.relational.LOJoin;
import org.apache.pig.newplan.logical.relational.LOSort;
import org.apache.pig.newplan.logical.relational.LOSplitOutput;
import org.apache.pig.newplan.logical.relational.LogicalPlan;
import org.apache.pig.newplan.logical.relational.LogicalRelationalOperator;
import org.apache.pig.newplan.logical.relational.LogicalSchema;
import org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema;
import org.apache.pig.newplan.logical.relational.LOCogroup.GROUPTYPE;
import org.apache.pig.newplan.logical.relational.LOJoin.JOINTYPE;
import org.apache.pig.FuncSpec;
import org.apache.pig.builtin.PigStreaming;
import org.apache.pig.data.DataBag;
import org.apache.pig.data.DataType;
import org.apache.pig.data.Tuple;
import java.util.Arrays;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;


/**
 * Grammar file for Pig tree parser (for schema alias validation).
 *
 * NOTE: THIS FILE IS BASED ON QueryParser.g, SO IF YOU CHANGE THAT FILE, YOU WILL 
 *       PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO THIS FILE AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class LogicalPlanGenerator extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AND", "AS", "ASC", "BAG", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CHARARRAY", "COGROUP", "COLON", "COMMA", "CROSS", "DCOLON", "DEFINE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "EQUAL", "EXECCOMMAND", "FALSE", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER_L", "IF", "IMPORT", "INNER", "INPUT", "INT", "INTEGER", "INTO", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FIELD_DEF_WITHOUT_IDENTIFIER", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "IDENTIFIER", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "NULL", "PARAMS", "QUERY", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL", "EVAL", "MATCHES"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AND=5;
    public static final int AS=6;
    public static final int ASC=7;
    public static final int BAG=8;
    public static final int BOOLEAN=9;
    public static final int BY=10;
    public static final int BYTEARRAY=11;
    public static final int CACHE=12;
    public static final int CHARARRAY=13;
    public static final int COGROUP=14;
    public static final int COLON=15;
    public static final int COMMA=16;
    public static final int CROSS=17;
    public static final int DCOLON=18;
    public static final int DEFINE=19;
    public static final int DESC=20;
    public static final int DIGIT=21;
    public static final int DISTINCT=22;
    public static final int DIV=23;
    public static final int DOLLAR=24;
    public static final int DOLLARVAR=25;
    public static final int DOUBLE=26;
    public static final int DOUBLENUMBER=27;
    public static final int DOUBLE_PERIOD=28;
    public static final int EQUAL=29;
    public static final int EXECCOMMAND=30;
    public static final int FALSE=31;
    public static final int FILTER=32;
    public static final int FLATTEN=33;
    public static final int FLOAT=34;
    public static final int FLOATINGPOINT=35;
    public static final int FLOATNUMBER=36;
    public static final int FOREACH=37;
    public static final int FULL=38;
    public static final int GENERATE=39;
    public static final int GROUP=40;
    public static final int ID=41;
    public static final int IDENTIFIER_L=42;
    public static final int IF=43;
    public static final int IMPORT=44;
    public static final int INNER=45;
    public static final int INPUT=46;
    public static final int INT=47;
    public static final int INTEGER=48;
    public static final int INTO=49;
    public static final int IS=50;
    public static final int JOIN=51;
    public static final int LEFT=52;
    public static final int LEFT_BRACKET=53;
    public static final int LEFT_CURLY=54;
    public static final int LEFT_PAREN=55;
    public static final int LETTER=56;
    public static final int LIMIT=57;
    public static final int LOAD=58;
    public static final int LONG=59;
    public static final int LONGINTEGER=60;
    public static final int MAP=61;
    public static final int MAPREDUCE=62;
    public static final int MINUS=63;
    public static final int ML_COMMENT=64;
    public static final int MULTILINE_QUOTEDSTRING=65;
    public static final int NOT=66;
    public static final int NUM_OP_EQ=67;
    public static final int NUM_OP_GT=68;
    public static final int NUM_OP_GTE=69;
    public static final int NUM_OP_LT=70;
    public static final int NUM_OP_LTE=71;
    public static final int NUM_OP_NE=72;
    public static final int ONSCHEMA=73;
    public static final int OR=74;
    public static final int ORDER=75;
    public static final int OTHERWISE=76;
    public static final int OUTER=77;
    public static final int OUTPUT=78;
    public static final int PARALLEL=79;
    public static final int PARTITION=80;
    public static final int PERCENT=81;
    public static final int PERIOD=82;
    public static final int PLUS=83;
    public static final int POUND=84;
    public static final int QMARK=85;
    public static final int QUOTEDSTRING=86;
    public static final int RETURNS=87;
    public static final int RIGHT=88;
    public static final int RIGHT_BRACKET=89;
    public static final int RIGHT_CURLY=90;
    public static final int RIGHT_PAREN=91;
    public static final int SAMPLE=92;
    public static final int SEMI_COLON=93;
    public static final int SHIP=94;
    public static final int SL_COMMENT=95;
    public static final int SPECIALCHAR=96;
    public static final int SPLIT=97;
    public static final int STAR=98;
    public static final int STDERROR=99;
    public static final int STDIN=100;
    public static final int STDOUT=101;
    public static final int STORE=102;
    public static final int STREAM=103;
    public static final int STR_OP_EQ=104;
    public static final int STR_OP_GT=105;
    public static final int STR_OP_GTE=106;
    public static final int STR_OP_LT=107;
    public static final int STR_OP_LTE=108;
    public static final int STR_OP_MATCHES=109;
    public static final int STR_OP_NE=110;
    public static final int THROUGH=111;
    public static final int TRUE=112;
    public static final int TUPLE=113;
    public static final int UNION=114;
    public static final int USING=115;
    public static final int VOID=116;
    public static final int WS=117;
    public static final int ANY=118;
    public static final int BAG_TYPE=119;
    public static final int BAG_TYPE_CAST=120;
    public static final int BAG_VAL=121;
    public static final int BIN_EXPR=122;
    public static final int BOOL=123;
    public static final int CAST_EXPR=124;
    public static final int COL_RANGE=125;
    public static final int EXPR_IN_PAREN=126;
    public static final int FIELD_DEF=127;
    public static final int FIELD_DEF_WITHOUT_IDENTIFIER=128;
    public static final int FOREACH_PLAN_COMPLEX=129;
    public static final int FOREACH_PLAN_SIMPLE=130;
    public static final int FUNC=131;
    public static final int FUNC_EVAL=132;
    public static final int FUNC_REF=133;
    public static final int IDENTIFIER=134;
    public static final int JOIN_ITEM=135;
    public static final int KEY_VAL_PAIR=136;
    public static final int MACRO_BODY=137;
    public static final int MACRO_DEF=138;
    public static final int MACRO_INLINE=139;
    public static final int MAP_TYPE=140;
    public static final int MAP_VAL=141;
    public static final int NEG=142;
    public static final int NESTED_CMD=143;
    public static final int NESTED_CMD_ASSI=144;
    public static final int NESTED_PROJ=145;
    public static final int NULL=146;
    public static final int PARAMS=147;
    public static final int QUERY=148;
    public static final int RETURN_VAL=149;
    public static final int SPLIT_BRANCH=150;
    public static final int STATEMENT=151;
    public static final int TOBAG=152;
    public static final int TOMAP=153;
    public static final int TOTUPLE=154;
    public static final int TUPLE_TYPE=155;
    public static final int TUPLE_TYPE_CAST=156;
    public static final int TUPLE_VAL=157;
    public static final int EVAL=158;
    public static final int MATCHES=159;

    // delegates
    public TreeParser[] getDelegates() {
        return new TreeParser[] {};
    }

    // delegators

    protected static class GScope_scope {
        LogicalRelationalOperator currentOp;
    }
    protected Stack GScope_stack = new Stack();



    public LogicalPlanGenerator(TreeNodeStream input) {
        this(input, new RecognizerSharedState());
    }
    public LogicalPlanGenerator(TreeNodeStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return LogicalPlanGenerator.tokenNames; }
    public String getGrammarFileName() { return "/nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g"; }


    private static Log log = LogFactory.getLog( LogicalPlanGenerator.class );

    private LogicalPlanBuilder builder = null;

    private boolean inForeachPlan = false;

    private boolean inNestedCommand = false;

    public LogicalPlan getLogicalPlan() {
        return builder.getPlan();
    }

    public Map<String, Operator> getOperators() {
        return builder.getOperators();
    }

    @Override
    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) 
    throws RecognitionException {
        throw new MismatchedTokenException( ttype, input );
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    throws RecognitionException {
        throw e;
    }

    public LogicalPlanGenerator(TreeNodeStream input, LogicalPlanBuilder builder) {
        this(input, new RecognizerSharedState());
        this.builder = builder;
    }

    public LogicalPlanGenerator(TreeNodeStream input, PigContext pigContext, String scope,
        Map<String, String> fileNameMap) {
        this( input );
        builder = new LogicalPlanBuilder( pigContext, scope, fileNameMap, input );
    }



    public static class query_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:150:1: query : ^( QUERY ( statement )* ) ;
    public final LogicalPlanGenerator.query_return query() throws RecognitionException {
        LogicalPlanGenerator.query_return retval = new LogicalPlanGenerator.query_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUERY1=null;
        LogicalPlanGenerator.statement_return statement2 =null;


        CommonTree QUERY1_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:150:7: ( ^( QUERY ( statement )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:150:9: ^( QUERY ( statement )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            QUERY1=(CommonTree)match(input,QUERY,FOLLOW_QUERY_in_query88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUERY1_tree = (CommonTree)adaptor.dupNode(QUERY1);


            root_1 = (CommonTree)adaptor.becomeRoot(QUERY1_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:150:18: ( statement )*
                loop1:
                do {
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==SPLIT||LA1_0==STATEMENT) ) {
                        alt1=1;
                    }


                    switch (alt1) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:150:18: statement
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_statement_in_query90);
                	    statement2=statement();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, statement2.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop1;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    protected static class statement_scope {
        String alias;
        Integer parallel;
        String inputAlias;
        int inputIndex;
    }
    protected Stack statement_stack = new Stack();


    public static class statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:153:1: statement : ( general_statement | split_statement );
    public final LogicalPlanGenerator.statement_return statement() throws RecognitionException {
        statement_stack.push(new statement_scope());
        LogicalPlanGenerator.statement_return retval = new LogicalPlanGenerator.statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.general_statement_return general_statement3 =null;

        LogicalPlanGenerator.split_statement_return split_statement4 =null;




            ((statement_scope)statement_stack.peek()).inputIndex = 0;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:164:2: ( general_statement | split_statement )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==STATEMENT) ) {
                alt2=1;
            }
            else if ( (LA2_0==SPLIT) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:164:4: general_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_general_statement_in_statement112);
                    general_statement3=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, general_statement3.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:165:4: split_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_statement_in_statement117);
                    split_statement4=split_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, split_statement4.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            statement_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class split_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:168:1: split_statement : split_clause ;
    public final LogicalPlanGenerator.split_statement_return split_statement() throws RecognitionException {
        LogicalPlanGenerator.split_statement_return retval = new LogicalPlanGenerator.split_statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.split_clause_return split_clause5 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:168:17: ( split_clause )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:168:19: split_clause
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_split_clause_in_split_statement126);
            split_clause5=split_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, split_clause5.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_statement"


    public static class general_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:171:1: general_statement : ^( STATEMENT ( alias )? oa= op_clause ( parallel_clause )? ) ;
    public final LogicalPlanGenerator.general_statement_return general_statement() throws RecognitionException {
        LogicalPlanGenerator.general_statement_return retval = new LogicalPlanGenerator.general_statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STATEMENT6=null;
        LogicalPlanGenerator.op_clause_return oa =null;

        LogicalPlanGenerator.alias_return alias7 =null;

        LogicalPlanGenerator.parallel_clause_return parallel_clause8 =null;


        CommonTree STATEMENT6_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:172:3: ( ^( STATEMENT ( alias )? oa= op_clause ( parallel_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:172:3: ^( STATEMENT ( alias )? oa= op_clause ( parallel_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STATEMENT6=(CommonTree)match(input,STATEMENT,FOLLOW_STATEMENT_in_general_statement138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STATEMENT6_tree = (CommonTree)adaptor.dupNode(STATEMENT6);


            root_1 = (CommonTree)adaptor.becomeRoot(STATEMENT6_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:172:16: ( alias )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IDENTIFIER) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:172:18: alias
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_general_statement142);
                    alias7=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, alias7.getTree());


                    if ( state.backtracking==0 ) { ((statement_scope)statement_stack.peek()).alias = (alias7!=null?alias7.name:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_op_clause_in_general_statement153);
            oa=op_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, oa.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:172:79: ( parallel_clause )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==PARALLEL) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:172:79: parallel_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_parallel_clause_in_general_statement155);
                    parallel_clause8=parallel_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, parallel_clause8.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                  Operator op = builder.lookupOperator( (oa!=null?oa.alias:null) );
                  builder.setParallel( (LogicalRelationalOperator)op, ((statement_scope)statement_stack.peek()).parallel );
              }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class parallel_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:179:1: parallel_clause : ^( PARALLEL INTEGER ) ;
    public final LogicalPlanGenerator.parallel_clause_return parallel_clause() throws RecognitionException {
        LogicalPlanGenerator.parallel_clause_return retval = new LogicalPlanGenerator.parallel_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PARALLEL9=null;
        CommonTree INTEGER10=null;

        CommonTree PARALLEL9_tree=null;
        CommonTree INTEGER10_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:180:2: ( ^( PARALLEL INTEGER ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:180:4: ^( PARALLEL INTEGER )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PARALLEL9=(CommonTree)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL9_tree = (CommonTree)adaptor.dupNode(PARALLEL9);


            root_1 = (CommonTree)adaptor.becomeRoot(PARALLEL9_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            INTEGER10=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER10_tree = (CommonTree)adaptor.dupNode(INTEGER10);


            adaptor.addChild(root_1, INTEGER10_tree);
            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   ((statement_scope)statement_stack.peek()).parallel = Integer.parseInt( (INTEGER10!=null?INTEGER10.getText():null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class alias_return extends TreeRuleReturnScope {
        public String name;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:186:1: alias returns [String name] : IDENTIFIER ;
    public final LogicalPlanGenerator.alias_return alias() throws RecognitionException {
        LogicalPlanGenerator.alias_return retval = new LogicalPlanGenerator.alias_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree IDENTIFIER11=null;

        CommonTree IDENTIFIER11_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:186:27: ( IDENTIFIER )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:186:29: IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            IDENTIFIER11=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER11_tree = (CommonTree)adaptor.dupNode(IDENTIFIER11);


            adaptor.addChild(root_0, IDENTIFIER11_tree);
            }


            if ( state.backtracking==0 ) { retval.name = (IDENTIFIER11!=null?IDENTIFIER11.getText():null); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias"


    public static class op_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:189:1: op_clause returns [String alias] : ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause | foreach_clause );
    public final LogicalPlanGenerator.op_clause_return op_clause() throws RecognitionException {
        LogicalPlanGenerator.op_clause_return retval = new LogicalPlanGenerator.op_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.define_clause_return define_clause12 =null;

        LogicalPlanGenerator.load_clause_return load_clause13 =null;

        LogicalPlanGenerator.group_clause_return group_clause14 =null;

        LogicalPlanGenerator.store_clause_return store_clause15 =null;

        LogicalPlanGenerator.filter_clause_return filter_clause16 =null;

        LogicalPlanGenerator.distinct_clause_return distinct_clause17 =null;

        LogicalPlanGenerator.limit_clause_return limit_clause18 =null;

        LogicalPlanGenerator.sample_clause_return sample_clause19 =null;

        LogicalPlanGenerator.order_clause_return order_clause20 =null;

        LogicalPlanGenerator.cross_clause_return cross_clause21 =null;

        LogicalPlanGenerator.join_clause_return join_clause22 =null;

        LogicalPlanGenerator.union_clause_return union_clause23 =null;

        LogicalPlanGenerator.stream_clause_return stream_clause24 =null;

        LogicalPlanGenerator.mr_clause_return mr_clause25 =null;

        LogicalPlanGenerator.foreach_clause_return foreach_clause26 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:189:33: ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause | foreach_clause )
            int alt5=15;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt5=1;
                }
                break;
            case LOAD:
                {
                alt5=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt5=3;
                }
                break;
            case STORE:
                {
                alt5=4;
                }
                break;
            case FILTER:
                {
                alt5=5;
                }
                break;
            case DISTINCT:
                {
                alt5=6;
                }
                break;
            case LIMIT:
                {
                alt5=7;
                }
                break;
            case SAMPLE:
                {
                alt5=8;
                }
                break;
            case ORDER:
                {
                alt5=9;
                }
                break;
            case CROSS:
                {
                alt5=10;
                }
                break;
            case JOIN:
                {
                alt5=11;
                }
                break;
            case UNION:
                {
                alt5=12;
                }
                break;
            case STREAM:
                {
                alt5=13;
                }
                break;
            case MAPREDUCE:
                {
                alt5=14;
                }
                break;
            case FOREACH:
                {
                alt5=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:190:13: define_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_define_clause_in_op_clause221);
                    define_clause12=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, define_clause12.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:191:13: load_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_load_clause_in_op_clause236);
                    load_clause13=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, load_clause13.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (load_clause13!=null?load_clause13.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:192:13: group_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_group_clause_in_op_clause252);
                    group_clause14=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, group_clause14.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (group_clause14!=null?group_clause14.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:193:13: store_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_store_clause_in_op_clause268);
                    store_clause15=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, store_clause15.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (store_clause15!=null?store_clause15.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:194:13: filter_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_filter_clause_in_op_clause284);
                    filter_clause16=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, filter_clause16.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (filter_clause16!=null?filter_clause16.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:195:13: distinct_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_distinct_clause_in_op_clause300);
                    distinct_clause17=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, distinct_clause17.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (distinct_clause17!=null?distinct_clause17.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:196:13: limit_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_limit_clause_in_op_clause316);
                    limit_clause18=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, limit_clause18.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (limit_clause18!=null?limit_clause18.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:197:13: sample_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sample_clause_in_op_clause332);
                    sample_clause19=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sample_clause19.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (sample_clause19!=null?sample_clause19.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:198:13: order_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_order_clause_in_op_clause348);
                    order_clause20=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, order_clause20.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (order_clause20!=null?order_clause20.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:199:13: cross_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cross_clause_in_op_clause364);
                    cross_clause21=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cross_clause21.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (cross_clause21!=null?cross_clause21.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:200:13: join_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_clause_in_op_clause380);
                    join_clause22=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_clause22.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (join_clause22!=null?join_clause22.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:201:13: union_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_union_clause_in_op_clause396);
                    union_clause23=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, union_clause23.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (union_clause23!=null?union_clause23.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:202:13: stream_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_stream_clause_in_op_clause412);
                    stream_clause24=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, stream_clause24.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (stream_clause24!=null?stream_clause24.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:203:13: mr_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_mr_clause_in_op_clause428);
                    mr_clause25=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, mr_clause25.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (mr_clause25!=null?mr_clause25.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:204:13: foreach_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_foreach_clause_in_op_clause444);
                    foreach_clause26=foreach_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, foreach_clause26.getTree());


                    if ( state.backtracking==0 ) { retval.alias = (foreach_clause26!=null?foreach_clause26.alias:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class define_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:207:1: define_clause : ( ^( DEFINE alias cmd[$alias.name] ) | ^( DEFINE alias func_clause[FunctionType.UNKNOWNFUNC] ) );
    public final LogicalPlanGenerator.define_clause_return define_clause() throws RecognitionException {
        LogicalPlanGenerator.define_clause_return retval = new LogicalPlanGenerator.define_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DEFINE27=null;
        CommonTree DEFINE30=null;
        LogicalPlanGenerator.alias_return alias28 =null;

        LogicalPlanGenerator.cmd_return cmd29 =null;

        LogicalPlanGenerator.alias_return alias31 =null;

        LogicalPlanGenerator.func_clause_return func_clause32 =null;


        CommonTree DEFINE27_tree=null;
        CommonTree DEFINE30_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:208:2: ( ^( DEFINE alias cmd[$alias.name] ) | ^( DEFINE alias func_clause[FunctionType.UNKNOWNFUNC] ) )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==DEFINE) ) {
                int LA6_1 = input.LA(2);

                if ( (LA6_1==DOWN) ) {
                    int LA6_2 = input.LA(3);

                    if ( (LA6_2==IDENTIFIER) ) {
                        int LA6_3 = input.LA(4);

                        if ( (LA6_3==EXECCOMMAND) ) {
                            alt6=1;
                        }
                        else if ( (LA6_3==FUNC||LA6_3==FUNC_REF) ) {
                            alt6=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 6, 3, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 6, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:208:4: ^( DEFINE alias cmd[$alias.name] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    DEFINE27=(CommonTree)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE27_tree = (CommonTree)adaptor.dupNode(DEFINE27);


                    root_1 = (CommonTree)adaptor.becomeRoot(DEFINE27_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_define_clause461);
                    alias28=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, alias28.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cmd_in_define_clause463);
                    cmd29=cmd((alias28!=null?alias28.name:null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cmd29.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           builder.defineCommand( (alias28!=null?alias28.name:null), (cmd29!=null?cmd29.command:null) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:212:4: ^( DEFINE alias func_clause[FunctionType.UNKNOWNFUNC] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    DEFINE30=(CommonTree)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE30_tree = (CommonTree)adaptor.dupNode(DEFINE30);


                    root_1 = (CommonTree)adaptor.becomeRoot(DEFINE30_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_define_clause481);
                    alias31=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, alias31.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_define_clause483);
                    func_clause32=func_clause(FunctionType.UNKNOWNFUNC);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause32.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           builder.defineFunction( (alias31!=null?alias31.name:null), (func_clause32!=null?func_clause32.funcSpec:null) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class cmd_return extends TreeRuleReturnScope {
        public StreamingCommand command;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:218:1: cmd[String alias] returns [StreamingCommand command] : ^( EXECCOMMAND ( ship_clause[shipPaths] | cache_clause[cachePaths] | input_clause | output_clause | error_clause )* ) ;
    public final LogicalPlanGenerator.cmd_return cmd(String alias) throws RecognitionException {
        LogicalPlanGenerator.cmd_return retval = new LogicalPlanGenerator.cmd_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree EXECCOMMAND33=null;
        LogicalPlanGenerator.ship_clause_return ship_clause34 =null;

        LogicalPlanGenerator.cache_clause_return cache_clause35 =null;

        LogicalPlanGenerator.input_clause_return input_clause36 =null;

        LogicalPlanGenerator.output_clause_return output_clause37 =null;

        LogicalPlanGenerator.error_clause_return error_clause38 =null;


        CommonTree EXECCOMMAND33_tree=null;


            List<String> shipPaths = new ArrayList<String>();
            List<String> cachePaths = new ArrayList<String>();
            SourceLocation loc = new SourceLocation( (PigParserNode)((CommonTree)retval.start) );

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:224:2: ( ^( EXECCOMMAND ( ship_clause[shipPaths] | cache_clause[cachePaths] | input_clause | output_clause | error_clause )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:224:4: ^( EXECCOMMAND ( ship_clause[shipPaths] | cache_clause[cachePaths] | input_clause | output_clause | error_clause )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            EXECCOMMAND33=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND33_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND33);


            root_1 = (CommonTree)adaptor.becomeRoot(EXECCOMMAND33_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:224:19: ( ship_clause[shipPaths] | cache_clause[cachePaths] | input_clause | output_clause | error_clause )*
                loop7:
                do {
                    int alt7=6;
                    switch ( input.LA(1) ) {
                    case SHIP:
                        {
                        alt7=1;
                        }
                        break;
                    case CACHE:
                        {
                        alt7=2;
                        }
                        break;
                    case INPUT:
                        {
                        alt7=3;
                        }
                        break;
                    case OUTPUT:
                        {
                        alt7=4;
                        }
                        break;
                    case STDERROR:
                        {
                        alt7=5;
                        }
                        break;

                    }

                    switch (alt7) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:224:21: ship_clause[shipPaths]
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_ship_clause_in_cmd516);
                	    ship_clause34=ship_clause(shipPaths);

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, ship_clause34.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 2 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:224:46: cache_clause[cachePaths]
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_cache_clause_in_cmd521);
                	    cache_clause35=cache_clause(cachePaths);

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, cache_clause35.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 3 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:224:73: input_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_input_clause_in_cmd526);
                	    input_clause36=input_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, input_clause36.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 4 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:224:88: output_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_output_clause_in_cmd530);
                	    output_clause37=output_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, output_clause37.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 5 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:224:104: error_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_error_clause_in_cmd534);
                	    error_clause38=error_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, error_clause38.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop7;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.command = builder.buildCommand( loc, builder.unquote( (EXECCOMMAND33!=null?EXECCOMMAND33.getText():null) ), shipPaths,
                       cachePaths, (input_clause36!=null?input_clause36.inputHandleSpecs:null), (output_clause37!=null?output_clause37.outputHandleSpecs:null),
                       (error_clause38!=null?error_clause38.dir:null), (error_clause38!=null?error_clause38.limit:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class ship_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:232:1: ship_clause[List<String> paths] : ^( SHIP ( path_list[$paths] )? ) ;
    public final LogicalPlanGenerator.ship_clause_return ship_clause(List<String> paths) throws RecognitionException {
        LogicalPlanGenerator.ship_clause_return retval = new LogicalPlanGenerator.ship_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SHIP39=null;
        LogicalPlanGenerator.path_list_return path_list40 =null;


        CommonTree SHIP39_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:233:2: ( ^( SHIP ( path_list[$paths] )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:233:4: ^( SHIP ( path_list[$paths] )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SHIP39=(CommonTree)match(input,SHIP,FOLLOW_SHIP_in_ship_clause557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP39_tree = (CommonTree)adaptor.dupNode(SHIP39);


            root_1 = (CommonTree)adaptor.becomeRoot(SHIP39_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:233:12: ( path_list[$paths] )?
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==QUOTEDSTRING) ) {
                    alt8=1;
                }
                switch (alt8) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:233:12: path_list[$paths]
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_path_list_in_ship_clause559);
                        path_list40=path_list(paths);

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, path_list40.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:236:1: path_list[List<String> paths] : ( QUOTEDSTRING )+ ;
    public final LogicalPlanGenerator.path_list_return path_list(List<String> paths) throws RecognitionException {
        LogicalPlanGenerator.path_list_return retval = new LogicalPlanGenerator.path_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING41=null;

        CommonTree QUOTEDSTRING41_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:237:2: ( ( QUOTEDSTRING )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:237:4: ( QUOTEDSTRING )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:237:4: ( QUOTEDSTRING )+
            int cnt9=0;
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==QUOTEDSTRING) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:237:6: QUOTEDSTRING
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    QUOTEDSTRING41=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list576); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    QUOTEDSTRING41_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING41);


            	    adaptor.addChild(root_0, QUOTEDSTRING41_tree);
            	    }


            	    if ( state.backtracking==0 ) { paths.add( builder.unquote( (QUOTEDSTRING41!=null?QUOTEDSTRING41.getText():null) ) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt9 >= 1 ) break loop9;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(9, input);
                        throw eee;
                }
                cnt9++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:240:1: cache_clause[List<String> paths] : ^( CACHE path_list[$paths] ) ;
    public final LogicalPlanGenerator.cache_clause_return cache_clause(List<String> paths) throws RecognitionException {
        LogicalPlanGenerator.cache_clause_return retval = new LogicalPlanGenerator.cache_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CACHE42=null;
        LogicalPlanGenerator.path_list_return path_list43 =null;


        CommonTree CACHE42_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:241:2: ( ^( CACHE path_list[$paths] ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:241:4: ^( CACHE path_list[$paths] )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CACHE42=(CommonTree)match(input,CACHE,FOLLOW_CACHE_in_cache_clause594); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE42_tree = (CommonTree)adaptor.dupNode(CACHE42);


            root_1 = (CommonTree)adaptor.becomeRoot(CACHE42_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_path_list_in_cache_clause596);
            path_list43=path_list(paths);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, path_list43.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends TreeRuleReturnScope {
        public List<HandleSpec> inputHandleSpecs;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:244:1: input_clause returns [List<HandleSpec> inputHandleSpecs] : ^( INPUT ( stream_cmd[true] )+ ) ;
    public final LogicalPlanGenerator.input_clause_return input_clause() throws RecognitionException {
        LogicalPlanGenerator.input_clause_return retval = new LogicalPlanGenerator.input_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree INPUT44=null;
        LogicalPlanGenerator.stream_cmd_return stream_cmd45 =null;


        CommonTree INPUT44_tree=null;


            retval.inputHandleSpecs = new ArrayList<HandleSpec>();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:248:2: ( ^( INPUT ( stream_cmd[true] )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:248:4: ^( INPUT ( stream_cmd[true] )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            INPUT44=(CommonTree)match(input,INPUT,FOLLOW_INPUT_in_input_clause619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT44_tree = (CommonTree)adaptor.dupNode(INPUT44);


            root_1 = (CommonTree)adaptor.becomeRoot(INPUT44_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:248:13: ( stream_cmd[true] )+
            int cnt10=0;
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==QUOTEDSTRING||(LA10_0 >= STDIN && LA10_0 <= STDOUT)) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:248:15: stream_cmd[true]
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_stream_cmd_in_input_clause623);
            	    stream_cmd45=stream_cmd(true);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, stream_cmd45.getTree());


            	    if ( state.backtracking==0 ) { retval.inputHandleSpecs.add( (stream_cmd45!=null?stream_cmd45.handleSpec:null) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class stream_cmd_return extends TreeRuleReturnScope {
        public HandleSpec handleSpec;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:251:1: stream_cmd[boolean in] returns [HandleSpec handleSpec] : ( ^( STDIN ( func_clause[ft] )? ) | ^( STDOUT ( func_clause[ft] )? ) | ^( QUOTEDSTRING ( func_clause[ft] )? ) );
    public final LogicalPlanGenerator.stream_cmd_return stream_cmd(boolean in) throws RecognitionException {
        LogicalPlanGenerator.stream_cmd_return retval = new LogicalPlanGenerator.stream_cmd_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STDIN46=null;
        CommonTree STDOUT48=null;
        CommonTree QUOTEDSTRING50=null;
        LogicalPlanGenerator.func_clause_return func_clause47 =null;

        LogicalPlanGenerator.func_clause_return func_clause49 =null;

        LogicalPlanGenerator.func_clause_return func_clause51 =null;


        CommonTree STDIN46_tree=null;
        CommonTree STDOUT48_tree=null;
        CommonTree QUOTEDSTRING50_tree=null;


            String handleName = null;
            FuncSpec fs = null;
            String deserializer = PigStreaming.class.getName() + "()";
            byte ft = in ? FunctionType.PIGTOSTREAMFUNC : FunctionType.STREAMTOPIGFUNC;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:263:2: ( ^( STDIN ( func_clause[ft] )? ) | ^( STDOUT ( func_clause[ft] )? ) | ^( QUOTEDSTRING ( func_clause[ft] )? ) )
            int alt14=3;
            switch ( input.LA(1) ) {
            case STDIN:
                {
                alt14=1;
                }
                break;
            case STDOUT:
                {
                alt14=2;
                }
                break;
            case QUOTEDSTRING:
                {
                alt14=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:263:4: ^( STDIN ( func_clause[ft] )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STDIN46=(CommonTree)match(input,STDIN,FOLLOW_STDIN_in_stream_cmd657); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN46_tree = (CommonTree)adaptor.dupNode(STDIN46);


                    root_1 = (CommonTree)adaptor.becomeRoot(STDIN46_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { handleName = "stdin"; }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:264:7: ( func_clause[ft] )?
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==FUNC||LA11_0==FUNC_REF) ) {
                            alt11=1;
                        }
                        switch (alt11) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:264:9: func_clause[ft]
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd669);
                                func_clause47=func_clause(ft);

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause47.getTree());


                                if ( state.backtracking==0 ) { fs = (func_clause47!=null?func_clause47.funcSpec:null); }

                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:265:4: ^( STDOUT ( func_clause[ft] )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STDOUT48=(CommonTree)match(input,STDOUT,FOLLOW_STDOUT_in_stream_cmd684); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT48_tree = (CommonTree)adaptor.dupNode(STDOUT48);


                    root_1 = (CommonTree)adaptor.becomeRoot(STDOUT48_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { handleName = "stdout"; }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:266:7: ( func_clause[ft] )?
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==FUNC||LA12_0==FUNC_REF) ) {
                            alt12=1;
                        }
                        switch (alt12) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:266:9: func_clause[ft]
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd696);
                                func_clause49=func_clause(ft);

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause49.getTree());


                                if ( state.backtracking==0 ) { fs = (func_clause49!=null?func_clause49.funcSpec:null); }

                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:267:4: ^( QUOTEDSTRING ( func_clause[ft] )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    QUOTEDSTRING50=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_stream_cmd711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING50_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING50);


                    root_1 = (CommonTree)adaptor.becomeRoot(QUOTEDSTRING50_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { handleName = builder.unquote( (QUOTEDSTRING50!=null?QUOTEDSTRING50.getText():null) ); }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:268:7: ( func_clause[ft] )?
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==FUNC||LA13_0==FUNC_REF) ) {
                            alt13=1;
                        }
                        switch (alt13) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:268:9: func_clause[ft]
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd723);
                                func_clause51=func_clause(ft);

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause51.getTree());


                                if ( state.backtracking==0 ) { fs = (func_clause51!=null?func_clause51.funcSpec:null); }

                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

            if ( state.backtracking==0 ) {
                if( fs != null )
                    deserializer =  fs.toString();
                retval.handleSpec = new HandleSpec( handleName, deserializer );
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class output_clause_return extends TreeRuleReturnScope {
        public List<HandleSpec> outputHandleSpecs;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:271:1: output_clause returns [List<HandleSpec> outputHandleSpecs] : ^( OUTPUT ( stream_cmd[false] )+ ) ;
    public final LogicalPlanGenerator.output_clause_return output_clause() throws RecognitionException {
        LogicalPlanGenerator.output_clause_return retval = new LogicalPlanGenerator.output_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OUTPUT52=null;
        LogicalPlanGenerator.stream_cmd_return stream_cmd53 =null;


        CommonTree OUTPUT52_tree=null;


            retval.outputHandleSpecs = new ArrayList<HandleSpec>();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:275:2: ( ^( OUTPUT ( stream_cmd[false] )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:275:4: ^( OUTPUT ( stream_cmd[false] )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            OUTPUT52=(CommonTree)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT52_tree = (CommonTree)adaptor.dupNode(OUTPUT52);


            root_1 = (CommonTree)adaptor.becomeRoot(OUTPUT52_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:275:14: ( stream_cmd[false] )+
            int cnt15=0;
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==QUOTEDSTRING||(LA15_0 >= STDIN && LA15_0 <= STDOUT)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:275:16: stream_cmd[false]
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_stream_cmd_in_output_clause755);
            	    stream_cmd53=stream_cmd(false);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, stream_cmd53.getTree());


            	    if ( state.backtracking==0 ) { retval.outputHandleSpecs.add( (stream_cmd53!=null?stream_cmd53.handleSpec:null) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt15 >= 1 ) break loop15;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(15, input);
                        throw eee;
                }
                cnt15++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends TreeRuleReturnScope {
        public String dir;
        public Integer limit;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:278:1: error_clause returns [String dir, Integer limit] : ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? ) ;
    public final LogicalPlanGenerator.error_clause_return error_clause() throws RecognitionException {
        LogicalPlanGenerator.error_clause_return retval = new LogicalPlanGenerator.error_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STDERROR54=null;
        CommonTree QUOTEDSTRING55=null;
        CommonTree INTEGER56=null;

        CommonTree STDERROR54_tree=null;
        CommonTree QUOTEDSTRING55_tree=null;
        CommonTree INTEGER56_tree=null;


            retval.limit = StreamingCommand.MAX_TASKS;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:282:2: ( ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:282:4: ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STDERROR54=(CommonTree)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR54_tree = (CommonTree)adaptor.dupNode(STDERROR54);


            root_1 = (CommonTree)adaptor.becomeRoot(STDERROR54_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:283:7: ( QUOTEDSTRING ( INTEGER )? )?
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==QUOTEDSTRING) ) {
                    alt17=1;
                }
                switch (alt17) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:283:9: QUOTEDSTRING ( INTEGER )?
                        {
                        _last = (CommonTree)input.LT(1);
                        QUOTEDSTRING55=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause794); if (state.failed) return retval;
                        if ( state.backtracking==0 ) {
                        QUOTEDSTRING55_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING55);


                        adaptor.addChild(root_1, QUOTEDSTRING55_tree);
                        }


                        if ( state.backtracking==0 ) {
                                    retval.dir = builder.unquote( (QUOTEDSTRING55!=null?QUOTEDSTRING55.getText():null) );
                                }

                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:287:9: ( INTEGER )?
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==INTEGER) ) {
                            alt16=1;
                        }
                        switch (alt16) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:287:11: INTEGER
                                {
                                _last = (CommonTree)input.LT(1);
                                INTEGER56=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause817); if (state.failed) return retval;
                                if ( state.backtracking==0 ) {
                                INTEGER56_tree = (CommonTree)adaptor.dupNode(INTEGER56);


                                adaptor.addChild(root_1, INTEGER56_tree);
                                }


                                if ( state.backtracking==0 ) { 
                                              retval.limit = Integer.parseInt( (INTEGER56!=null?INTEGER56.getText():null) );
                                          }

                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:296:1: load_clause returns [String alias] : ^( LOAD filename ( func_clause[FunctionType.LOADFUNC] )? ( as_clause )? ) ;
    public final LogicalPlanGenerator.load_clause_return load_clause() throws RecognitionException {
        LogicalPlanGenerator.load_clause_return retval = new LogicalPlanGenerator.load_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LOAD57=null;
        LogicalPlanGenerator.filename_return filename58 =null;

        LogicalPlanGenerator.func_clause_return func_clause59 =null;

        LogicalPlanGenerator.as_clause_return as_clause60 =null;


        CommonTree LOAD57_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:297:2: ( ^( LOAD filename ( func_clause[FunctionType.LOADFUNC] )? ( as_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:297:4: ^( LOAD filename ( func_clause[FunctionType.LOADFUNC] )? ( as_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LOAD57=(CommonTree)match(input,LOAD,FOLLOW_LOAD_in_load_clause871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD57_tree = (CommonTree)adaptor.dupNode(LOAD57);


            root_1 = (CommonTree)adaptor.becomeRoot(LOAD57_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_filename_in_load_clause873);
            filename58=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, filename58.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:297:21: ( func_clause[FunctionType.LOADFUNC] )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FUNC||LA18_0==FUNC_REF) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:297:21: func_clause[FunctionType.LOADFUNC]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_load_clause875);
                    func_clause59=func_clause(FunctionType.LOADFUNC);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause59.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:297:57: ( as_clause )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==AS) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:297:57: as_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_as_clause_in_load_clause879);
                    as_clause60=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, as_clause60.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                  SourceLocation loc = new SourceLocation( (PigParserNode)((CommonTree)retval.start) );
                  retval.alias = builder.buildLoadOp( loc, ((statement_scope)statement_stack.peek()).alias,
                      (filename58!=null?filename58.filename:null), (func_clause59!=null?func_clause59.funcSpec:null), (as_clause60!=null?as_clause60.logicalSchema:null)  );
              }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class filename_return extends TreeRuleReturnScope {
        public String filename;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filename"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:305:1: filename returns [String filename] : QUOTEDSTRING ;
    public final LogicalPlanGenerator.filename_return filename() throws RecognitionException {
        LogicalPlanGenerator.filename_return retval = new LogicalPlanGenerator.filename_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING61=null;

        CommonTree QUOTEDSTRING61_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:306:2: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:306:4: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING61=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_filename899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING61_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING61);


            adaptor.addChild(root_0, QUOTEDSTRING61_tree);
            }


            if ( state.backtracking==0 ) { retval.filename = builder.unquote( (QUOTEDSTRING61!=null?QUOTEDSTRING61.getText():null) ); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filename"


    public static class as_clause_return extends TreeRuleReturnScope {
        public LogicalSchema logicalSchema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:309:1: as_clause returns [LogicalSchema logicalSchema] : ^( AS field_def_list ) ;
    public final LogicalPlanGenerator.as_clause_return as_clause() throws RecognitionException {
        LogicalPlanGenerator.as_clause_return retval = new LogicalPlanGenerator.as_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree AS62=null;
        LogicalPlanGenerator.field_def_list_return field_def_list63 =null;


        CommonTree AS62_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:310:2: ( ^( AS field_def_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:310:4: ^( AS field_def_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            AS62=(CommonTree)match(input,AS,FOLLOW_AS_in_as_clause916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS62_tree = (CommonTree)adaptor.dupNode(AS62);


            root_1 = (CommonTree)adaptor.becomeRoot(AS62_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_field_def_list_in_as_clause918);
            field_def_list63=field_def_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, field_def_list63.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) { 
                    LogicalPlanBuilder.setBytearrayForNULLType((field_def_list63!=null?field_def_list63.schema:null));
                    retval.logicalSchema = (field_def_list63!=null?field_def_list63.schema:null); 
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class field_def_return extends TreeRuleReturnScope {
        public LogicalFieldSchema fieldSchema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:317:1: field_def[NumValCarrier nvc] returns [LogicalFieldSchema fieldSchema] : ( ^( FIELD_DEF IDENTIFIER ( type )? ) | ^( FIELD_DEF_WITHOUT_IDENTIFIER ( type ) ) );
    public final LogicalPlanGenerator.field_def_return field_def(NumValCarrier nvc) throws RecognitionException {
        LogicalPlanGenerator.field_def_return retval = new LogicalPlanGenerator.field_def_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FIELD_DEF64=null;
        CommonTree IDENTIFIER65=null;
        CommonTree FIELD_DEF_WITHOUT_IDENTIFIER67=null;
        LogicalPlanGenerator.type_return type66 =null;

        LogicalPlanGenerator.type_return type68 =null;


        CommonTree FIELD_DEF64_tree=null;
        CommonTree IDENTIFIER65_tree=null;
        CommonTree FIELD_DEF_WITHOUT_IDENTIFIER67_tree=null;


            byte datatype = DataType.NULL;          
            if (nvc==null) {
                nvc =new NumValCarrier();
            }

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:324:2: ( ^( FIELD_DEF IDENTIFIER ( type )? ) | ^( FIELD_DEF_WITHOUT_IDENTIFIER ( type ) ) )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==FIELD_DEF) ) {
                alt21=1;
            }
            else if ( (LA21_0==FIELD_DEF_WITHOUT_IDENTIFIER) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }
            switch (alt21) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:324:4: ^( FIELD_DEF IDENTIFIER ( type )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FIELD_DEF64=(CommonTree)match(input,FIELD_DEF,FOLLOW_FIELD_DEF_in_field_def947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIELD_DEF64_tree = (CommonTree)adaptor.dupNode(FIELD_DEF64);


                    root_1 = (CommonTree)adaptor.becomeRoot(FIELD_DEF64_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER65=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_field_def949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER65_tree = (CommonTree)adaptor.dupNode(IDENTIFIER65);


                    adaptor.addChild(root_1, IDENTIFIER65_tree);
                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:324:28: ( type )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==BOOLEAN||LA20_0==BYTEARRAY||LA20_0==CHARARRAY||LA20_0==DOUBLE||LA20_0==FLOAT||LA20_0==INT||LA20_0==LONG||LA20_0==BAG_TYPE||LA20_0==MAP_TYPE||LA20_0==TUPLE_TYPE) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:324:30: type
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_type_in_field_def953);
                            type66=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, type66.getTree());


                            if ( state.backtracking==0 ) { datatype = (type66!=null?type66.datatype:null);}

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                               retval.fieldSchema = new LogicalFieldSchema( (IDENTIFIER65!=null?IDENTIFIER65.getText():null), (type66!=null?type66.logicalSchema:null), datatype );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:328:4: ^( FIELD_DEF_WITHOUT_IDENTIFIER ( type ) )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FIELD_DEF_WITHOUT_IDENTIFIER67=(CommonTree)match(input,FIELD_DEF_WITHOUT_IDENTIFIER,FOLLOW_FIELD_DEF_WITHOUT_IDENTIFIER_in_field_def972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIELD_DEF_WITHOUT_IDENTIFIER67_tree = (CommonTree)adaptor.dupNode(FIELD_DEF_WITHOUT_IDENTIFIER67);


                    root_1 = (CommonTree)adaptor.becomeRoot(FIELD_DEF_WITHOUT_IDENTIFIER67_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:328:36: ( type )
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:328:38: type
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_in_field_def976);
                    type68=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type68.getTree());


                    if ( state.backtracking==0 ) { datatype = (type68!=null?type68.datatype:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                               retval.fieldSchema = new LogicalFieldSchema ( nvc.makeNameFromDataType(datatype) , (type68!=null?type68.logicalSchema:null), datatype );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    public static class field_def_list_return extends TreeRuleReturnScope {
        public LogicalSchema schema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:334:1: field_def_list returns [LogicalSchema schema] : ( field_def[nvc] )+ ;
    public final LogicalPlanGenerator.field_def_list_return field_def_list() throws RecognitionException {
        LogicalPlanGenerator.field_def_list_return retval = new LogicalPlanGenerator.field_def_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.field_def_return field_def69 =null;




            retval.schema = new LogicalSchema();
            NumValCarrier nvc = new NumValCarrier();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:339:2: ( ( field_def[nvc] )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:339:4: ( field_def[nvc] )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:339:4: ( field_def[nvc] )+
            int cnt22=0;
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( ((LA22_0 >= FIELD_DEF && LA22_0 <= FIELD_DEF_WITHOUT_IDENTIFIER)) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:339:6: field_def[nvc]
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_field_def_in_field_def_list1007);
            	    field_def69=field_def(nvc);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, field_def69.getTree());


            	    if ( state.backtracking==0 ) { retval.schema.addField( (field_def69!=null?field_def69.fieldSchema:null) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt22 >= 1 ) break loop22;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(22, input);
                        throw eee;
                }
                cnt22++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class type_return extends TreeRuleReturnScope {
        public Byte datatype;
        public LogicalSchema logicalSchema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:343:1: type returns [Byte datatype, LogicalSchema logicalSchema] : ( simple_type | tuple_type | bag_type | map_type );
    public final LogicalPlanGenerator.type_return type() throws RecognitionException {
        LogicalPlanGenerator.type_return retval = new LogicalPlanGenerator.type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.simple_type_return simple_type70 =null;

        LogicalPlanGenerator.tuple_type_return tuple_type71 =null;

        LogicalPlanGenerator.bag_type_return bag_type72 =null;

        LogicalPlanGenerator.map_type_return map_type73 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:344:2: ( simple_type | tuple_type | bag_type | map_type )
            int alt23=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt23=1;
                }
                break;
            case TUPLE_TYPE:
                {
                alt23=2;
                }
                break;
            case BAG_TYPE:
                {
                alt23=3;
                }
                break;
            case MAP_TYPE:
                {
                alt23=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }

            switch (alt23) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:344:4: simple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_type_in_type1027);
                    simple_type70=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_type70.getTree());


                    if ( state.backtracking==0 ) {
                            retval.datatype = (simple_type70!=null?simple_type70.datatype:0);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:348:4: tuple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_type_in_type1037);
                    tuple_type71=tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple_type71.getTree());


                    if ( state.backtracking==0 ) {
                           retval.datatype = DataType.TUPLE;
                           retval.logicalSchema = (tuple_type71!=null?tuple_type71.logicalSchema:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:353:4: bag_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_type_in_type1047);
                    bag_type72=bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag_type72.getTree());


                    if ( state.backtracking==0 ) {
                           retval.datatype = DataType.BAG;
                           retval.logicalSchema = (bag_type72!=null?bag_type72.logicalSchema:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:358:4: map_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_type_in_type1057);
                    map_type73=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map_type73.getTree());


                    if ( state.backtracking==0 ) {
                           retval.datatype = DataType.MAP;
                           retval.logicalSchema = (map_type73!=null?map_type73.logicalSchema:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class simple_type_return extends TreeRuleReturnScope {
        public byte datatype;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:365:1: simple_type returns [byte datatype] : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY );
    public final LogicalPlanGenerator.simple_type_return simple_type() throws RecognitionException {
        LogicalPlanGenerator.simple_type_return retval = new LogicalPlanGenerator.simple_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BOOLEAN74=null;
        CommonTree INT75=null;
        CommonTree LONG76=null;
        CommonTree FLOAT77=null;
        CommonTree DOUBLE78=null;
        CommonTree CHARARRAY79=null;
        CommonTree BYTEARRAY80=null;

        CommonTree BOOLEAN74_tree=null;
        CommonTree INT75_tree=null;
        CommonTree LONG76_tree=null;
        CommonTree FLOAT77_tree=null;
        CommonTree DOUBLE78_tree=null;
        CommonTree CHARARRAY79_tree=null;
        CommonTree BYTEARRAY80_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:366:2: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY )
            int alt24=7;
            switch ( input.LA(1) ) {
            case BOOLEAN:
                {
                alt24=1;
                }
                break;
            case INT:
                {
                alt24=2;
                }
                break;
            case LONG:
                {
                alt24=3;
                }
                break;
            case FLOAT:
                {
                alt24=4;
                }
                break;
            case DOUBLE:
                {
                alt24=5;
                }
                break;
            case CHARARRAY:
                {
                alt24=6;
                }
                break;
            case BYTEARRAY:
                {
                alt24=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }

            switch (alt24) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:366:4: BOOLEAN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BOOLEAN74=(CommonTree)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_simple_type1075); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLEAN74_tree = (CommonTree)adaptor.dupNode(BOOLEAN74);


                    adaptor.addChild(root_0, BOOLEAN74_tree);
                    }


                    if ( state.backtracking==0 ) { retval.datatype = DataType.BOOLEAN; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:367:4: INT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INT75=(CommonTree)match(input,INT,FOLLOW_INT_in_simple_type1082); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT75_tree = (CommonTree)adaptor.dupNode(INT75);


                    adaptor.addChild(root_0, INT75_tree);
                    }


                    if ( state.backtracking==0 ) { retval.datatype = DataType.INTEGER; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:368:4: LONG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LONG76=(CommonTree)match(input,LONG,FOLLOW_LONG_in_simple_type1089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG76_tree = (CommonTree)adaptor.dupNode(LONG76);


                    adaptor.addChild(root_0, LONG76_tree);
                    }


                    if ( state.backtracking==0 ) { retval.datatype = DataType.LONG; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:369:4: FLOAT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLOAT77=(CommonTree)match(input,FLOAT,FOLLOW_FLOAT_in_simple_type1096); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT77_tree = (CommonTree)adaptor.dupNode(FLOAT77);


                    adaptor.addChild(root_0, FLOAT77_tree);
                    }


                    if ( state.backtracking==0 ) { retval.datatype = DataType.FLOAT; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:370:4: DOUBLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DOUBLE78=(CommonTree)match(input,DOUBLE,FOLLOW_DOUBLE_in_simple_type1103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE78_tree = (CommonTree)adaptor.dupNode(DOUBLE78);


                    adaptor.addChild(root_0, DOUBLE78_tree);
                    }


                    if ( state.backtracking==0 ) { retval.datatype = DataType.DOUBLE; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:371:4: CHARARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CHARARRAY79=(CommonTree)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_simple_type1110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY79_tree = (CommonTree)adaptor.dupNode(CHARARRAY79);


                    adaptor.addChild(root_0, CHARARRAY79_tree);
                    }


                    if ( state.backtracking==0 ) { retval.datatype = DataType.CHARARRAY; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:372:4: BYTEARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BYTEARRAY80=(CommonTree)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_simple_type1117); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY80_tree = (CommonTree)adaptor.dupNode(BYTEARRAY80);


                    adaptor.addChild(root_0, BYTEARRAY80_tree);
                    }


                    if ( state.backtracking==0 ) { retval.datatype = DataType.BYTEARRAY; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class tuple_type_return extends TreeRuleReturnScope {
        public LogicalSchema logicalSchema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:375:1: tuple_type returns [LogicalSchema logicalSchema] : ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final LogicalPlanGenerator.tuple_type_return tuple_type() throws RecognitionException {
        LogicalPlanGenerator.tuple_type_return retval = new LogicalPlanGenerator.tuple_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_TYPE81=null;
        LogicalPlanGenerator.field_def_list_return field_def_list82 =null;


        CommonTree TUPLE_TYPE81_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:376:2: ( ^( TUPLE_TYPE ( field_def_list )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:376:4: ^( TUPLE_TYPE ( field_def_list )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_TYPE81=(CommonTree)match(input,TUPLE_TYPE,FOLLOW_TUPLE_TYPE_in_tuple_type1134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_TYPE81_tree = (CommonTree)adaptor.dupNode(TUPLE_TYPE81);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_TYPE81_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:377:7: ( field_def_list )?
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( ((LA25_0 >= FIELD_DEF && LA25_0 <= FIELD_DEF_WITHOUT_IDENTIFIER)) ) {
                    alt25=1;
                }
                switch (alt25) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:377:9: field_def_list
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_field_def_list_in_tuple_type1145);
                        field_def_list82=field_def_list();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, field_def_list82.getTree());


                        if ( state.backtracking==0 ) { 
                                    LogicalPlanBuilder.setBytearrayForNULLType((field_def_list82!=null?field_def_list82.schema:null));
                                    retval.logicalSchema = (field_def_list82!=null?field_def_list82.schema:null);
                                }

                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class bag_type_return extends TreeRuleReturnScope {
        public LogicalSchema logicalSchema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:386:1: bag_type returns [LogicalSchema logicalSchema] : ^( BAG_TYPE ( IDENTIFIER )? ( tuple_type )? ) ;
    public final LogicalPlanGenerator.bag_type_return bag_type() throws RecognitionException {
        LogicalPlanGenerator.bag_type_return retval = new LogicalPlanGenerator.bag_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_TYPE83=null;
        CommonTree IDENTIFIER84=null;
        LogicalPlanGenerator.tuple_type_return tuple_type85 =null;


        CommonTree BAG_TYPE83_tree=null;
        CommonTree IDENTIFIER84_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:387:2: ( ^( BAG_TYPE ( IDENTIFIER )? ( tuple_type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:387:4: ^( BAG_TYPE ( IDENTIFIER )? ( tuple_type )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_TYPE83=(CommonTree)match(input,BAG_TYPE,FOLLOW_BAG_TYPE_in_bag_type1185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_TYPE83_tree = (CommonTree)adaptor.dupNode(BAG_TYPE83);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_TYPE83_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:387:16: ( IDENTIFIER )?
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==IDENTIFIER) ) {
                    alt26=1;
                }
                switch (alt26) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:387:16: IDENTIFIER
                        {
                        _last = (CommonTree)input.LT(1);
                        IDENTIFIER84=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_bag_type1187); if (state.failed) return retval;
                        if ( state.backtracking==0 ) {
                        IDENTIFIER84_tree = (CommonTree)adaptor.dupNode(IDENTIFIER84);


                        adaptor.addChild(root_1, IDENTIFIER84_tree);
                        }


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:387:28: ( tuple_type )?
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==TUPLE_TYPE) ) {
                    alt27=1;
                }
                switch (alt27) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:387:28: tuple_type
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_tuple_type_in_bag_type1190);
                        tuple_type85=tuple_type();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, tuple_type85.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   if ((tuple_type85!=null?tuple_type85.logicalSchema:null)!=null && (tuple_type85!=null?tuple_type85.logicalSchema:null).size()==1 && (tuple_type85!=null?tuple_type85.logicalSchema:null).getField(0).type==DataType.TUPLE) {
                       retval.logicalSchema = (tuple_type85!=null?tuple_type85.logicalSchema:null);
                   }
                   else {
                       LogicalSchema s = new LogicalSchema();
                       s.addField(new LogicalFieldSchema((IDENTIFIER84!=null?IDENTIFIER84.getText():null), (tuple_type85!=null?tuple_type85.logicalSchema:null), DataType.TUPLE));
                       retval.logicalSchema = s;
                   }
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type"


    public static class map_type_return extends TreeRuleReturnScope {
        public LogicalSchema logicalSchema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:400:1: map_type returns [LogicalSchema logicalSchema] : ^( MAP_TYPE ( type )? ) ;
    public final LogicalPlanGenerator.map_type_return map_type() throws RecognitionException {
        LogicalPlanGenerator.map_type_return retval = new LogicalPlanGenerator.map_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAP_TYPE86=null;
        LogicalPlanGenerator.type_return type87 =null;


        CommonTree MAP_TYPE86_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:401:2: ( ^( MAP_TYPE ( type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:401:4: ^( MAP_TYPE ( type )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAP_TYPE86=(CommonTree)match(input,MAP_TYPE,FOLLOW_MAP_TYPE_in_map_type1213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAP_TYPE86_tree = (CommonTree)adaptor.dupNode(MAP_TYPE86);


            root_1 = (CommonTree)adaptor.becomeRoot(MAP_TYPE86_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:401:16: ( type )?
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==BOOLEAN||LA28_0==BYTEARRAY||LA28_0==CHARARRAY||LA28_0==DOUBLE||LA28_0==FLOAT||LA28_0==INT||LA28_0==LONG||LA28_0==BAG_TYPE||LA28_0==MAP_TYPE||LA28_0==TUPLE_TYPE) ) {
                    alt28=1;
                }
                switch (alt28) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:401:16: type
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_type_in_map_type1215);
                        type87=type();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, type87.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   LogicalSchema s = null;
                   if( (type87!=null?type87.datatype:null) != null ) {
                       s = new LogicalSchema();
                       s.addField( new LogicalFieldSchema( null, (type87!=null?type87.logicalSchema:null), (type87!=null?type87.datatype:null) ) );
                   }
                   retval.logicalSchema = s;
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class func_clause_return extends TreeRuleReturnScope {
        public FuncSpec funcSpec;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:412:1: func_clause[byte ft] returns [FuncSpec funcSpec] : ( ^( FUNC_REF func_name ) | ^( FUNC func_name ( func_args )? ) );
    public final LogicalPlanGenerator.func_clause_return func_clause(byte ft) throws RecognitionException {
        LogicalPlanGenerator.func_clause_return retval = new LogicalPlanGenerator.func_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FUNC_REF88=null;
        CommonTree FUNC90=null;
        LogicalPlanGenerator.func_name_return func_name89 =null;

        LogicalPlanGenerator.func_name_return func_name91 =null;

        LogicalPlanGenerator.func_args_return func_args92 =null;


        CommonTree FUNC_REF88_tree=null;
        CommonTree FUNC90_tree=null;


            SourceLocation loc = new SourceLocation( (PigParserNode)((CommonTree)retval.start) );

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:416:2: ( ^( FUNC_REF func_name ) | ^( FUNC func_name ( func_args )? ) )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==FUNC_REF) ) {
                alt30=1;
            }
            else if ( (LA30_0==FUNC) ) {
                alt30=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:416:4: ^( FUNC_REF func_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC_REF88=(CommonTree)match(input,FUNC_REF,FOLLOW_FUNC_REF_in_func_clause1244); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC_REF88_tree = (CommonTree)adaptor.dupNode(FUNC_REF88);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC_REF88_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_clause1246);
                    func_name89=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name89.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.funcSpec = builder.lookupFunction( (func_name89!=null?func_name89.funcName:null) );
                           if( retval.funcSpec == null )
                               retval.funcSpec = builder.buildFuncSpec( loc, (func_name89!=null?func_name89.funcName:null), new ArrayList<String>(), ft );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:422:4: ^( FUNC func_name ( func_args )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC90=(CommonTree)match(input,FUNC,FOLLOW_FUNC_in_func_clause1260); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC90_tree = (CommonTree)adaptor.dupNode(FUNC90);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC90_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_clause1262);
                    func_name91=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name91.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:422:22: ( func_args )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==MULTILINE_QUOTEDSTRING||LA29_0==QUOTEDSTRING) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:422:22: func_args
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_func_args_in_func_clause1264);
                            func_args92=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, func_args92.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.funcSpec = builder.lookupFunction( (func_name91!=null?func_name91.funcName:null) );
                           if( retval.funcSpec == null ) {
                               List<String> argList = new ArrayList<String>();
                               if( (func_args92!=null?func_args92.args:null) != null )
                                   argList = (func_args92!=null?func_args92.args:null);
                               retval.funcSpec = builder.buildFuncSpec( loc, (func_name91!=null?func_name91.funcName:null), argList, ft );
                           }
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_return extends TreeRuleReturnScope {
        public String funcName;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:434:1: func_name returns [String funcName] : p1= eid ( ( PERIOD | DOLLAR ) p2= eid )* ;
    public final LogicalPlanGenerator.func_name_return func_name() throws RecognitionException {
        LogicalPlanGenerator.func_name_return retval = new LogicalPlanGenerator.func_name_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PERIOD93=null;
        CommonTree DOLLAR94=null;
        LogicalPlanGenerator.eid_return p1 =null;

        LogicalPlanGenerator.eid_return p2 =null;


        CommonTree PERIOD93_tree=null;
        CommonTree DOLLAR94_tree=null;

         StringBuilder buf = new StringBuilder(); 
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:436:2: (p1= eid ( ( PERIOD | DOLLAR ) p2= eid )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:436:4: p1= eid ( ( PERIOD | DOLLAR ) p2= eid )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_eid_in_func_name1295);
            p1=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, p1.getTree());


            if ( state.backtracking==0 ) { buf.append( (p1!=null?p1.id:null) ); }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:437:7: ( ( PERIOD | DOLLAR ) p2= eid )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==DOLLAR||LA32_0==PERIOD) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:437:9: ( PERIOD | DOLLAR ) p2= eid
            	    {
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:437:9: ( PERIOD | DOLLAR )
            	    int alt31=2;
            	    int LA31_0 = input.LA(1);

            	    if ( (LA31_0==PERIOD) ) {
            	        alt31=1;
            	    }
            	    else if ( (LA31_0==DOLLAR) ) {
            	        alt31=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 31, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt31) {
            	        case 1 :
            	            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:437:11: PERIOD
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            PERIOD93=(CommonTree)match(input,PERIOD,FOLLOW_PERIOD_in_func_name1309); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PERIOD93_tree = (CommonTree)adaptor.dupNode(PERIOD93);


            	            adaptor.addChild(root_0, PERIOD93_tree);
            	            }


            	            if ( state.backtracking==0 ) { buf.append( (PERIOD93!=null?PERIOD93.getText():null) ); }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 2 :
            	            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:437:52: DOLLAR
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            DOLLAR94=(CommonTree)match(input,DOLLAR,FOLLOW_DOLLAR_in_func_name1315); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DOLLAR94_tree = (CommonTree)adaptor.dupNode(DOLLAR94);


            	            adaptor.addChild(root_0, DOLLAR94_tree);
            	            }


            	            if ( state.backtracking==0 ) { buf.append( (DOLLAR94!=null?DOLLAR94.getText():null) ); }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }


            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_eid_in_func_name1331);
            	    p2=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, p2.getTree());


            	    if ( state.backtracking==0 ) { buf.append( (p2!=null?p2.id:null) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            if ( state.backtracking==0 ) {
                   retval.funcName = buf.toString();
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_return extends TreeRuleReturnScope {
        public List<String> args;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:444:1: func_args returns [List<String> args] : ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )+ ;
    public final LogicalPlanGenerator.func_args_return func_args() throws RecognitionException {
        LogicalPlanGenerator.func_args_return retval = new LogicalPlanGenerator.func_args_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING95=null;
        CommonTree MULTILINE_QUOTEDSTRING96=null;

        CommonTree QUOTEDSTRING95_tree=null;
        CommonTree MULTILINE_QUOTEDSTRING96_tree=null;

         retval.args = new ArrayList<String>(); 
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:446:3: ( ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:446:3: ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:446:3: ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )+
            int cnt33=0;
            loop33:
            do {
                int alt33=3;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==QUOTEDSTRING) ) {
                    alt33=1;
                }
                else if ( (LA33_0==MULTILINE_QUOTEDSTRING) ) {
                    alt33=2;
                }


                switch (alt33) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:446:5: QUOTEDSTRING
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    QUOTEDSTRING95=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_func_args1360); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    QUOTEDSTRING95_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING95);


            	    adaptor.addChild(root_0, QUOTEDSTRING95_tree);
            	    }


            	    if ( state.backtracking==0 ) { retval.args.add( builder.unquote( (QUOTEDSTRING95!=null?QUOTEDSTRING95.getText():null) ) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:447:7: MULTILINE_QUOTEDSTRING
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    MULTILINE_QUOTEDSTRING96=(CommonTree)match(input,MULTILINE_QUOTEDSTRING,FOLLOW_MULTILINE_QUOTEDSTRING_in_func_args1371); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    MULTILINE_QUOTEDSTRING96_tree = (CommonTree)adaptor.dupNode(MULTILINE_QUOTEDSTRING96);


            	    adaptor.addChild(root_0, MULTILINE_QUOTEDSTRING96_tree);
            	    }


            	    if ( state.backtracking==0 ) { retval.args.add( builder.unquote( (MULTILINE_QUOTEDSTRING96!=null?MULTILINE_QUOTEDSTRING96.getText():null) ) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt33 >= 1 ) break loop33;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(33, input);
                        throw eee;
                }
                cnt33++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    protected static class group_clause_scope {
        MultiMap<Integer, LogicalExpressionPlan> groupPlans;
        int inputIndex;
        List<String> inputAliases;
        List<Boolean> innerFlags;
    }
    protected Stack group_clause_stack = new Stack();


    public static class group_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:451:1: group_clause returns [String alias] : ( ^( GROUP ( group_item )+ ( group_type )? ( partition_clause )? ) | ^( COGROUP ( group_item )+ ( group_type )? ( partition_clause )? ) );
    public final LogicalPlanGenerator.group_clause_return group_clause() throws RecognitionException {
        GScope_stack.push(new GScope_scope());
        group_clause_stack.push(new group_clause_scope());
        LogicalPlanGenerator.group_clause_return retval = new LogicalPlanGenerator.group_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GROUP97=null;
        CommonTree COGROUP101=null;
        LogicalPlanGenerator.group_item_return group_item98 =null;

        LogicalPlanGenerator.group_type_return group_type99 =null;

        LogicalPlanGenerator.partition_clause_return partition_clause100 =null;

        LogicalPlanGenerator.group_item_return group_item102 =null;

        LogicalPlanGenerator.group_type_return group_type103 =null;

        LogicalPlanGenerator.partition_clause_return partition_clause104 =null;


        CommonTree GROUP97_tree=null;
        CommonTree COGROUP101_tree=null;


            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createGroupOp(); 
            ((group_clause_scope)group_clause_stack.peek()).groupPlans = new MultiMap<Integer, LogicalExpressionPlan>();
            ((group_clause_scope)group_clause_stack.peek()).inputAliases = new ArrayList<String>();
            ((group_clause_scope)group_clause_stack.peek()).innerFlags = new ArrayList<Boolean>();
            GROUPTYPE groupType = GROUPTYPE.REGULAR;
            SourceLocation loc = new SourceLocation( (PigParserNode)((CommonTree)retval.start) );
            int oldStatementIndex = ((statement_scope)statement_stack.peek()).inputIndex;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:469:2: ( ^( GROUP ( group_item )+ ( group_type )? ( partition_clause )? ) | ^( COGROUP ( group_item )+ ( group_type )? ( partition_clause )? ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==GROUP) ) {
                alt40=1;
            }
            else if ( (LA40_0==COGROUP) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:469:4: ^( GROUP ( group_item )+ ( group_type )? ( partition_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    GROUP97=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_group_clause1412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP97_tree = (CommonTree)adaptor.dupNode(GROUP97);


                    root_1 = (CommonTree)adaptor.becomeRoot(GROUP97_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:469:13: ( group_item )+
                    int cnt34=0;
                    loop34:
                    do {
                        int alt34=2;
                        int LA34_0 = input.LA(1);

                        if ( (LA34_0==COGROUP||LA34_0==CROSS||LA34_0==DEFINE||LA34_0==DISTINCT||LA34_0==FILTER||LA34_0==FOREACH||LA34_0==GROUP||LA34_0==JOIN||(LA34_0 >= LIMIT && LA34_0 <= LOAD)||LA34_0==MAPREDUCE||LA34_0==ORDER||LA34_0==SAMPLE||(LA34_0 >= STORE && LA34_0 <= STREAM)||LA34_0==UNION||LA34_0==IDENTIFIER) ) {
                            alt34=1;
                        }


                        switch (alt34) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:469:13: group_item
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_group_item_in_group_clause1414);
                    	    group_item98=group_item();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, group_item98.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt34 >= 1 ) break loop34;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(34, input);
                                throw eee;
                        }
                        cnt34++;
                    } while (true);


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:469:25: ( group_type )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==QUOTEDSTRING) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:469:27: group_type
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_group_type_in_group_clause1419);
                            group_type99=group_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, group_type99.getTree());


                            if ( state.backtracking==0 ) { groupType = (group_type99!=null?group_type99.type:null); ((LOCogroup)((GScope_scope)GScope_stack.peek()).currentOp).pinOption(LOCogroup.OPTION_GROUPTYPE); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:469:146: ( partition_clause )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==PARTITION) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:469:146: partition_clause
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_partition_clause_in_group_clause1426);
                            partition_clause100=partition_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, partition_clause100.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.alias = builder.buildGroupOp( loc, (LOCogroup)((GScope_scope)GScope_stack.peek()).currentOp, ((statement_scope)statement_stack.peek()).alias, 
                               ((group_clause_scope)group_clause_stack.peek()).inputAliases, ((group_clause_scope)group_clause_stack.peek()).groupPlans, groupType, ((group_clause_scope)group_clause_stack.peek()).innerFlags,
                               (partition_clause100!=null?partition_clause100.partitioner:null) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:475:4: ^( COGROUP ( group_item )+ ( group_type )? ( partition_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    COGROUP101=(CommonTree)match(input,COGROUP,FOLLOW_COGROUP_in_group_clause1441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP101_tree = (CommonTree)adaptor.dupNode(COGROUP101);


                    root_1 = (CommonTree)adaptor.becomeRoot(COGROUP101_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:475:15: ( group_item )+
                    int cnt37=0;
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==COGROUP||LA37_0==CROSS||LA37_0==DEFINE||LA37_0==DISTINCT||LA37_0==FILTER||LA37_0==FOREACH||LA37_0==GROUP||LA37_0==JOIN||(LA37_0 >= LIMIT && LA37_0 <= LOAD)||LA37_0==MAPREDUCE||LA37_0==ORDER||LA37_0==SAMPLE||(LA37_0 >= STORE && LA37_0 <= STREAM)||LA37_0==UNION||LA37_0==IDENTIFIER) ) {
                            alt37=1;
                        }


                        switch (alt37) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:475:15: group_item
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_group_item_in_group_clause1443);
                    	    group_item102=group_item();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, group_item102.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt37 >= 1 ) break loop37;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(37, input);
                                throw eee;
                        }
                        cnt37++;
                    } while (true);


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:475:27: ( group_type )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==QUOTEDSTRING) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:475:29: group_type
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_group_type_in_group_clause1448);
                            group_type103=group_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, group_type103.getTree());


                            if ( state.backtracking==0 ) { groupType = (group_type103!=null?group_type103.type:null);((LOCogroup)((GScope_scope)GScope_stack.peek()).currentOp).pinOption(LOCogroup.OPTION_GROUPTYPE); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:475:147: ( partition_clause )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==PARTITION) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:475:147: partition_clause
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_partition_clause_in_group_clause1455);
                            partition_clause104=partition_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, partition_clause104.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.alias = builder.buildGroupOp( loc, (LOCogroup)((GScope_scope)GScope_stack.peek()).currentOp, ((statement_scope)statement_stack.peek()).alias, 
                               ((group_clause_scope)group_clause_stack.peek()).inputAliases, ((group_clause_scope)group_clause_stack.peek()).groupPlans, groupType, ((group_clause_scope)group_clause_stack.peek()).innerFlags,
                               (partition_clause104!=null?partition_clause104.partitioner:null) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

            if ( state.backtracking==0 ) { ((statement_scope)statement_stack.peek()).inputIndex = oldStatementIndex; }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();
            group_clause_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_type_return extends TreeRuleReturnScope {
        public GROUPTYPE type;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:483:1: group_type returns [GROUPTYPE type] : QUOTEDSTRING ;
    public final LogicalPlanGenerator.group_type_return group_type() throws RecognitionException {
        LogicalPlanGenerator.group_type_return retval = new LogicalPlanGenerator.group_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING105=null;

        CommonTree QUOTEDSTRING105_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:484:2: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:484:4: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING105=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_type1476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING105_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING105);


            adaptor.addChild(root_0, QUOTEDSTRING105_tree);
            }


            if ( state.backtracking==0 ) {
                   retval.type =builder.parseGroupType( (QUOTEDSTRING105!=null?QUOTEDSTRING105.getText():null), new SourceLocation( (PigParserNode)QUOTEDSTRING105 ) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_type"


    public static class group_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:490:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final LogicalPlanGenerator.group_item_return group_item() throws RecognitionException {
        LogicalPlanGenerator.group_item_return retval = new LogicalPlanGenerator.group_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ALL108=null;
        CommonTree ANY109=null;
        CommonTree INNER110=null;
        CommonTree OUTER111=null;
        LogicalPlanGenerator.rel_return rel106 =null;

        LogicalPlanGenerator.join_group_by_clause_return join_group_by_clause107 =null;


        CommonTree ALL108_tree=null;
        CommonTree ANY109_tree=null;
        CommonTree INNER110_tree=null;
        CommonTree OUTER111_tree=null;

         boolean inner = false; 
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:492:2: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:492:4: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_group_item1497);
            rel106=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, rel106.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:492:8: ( join_group_by_clause | ALL | ANY )
            int alt41=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt41=1;
                }
                break;
            case ALL:
                {
                alt41=2;
                }
                break;
            case ANY:
                {
                alt41=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }

            switch (alt41) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:492:10: join_group_by_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item1501);
                    join_group_by_clause107=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_group_by_clause107.getTree());


                    if ( state.backtracking==0 ) { 
                                 ((group_clause_scope)group_clause_stack.peek()).groupPlans.put( ((group_clause_scope)group_clause_stack.peek()).inputIndex, (join_group_by_clause107!=null?join_group_by_clause107.plans:null) );
                             }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:496:12: ALL
                    {
                    _last = (CommonTree)input.LT(1);
                    ALL108=(CommonTree)match(input,ALL,FOLLOW_ALL_in_group_item1526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL108_tree = (CommonTree)adaptor.dupNode(ALL108);


                    adaptor.addChild(root_0, ALL108_tree);
                    }


                    if ( state.backtracking==0 ) {
                                 LogicalExpressionPlan plan = new LogicalExpressionPlan();
                                 ConstantExpression ce = new ConstantExpression( plan, "all");
                                 ce.setLocation( new SourceLocation( (PigParserNode)ALL108 ) );
                                 List<LogicalExpressionPlan> plans = new ArrayList<LogicalExpressionPlan>( 1 );
                                 plans.add( plan );
                                 ((group_clause_scope)group_clause_stack.peek()).groupPlans.put( ((group_clause_scope)group_clause_stack.peek()).inputIndex, plans );
                             }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:505:12: ANY
                    {
                    _last = (CommonTree)input.LT(1);
                    ANY109=(CommonTree)match(input,ANY,FOLLOW_ANY_in_group_item1551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY109_tree = (CommonTree)adaptor.dupNode(ANY109);


                    adaptor.addChild(root_0, ANY109_tree);
                    }


                    if ( state.backtracking==0 ) {
                                 LogicalExpressionPlan plan = new LogicalExpressionPlan();
                                 UserFuncExpression udf = new UserFuncExpression( plan, new FuncSpec( GFAny.class.getName() ) );
                                 udf.setLocation( new SourceLocation( (PigParserNode)ANY109 ) );
                                 List<LogicalExpressionPlan> plans = new ArrayList<LogicalExpressionPlan>( 1 );
                                 plans.add( plan );
                                 ((group_clause_scope)group_clause_stack.peek()).groupPlans.put( ((group_clause_scope)group_clause_stack.peek()).inputIndex, plans );
                             }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:514:11: ( INNER | OUTER )?
            int alt42=3;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==INNER) ) {
                alt42=1;
            }
            else if ( (LA42_0==OUTER) ) {
                alt42=2;
            }
            switch (alt42) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:514:13: INNER
                    {
                    _last = (CommonTree)input.LT(1);
                    INNER110=(CommonTree)match(input,INNER,FOLLOW_INNER_in_group_item1576); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER110_tree = (CommonTree)adaptor.dupNode(INNER110);


                    adaptor.addChild(root_0, INNER110_tree);
                    }


                    if ( state.backtracking==0 ) { inner =  true; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:514:40: OUTER
                    {
                    _last = (CommonTree)input.LT(1);
                    OUTER111=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_group_item1582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER111_tree = (CommonTree)adaptor.dupNode(OUTER111);


                    adaptor.addChild(root_0, OUTER111_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                   ((group_clause_scope)group_clause_stack.peek()).inputAliases.add( ((statement_scope)statement_stack.peek()).inputAlias );
                   ((group_clause_scope)group_clause_stack.peek()).innerFlags.add( inner );
                   ((group_clause_scope)group_clause_stack.peek()).inputIndex++;
                   ((statement_scope)statement_stack.peek()).inputIndex++;
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class rel_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:523:1: rel : ( alias | inline_op );
    public final LogicalPlanGenerator.rel_return rel() throws RecognitionException {
        LogicalPlanGenerator.rel_return retval = new LogicalPlanGenerator.rel_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.alias_return alias112 =null;

        LogicalPlanGenerator.inline_op_return inline_op113 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:524:2: ( alias | inline_op )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==IDENTIFIER) ) {
                alt43=1;
            }
            else if ( (LA43_0==COGROUP||LA43_0==CROSS||LA43_0==DEFINE||LA43_0==DISTINCT||LA43_0==FILTER||LA43_0==FOREACH||LA43_0==GROUP||LA43_0==JOIN||(LA43_0 >= LIMIT && LA43_0 <= LOAD)||LA43_0==MAPREDUCE||LA43_0==ORDER||LA43_0==SAMPLE||(LA43_0 >= STORE && LA43_0 <= STREAM)||LA43_0==UNION) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:524:4: alias
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_rel1600);
                    alias112=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias112.getTree());


                    if ( state.backtracking==0 ) {
                           ((statement_scope)statement_stack.peek()).inputAlias = (alias112!=null?alias112.name:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:528:4: inline_op
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_inline_op_in_rel1610);
                    inline_op113=inline_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, inline_op113.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class inline_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:531:1: inline_op : op_clause ( parallel_clause )? ;
    public final LogicalPlanGenerator.inline_op_return inline_op() throws RecognitionException {
        LogicalPlanGenerator.inline_op_return retval = new LogicalPlanGenerator.inline_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.op_clause_return op_clause114 =null;

        LogicalPlanGenerator.parallel_clause_return parallel_clause115 =null;




            String al = ((statement_scope)statement_stack.peek()).alias;
            ((statement_scope)statement_stack.peek()).alias = null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:539:2: ( op_clause ( parallel_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:539:4: op_clause ( parallel_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_op_clause_in_inline_op1630);
            op_clause114=op_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, op_clause114.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:539:14: ( parallel_clause )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==PARALLEL) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:539:14: parallel_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_parallel_clause_in_inline_op1632);
                    parallel_clause115=parallel_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, parallel_clause115.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                   Operator op = builder.lookupOperator( (op_clause114!=null?op_clause114.alias:null) );
                   builder.setParallel( (LogicalRelationalOperator)op, ((statement_scope)statement_stack.peek()).parallel );
                   ((statement_scope)statement_stack.peek()).inputAlias = (op_clause114!=null?op_clause114.alias:null);
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

            if ( state.backtracking==0 ) {
                ((statement_scope)statement_stack.peek()).alias = al;
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_op"


    public static class flatten_generated_item_return extends TreeRuleReturnScope {
        public LogicalExpressionPlan plan;
        public boolean flattenFlag;
        public LogicalSchema schema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:547:1: flatten_generated_item returns [LogicalExpressionPlan plan, boolean flattenFlag, LogicalSchema schema] : ( flatten_clause[$plan] | col_range[$plan] | expr[$plan] | STAR ) ( field_def_list )? ;
    public final LogicalPlanGenerator.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        LogicalPlanGenerator.flatten_generated_item_return retval = new LogicalPlanGenerator.flatten_generated_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR119=null;
        LogicalPlanGenerator.flatten_clause_return flatten_clause116 =null;

        LogicalPlanGenerator.col_range_return col_range117 =null;

        LogicalPlanGenerator.expr_return expr118 =null;

        LogicalPlanGenerator.field_def_list_return field_def_list120 =null;


        CommonTree STAR119_tree=null;


            retval.plan = new LogicalExpressionPlan();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:551:2: ( ( flatten_clause[$plan] | col_range[$plan] | expr[$plan] | STAR ) ( field_def_list )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:551:4: ( flatten_clause[$plan] | col_range[$plan] | expr[$plan] | STAR ) ( field_def_list )?
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:551:4: ( flatten_clause[$plan] | col_range[$plan] | expr[$plan] | STAR )
            int alt45=4;
            switch ( input.LA(1) ) {
            case FLATTEN:
                {
                alt45=1;
                }
                break;
            case COL_RANGE:
                {
                alt45=2;
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt45=3;
                }
                break;
            case STAR:
                {
                int LA45_4 = input.LA(2);

                if ( (LA45_4==DOWN) ) {
                    alt45=3;
                }
                else if ( (LA45_4==EOF||LA45_4==UP||LA45_4==DIV||LA45_4==DOLLARVAR||LA45_4==DOUBLENUMBER||LA45_4==FALSE||LA45_4==FLATTEN||LA45_4==FLOATNUMBER||LA45_4==GROUP||LA45_4==INTEGER||LA45_4==LONGINTEGER||LA45_4==MINUS||LA45_4==PERCENT||LA45_4==PLUS||LA45_4==QUOTEDSTRING||LA45_4==STAR||LA45_4==TRUE||(LA45_4 >= BAG_VAL && LA45_4 <= BIN_EXPR)||(LA45_4 >= CAST_EXPR && LA45_4 <= FIELD_DEF_WITHOUT_IDENTIFIER)||LA45_4==FUNC_EVAL||LA45_4==IDENTIFIER||(LA45_4 >= MAP_VAL && LA45_4 <= NEG)||LA45_4==NULL||LA45_4==TUPLE_VAL) ) {
                    alt45=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }

            switch (alt45) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:551:6: flatten_clause[$plan]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item1658);
                    flatten_clause116=flatten_clause(retval.plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, flatten_clause116.getTree());


                    if ( state.backtracking==0 ) { retval.flattenFlag = true; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:552:6: col_range[$plan]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_flatten_generated_item1668);
                    col_range117=col_range(retval.plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range117.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:553:6: expr[$plan]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_flatten_generated_item1676);
                    expr118=expr(retval.plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr118.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:554:6: STAR
                    {
                    _last = (CommonTree)input.LT(1);
                    STAR119=(CommonTree)match(input,STAR,FOLLOW_STAR_in_flatten_generated_item1684); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR119_tree = (CommonTree)adaptor.dupNode(STAR119);


                    adaptor.addChild(root_0, STAR119_tree);
                    }


                    if ( state.backtracking==0 ) {
                             builder.buildProjectExpr( new SourceLocation( (PigParserNode)STAR119 ), retval.plan, ((GScope_scope)GScope_stack.peek()).currentOp,
                                 ((statement_scope)statement_stack.peek()).inputIndex, null, -1 );
                         }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:560:4: ( field_def_list )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ((LA46_0 >= FIELD_DEF && LA46_0 <= FIELD_DEF_WITHOUT_IDENTIFIER)) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:560:6: field_def_list
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item1703);
                    field_def_list120=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, field_def_list120.getTree());


                    if ( state.backtracking==0 ) { retval.schema = (field_def_list120!=null?field_def_list120.schema:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class flatten_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:563:1: flatten_clause[LogicalExpressionPlan plan] : ^( FLATTEN expr[$plan] ) ;
    public final LogicalPlanGenerator.flatten_clause_return flatten_clause(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.flatten_clause_return retval = new LogicalPlanGenerator.flatten_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FLATTEN121=null;
        LogicalPlanGenerator.expr_return expr122 =null;


        CommonTree FLATTEN121_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:564:2: ( ^( FLATTEN expr[$plan] ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:564:4: ^( FLATTEN expr[$plan] )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FLATTEN121=(CommonTree)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause1721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN121_tree = (CommonTree)adaptor.dupNode(FLATTEN121);


            root_1 = (CommonTree)adaptor.becomeRoot(FLATTEN121_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_flatten_clause1723);
            expr122=expr(plan);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr122.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class store_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:567:1: store_clause returns [String alias] : ^( STORE rel filename ( func_clause[FunctionType.STOREFUNC] )? ) ;
    public final LogicalPlanGenerator.store_clause_return store_clause() throws RecognitionException {
        LogicalPlanGenerator.store_clause_return retval = new LogicalPlanGenerator.store_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STORE123=null;
        LogicalPlanGenerator.rel_return rel124 =null;

        LogicalPlanGenerator.filename_return filename125 =null;

        LogicalPlanGenerator.func_clause_return func_clause126 =null;


        CommonTree STORE123_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:568:2: ( ^( STORE rel filename ( func_clause[FunctionType.STOREFUNC] )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:568:4: ^( STORE rel filename ( func_clause[FunctionType.STOREFUNC] )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STORE123=(CommonTree)match(input,STORE,FOLLOW_STORE_in_store_clause1741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE123_tree = (CommonTree)adaptor.dupNode(STORE123);


            root_1 = (CommonTree)adaptor.becomeRoot(STORE123_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_store_clause1743);
            rel124=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel124.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_filename_in_store_clause1745);
            filename125=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, filename125.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:568:26: ( func_clause[FunctionType.STOREFUNC] )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==FUNC||LA47_0==FUNC_REF) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:568:26: func_clause[FunctionType.STOREFUNC]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_store_clause1747);
                    func_clause126=func_clause(FunctionType.STOREFUNC);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause126.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)STORE123 );
                   retval.alias = builder.buildStoreOp( loc, ((statement_scope)statement_stack.peek()).alias,
                      ((statement_scope)statement_stack.peek()).inputAlias, (filename125!=null?filename125.filename:null), (func_clause126!=null?func_clause126.funcSpec:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class filter_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:576:1: filter_clause returns [String alias] : ^( FILTER rel cond[exprPlan] ) ;
    public final LogicalPlanGenerator.filter_clause_return filter_clause() throws RecognitionException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.filter_clause_return retval = new LogicalPlanGenerator.filter_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FILTER127=null;
        LogicalPlanGenerator.rel_return rel128 =null;

        LogicalPlanGenerator.cond_return cond129 =null;


        CommonTree FILTER127_tree=null;

         
            LogicalExpressionPlan exprPlan = new LogicalExpressionPlan();
            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createFilterOp();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:582:2: ( ^( FILTER rel cond[exprPlan] ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:582:4: ^( FILTER rel cond[exprPlan] )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FILTER127=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_filter_clause1781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER127_tree = (CommonTree)adaptor.dupNode(FILTER127);


            root_1 = (CommonTree)adaptor.becomeRoot(FILTER127_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_filter_clause1783);
            rel128=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel128.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_filter_clause1785);
            cond129=cond(exprPlan);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond129.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.alias = builder.buildFilterOp( new SourceLocation( (PigParserNode)FILTER127 ),
                       (LOFilter)((GScope_scope)GScope_stack.peek()).currentOp, ((statement_scope)statement_stack.peek()).alias,
                       ((statement_scope)statement_stack.peek()).inputAlias, exprPlan );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class cond_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:590:1: cond[LogicalExpressionPlan exprPlan] returns [LogicalExpression expr] : ( ^( OR left= cond[exprPlan] right= cond[exprPlan] ) | ^( AND left= cond[exprPlan] right= cond[exprPlan] ) | ^( NOT c= cond[exprPlan] ) | ^( NULL expr[$exprPlan] ( NOT )? ) | ^( rel_op_eq e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_ne e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_lt e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_lte e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_gt e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_gte e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( STR_OP_MATCHES e1= expr[$exprPlan] e2= expr[$exprPlan] ) | func_eval[$exprPlan] );
    public final LogicalPlanGenerator.cond_return cond(LogicalExpressionPlan exprPlan) throws RecognitionException {
        LogicalPlanGenerator.cond_return retval = new LogicalPlanGenerator.cond_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OR130=null;
        CommonTree AND131=null;
        CommonTree NOT132=null;
        CommonTree NULL133=null;
        CommonTree NOT135=null;
        CommonTree STR_OP_MATCHES142=null;
        LogicalPlanGenerator.cond_return left =null;

        LogicalPlanGenerator.cond_return right =null;

        LogicalPlanGenerator.cond_return c =null;

        LogicalPlanGenerator.expr_return e1 =null;

        LogicalPlanGenerator.expr_return e2 =null;

        LogicalPlanGenerator.expr_return expr134 =null;

        LogicalPlanGenerator.rel_op_eq_return rel_op_eq136 =null;

        LogicalPlanGenerator.rel_op_ne_return rel_op_ne137 =null;

        LogicalPlanGenerator.rel_op_lt_return rel_op_lt138 =null;

        LogicalPlanGenerator.rel_op_lte_return rel_op_lte139 =null;

        LogicalPlanGenerator.rel_op_gt_return rel_op_gt140 =null;

        LogicalPlanGenerator.rel_op_gte_return rel_op_gte141 =null;

        LogicalPlanGenerator.func_eval_return func_eval143 =null;


        CommonTree OR130_tree=null;
        CommonTree AND131_tree=null;
        CommonTree NOT132_tree=null;
        CommonTree NULL133_tree=null;
        CommonTree NOT135_tree=null;
        CommonTree STR_OP_MATCHES142_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:591:2: ( ^( OR left= cond[exprPlan] right= cond[exprPlan] ) | ^( AND left= cond[exprPlan] right= cond[exprPlan] ) | ^( NOT c= cond[exprPlan] ) | ^( NULL expr[$exprPlan] ( NOT )? ) | ^( rel_op_eq e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_ne e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_lt e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_lte e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_gt e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( rel_op_gte e1= expr[$exprPlan] e2= expr[$exprPlan] ) | ^( STR_OP_MATCHES e1= expr[$exprPlan] e2= expr[$exprPlan] ) | func_eval[$exprPlan] )
            int alt49=12;
            switch ( input.LA(1) ) {
            case OR:
                {
                alt49=1;
                }
                break;
            case AND:
                {
                alt49=2;
                }
                break;
            case NOT:
                {
                alt49=3;
                }
                break;
            case NULL:
                {
                alt49=4;
                }
                break;
            case NUM_OP_EQ:
            case STR_OP_EQ:
                {
                alt49=5;
                }
                break;
            case NUM_OP_NE:
            case STR_OP_NE:
                {
                alt49=6;
                }
                break;
            case NUM_OP_LT:
            case STR_OP_LT:
                {
                alt49=7;
                }
                break;
            case NUM_OP_LTE:
            case STR_OP_LTE:
                {
                alt49=8;
                }
                break;
            case NUM_OP_GT:
            case STR_OP_GT:
                {
                alt49=9;
                }
                break;
            case NUM_OP_GTE:
            case STR_OP_GTE:
                {
                alt49=10;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt49=11;
                }
                break;
            case FUNC_EVAL:
                {
                alt49=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }

            switch (alt49) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:591:4: ^( OR left= cond[exprPlan] right= cond[exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    OR130=(CommonTree)match(input,OR,FOLLOW_OR_in_cond1809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR130_tree = (CommonTree)adaptor.dupNode(OR130);


                    root_1 = (CommonTree)adaptor.becomeRoot(OR130_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1815);
                    left=cond(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, left.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1822);
                    right=cond(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, right.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new OrExpression( exprPlan, (left!=null?left.expr:null), (right!=null?right.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)OR130 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:596:4: ^( AND left= cond[exprPlan] right= cond[exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    AND131=(CommonTree)match(input,AND,FOLLOW_AND_in_cond1837); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND131_tree = (CommonTree)adaptor.dupNode(AND131);


                    root_1 = (CommonTree)adaptor.becomeRoot(AND131_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1843);
                    left=cond(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, left.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1850);
                    right=cond(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, right.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new AndExpression( exprPlan, (left!=null?left.expr:null), (right!=null?right.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)AND131 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:601:4: ^( NOT c= cond[exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NOT132=(CommonTree)match(input,NOT,FOLLOW_NOT_in_cond1865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT132_tree = (CommonTree)adaptor.dupNode(NOT132);


                    root_1 = (CommonTree)adaptor.becomeRoot(NOT132_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1871);
                    c=cond(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, c.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new NotExpression( exprPlan, (c!=null?c.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)NOT132 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:606:4: ^( NULL expr[$exprPlan] ( NOT )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NULL133=(CommonTree)match(input,NULL,FOLLOW_NULL_in_cond1886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL133_tree = (CommonTree)adaptor.dupNode(NULL133);


                    root_1 = (CommonTree)adaptor.becomeRoot(NULL133_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1888);
                    expr134=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr134.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:606:28: ( NOT )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==NOT) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:606:28: NOT
                            {
                            _last = (CommonTree)input.LT(1);
                            NOT135=(CommonTree)match(input,NOT,FOLLOW_NOT_in_cond1891); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT135_tree = (CommonTree)adaptor.dupNode(NOT135);


                            adaptor.addChild(root_1, NOT135_tree);
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new IsNullExpression( exprPlan, (expr134!=null?expr134.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)NULL133 ) );
                           if( NOT135 != null ) {
                               retval.expr = new NotExpression( exprPlan, retval.expr );
                               retval.expr.setLocation( new SourceLocation( (PigParserNode)NOT135 ) );
                           }
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:615:4: ^( rel_op_eq e1= expr[$exprPlan] e2= expr[$exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_eq_in_cond1906);
                    rel_op_eq136=rel_op_eq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_1 = (CommonTree)adaptor.becomeRoot(rel_op_eq136.getTree(), root_1);


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1912);
                    e1=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1919);
                    e2=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e2.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new EqualExpression( exprPlan, (e1!=null?e1.expr:null), (e2!=null?e2.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)(rel_op_eq136!=null?((CommonTree)rel_op_eq136.start):null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:620:4: ^( rel_op_ne e1= expr[$exprPlan] e2= expr[$exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_ne_in_cond1935);
                    rel_op_ne137=rel_op_ne();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_1 = (CommonTree)adaptor.becomeRoot(rel_op_ne137.getTree(), root_1);


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1941);
                    e1=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1948);
                    e2=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e2.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new NotEqualExpression( exprPlan, (e1!=null?e1.expr:null), (e2!=null?e2.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)(rel_op_ne137!=null?((CommonTree)rel_op_ne137.start):null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:625:4: ^( rel_op_lt e1= expr[$exprPlan] e2= expr[$exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lt_in_cond1964);
                    rel_op_lt138=rel_op_lt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_1 = (CommonTree)adaptor.becomeRoot(rel_op_lt138.getTree(), root_1);


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1970);
                    e1=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1977);
                    e2=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e2.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new LessThanExpression( exprPlan, (e1!=null?e1.expr:null), (e2!=null?e2.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)(rel_op_lt138!=null?((CommonTree)rel_op_lt138.start):null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:630:4: ^( rel_op_lte e1= expr[$exprPlan] e2= expr[$exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lte_in_cond1993);
                    rel_op_lte139=rel_op_lte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_1 = (CommonTree)adaptor.becomeRoot(rel_op_lte139.getTree(), root_1);


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1999);
                    e1=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond2006);
                    e2=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e2.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new LessThanEqualExpression( exprPlan, (e1!=null?e1.expr:null), (e2!=null?e2.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)(rel_op_lte139!=null?((CommonTree)rel_op_lte139.start):null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:635:4: ^( rel_op_gt e1= expr[$exprPlan] e2= expr[$exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gt_in_cond2021);
                    rel_op_gt140=rel_op_gt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_1 = (CommonTree)adaptor.becomeRoot(rel_op_gt140.getTree(), root_1);


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond2027);
                    e1=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond2034);
                    e2=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e2.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new GreaterThanExpression( exprPlan, (e1!=null?e1.expr:null), (e2!=null?e2.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)(rel_op_gt140!=null?((CommonTree)rel_op_gt140.start):null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:640:4: ^( rel_op_gte e1= expr[$exprPlan] e2= expr[$exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gte_in_cond2050);
                    rel_op_gte141=rel_op_gte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_1 = (CommonTree)adaptor.becomeRoot(rel_op_gte141.getTree(), root_1);


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond2056);
                    e1=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond2063);
                    e2=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e2.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new GreaterThanEqualExpression( exprPlan, (e1!=null?e1.expr:null), (e2!=null?e2.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)(rel_op_gte141!=null?((CommonTree)rel_op_gte141.start):null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:645:4: ^( STR_OP_MATCHES e1= expr[$exprPlan] e2= expr[$exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STR_OP_MATCHES142=(CommonTree)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_cond2078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES142_tree = (CommonTree)adaptor.dupNode(STR_OP_MATCHES142);


                    root_1 = (CommonTree)adaptor.becomeRoot(STR_OP_MATCHES142_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond2084);
                    e1=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond2091);
                    e2=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e2.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new RegexExpression( exprPlan, (e1!=null?e1.expr:null), (e2!=null?e2.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)STR_OP_MATCHES142 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:650:4: func_eval[$exprPlan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_eval_in_cond2104);
                    func_eval143=func_eval(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, func_eval143.getTree());


                    if ( state.backtracking==0 ) {
                           retval.expr = (func_eval143!=null?func_eval143.expr:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class func_eval_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_eval"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:656:1: func_eval[LogicalExpressionPlan plan] returns [LogicalExpression expr] : ^( FUNC_EVAL func_name ( real_arg[$plan] )* ) ;
    public final LogicalPlanGenerator.func_eval_return func_eval(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.func_eval_return retval = new LogicalPlanGenerator.func_eval_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FUNC_EVAL144=null;
        LogicalPlanGenerator.func_name_return func_name145 =null;

        LogicalPlanGenerator.real_arg_return real_arg146 =null;


        CommonTree FUNC_EVAL144_tree=null;

         
            List<LogicalExpression> args = new ArrayList<LogicalExpression>();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:660:2: ( ^( FUNC_EVAL func_name ( real_arg[$plan] )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:660:4: ^( FUNC_EVAL func_name ( real_arg[$plan] )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FUNC_EVAL144=(CommonTree)match(input,FUNC_EVAL,FOLLOW_FUNC_EVAL_in_func_eval2131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNC_EVAL144_tree = (CommonTree)adaptor.dupNode(FUNC_EVAL144);


            root_1 = (CommonTree)adaptor.becomeRoot(FUNC_EVAL144_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_func_name_in_func_eval2133);
            func_name145=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, func_name145.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:660:27: ( real_arg[$plan] )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==DIV||LA50_0==DOLLARVAR||LA50_0==DOUBLENUMBER||LA50_0==FALSE||LA50_0==FLOATNUMBER||LA50_0==GROUP||LA50_0==INTEGER||LA50_0==LONGINTEGER||LA50_0==MINUS||LA50_0==PERCENT||LA50_0==PLUS||LA50_0==QUOTEDSTRING||LA50_0==STAR||LA50_0==TRUE||(LA50_0 >= BAG_VAL && LA50_0 <= BIN_EXPR)||(LA50_0 >= CAST_EXPR && LA50_0 <= EXPR_IN_PAREN)||LA50_0==FUNC_EVAL||LA50_0==IDENTIFIER||(LA50_0 >= MAP_VAL && LA50_0 <= NEG)||LA50_0==NULL||LA50_0==TUPLE_VAL) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:660:29: real_arg[$plan]
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_real_arg_in_func_eval2137);
            	    real_arg146=real_arg(plan);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, real_arg146.getTree());


            	    if ( state.backtracking==0 ) { args.add( (real_arg146!=null?real_arg146.expr:null) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)(func_name145!=null?((CommonTree)func_name145.start):null) );
                   retval.expr = builder.buildUDF( loc, plan, (func_name145!=null?func_name145.funcName:null), args );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_eval"


    public static class real_arg_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:667:1: real_arg[LogicalExpressionPlan plan] returns [LogicalExpression expr] : (e= expr[$plan] | STAR |cr= col_range[$plan] );
    public final LogicalPlanGenerator.real_arg_return real_arg(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.real_arg_return retval = new LogicalPlanGenerator.real_arg_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR147=null;
        LogicalPlanGenerator.expr_return e =null;

        LogicalPlanGenerator.col_range_return cr =null;


        CommonTree STAR147_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:668:2: (e= expr[$plan] | STAR |cr= col_range[$plan] )
            int alt51=3;
            switch ( input.LA(1) ) {
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt51=1;
                }
                break;
            case STAR:
                {
                int LA51_2 = input.LA(2);

                if ( (LA51_2==DOWN) ) {
                    alt51=1;
                }
                else if ( (LA51_2==EOF||LA51_2==UP||LA51_2==DIV||LA51_2==DOLLARVAR||LA51_2==DOUBLENUMBER||LA51_2==FALSE||LA51_2==FLOATNUMBER||LA51_2==GROUP||LA51_2==INTEGER||LA51_2==LONGINTEGER||LA51_2==MINUS||LA51_2==PERCENT||LA51_2==PLUS||LA51_2==QUOTEDSTRING||LA51_2==STAR||LA51_2==TRUE||(LA51_2 >= BAG_VAL && LA51_2 <= BIN_EXPR)||(LA51_2 >= CAST_EXPR && LA51_2 <= EXPR_IN_PAREN)||LA51_2==FUNC_EVAL||LA51_2==IDENTIFIER||(LA51_2 >= MAP_VAL && LA51_2 <= NEG)||LA51_2==NULL||LA51_2==TUPLE_VAL) ) {
                    alt51=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 2, input);

                    throw nvae;

                }
                }
                break;
            case COL_RANGE:
                {
                alt51=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }

            switch (alt51) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:668:4: e= expr[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_real_arg2169);
                    e=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, e.getTree());


                    if ( state.backtracking==0 ) { retval.expr = (e!=null?e.expr:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:669:4: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR147=(CommonTree)match(input,STAR,FOLLOW_STAR_in_real_arg2177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR147_tree = (CommonTree)adaptor.dupNode(STAR147);


                    adaptor.addChild(root_0, STAR147_tree);
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = builder.buildProjectExpr( new SourceLocation( (PigParserNode)STAR147 ), plan, ((GScope_scope)GScope_stack.peek()).currentOp, 
                               ((statement_scope)statement_stack.peek()).inputIndex, null, -1 );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:674:4: cr= col_range[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_real_arg2191);
                    cr=col_range(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cr.getTree());


                    if ( state.backtracking==0 ) { retval.expr = (cr!=null?cr.expr:null);}

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class expr_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:677:1: expr[LogicalExpressionPlan plan] returns [LogicalExpression expr] : ( ^( PLUS left= expr[$plan] right= expr[$plan] ) | ^( MINUS left= expr[$plan] right= expr[$plan] ) | ^( STAR left= expr[$plan] right= expr[$plan] ) | ^( DIV left= expr[$plan] right= expr[$plan] ) | ^( PERCENT left= expr[$plan] right= expr[$plan] ) | const_expr[$plan] | var_expr[$plan] | ^( NEG e= expr[$plan] ) | ^( CAST_EXPR type_cast e= expr[$plan] ) | ^( EXPR_IN_PAREN e= expr[$plan] ) );
    public final LogicalPlanGenerator.expr_return expr(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.expr_return retval = new LogicalPlanGenerator.expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PLUS148=null;
        CommonTree MINUS149=null;
        CommonTree STAR150=null;
        CommonTree DIV151=null;
        CommonTree PERCENT152=null;
        CommonTree NEG155=null;
        CommonTree CAST_EXPR156=null;
        CommonTree EXPR_IN_PAREN158=null;
        LogicalPlanGenerator.expr_return left =null;

        LogicalPlanGenerator.expr_return right =null;

        LogicalPlanGenerator.expr_return e =null;

        LogicalPlanGenerator.const_expr_return const_expr153 =null;

        LogicalPlanGenerator.var_expr_return var_expr154 =null;

        LogicalPlanGenerator.type_cast_return type_cast157 =null;


        CommonTree PLUS148_tree=null;
        CommonTree MINUS149_tree=null;
        CommonTree STAR150_tree=null;
        CommonTree DIV151_tree=null;
        CommonTree PERCENT152_tree=null;
        CommonTree NEG155_tree=null;
        CommonTree CAST_EXPR156_tree=null;
        CommonTree EXPR_IN_PAREN158_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:678:2: ( ^( PLUS left= expr[$plan] right= expr[$plan] ) | ^( MINUS left= expr[$plan] right= expr[$plan] ) | ^( STAR left= expr[$plan] right= expr[$plan] ) | ^( DIV left= expr[$plan] right= expr[$plan] ) | ^( PERCENT left= expr[$plan] right= expr[$plan] ) | const_expr[$plan] | var_expr[$plan] | ^( NEG e= expr[$plan] ) | ^( CAST_EXPR type_cast e= expr[$plan] ) | ^( EXPR_IN_PAREN e= expr[$plan] ) )
            int alt52=10;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt52=1;
                }
                break;
            case MINUS:
                {
                int LA52_2 = input.LA(2);

                if ( (LA52_2==DOWN) ) {
                    alt52=2;
                }
                else if ( (LA52_2==DOUBLENUMBER||LA52_2==FLOATNUMBER||LA52_2==INTEGER||LA52_2==LONGINTEGER) ) {
                    alt52=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 52, 2, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                alt52=3;
                }
                break;
            case DIV:
                {
                alt52=4;
                }
                break;
            case PERCENT:
                {
                alt52=5;
                }
                break;
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case MAP_VAL:
            case NULL:
            case TUPLE_VAL:
                {
                alt52=6;
                }
                break;
            case DOLLARVAR:
            case GROUP:
            case BIN_EXPR:
            case FUNC_EVAL:
            case IDENTIFIER:
                {
                alt52=7;
                }
                break;
            case NEG:
                {
                alt52=8;
                }
                break;
            case CAST_EXPR:
                {
                alt52=9;
                }
                break;
            case EXPR_IN_PAREN:
                {
                alt52=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }

            switch (alt52) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:678:4: ^( PLUS left= expr[$plan] right= expr[$plan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    PLUS148=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_expr2210); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS148_tree = (CommonTree)adaptor.dupNode(PLUS148);


                    root_1 = (CommonTree)adaptor.becomeRoot(PLUS148_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2216);
                    left=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, left.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2223);
                    right=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, right.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new AddExpression( plan, (left!=null?left.expr:null), (right!=null?right.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)PLUS148 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:683:4: ^( MINUS left= expr[$plan] right= expr[$plan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    MINUS149=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_expr2238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS149_tree = (CommonTree)adaptor.dupNode(MINUS149);


                    root_1 = (CommonTree)adaptor.becomeRoot(MINUS149_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2244);
                    left=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, left.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2251);
                    right=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, right.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new SubtractExpression( plan, (left!=null?left.expr:null), (right!=null?right.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)MINUS149 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:688:4: ^( STAR left= expr[$plan] right= expr[$plan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STAR150=(CommonTree)match(input,STAR,FOLLOW_STAR_in_expr2266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR150_tree = (CommonTree)adaptor.dupNode(STAR150);


                    root_1 = (CommonTree)adaptor.becomeRoot(STAR150_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2272);
                    left=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, left.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2279);
                    right=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, right.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new MultiplyExpression( plan, (left!=null?left.expr:null), (right!=null?right.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)STAR150 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:693:4: ^( DIV left= expr[$plan] right= expr[$plan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    DIV151=(CommonTree)match(input,DIV,FOLLOW_DIV_in_expr2294); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV151_tree = (CommonTree)adaptor.dupNode(DIV151);


                    root_1 = (CommonTree)adaptor.becomeRoot(DIV151_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2300);
                    left=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, left.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2307);
                    right=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, right.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new DivideExpression( plan, (left!=null?left.expr:null), (right!=null?right.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)DIV151 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:698:4: ^( PERCENT left= expr[$plan] right= expr[$plan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    PERCENT152=(CommonTree)match(input,PERCENT,FOLLOW_PERCENT_in_expr2322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PERCENT152_tree = (CommonTree)adaptor.dupNode(PERCENT152);


                    root_1 = (CommonTree)adaptor.becomeRoot(PERCENT152_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2328);
                    left=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, left.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2335);
                    right=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, right.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new ModExpression( plan, (left!=null?left.expr:null), (right!=null?right.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)PERCENT152 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:703:4: const_expr[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_const_expr_in_expr2348);
                    const_expr153=const_expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, const_expr153.getTree());


                    if ( state.backtracking==0 ) {
                           retval.expr = (const_expr153!=null?const_expr153.expr:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:707:4: var_expr[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_var_expr_in_expr2359);
                    var_expr154=var_expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, var_expr154.getTree());


                    if ( state.backtracking==0 ) {
                           retval.expr = (var_expr154!=null?var_expr154.expr:null); 
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:711:4: ^( NEG e= expr[$plan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NEG155=(CommonTree)match(input,NEG,FOLLOW_NEG_in_expr2372); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEG155_tree = (CommonTree)adaptor.dupNode(NEG155);


                    root_1 = (CommonTree)adaptor.becomeRoot(NEG155_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2378);
                    e=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new NegativeExpression( plan, (e!=null?e.expr:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)(e!=null?((CommonTree)e.start):null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:716:4: ^( CAST_EXPR type_cast e= expr[$plan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    CAST_EXPR156=(CommonTree)match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_expr2393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST_EXPR156_tree = (CommonTree)adaptor.dupNode(CAST_EXPR156);


                    root_1 = (CommonTree)adaptor.becomeRoot(CAST_EXPR156_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_cast_in_expr2395);
                    type_cast157=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type_cast157.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2401);
                    e=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = new CastExpression( plan, (e!=null?e.expr:null), (type_cast157!=null?type_cast157.fieldSchema:null) );
                           retval.expr.setLocation( new SourceLocation( (PigParserNode)(type_cast157!=null?((CommonTree)type_cast157.start):null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:721:4: ^( EXPR_IN_PAREN e= expr[$plan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    EXPR_IN_PAREN158=(CommonTree)match(input,EXPR_IN_PAREN,FOLLOW_EXPR_IN_PAREN_in_expr2417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXPR_IN_PAREN158_tree = (CommonTree)adaptor.dupNode(EXPR_IN_PAREN158);


                    root_1 = (CommonTree)adaptor.becomeRoot(EXPR_IN_PAREN158_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr2423);
                    e=expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = (e!=null?e.expr:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class type_cast_return extends TreeRuleReturnScope {
        public LogicalFieldSchema fieldSchema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:727:1: type_cast returns [LogicalFieldSchema fieldSchema] : ( simple_type | map_type | tuple_type_cast | bag_type_cast );
    public final LogicalPlanGenerator.type_cast_return type_cast() throws RecognitionException {
        LogicalPlanGenerator.type_cast_return retval = new LogicalPlanGenerator.type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.simple_type_return simple_type159 =null;

        LogicalPlanGenerator.map_type_return map_type160 =null;

        LogicalPlanGenerator.tuple_type_cast_return tuple_type_cast161 =null;

        LogicalPlanGenerator.bag_type_cast_return bag_type_cast162 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:728:2: ( simple_type | map_type | tuple_type_cast | bag_type_cast )
            int alt53=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt53=1;
                }
                break;
            case MAP_TYPE:
                {
                alt53=2;
                }
                break;
            case TUPLE_TYPE_CAST:
                {
                alt53=3;
                }
                break;
            case BAG_TYPE_CAST:
                {
                alt53=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }

            switch (alt53) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:728:4: simple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_type_in_type_cast2445);
                    simple_type159=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_type159.getTree());


                    if ( state.backtracking==0 ) {
                            retval.fieldSchema = new LogicalFieldSchema( null, null, (simple_type159!=null?simple_type159.datatype:0) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:732:4: map_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_type_in_type_cast2455);
                    map_type160=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map_type160.getTree());


                    if ( state.backtracking==0 ) {
                           retval.fieldSchema = new LogicalFieldSchema( null, (map_type160!=null?map_type160.logicalSchema:null), DataType.MAP );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:736:4: tuple_type_cast
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_type_cast_in_type_cast2465);
                    tuple_type_cast161=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple_type_cast161.getTree());


                    if ( state.backtracking==0 ) {
                           retval.fieldSchema = new LogicalFieldSchema( null, (tuple_type_cast161!=null?tuple_type_cast161.logicalSchema:null), DataType.TUPLE );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:740:4: bag_type_cast
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_type_cast_in_type_cast2475);
                    bag_type_cast162=bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag_type_cast162.getTree());


                    if ( state.backtracking==0 ) {
                           retval.fieldSchema = new LogicalFieldSchema( null, (bag_type_cast162!=null?bag_type_cast162.logicalSchema:null), DataType.BAG );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast"


    public static class tuple_type_cast_return extends TreeRuleReturnScope {
        public LogicalSchema logicalSchema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:746:1: tuple_type_cast returns [LogicalSchema logicalSchema] : ^( TUPLE_TYPE_CAST ( type_cast )* ) ;
    public final LogicalPlanGenerator.tuple_type_cast_return tuple_type_cast() throws RecognitionException {
        LogicalPlanGenerator.tuple_type_cast_return retval = new LogicalPlanGenerator.tuple_type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_TYPE_CAST163=null;
        LogicalPlanGenerator.type_cast_return type_cast164 =null;


        CommonTree TUPLE_TYPE_CAST163_tree=null;


            retval.logicalSchema = new LogicalSchema();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:750:2: ( ^( TUPLE_TYPE_CAST ( type_cast )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:750:4: ^( TUPLE_TYPE_CAST ( type_cast )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_TYPE_CAST163=(CommonTree)match(input,TUPLE_TYPE_CAST,FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast2500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_TYPE_CAST163_tree = (CommonTree)adaptor.dupNode(TUPLE_TYPE_CAST163);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_TYPE_CAST163_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:750:23: ( type_cast )*
                loop54:
                do {
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==BOOLEAN||LA54_0==BYTEARRAY||LA54_0==CHARARRAY||LA54_0==DOUBLE||LA54_0==FLOAT||LA54_0==INT||LA54_0==LONG||LA54_0==BAG_TYPE_CAST||LA54_0==MAP_TYPE||LA54_0==TUPLE_TYPE_CAST) ) {
                        alt54=1;
                    }


                    switch (alt54) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:750:25: type_cast
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_type_cast_in_tuple_type_cast2504);
                	    type_cast164=type_cast();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, type_cast164.getTree());


                	    if ( state.backtracking==0 ) { retval.logicalSchema.addField( (type_cast164!=null?type_cast164.fieldSchema:null) ); }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop54;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type_cast"


    public static class bag_type_cast_return extends TreeRuleReturnScope {
        public LogicalSchema logicalSchema;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:753:1: bag_type_cast returns [LogicalSchema logicalSchema] : ^( BAG_TYPE_CAST ( tuple_type_cast )? ) ;
    public final LogicalPlanGenerator.bag_type_cast_return bag_type_cast() throws RecognitionException {
        LogicalPlanGenerator.bag_type_cast_return retval = new LogicalPlanGenerator.bag_type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_TYPE_CAST165=null;
        LogicalPlanGenerator.tuple_type_cast_return tuple_type_cast166 =null;


        CommonTree BAG_TYPE_CAST165_tree=null;


            retval.logicalSchema = new LogicalSchema();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:757:2: ( ^( BAG_TYPE_CAST ( tuple_type_cast )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:757:4: ^( BAG_TYPE_CAST ( tuple_type_cast )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_TYPE_CAST165=(CommonTree)match(input,BAG_TYPE_CAST,FOLLOW_BAG_TYPE_CAST_in_bag_type_cast2531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_TYPE_CAST165_tree = (CommonTree)adaptor.dupNode(BAG_TYPE_CAST165);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_TYPE_CAST165_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:757:21: ( tuple_type_cast )?
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==TUPLE_TYPE_CAST) ) {
                    alt55=1;
                }
                switch (alt55) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:757:21: tuple_type_cast
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_tuple_type_cast_in_bag_type_cast2533);
                        tuple_type_cast166=tuple_type_cast();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, tuple_type_cast166.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) { 
                   retval.logicalSchema.addField( new LogicalFieldSchema( null, (tuple_type_cast166!=null?tuple_type_cast166.logicalSchema:null), DataType.TUPLE ) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type_cast"


    public static class var_expr_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "var_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:763:1: var_expr[LogicalExpressionPlan plan] returns [LogicalExpression expr] : projectable_expr[$plan] ( dot_proj | pound_proj )* ;
    public final LogicalPlanGenerator.var_expr_return var_expr(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.var_expr_return retval = new LogicalPlanGenerator.var_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.projectable_expr_return projectable_expr167 =null;

        LogicalPlanGenerator.dot_proj_return dot_proj168 =null;

        LogicalPlanGenerator.pound_proj_return pound_proj169 =null;




            List<Object> columns = null;
            SourceLocation loc = new SourceLocation( (PigParserNode)((CommonTree)retval.start) );

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:768:2: ( projectable_expr[$plan] ( dot_proj | pound_proj )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:768:4: projectable_expr[$plan] ( dot_proj | pound_proj )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_projectable_expr_in_var_expr2560);
            projectable_expr167=projectable_expr(plan);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, projectable_expr167.getTree());


            if ( state.backtracking==0 ) { retval.expr = (projectable_expr167!=null?projectable_expr167.expr:null); }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:769:4: ( dot_proj | pound_proj )*
            loop56:
            do {
                int alt56=3;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==PERIOD) ) {
                    alt56=1;
                }
                else if ( (LA56_0==POUND) ) {
                    alt56=2;
                }


                switch (alt56) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:769:6: dot_proj
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_dot_proj_in_var_expr2570);
            	    dot_proj168=dot_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dot_proj168.getTree());


            	    if ( state.backtracking==0 ) {
            	             columns = (dot_proj168!=null?dot_proj168.cols:null);
            	             boolean processScalar = false;
            	             if( retval.expr instanceof ScalarExpression ) {
            	                 List<Operator> succs = plan.getSuccessors( retval.expr );
            	                 if( succs == null || succs.size() == 0 ) {
            	                     // We haven't process this scalar projection yet. Set the flag so as to process it next.
            	                     // This will handle a projection such as A.u.x, where we need to build ScalarExpression
            	                     // for A.u, while for x, we need to treat it as a normal dereference (on the output of
            	                     // the ScalarExpression.
            	                     processScalar = true;
            	                 }
            	             }
            	             
            	             if( processScalar ) {
            	                 // This is a scalar projection.
            	                 ScalarExpression scalarExpr = (ScalarExpression)retval.expr;
            	                 
            	                 if( (dot_proj168!=null?dot_proj168.cols:null).size() > 1 ) {
            	                     throw new InvalidScalarProjectionException( input, loc, scalarExpr );
            	                 }
            	                 
            	                 Object val = (dot_proj168!=null?dot_proj168.cols:null).get( 0 );
            	                 int pos = -1;
            	                 LogicalRelationalOperator relOp = (LogicalRelationalOperator)scalarExpr.getImplicitReferencedOperator();
            	                 LogicalSchema schema = null;
            	                 try {
            	                     schema = relOp.getSchema();
            	                 } catch(FrontendException e) {
            	                     throw new PlanGenerationFailureException( input, loc, e );
            	                 }
            	                 if( val instanceof Integer ) {
            	                     pos = (Integer)val;
            	                     if( schema != null && pos >= schema.size() ) {
            	                         throw new InvalidScalarProjectionException( input, loc, scalarExpr );
            	                     }
            	                 } else {
            	                     String colAlias = (String)val;
            	                     pos = schema.getFieldPosition( colAlias );
            	                     if( schema == null || pos == -1 ) {
            	                         throw new InvalidScalarProjectionException( input, loc, scalarExpr );
            	                     }
            	                 }
            	                 
            	                 ConstantExpression constExpr = new ConstantExpression( plan, pos);
            	                 plan.connect( retval.expr, constExpr );
            	                 constExpr = new ConstantExpression( plan, "filename"); // place holder for file name.
            	                 plan.connect( retval.expr, constExpr );
            	             } else {
            	                 DereferenceExpression e = new DereferenceExpression( plan );
            	                 e.setRawColumns( (dot_proj168!=null?dot_proj168.cols:null) );
            	                 e.setLocation( new SourceLocation( (PigParserNode)(dot_proj168!=null?((CommonTree)dot_proj168.start):null) ) );
            	                 plan.connect( e, retval.expr );
            	                 retval.expr = e;
            	             }
            	         }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:826:6: pound_proj
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_pound_proj_in_var_expr2585);
            	    pound_proj169=pound_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, pound_proj169.getTree());


            	    if ( state.backtracking==0 ) {
            	             MapLookupExpression e = new MapLookupExpression( plan, (pound_proj169!=null?pound_proj169.key:null) );
            	             e.setLocation( new SourceLocation( (PigParserNode)(pound_proj169!=null?((CommonTree)pound_proj169.start):null) ) );
            	             plan.connect( e, retval.expr );
            	             retval.expr = e;
            	         }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            if ( state.backtracking==0 ) {
                  if( ( retval.expr instanceof ScalarExpression ) && columns == null ) {
                      throw new InvalidScalarProjectionException( input, loc, (ScalarExpression)retval.expr, " : A column needs to be projected from a relation for it to be used as a scalar" );
                  }
              }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "var_expr"


    public static class projectable_expr_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projectable_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:841:1: projectable_expr[LogicalExpressionPlan plan] returns [LogicalExpression expr] : ( func_eval[$plan] | col_ref[$plan] | bin_expr[$plan] );
    public final LogicalPlanGenerator.projectable_expr_return projectable_expr(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.projectable_expr_return retval = new LogicalPlanGenerator.projectable_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.func_eval_return func_eval170 =null;

        LogicalPlanGenerator.col_ref_return col_ref171 =null;

        LogicalPlanGenerator.bin_expr_return bin_expr172 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:842:2: ( func_eval[$plan] | col_ref[$plan] | bin_expr[$plan] )
            int alt57=3;
            switch ( input.LA(1) ) {
            case FUNC_EVAL:
                {
                alt57=1;
                }
                break;
            case DOLLARVAR:
            case GROUP:
            case IDENTIFIER:
                {
                alt57=2;
                }
                break;
            case BIN_EXPR:
                {
                alt57=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }

            switch (alt57) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:842:4: func_eval[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_eval_in_projectable_expr2615);
                    func_eval170=func_eval(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, func_eval170.getTree());


                    if ( state.backtracking==0 ) {
                           retval.expr = (func_eval170!=null?func_eval170.expr:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:846:4: col_ref[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_projectable_expr2626);
                    col_ref171=col_ref(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref171.getTree());


                    if ( state.backtracking==0 ) {
                           retval.expr = (col_ref171!=null?col_ref171.expr:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:850:4: bin_expr[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bin_expr_in_projectable_expr2637);
                    bin_expr172=bin_expr(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bin_expr172.getTree());


                    if ( state.backtracking==0 ) {
                           retval.expr = (bin_expr172!=null?bin_expr172.expr:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projectable_expr"


    public static class dot_proj_return extends TreeRuleReturnScope {
        public List<Object> cols;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dot_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:856:1: dot_proj returns [List<Object> cols] : ^( PERIOD ( col_alias_or_index )+ ) ;
    public final LogicalPlanGenerator.dot_proj_return dot_proj() throws RecognitionException {
        LogicalPlanGenerator.dot_proj_return retval = new LogicalPlanGenerator.dot_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PERIOD173=null;
        LogicalPlanGenerator.col_alias_or_index_return col_alias_or_index174 =null;


        CommonTree PERIOD173_tree=null;


            retval.cols = new ArrayList<Object>();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:860:2: ( ^( PERIOD ( col_alias_or_index )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:860:4: ^( PERIOD ( col_alias_or_index )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PERIOD173=(CommonTree)match(input,PERIOD,FOLLOW_PERIOD_in_dot_proj2663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PERIOD173_tree = (CommonTree)adaptor.dupNode(PERIOD173);


            root_1 = (CommonTree)adaptor.becomeRoot(PERIOD173_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:860:14: ( col_alias_or_index )+
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==DOLLARVAR||LA58_0==GROUP||LA58_0==IDENTIFIER) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:860:16: col_alias_or_index
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj2667);
            	    col_alias_or_index174=col_alias_or_index();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, col_alias_or_index174.getTree());


            	    if ( state.backtracking==0 ) { retval.cols.add( (col_alias_or_index174!=null?col_alias_or_index174.col:null) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dot_proj"


    public static class col_alias_or_index_return extends TreeRuleReturnScope {
        public Object col;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias_or_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:863:1: col_alias_or_index returns [Object col] : ( col_alias | col_index );
    public final LogicalPlanGenerator.col_alias_or_index_return col_alias_or_index() throws RecognitionException {
        LogicalPlanGenerator.col_alias_or_index_return retval = new LogicalPlanGenerator.col_alias_or_index_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.col_alias_return col_alias175 =null;

        LogicalPlanGenerator.col_index_return col_index176 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:864:2: ( col_alias | col_index )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==GROUP||LA59_0==IDENTIFIER) ) {
                alt59=1;
            }
            else if ( (LA59_0==DOLLARVAR) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:864:4: col_alias
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_alias_in_col_alias_or_index2687);
                    col_alias175=col_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_alias175.getTree());


                    if ( state.backtracking==0 ) { retval.col = (col_alias175!=null?col_alias175.col:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:864:43: col_index
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_index_in_col_alias_or_index2693);
                    col_index176=col_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_index176.getTree());


                    if ( state.backtracking==0 ) { retval.col = (col_index176!=null?col_index176.col:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias_or_index"


    public static class col_alias_return extends TreeRuleReturnScope {
        public Object col;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:867:1: col_alias returns [Object col] : ( GROUP | IDENTIFIER );
    public final LogicalPlanGenerator.col_alias_return col_alias() throws RecognitionException {
        LogicalPlanGenerator.col_alias_return retval = new LogicalPlanGenerator.col_alias_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GROUP177=null;
        CommonTree IDENTIFIER178=null;

        CommonTree GROUP177_tree=null;
        CommonTree IDENTIFIER178_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:868:2: ( GROUP | IDENTIFIER )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==GROUP) ) {
                alt60=1;
            }
            else if ( (LA60_0==IDENTIFIER) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }
            switch (alt60) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:868:4: GROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GROUP177=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_col_alias2708); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP177_tree = (CommonTree)adaptor.dupNode(GROUP177);


                    adaptor.addChild(root_0, GROUP177_tree);
                    }


                    if ( state.backtracking==0 ) { retval.col = (GROUP177!=null?GROUP177.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:869:4: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER178=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_col_alias2715); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER178_tree = (CommonTree)adaptor.dupNode(IDENTIFIER178);


                    adaptor.addChild(root_0, IDENTIFIER178_tree);
                    }


                    if ( state.backtracking==0 ) { retval.col = (IDENTIFIER178!=null?IDENTIFIER178.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias"


    public static class col_index_return extends TreeRuleReturnScope {
        public Integer col;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:872:1: col_index returns [Integer col] : DOLLARVAR ;
    public final LogicalPlanGenerator.col_index_return col_index() throws RecognitionException {
        LogicalPlanGenerator.col_index_return retval = new LogicalPlanGenerator.col_index_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOLLARVAR179=null;

        CommonTree DOLLARVAR179_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:873:2: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:873:4: DOLLARVAR
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            DOLLARVAR179=(CommonTree)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_col_index2730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR179_tree = (CommonTree)adaptor.dupNode(DOLLARVAR179);


            adaptor.addChild(root_0, DOLLARVAR179_tree);
            }


            if ( state.backtracking==0 ) { retval.col = builder.undollar( (DOLLARVAR179!=null?DOLLARVAR179.getText():null) ); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_index"


    public static class col_range_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:877:1: col_range[LogicalExpressionPlan plan] returns [LogicalExpression expr] : ^( COL_RANGE (startExpr= col_ref[$plan] )? DOUBLE_PERIOD (endExpr= col_ref[$plan] )? ) ;
    public final LogicalPlanGenerator.col_range_return col_range(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.col_range_return retval = new LogicalPlanGenerator.col_range_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COL_RANGE180=null;
        CommonTree DOUBLE_PERIOD181=null;
        LogicalPlanGenerator.col_ref_return startExpr =null;

        LogicalPlanGenerator.col_ref_return endExpr =null;


        CommonTree COL_RANGE180_tree=null;
        CommonTree DOUBLE_PERIOD181_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:878:2: ( ^( COL_RANGE (startExpr= col_ref[$plan] )? DOUBLE_PERIOD (endExpr= col_ref[$plan] )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:878:5: ^( COL_RANGE (startExpr= col_ref[$plan] )? DOUBLE_PERIOD (endExpr= col_ref[$plan] )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            COL_RANGE180=(CommonTree)match(input,COL_RANGE,FOLLOW_COL_RANGE_in_col_range2749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COL_RANGE180_tree = (CommonTree)adaptor.dupNode(COL_RANGE180);


            root_1 = (CommonTree)adaptor.becomeRoot(COL_RANGE180_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:878:17: (startExpr= col_ref[$plan] )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==DOLLARVAR||LA61_0==GROUP||LA61_0==IDENTIFIER) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:878:18: startExpr= col_ref[$plan]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_col_range2756);
                    startExpr=col_ref(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, startExpr.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            DOUBLE_PERIOD181=(CommonTree)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range2761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOUBLE_PERIOD181_tree = (CommonTree)adaptor.dupNode(DOUBLE_PERIOD181);


            adaptor.addChild(root_1, DOUBLE_PERIOD181_tree);
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:878:61: (endExpr= col_ref[$plan] )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==DOLLARVAR||LA62_0==GROUP||LA62_0==IDENTIFIER) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:878:62: endExpr= col_ref[$plan]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_col_range2768);
                    endExpr=col_ref(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, endExpr.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                    SourceLocation loc = new SourceLocation( (PigParserNode)((CommonTree)retval.start) );
                    retval.expr = builder.buildRangeProjectExpr(
                                loc, plan, ((GScope_scope)GScope_stack.peek()).currentOp,
                                ((statement_scope)statement_stack.peek()).inputIndex, 
                                (startExpr!=null?startExpr.expr:null), 
                                (endExpr!=null?endExpr.expr:null)
                            );
                }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class pound_proj_return extends TreeRuleReturnScope {
        public String key;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pound_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:890:1: pound_proj returns [String key] : ^( POUND ( QUOTEDSTRING | NULL ) ) ;
    public final LogicalPlanGenerator.pound_proj_return pound_proj() throws RecognitionException {
        LogicalPlanGenerator.pound_proj_return retval = new LogicalPlanGenerator.pound_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree POUND182=null;
        CommonTree QUOTEDSTRING183=null;
        CommonTree NULL184=null;

        CommonTree POUND182_tree=null;
        CommonTree QUOTEDSTRING183_tree=null;
        CommonTree NULL184_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:891:2: ( ^( POUND ( QUOTEDSTRING | NULL ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:891:4: ^( POUND ( QUOTEDSTRING | NULL ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            POUND182=(CommonTree)match(input,POUND,FOLLOW_POUND_in_pound_proj2796); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            POUND182_tree = (CommonTree)adaptor.dupNode(POUND182);


            root_1 = (CommonTree)adaptor.becomeRoot(POUND182_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:891:13: ( QUOTEDSTRING | NULL )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==QUOTEDSTRING) ) {
                alt63=1;
            }
            else if ( (LA63_0==NULL) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:891:15: QUOTEDSTRING
                    {
                    _last = (CommonTree)input.LT(1);
                    QUOTEDSTRING183=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_pound_proj2800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING183_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING183);


                    adaptor.addChild(root_1, QUOTEDSTRING183_tree);
                    }


                    if ( state.backtracking==0 ) { retval.key = builder.unquote( (QUOTEDSTRING183!=null?QUOTEDSTRING183.getText():null) ); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:891:80: NULL
                    {
                    _last = (CommonTree)input.LT(1);
                    NULL184=(CommonTree)match(input,NULL,FOLLOW_NULL_in_pound_proj2806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL184_tree = (CommonTree)adaptor.dupNode(NULL184);


                    adaptor.addChild(root_1, NULL184_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pound_proj"


    public static class bin_expr_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bin_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:894:1: bin_expr[LogicalExpressionPlan plan] returns [LogicalExpression expr] : ^( BIN_EXPR cond[$plan] e1= expr[$plan] e2= expr[$plan] ) ;
    public final LogicalPlanGenerator.bin_expr_return bin_expr(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.bin_expr_return retval = new LogicalPlanGenerator.bin_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BIN_EXPR185=null;
        LogicalPlanGenerator.expr_return e1 =null;

        LogicalPlanGenerator.expr_return e2 =null;

        LogicalPlanGenerator.cond_return cond186 =null;


        CommonTree BIN_EXPR185_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:895:2: ( ^( BIN_EXPR cond[$plan] e1= expr[$plan] e2= expr[$plan] ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:895:4: ^( BIN_EXPR cond[$plan] e1= expr[$plan] e2= expr[$plan] )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BIN_EXPR185=(CommonTree)match(input,BIN_EXPR,FOLLOW_BIN_EXPR_in_bin_expr2826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIN_EXPR185_tree = (CommonTree)adaptor.dupNode(BIN_EXPR185);


            root_1 = (CommonTree)adaptor.becomeRoot(BIN_EXPR185_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_bin_expr2828);
            cond186=cond(plan);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond186.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_bin_expr2835);
            e1=expr(plan);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, e1.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_bin_expr2842);
            e2=expr(plan);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, e2.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.expr = new BinCondExpression( plan, (cond186!=null?cond186.expr:null), (e1!=null?e1.expr:null), (e2!=null?e2.expr:null) );
                   retval.expr.setLocation( new SourceLocation( (PigParserNode)((CommonTree)retval.start) ) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bin_expr"


    public static class limit_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:902:1: limit_clause returns [String alias] : ^( LIMIT rel ( INTEGER | LONGINTEGER | expr[exprPlan] ) ) ;
    public final LogicalPlanGenerator.limit_clause_return limit_clause() throws RecognitionException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.limit_clause_return retval = new LogicalPlanGenerator.limit_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LIMIT187=null;
        CommonTree INTEGER189=null;
        CommonTree LONGINTEGER190=null;
        LogicalPlanGenerator.rel_return rel188 =null;

        LogicalPlanGenerator.expr_return expr191 =null;


        CommonTree LIMIT187_tree=null;
        CommonTree INTEGER189_tree=null;
        CommonTree LONGINTEGER190_tree=null;

         
            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createLimitOp();
            LogicalExpressionPlan exprPlan = new LogicalExpressionPlan();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:908:2: ( ^( LIMIT rel ( INTEGER | LONGINTEGER | expr[exprPlan] ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:908:5: ^( LIMIT rel ( INTEGER | LONGINTEGER | expr[exprPlan] ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LIMIT187=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause2876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT187_tree = (CommonTree)adaptor.dupNode(LIMIT187);


            root_1 = (CommonTree)adaptor.becomeRoot(LIMIT187_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_limit_clause2878);
            rel188=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel188.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:908:18: ( INTEGER | LONGINTEGER | expr[exprPlan] )
            int alt64=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                int LA64_1 = input.LA(2);

                if ( (synpred117_LogicalPlanGenerator()) ) {
                    alt64=1;
                }
                else if ( (true) ) {
                    alt64=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;

                }
                }
                break;
            case LONGINTEGER:
                {
                int LA64_2 = input.LA(2);

                if ( (synpred118_LogicalPlanGenerator()) ) {
                    alt64=2;
                }
                else if ( (true) ) {
                    alt64=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 2, input);

                    throw nvae;

                }
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case STAR:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt64=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:908:20: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER189=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_limit_clause2882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER189_tree = (CommonTree)adaptor.dupNode(INTEGER189);


                    adaptor.addChild(root_1, INTEGER189_tree);
                    }


                    if ( state.backtracking==0 ) {
                           retval.alias = builder.buildLimitOp( new SourceLocation( (PigParserNode)LIMIT187 ), 
                             ((statement_scope)statement_stack.peek()).alias, ((statement_scope)statement_stack.peek()).inputAlias, Long.valueOf( (INTEGER189!=null?INTEGER189.getText():null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:913:4: LONGINTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    LONGINTEGER190=(CommonTree)match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_limit_clause2892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINTEGER190_tree = (CommonTree)adaptor.dupNode(LONGINTEGER190);


                    adaptor.addChild(root_1, LONGINTEGER190_tree);
                    }


                    if ( state.backtracking==0 ) {
                           retval.alias = builder.buildLimitOp( new SourceLocation( (PigParserNode)LIMIT187 ),
                             ((statement_scope)statement_stack.peek()).alias, ((statement_scope)statement_stack.peek()).inputAlias, builder.parseLong( (LONGINTEGER190!=null?LONGINTEGER190.getText():null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:918:4: expr[exprPlan]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_limit_clause2902);
                    expr191=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr191.getTree());


                    if ( state.backtracking==0 ) {
                           retval.alias = builder.buildLimitOp( new SourceLocation( (PigParserNode)LIMIT187 ),
                               (LOLimit)((GScope_scope)GScope_stack.peek()).currentOp, ((statement_scope)statement_stack.peek()).alias, ((statement_scope)statement_stack.peek()).inputAlias, exprPlan);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:926:1: sample_clause returns [String alias] : ^( SAMPLE rel ( DOUBLENUMBER | expr[exprPlan] ) ) ;
    public final LogicalPlanGenerator.sample_clause_return sample_clause() throws RecognitionException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.sample_clause_return retval = new LogicalPlanGenerator.sample_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SAMPLE192=null;
        CommonTree DOUBLENUMBER194=null;
        LogicalPlanGenerator.rel_return rel193 =null;

        LogicalPlanGenerator.expr_return expr195 =null;


        CommonTree SAMPLE192_tree=null;
        CommonTree DOUBLENUMBER194_tree=null;

         
            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createSampleOp();
            LogicalExpressionPlan exprPlan = new LogicalExpressionPlan();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:932:2: ( ^( SAMPLE rel ( DOUBLENUMBER | expr[exprPlan] ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:932:4: ^( SAMPLE rel ( DOUBLENUMBER | expr[exprPlan] ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SAMPLE192=(CommonTree)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause2938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE192_tree = (CommonTree)adaptor.dupNode(SAMPLE192);


            root_1 = (CommonTree)adaptor.becomeRoot(SAMPLE192_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_sample_clause2940);
            rel193=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel193.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:932:18: ( DOUBLENUMBER | expr[exprPlan] )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==DOUBLENUMBER) ) {
                int LA65_1 = input.LA(2);

                if ( (synpred119_LogicalPlanGenerator()) ) {
                    alt65=1;
                }
                else if ( (true) ) {
                    alt65=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 65, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA65_0==DIV||LA65_0==DOLLARVAR||LA65_0==FALSE||LA65_0==FLOATNUMBER||LA65_0==GROUP||LA65_0==INTEGER||LA65_0==LONGINTEGER||LA65_0==MINUS||LA65_0==PERCENT||LA65_0==PLUS||LA65_0==QUOTEDSTRING||LA65_0==STAR||LA65_0==TRUE||(LA65_0 >= BAG_VAL && LA65_0 <= BIN_EXPR)||LA65_0==CAST_EXPR||LA65_0==EXPR_IN_PAREN||LA65_0==FUNC_EVAL||LA65_0==IDENTIFIER||(LA65_0 >= MAP_VAL && LA65_0 <= NEG)||LA65_0==NULL||LA65_0==TUPLE_VAL) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:932:20: DOUBLENUMBER
                    {
                    _last = (CommonTree)input.LT(1);
                    DOUBLENUMBER194=(CommonTree)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_sample_clause2944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER194_tree = (CommonTree)adaptor.dupNode(DOUBLENUMBER194);


                    adaptor.addChild(root_1, DOUBLENUMBER194_tree);
                    }


                    if ( state.backtracking==0 ) {
                           retval.alias = builder.buildSampleOp( new SourceLocation( (PigParserNode)SAMPLE192 ), ((statement_scope)statement_stack.peek()).alias,
                               ((statement_scope)statement_stack.peek()).inputAlias, Double.valueOf( (DOUBLENUMBER194!=null?DOUBLENUMBER194.getText():null) ),
                               new SourceLocation( (PigParserNode)DOUBLENUMBER194 ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:938:4: expr[exprPlan]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_sample_clause2954);
                    expr195=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr195.getTree());


                    if ( state.backtracking==0 ) {
                           retval.alias = builder.buildSampleOp( new SourceLocation( (PigParserNode)SAMPLE192 ),
                               (LOFilter)((GScope_scope)GScope_stack.peek()).currentOp, ((statement_scope)statement_stack.peek()).alias, ((statement_scope)statement_stack.peek()).inputAlias, exprPlan, (expr195!=null?expr195.expr:null));
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class order_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:946:1: order_clause returns [String alias] : ^( ORDER rel order_by_clause ( func_clause[FunctionType.COMPARISONFUNC] )? ) ;
    public final LogicalPlanGenerator.order_clause_return order_clause() throws RecognitionException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.order_clause_return retval = new LogicalPlanGenerator.order_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ORDER196=null;
        LogicalPlanGenerator.rel_return rel197 =null;

        LogicalPlanGenerator.order_by_clause_return order_by_clause198 =null;

        LogicalPlanGenerator.func_clause_return func_clause199 =null;


        CommonTree ORDER196_tree=null;


            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createSortOp();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:951:2: ( ^( ORDER rel order_by_clause ( func_clause[FunctionType.COMPARISONFUNC] )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:951:4: ^( ORDER rel order_by_clause ( func_clause[FunctionType.COMPARISONFUNC] )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            ORDER196=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_order_clause2991); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER196_tree = (CommonTree)adaptor.dupNode(ORDER196);


            root_1 = (CommonTree)adaptor.becomeRoot(ORDER196_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_order_clause2993);
            rel197=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel197.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_clause_in_order_clause2995);
            order_by_clause198=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, order_by_clause198.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:951:33: ( func_clause[FunctionType.COMPARISONFUNC] )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==FUNC||LA66_0==FUNC_REF) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:951:33: func_clause[FunctionType.COMPARISONFUNC]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_order_clause2997);
                    func_clause199=func_clause(FunctionType.COMPARISONFUNC);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause199.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)ORDER196 );
                   retval.alias = builder.buildSortOp( loc, (LOSort)((GScope_scope)GScope_stack.peek()).currentOp, ((statement_scope)statement_stack.peek()).alias,
                       ((statement_scope)statement_stack.peek()).inputAlias, (order_by_clause198!=null?order_by_clause198.plans:null), 
                       (order_by_clause198!=null?order_by_clause198.ascFlags:null), (func_clause199!=null?func_clause199.funcSpec:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends TreeRuleReturnScope {
        public List<LogicalExpressionPlan> plans;
        public List<Boolean> ascFlags;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:960:1: order_by_clause returns [List<LogicalExpressionPlan> plans, List<Boolean> ascFlags] : ( STAR ( ASC | DESC )? | ( order_col )+ );
    public final LogicalPlanGenerator.order_by_clause_return order_by_clause() throws RecognitionException {
        LogicalPlanGenerator.order_by_clause_return retval = new LogicalPlanGenerator.order_by_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR200=null;
        CommonTree ASC201=null;
        CommonTree DESC202=null;
        LogicalPlanGenerator.order_col_return order_col203 =null;


        CommonTree STAR200_tree=null;
        CommonTree ASC201_tree=null;
        CommonTree DESC202_tree=null;


            retval.plans = new ArrayList<LogicalExpressionPlan>();
            retval.ascFlags = new ArrayList<Boolean>();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:965:2: ( STAR ( ASC | DESC )? | ( order_col )+ )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==STAR) ) {
                alt69=1;
            }
            else if ( (LA69_0==DOLLARVAR||LA69_0==GROUP||LA69_0==COL_RANGE||LA69_0==IDENTIFIER) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:965:4: STAR ( ASC | DESC )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR200=(CommonTree)match(input,STAR,FOLLOW_STAR_in_order_by_clause3024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR200_tree = (CommonTree)adaptor.dupNode(STAR200);


                    adaptor.addChild(root_0, STAR200_tree);
                    }


                    if ( state.backtracking==0 ) {
                           LogicalExpressionPlan plan = new LogicalExpressionPlan();
                           builder.buildProjectExpr( new SourceLocation( (PigParserNode)STAR200 ), plan, ((GScope_scope)GScope_stack.peek()).currentOp,
                               ((statement_scope)statement_stack.peek()).inputIndex, null, -1 );
                           retval.plans.add( plan );
                       }

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:971:4: ( ASC | DESC )?
                    int alt67=3;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==ASC) ) {
                        alt67=1;
                    }
                    else if ( (LA67_0==DESC) ) {
                        alt67=2;
                    }
                    switch (alt67) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:971:6: ASC
                            {
                            _last = (CommonTree)input.LT(1);
                            ASC201=(CommonTree)match(input,ASC,FOLLOW_ASC_in_order_by_clause3033); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASC201_tree = (CommonTree)adaptor.dupNode(ASC201);


                            adaptor.addChild(root_0, ASC201_tree);
                            }


                            if ( state.backtracking==0 ) { retval.ascFlags.add( true ); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:971:39: DESC
                            {
                            _last = (CommonTree)input.LT(1);
                            DESC202=(CommonTree)match(input,DESC,FOLLOW_DESC_in_order_by_clause3039); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DESC202_tree = (CommonTree)adaptor.dupNode(DESC202);


                            adaptor.addChild(root_0, DESC202_tree);
                            }


                            if ( state.backtracking==0 ) { retval.ascFlags.add( false ); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:972:4: ( order_col )+
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:972:4: ( order_col )+
                    int cnt68=0;
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==DOLLARVAR||LA68_0==GROUP||LA68_0==COL_RANGE||LA68_0==IDENTIFIER) ) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:972:6: order_col
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_order_col_in_order_by_clause3051);
                    	    order_col203=order_col();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, order_col203.getTree());


                    	    if ( state.backtracking==0 ) {
                    	           retval.plans.add( (order_col203!=null?order_col203.plan:null) );
                    	           retval.ascFlags.add( (order_col203!=null?order_col203.ascFlag:null) );
                    	       }

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt68 >= 1 ) break loop68;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(68, input);
                                throw eee;
                        }
                        cnt68++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_return extends TreeRuleReturnScope {
        public LogicalExpressionPlan plan;
        public Boolean ascFlag;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:979:1: order_col returns [LogicalExpressionPlan plan, Boolean ascFlag] : ( col_range[$plan] ( ASC | DESC )? | col_ref[$plan] ( ASC | DESC )? );
    public final LogicalPlanGenerator.order_col_return order_col() throws RecognitionException {
        LogicalPlanGenerator.order_col_return retval = new LogicalPlanGenerator.order_col_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ASC205=null;
        CommonTree DESC206=null;
        CommonTree ASC208=null;
        CommonTree DESC209=null;
        LogicalPlanGenerator.col_range_return col_range204 =null;

        LogicalPlanGenerator.col_ref_return col_ref207 =null;


        CommonTree ASC205_tree=null;
        CommonTree DESC206_tree=null;
        CommonTree ASC208_tree=null;
        CommonTree DESC209_tree=null;

         
            retval.plan = new LogicalExpressionPlan();
            retval.ascFlag = true;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:984:2: ( col_range[$plan] ( ASC | DESC )? | col_ref[$plan] ( ASC | DESC )? )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==COL_RANGE) ) {
                alt72=1;
            }
            else if ( (LA72_0==DOLLARVAR||LA72_0==GROUP||LA72_0==IDENTIFIER) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }
            switch (alt72) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:984:4: col_range[$plan] ( ASC | DESC )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_order_col3077);
                    col_range204=col_range(retval.plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range204.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:984:21: ( ASC | DESC )?
                    int alt70=3;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==ASC) ) {
                        alt70=1;
                    }
                    else if ( (LA70_0==DESC) ) {
                        alt70=2;
                    }
                    switch (alt70) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:984:22: ASC
                            {
                            _last = (CommonTree)input.LT(1);
                            ASC205=(CommonTree)match(input,ASC,FOLLOW_ASC_in_order_col3081); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASC205_tree = (CommonTree)adaptor.dupNode(ASC205);


                            adaptor.addChild(root_0, ASC205_tree);
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:984:28: DESC
                            {
                            _last = (CommonTree)input.LT(1);
                            DESC206=(CommonTree)match(input,DESC,FOLLOW_DESC_in_order_col3085); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DESC206_tree = (CommonTree)adaptor.dupNode(DESC206);


                            adaptor.addChild(root_0, DESC206_tree);
                            }


                            if ( state.backtracking==0 ) { retval.ascFlag = false; }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:985:4: col_ref[$plan] ( ASC | DESC )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_order_col3095);
                    col_ref207=col_ref(retval.plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref207.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:985:19: ( ASC | DESC )?
                    int alt71=3;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==ASC) ) {
                        alt71=1;
                    }
                    else if ( (LA71_0==DESC) ) {
                        alt71=2;
                    }
                    switch (alt71) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:985:21: ASC
                            {
                            _last = (CommonTree)input.LT(1);
                            ASC208=(CommonTree)match(input,ASC,FOLLOW_ASC_in_order_col3100); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASC208_tree = (CommonTree)adaptor.dupNode(ASC208);


                            adaptor.addChild(root_0, ASC208_tree);
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:985:27: DESC
                            {
                            _last = (CommonTree)input.LT(1);
                            DESC209=(CommonTree)match(input,DESC,FOLLOW_DESC_in_order_col3104); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DESC209_tree = (CommonTree)adaptor.dupNode(DESC209);


                            adaptor.addChild(root_0, DESC209_tree);
                            }


                            if ( state.backtracking==0 ) { retval.ascFlag = false; }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:988:1: distinct_clause returns [String alias] : ^( DISTINCT rel ( partition_clause )? ) ;
    public final LogicalPlanGenerator.distinct_clause_return distinct_clause() throws RecognitionException {
        LogicalPlanGenerator.distinct_clause_return retval = new LogicalPlanGenerator.distinct_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DISTINCT210=null;
        LogicalPlanGenerator.rel_return rel211 =null;

        LogicalPlanGenerator.partition_clause_return partition_clause212 =null;


        CommonTree DISTINCT210_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:989:2: ( ^( DISTINCT rel ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:989:4: ^( DISTINCT rel ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DISTINCT210=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause3132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT210_tree = (CommonTree)adaptor.dupNode(DISTINCT210);


            root_1 = (CommonTree)adaptor.becomeRoot(DISTINCT210_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_distinct_clause3134);
            rel211=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel211.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:989:20: ( partition_clause )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==PARTITION) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:989:20: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause3136);
                    partition_clause212=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause212.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.alias = builder.buildDistinctOp( new SourceLocation( (PigParserNode)DISTINCT210 ), ((statement_scope)statement_stack.peek()).alias,
                      ((statement_scope)statement_stack.peek()).inputAlias, (partition_clause212!=null?partition_clause212.partitioner:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends TreeRuleReturnScope {
        public String partitioner;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:996:1: partition_clause returns [String partitioner] : ^( PARTITION func_name ) ;
    public final LogicalPlanGenerator.partition_clause_return partition_clause() throws RecognitionException {
        LogicalPlanGenerator.partition_clause_return retval = new LogicalPlanGenerator.partition_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PARTITION213=null;
        LogicalPlanGenerator.func_name_return func_name214 =null;


        CommonTree PARTITION213_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:997:2: ( ^( PARTITION func_name ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:997:4: ^( PARTITION func_name )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PARTITION213=(CommonTree)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause3159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION213_tree = (CommonTree)adaptor.dupNode(PARTITION213);


            root_1 = (CommonTree)adaptor.becomeRoot(PARTITION213_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_func_name_in_partition_clause3161);
            func_name214=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, func_name214.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.partitioner = (func_name214!=null?func_name214.funcName:null);
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class cross_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1003:1: cross_clause returns [String alias] : ^( CROSS rel_list ( partition_clause )? ) ;
    public final LogicalPlanGenerator.cross_clause_return cross_clause() throws RecognitionException {
        LogicalPlanGenerator.cross_clause_return retval = new LogicalPlanGenerator.cross_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CROSS215=null;
        LogicalPlanGenerator.rel_list_return rel_list216 =null;

        LogicalPlanGenerator.partition_clause_return partition_clause217 =null;


        CommonTree CROSS215_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1004:2: ( ^( CROSS rel_list ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1004:4: ^( CROSS rel_list ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CROSS215=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_cross_clause3183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS215_tree = (CommonTree)adaptor.dupNode(CROSS215);


            root_1 = (CommonTree)adaptor.becomeRoot(CROSS215_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_list_in_cross_clause3185);
            rel_list216=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel_list216.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1004:22: ( partition_clause )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==PARTITION) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1004:22: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_cross_clause3187);
                    partition_clause217=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause217.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.alias = builder.buildCrossOp( new SourceLocation( (PigParserNode)CROSS215 ), ((statement_scope)statement_stack.peek()).alias,
                      (rel_list216!=null?rel_list216.aliasList:null), (partition_clause217!=null?partition_clause217.partitioner:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class rel_list_return extends TreeRuleReturnScope {
        public List<String> aliasList;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1011:1: rel_list returns [List<String> aliasList] : ( rel )+ ;
    public final LogicalPlanGenerator.rel_list_return rel_list() throws RecognitionException {
        LogicalPlanGenerator.rel_list_return retval = new LogicalPlanGenerator.rel_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.rel_return rel218 =null;



         retval.aliasList = new ArrayList<String>(); 
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1013:2: ( ( rel )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1013:4: ( rel )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1013:4: ( rel )+
            int cnt75=0;
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COGROUP||LA75_0==CROSS||LA75_0==DEFINE||LA75_0==DISTINCT||LA75_0==FILTER||LA75_0==FOREACH||LA75_0==GROUP||LA75_0==JOIN||(LA75_0 >= LIMIT && LA75_0 <= LOAD)||LA75_0==MAPREDUCE||LA75_0==ORDER||LA75_0==SAMPLE||(LA75_0 >= STORE && LA75_0 <= STREAM)||LA75_0==UNION||LA75_0==IDENTIFIER) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1013:6: rel
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_rel_in_rel_list3215);
            	    rel218=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, rel218.getTree());


            	    if ( state.backtracking==0 ) { retval.aliasList.add( ((statement_scope)statement_stack.peek()).inputAlias ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt75 >= 1 ) break loop75;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(75, input);
                        throw eee;
                }
                cnt75++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    protected static class join_clause_scope {
        MultiMap<Integer, LogicalExpressionPlan> joinPlans;
        int inputIndex;
        List<String> inputAliases;
        List<Boolean> innerFlags;
    }
    protected Stack join_clause_stack = new Stack();


    public static class join_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1016:1: join_clause returns [String alias] : ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? ) ;
    public final LogicalPlanGenerator.join_clause_return join_clause() throws RecognitionException {
        GScope_stack.push(new GScope_scope());
        join_clause_stack.push(new join_clause_scope());
        LogicalPlanGenerator.join_clause_return retval = new LogicalPlanGenerator.join_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree JOIN219=null;
        LogicalPlanGenerator.join_sub_clause_return join_sub_clause220 =null;

        LogicalPlanGenerator.join_type_return join_type221 =null;

        LogicalPlanGenerator.partition_clause_return partition_clause222 =null;


        CommonTree JOIN219_tree=null;


            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createJoinOp();
            ((join_clause_scope)join_clause_stack.peek()).joinPlans = new MultiMap<Integer, LogicalExpressionPlan>();
            ((join_clause_scope)join_clause_stack.peek()).inputAliases = new ArrayList<String>();
            ((join_clause_scope)join_clause_stack.peek()).innerFlags = new ArrayList<Boolean>();
            int oldStatementIndex = ((statement_scope)statement_stack.peek()).inputIndex;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1034:2: ( ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1034:4: ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            JOIN219=(CommonTree)match(input,JOIN,FOLLOW_JOIN_in_join_clause3254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN219_tree = (CommonTree)adaptor.dupNode(JOIN219);


            root_1 = (CommonTree)adaptor.becomeRoot(JOIN219_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_join_sub_clause_in_join_clause3256);
            join_sub_clause220=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, join_sub_clause220.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1034:28: ( join_type )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==QUOTEDSTRING) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1034:28: join_type
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_type_in_join_clause3258);
                    join_type221=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, join_type221.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1034:39: ( partition_clause )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==PARTITION) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1034:39: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_join_clause3261);
                    partition_clause222=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause222.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)JOIN219 );
                   retval.alias = builder.buildJoinOp( loc, (LOJoin)((GScope_scope)GScope_stack.peek()).currentOp, ((statement_scope)statement_stack.peek()).alias,
                      ((join_clause_scope)join_clause_stack.peek()).inputAliases, ((join_clause_scope)join_clause_stack.peek()).joinPlans,
                      (join_type221!=null?join_type221.type:null), ((join_clause_scope)join_clause_stack.peek()).innerFlags, (partition_clause222!=null?partition_clause222.partitioner:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

            if ( state.backtracking==0 ) {
               ((statement_scope)statement_stack.peek()).inputIndex =oldStatementIndex;
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();
            join_clause_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends TreeRuleReturnScope {
        public JOINTYPE type;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1043:1: join_type returns [JOINTYPE type] : QUOTEDSTRING ;
    public final LogicalPlanGenerator.join_type_return join_type() throws RecognitionException {
        LogicalPlanGenerator.join_type_return retval = new LogicalPlanGenerator.join_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING223=null;

        CommonTree QUOTEDSTRING223_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1044:2: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1044:4: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING223=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type3282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING223_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING223);


            adaptor.addChild(root_0, QUOTEDSTRING223_tree);
            }


            if ( state.backtracking==0 ) {
                   retval.type = builder.parseJoinType( (QUOTEDSTRING223!=null?QUOTEDSTRING223.getText():null), new SourceLocation( (PigParserNode)QUOTEDSTRING223 ) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1050:1: join_sub_clause : ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item | ( join_item )+ );
    public final LogicalPlanGenerator.join_sub_clause_return join_sub_clause() throws RecognitionException {
        LogicalPlanGenerator.join_sub_clause_return retval = new LogicalPlanGenerator.join_sub_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LEFT225=null;
        CommonTree RIGHT226=null;
        CommonTree FULL227=null;
        CommonTree OUTER228=null;
        LogicalPlanGenerator.join_item_return join_item224 =null;

        LogicalPlanGenerator.join_item_return join_item229 =null;

        LogicalPlanGenerator.join_item_return join_item230 =null;


        CommonTree LEFT225_tree=null;
        CommonTree RIGHT226_tree=null;
        CommonTree FULL227_tree=null;
        CommonTree OUTER228_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1051:2: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item | ( join_item )+ )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==JOIN_ITEM) ) {
                int LA81_1 = input.LA(2);

                if ( (synpred138_LogicalPlanGenerator()) ) {
                    alt81=1;
                }
                else if ( (true) ) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1051:4: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_item_in_join_sub_clause3297);
                    join_item224=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_item224.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1051:14: ( LEFT | RIGHT | FULL )
                    int alt78=3;
                    switch ( input.LA(1) ) {
                    case LEFT:
                        {
                        alt78=1;
                        }
                        break;
                    case RIGHT:
                        {
                        alt78=2;
                        }
                        break;
                    case FULL:
                        {
                        alt78=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 78, 0, input);

                        throw nvae;

                    }

                    switch (alt78) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1051:16: LEFT
                            {
                            _last = (CommonTree)input.LT(1);
                            LEFT225=(CommonTree)match(input,LEFT,FOLLOW_LEFT_in_join_sub_clause3301); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LEFT225_tree = (CommonTree)adaptor.dupNode(LEFT225);


                            adaptor.addChild(root_0, LEFT225_tree);
                            }


                            if ( state.backtracking==0 ) { ((join_clause_scope)join_clause_stack.peek()).innerFlags.add( true ); 
                                                  ((join_clause_scope)join_clause_stack.peek()).innerFlags.add( false ); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1053:16: RIGHT
                            {
                            _last = (CommonTree)input.LT(1);
                            RIGHT226=(CommonTree)match(input,RIGHT,FOLLOW_RIGHT_in_join_sub_clause3321); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RIGHT226_tree = (CommonTree)adaptor.dupNode(RIGHT226);


                            adaptor.addChild(root_0, RIGHT226_tree);
                            }


                            if ( state.backtracking==0 ) { ((join_clause_scope)join_clause_stack.peek()).innerFlags.add( false ); 
                                                   ((join_clause_scope)join_clause_stack.peek()).innerFlags.add( true ); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1055:16: FULL
                            {
                            _last = (CommonTree)input.LT(1);
                            FULL227=(CommonTree)match(input,FULL,FOLLOW_FULL_in_join_sub_clause3340); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            FULL227_tree = (CommonTree)adaptor.dupNode(FULL227);


                            adaptor.addChild(root_0, FULL227_tree);
                            }


                            if ( state.backtracking==0 ) { ((join_clause_scope)join_clause_stack.peek()).innerFlags.add( false ); 
                                                  ((join_clause_scope)join_clause_stack.peek()).innerFlags.add( false ); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1056:66: ( OUTER )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==OUTER) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1056:66: OUTER
                            {
                            _last = (CommonTree)input.LT(1);
                            OUTER228=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause3346); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER228_tree = (CommonTree)adaptor.dupNode(OUTER228);


                            adaptor.addChild(root_0, OUTER228_tree);
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_item_in_join_sub_clause3349);
                    join_item229=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_item229.getTree());


                    if ( state.backtracking==0 ) {
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1059:4: ( join_item )+
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1059:4: ( join_item )+
                    int cnt80=0;
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==JOIN_ITEM) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1059:4: join_item
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_join_item_in_join_sub_clause3359);
                    	    join_item230=join_item();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, join_item230.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt80 >= 1 ) break loop80;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(80, input);
                                throw eee;
                        }
                        cnt80++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1062:1: join_item : ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final LogicalPlanGenerator.join_item_return join_item() throws RecognitionException {
        LogicalPlanGenerator.join_item_return retval = new LogicalPlanGenerator.join_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree JOIN_ITEM231=null;
        LogicalPlanGenerator.rel_return rel232 =null;

        LogicalPlanGenerator.join_group_by_clause_return join_group_by_clause233 =null;


        CommonTree JOIN_ITEM231_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1063:2: ( ^( JOIN_ITEM rel join_group_by_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1063:4: ^( JOIN_ITEM rel join_group_by_clause )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            JOIN_ITEM231=(CommonTree)match(input,JOIN_ITEM,FOLLOW_JOIN_ITEM_in_join_item3372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN_ITEM231_tree = (CommonTree)adaptor.dupNode(JOIN_ITEM231);


            root_1 = (CommonTree)adaptor.becomeRoot(JOIN_ITEM231_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_join_item3374);
            rel232=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel232.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_join_group_by_clause_in_join_item3376);
            join_group_by_clause233=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, join_group_by_clause233.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   ((join_clause_scope)join_clause_stack.peek()).inputAliases.add( ((statement_scope)statement_stack.peek()).inputAlias );
                   ((join_clause_scope)join_clause_stack.peek()).joinPlans.put( ((join_clause_scope)join_clause_stack.peek()).inputIndex, (join_group_by_clause233!=null?join_group_by_clause233.plans:null) );
                   ((join_clause_scope)join_clause_stack.peek()).inputIndex++;
                   ((statement_scope)statement_stack.peek()).inputIndex++;
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends TreeRuleReturnScope {
        public List<LogicalExpressionPlan> plans;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1072:1: join_group_by_clause returns [List<LogicalExpressionPlan> plans] : ^( BY ( join_group_by_expr )+ ) ;
    public final LogicalPlanGenerator.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        LogicalPlanGenerator.join_group_by_clause_return retval = new LogicalPlanGenerator.join_group_by_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BY234=null;
        LogicalPlanGenerator.join_group_by_expr_return join_group_by_expr235 =null;


        CommonTree BY234_tree=null;


            retval.plans = new ArrayList<LogicalExpressionPlan>();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1076:2: ( ^( BY ( join_group_by_expr )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1076:4: ^( BY ( join_group_by_expr )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BY234=(CommonTree)match(input,BY,FOLLOW_BY_in_join_group_by_clause3403); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY234_tree = (CommonTree)adaptor.dupNode(BY234);


            root_1 = (CommonTree)adaptor.becomeRoot(BY234_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1076:10: ( join_group_by_expr )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==DIV||LA82_0==DOLLARVAR||LA82_0==DOUBLENUMBER||LA82_0==FALSE||LA82_0==FLOATNUMBER||LA82_0==GROUP||LA82_0==INTEGER||LA82_0==LONGINTEGER||LA82_0==MINUS||LA82_0==PERCENT||LA82_0==PLUS||LA82_0==QUOTEDSTRING||LA82_0==STAR||LA82_0==TRUE||(LA82_0 >= BAG_VAL && LA82_0 <= BIN_EXPR)||(LA82_0 >= CAST_EXPR && LA82_0 <= EXPR_IN_PAREN)||LA82_0==FUNC_EVAL||LA82_0==IDENTIFIER||(LA82_0 >= MAP_VAL && LA82_0 <= NEG)||LA82_0==NULL||LA82_0==TUPLE_VAL) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1076:12: join_group_by_expr
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_clause3407);
            	    join_group_by_expr235=join_group_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, join_group_by_expr235.getTree());


            	    if ( state.backtracking==0 ) { retval.plans.add( (join_group_by_expr235!=null?join_group_by_expr235.plan:null) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class join_group_by_expr_return extends TreeRuleReturnScope {
        public LogicalExpressionPlan plan;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1079:1: join_group_by_expr returns [LogicalExpressionPlan plan] : ( col_range[$plan] | expr[$plan] | STAR );
    public final LogicalPlanGenerator.join_group_by_expr_return join_group_by_expr() throws RecognitionException {
        LogicalPlanGenerator.join_group_by_expr_return retval = new LogicalPlanGenerator.join_group_by_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR238=null;
        LogicalPlanGenerator.col_range_return col_range236 =null;

        LogicalPlanGenerator.expr_return expr237 =null;


        CommonTree STAR238_tree=null;


            retval.plan = new LogicalExpressionPlan();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1083:2: ( col_range[$plan] | expr[$plan] | STAR )
            int alt83=3;
            switch ( input.LA(1) ) {
            case COL_RANGE:
                {
                alt83=1;
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt83=2;
                }
                break;
            case STAR:
                {
                int LA83_3 = input.LA(2);

                if ( (LA83_3==DOWN) ) {
                    alt83=2;
                }
                else if ( (LA83_3==EOF||LA83_3==UP||LA83_3==DIV||LA83_3==DOLLARVAR||LA83_3==DOUBLENUMBER||LA83_3==FALSE||LA83_3==FLOATNUMBER||LA83_3==GROUP||LA83_3==INTEGER||LA83_3==LONGINTEGER||LA83_3==MINUS||LA83_3==PERCENT||LA83_3==PLUS||LA83_3==QUOTEDSTRING||LA83_3==STAR||LA83_3==TRUE||(LA83_3 >= BAG_VAL && LA83_3 <= BIN_EXPR)||(LA83_3 >= CAST_EXPR && LA83_3 <= EXPR_IN_PAREN)||LA83_3==FUNC_EVAL||LA83_3==IDENTIFIER||(LA83_3 >= MAP_VAL && LA83_3 <= NEG)||LA83_3==NULL||LA83_3==TUPLE_VAL) ) {
                    alt83=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }

            switch (alt83) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1083:4: col_range[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_join_group_by_expr3432);
                    col_range236=col_range(retval.plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range236.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1084:4: expr[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_join_group_by_expr3438);
                    expr237=expr(retval.plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr237.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1085:4: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR238=(CommonTree)match(input,STAR,FOLLOW_STAR_in_join_group_by_expr3444); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR238_tree = (CommonTree)adaptor.dupNode(STAR238);


                    adaptor.addChild(root_0, STAR238_tree);
                    }


                    if ( state.backtracking==0 ) {
                           builder.buildProjectExpr( new SourceLocation( (PigParserNode)STAR238 ), retval.plan, ((GScope_scope)GScope_stack.peek()).currentOp, 
                               ((statement_scope)statement_stack.peek()).inputIndex, null, -1 );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr"


    public static class union_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1092:1: union_clause returns [String alias] : ^( UNION ( ONSCHEMA )? rel_list ) ;
    public final LogicalPlanGenerator.union_clause_return union_clause() throws RecognitionException {
        LogicalPlanGenerator.union_clause_return retval = new LogicalPlanGenerator.union_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree UNION239=null;
        CommonTree ONSCHEMA240=null;
        LogicalPlanGenerator.rel_list_return rel_list241 =null;


        CommonTree UNION239_tree=null;
        CommonTree ONSCHEMA240_tree=null;


            boolean onSchema = false;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1096:2: ( ^( UNION ( ONSCHEMA )? rel_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1096:4: ^( UNION ( ONSCHEMA )? rel_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            UNION239=(CommonTree)match(input,UNION,FOLLOW_UNION_in_union_clause3470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION239_tree = (CommonTree)adaptor.dupNode(UNION239);


            root_1 = (CommonTree)adaptor.becomeRoot(UNION239_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1096:13: ( ONSCHEMA )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==ONSCHEMA) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1096:15: ONSCHEMA
                    {
                    _last = (CommonTree)input.LT(1);
                    ONSCHEMA240=(CommonTree)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause3474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA240_tree = (CommonTree)adaptor.dupNode(ONSCHEMA240);


                    adaptor.addChild(root_1, ONSCHEMA240_tree);
                    }


                    if ( state.backtracking==0 ) { onSchema = true; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_list_in_union_clause3481);
            rel_list241=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel_list241.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                  retval.alias = builder.buildUnionOp( new SourceLocation( (PigParserNode)UNION239 ), ((statement_scope)statement_stack.peek()).alias, 
                      (rel_list241!=null?rel_list241.aliasList:null), onSchema );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    protected static class foreach_clause_scope {
        LOForEach foreachOp;
    }
    protected Stack foreach_clause_stack = new Stack();


    public static class foreach_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1103:1: foreach_clause returns [String alias] : ^( FOREACH rel foreach_plan ) ;
    public final LogicalPlanGenerator.foreach_clause_return foreach_clause() throws RecognitionException {
        GScope_stack.push(new GScope_scope());
        foreach_clause_stack.push(new foreach_clause_scope());
        LogicalPlanGenerator.foreach_clause_return retval = new LogicalPlanGenerator.foreach_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH242=null;
        LogicalPlanGenerator.rel_return rel243 =null;

        LogicalPlanGenerator.foreach_plan_return foreach_plan244 =null;


        CommonTree FOREACH242_tree=null;


             ((foreach_clause_scope)foreach_clause_stack.peek()).foreachOp = builder.createForeachOp();
             ((GScope_scope)GScope_stack.peek()).currentOp = ((foreach_clause_scope)foreach_clause_stack.peek()).foreachOp;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1112:2: ( ^( FOREACH rel foreach_plan ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1112:4: ^( FOREACH rel foreach_plan )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FOREACH242=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause3517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH242_tree = (CommonTree)adaptor.dupNode(FOREACH242);


            root_1 = (CommonTree)adaptor.becomeRoot(FOREACH242_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_foreach_clause3519);
            rel243=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel243.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_foreach_plan_in_foreach_clause3521);
            foreach_plan244=foreach_plan();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, foreach_plan244.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)FOREACH242 );
                   retval.alias = builder.buildForeachOp( loc, ((foreach_clause_scope)foreach_clause_stack.peek()).foreachOp, ((statement_scope)statement_stack.peek()).alias,
                      ((statement_scope)statement_stack.peek()).inputAlias, (foreach_plan244!=null?foreach_plan244.plan:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();
            foreach_clause_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "foreach_clause"


    protected static class foreach_plan_scope {
        LogicalPlan innerPlan;
        Map<String, LogicalExpressionPlan> exprPlans;
        Map<String, Operator> operators;
    }
    protected Stack foreach_plan_stack = new Stack();


    public static class foreach_plan_return extends TreeRuleReturnScope {
        public LogicalPlan plan;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1120:1: foreach_plan returns [LogicalPlan plan] : ( ^( FOREACH_PLAN_SIMPLE generate_clause ) | ^( FOREACH_PLAN_COMPLEX nested_blk ) );
    public final LogicalPlanGenerator.foreach_plan_return foreach_plan() throws RecognitionException {
        foreach_plan_stack.push(new foreach_plan_scope());
        LogicalPlanGenerator.foreach_plan_return retval = new LogicalPlanGenerator.foreach_plan_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH_PLAN_SIMPLE245=null;
        CommonTree FOREACH_PLAN_COMPLEX247=null;
        LogicalPlanGenerator.generate_clause_return generate_clause246 =null;

        LogicalPlanGenerator.nested_blk_return nested_blk248 =null;


        CommonTree FOREACH_PLAN_SIMPLE245_tree=null;
        CommonTree FOREACH_PLAN_COMPLEX247_tree=null;


            inForeachPlan = true;
            ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan = new LogicalPlan();
            ((foreach_plan_scope)foreach_plan_stack.peek()).exprPlans = new HashMap<String, LogicalExpressionPlan>();
            ((foreach_plan_scope)foreach_plan_stack.peek()).operators = new HashMap<String, Operator>();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1136:2: ( ^( FOREACH_PLAN_SIMPLE generate_clause ) | ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==FOREACH_PLAN_SIMPLE) ) {
                alt85=1;
            }
            else if ( (LA85_0==FOREACH_PLAN_COMPLEX) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1136:4: ^( FOREACH_PLAN_SIMPLE generate_clause )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FOREACH_PLAN_SIMPLE245=(CommonTree)match(input,FOREACH_PLAN_SIMPLE,FOLLOW_FOREACH_PLAN_SIMPLE_in_foreach_plan3557); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH_PLAN_SIMPLE245_tree = (CommonTree)adaptor.dupNode(FOREACH_PLAN_SIMPLE245);


                    root_1 = (CommonTree)adaptor.becomeRoot(FOREACH_PLAN_SIMPLE245_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_generate_clause_in_foreach_plan3559);
                    generate_clause246=generate_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, generate_clause246.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1137:4: ^( FOREACH_PLAN_COMPLEX nested_blk )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FOREACH_PLAN_COMPLEX247=(CommonTree)match(input,FOREACH_PLAN_COMPLEX,FOLLOW_FOREACH_PLAN_COMPLEX_in_foreach_plan3568); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH_PLAN_COMPLEX247_tree = (CommonTree)adaptor.dupNode(FOREACH_PLAN_COMPLEX247);


                    root_1 = (CommonTree)adaptor.becomeRoot(FOREACH_PLAN_COMPLEX247_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_blk_in_foreach_plan3570);
                    nested_blk248=nested_blk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, nested_blk248.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

            if ( state.backtracking==0 ) {
                retval.plan = ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan;
                inForeachPlan = false;
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            foreach_plan_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "foreach_plan"


    public static class nested_blk_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1140:1: nested_blk : ( nested_command )* generate_clause ;
    public final LogicalPlanGenerator.nested_blk_return nested_blk() throws RecognitionException {
        LogicalPlanGenerator.nested_blk_return retval = new LogicalPlanGenerator.nested_blk_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.nested_command_return nested_command249 =null;

        LogicalPlanGenerator.generate_clause_return generate_clause250 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1140:12: ( ( nested_command )* generate_clause )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1140:14: ( nested_command )* generate_clause
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1140:14: ( nested_command )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( ((LA86_0 >= NESTED_CMD && LA86_0 <= NESTED_CMD_ASSI)) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1140:14: nested_command
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_command_in_nested_blk3581);
            	    nested_command249=nested_command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_command249.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_generate_clause_in_nested_blk3584);
            generate_clause250=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, generate_clause250.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class nested_command_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1143:1: nested_command : ( ^( NESTED_CMD IDENTIFIER nested_op[$IDENTIFIER.text] ) | ^( NESTED_CMD_ASSI IDENTIFIER expr[exprPlan] ) );
    public final LogicalPlanGenerator.nested_command_return nested_command() throws RecognitionException {
        LogicalPlanGenerator.nested_command_return retval = new LogicalPlanGenerator.nested_command_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NESTED_CMD251=null;
        CommonTree IDENTIFIER252=null;
        CommonTree NESTED_CMD_ASSI254=null;
        CommonTree IDENTIFIER255=null;
        LogicalPlanGenerator.nested_op_return nested_op253 =null;

        LogicalPlanGenerator.expr_return expr256 =null;


        CommonTree NESTED_CMD251_tree=null;
        CommonTree IDENTIFIER252_tree=null;
        CommonTree NESTED_CMD_ASSI254_tree=null;
        CommonTree IDENTIFIER255_tree=null;


            LogicalExpressionPlan exprPlan = new LogicalExpressionPlan();
            inNestedCommand = true;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1151:2: ( ^( NESTED_CMD IDENTIFIER nested_op[$IDENTIFIER.text] ) | ^( NESTED_CMD_ASSI IDENTIFIER expr[exprPlan] ) )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==NESTED_CMD) ) {
                alt87=1;
            }
            else if ( (LA87_0==NESTED_CMD_ASSI) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1151:4: ^( NESTED_CMD IDENTIFIER nested_op[$IDENTIFIER.text] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NESTED_CMD251=(CommonTree)match(input,NESTED_CMD,FOLLOW_NESTED_CMD_in_nested_command3606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_CMD251_tree = (CommonTree)adaptor.dupNode(NESTED_CMD251);


                    root_1 = (CommonTree)adaptor.becomeRoot(NESTED_CMD251_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER252=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_nested_command3608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER252_tree = (CommonTree)adaptor.dupNode(IDENTIFIER252);


                    adaptor.addChild(root_1, IDENTIFIER252_tree);
                    }


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_op_in_nested_command3610);
                    nested_op253=nested_op((IDENTIFIER252!=null?IDENTIFIER252.getText():null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, nested_op253.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                           ((foreach_plan_scope)foreach_plan_stack.peek()).operators.put( (IDENTIFIER252!=null?IDENTIFIER252.getText():null), (nested_op253!=null?nested_op253.op:null) );
                           ((foreach_plan_scope)foreach_plan_stack.peek()).exprPlans.remove( (IDENTIFIER252!=null?IDENTIFIER252.getText():null) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1157:4: ^( NESTED_CMD_ASSI IDENTIFIER expr[exprPlan] )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NESTED_CMD_ASSI254=(CommonTree)match(input,NESTED_CMD_ASSI,FOLLOW_NESTED_CMD_ASSI_in_nested_command3629); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_CMD_ASSI254_tree = (CommonTree)adaptor.dupNode(NESTED_CMD_ASSI254);


                    root_1 = (CommonTree)adaptor.becomeRoot(NESTED_CMD_ASSI254_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER255=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_nested_command3631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER255_tree = (CommonTree)adaptor.dupNode(IDENTIFIER255);


                    adaptor.addChild(root_1, IDENTIFIER255_tree);
                    }


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_nested_command3633);
                    expr256=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr256.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                            ((foreach_plan_scope)foreach_plan_stack.peek()).exprPlans.put( (IDENTIFIER255!=null?IDENTIFIER255.getText():null), exprPlan );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

            if ( state.backtracking==0 ) {
            	inNestedCommand = false;
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends TreeRuleReturnScope {
        public Operator op;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1163:1: nested_op[String alias] returns [Operator op] : ( nested_proj[$alias] | nested_filter[$alias] | nested_sort[$alias] | nested_distinct[$alias] | nested_limit[$alias] | nested_cross[$alias] | nested_foreach[$alias] );
    public final LogicalPlanGenerator.nested_op_return nested_op(String alias) throws RecognitionException {
        LogicalPlanGenerator.nested_op_return retval = new LogicalPlanGenerator.nested_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.nested_proj_return nested_proj257 =null;

        LogicalPlanGenerator.nested_filter_return nested_filter258 =null;

        LogicalPlanGenerator.nested_sort_return nested_sort259 =null;

        LogicalPlanGenerator.nested_distinct_return nested_distinct260 =null;

        LogicalPlanGenerator.nested_limit_return nested_limit261 =null;

        LogicalPlanGenerator.nested_cross_return nested_cross262 =null;

        LogicalPlanGenerator.nested_foreach_return nested_foreach263 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1164:2: ( nested_proj[$alias] | nested_filter[$alias] | nested_sort[$alias] | nested_distinct[$alias] | nested_limit[$alias] | nested_cross[$alias] | nested_foreach[$alias] )
            int alt88=7;
            switch ( input.LA(1) ) {
            case NESTED_PROJ:
                {
                alt88=1;
                }
                break;
            case FILTER:
                {
                alt88=2;
                }
                break;
            case ORDER:
                {
                alt88=3;
                }
                break;
            case DISTINCT:
                {
                alt88=4;
                }
                break;
            case LIMIT:
                {
                alt88=5;
                }
                break;
            case CROSS:
                {
                alt88=6;
                }
                break;
            case FOREACH:
                {
                alt88=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }

            switch (alt88) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1164:4: nested_proj[$alias]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_proj_in_nested_op3655);
                    nested_proj257=nested_proj(alias);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_proj257.getTree());


                    if ( state.backtracking==0 ) { retval.op = (nested_proj257!=null?nested_proj257.op:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1165:4: nested_filter[$alias]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_filter_in_nested_op3663);
                    nested_filter258=nested_filter(alias);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_filter258.getTree());


                    if ( state.backtracking==0 ) { retval.op = (nested_filter258!=null?nested_filter258.op:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1166:4: nested_sort[$alias]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_sort_in_nested_op3671);
                    nested_sort259=nested_sort(alias);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_sort259.getTree());


                    if ( state.backtracking==0 ) { retval.op = (nested_sort259!=null?nested_sort259.op:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1167:4: nested_distinct[$alias]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_distinct_in_nested_op3680);
                    nested_distinct260=nested_distinct(alias);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_distinct260.getTree());


                    if ( state.backtracking==0 ) { retval.op = (nested_distinct260!=null?nested_distinct260.op:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1168:4: nested_limit[$alias]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_limit_in_nested_op3688);
                    nested_limit261=nested_limit(alias);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_limit261.getTree());


                    if ( state.backtracking==0 ) { retval.op = (nested_limit261!=null?nested_limit261.op:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1169:4: nested_cross[$alias]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_cross_in_nested_op3696);
                    nested_cross262=nested_cross(alias);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_cross262.getTree());


                    if ( state.backtracking==0 ) { retval.op = (nested_cross262!=null?nested_cross262.op:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1170:4: nested_foreach[$alias]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_foreach_in_nested_op3704);
                    nested_foreach263=nested_foreach(alias);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_foreach263.getTree());


                    if ( state.backtracking==0 ) { retval.op = (nested_foreach263!=null?nested_foreach263.op:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends TreeRuleReturnScope {
        public Operator op;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1173:1: nested_proj[String alias] returns [Operator op] : ^( NESTED_PROJ cr0= col_ref[plan] (cr= col_ref[new LogicalExpressionPlan()] )+ ) ;
    public final LogicalPlanGenerator.nested_proj_return nested_proj(String alias) throws RecognitionException {
        LogicalPlanGenerator.nested_proj_return retval = new LogicalPlanGenerator.nested_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NESTED_PROJ264=null;
        LogicalPlanGenerator.col_ref_return cr0 =null;

        LogicalPlanGenerator.col_ref_return cr =null;


        CommonTree NESTED_PROJ264_tree=null;


            LogicalExpressionPlan plan = new LogicalExpressionPlan();
            List<LogicalExpressionPlan> plans = new ArrayList<LogicalExpressionPlan>();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1178:2: ( ^( NESTED_PROJ cr0= col_ref[plan] (cr= col_ref[new LogicalExpressionPlan()] )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1178:4: ^( NESTED_PROJ cr0= col_ref[plan] (cr= col_ref[new LogicalExpressionPlan()] )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            NESTED_PROJ264=(CommonTree)match(input,NESTED_PROJ,FOLLOW_NESTED_PROJ_in_nested_proj3728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NESTED_PROJ264_tree = (CommonTree)adaptor.dupNode(NESTED_PROJ264);


            root_1 = (CommonTree)adaptor.becomeRoot(NESTED_PROJ264_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_col_ref_in_nested_proj3740);
            cr0=col_ref(plan);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cr0.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1180:7: (cr= col_ref[new LogicalExpressionPlan()] )+
            int cnt89=0;
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==DOLLARVAR||LA89_0==GROUP||LA89_0==IDENTIFIER) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1180:9: cr= col_ref[new LogicalExpressionPlan()]
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_col_ref_in_nested_proj3755);
            	    cr=col_ref(new LogicalExpressionPlan());

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, cr.getTree());


            	    if ( state.backtracking==0 ) {
            	                plans.add( (LogicalExpressionPlan)( (cr!=null?cr.expr:null).getPlan() ) );
            	            }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt89 >= 1 ) break loop89;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(89, input);
                        throw eee;
                }
                cnt89++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)(cr0!=null?((CommonTree)cr0.start):null) );
                   retval.op = builder.buildNestedProjectOp( loc, ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan, ((foreach_clause_scope)foreach_clause_stack.peek()).foreachOp, 
                       ((foreach_plan_scope)foreach_plan_stack.peek()).operators, alias, (ProjectExpression)(cr0!=null?cr0.expr:null), plans );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class nested_filter_return extends TreeRuleReturnScope {
        public Operator op;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1192:1: nested_filter[String alias] returns [Operator op] : ^( FILTER nested_op_input cond[plan] ) ;
    public final LogicalPlanGenerator.nested_filter_return nested_filter(String alias) throws RecognitionException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.nested_filter_return retval = new LogicalPlanGenerator.nested_filter_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FILTER265=null;
        LogicalPlanGenerator.nested_op_input_return nested_op_input266 =null;

        LogicalPlanGenerator.cond_return cond267 =null;


        CommonTree FILTER265_tree=null;


            LogicalExpressionPlan plan = new LogicalExpressionPlan();
            Operator inputOp = null;
            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createNestedFilterOp( ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan );

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1199:2: ( ^( FILTER nested_op_input cond[plan] ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1199:4: ^( FILTER nested_op_input cond[plan] )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FILTER265=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_nested_filter3808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER265_tree = (CommonTree)adaptor.dupNode(FILTER265);


            root_1 = (CommonTree)adaptor.becomeRoot(FILTER265_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_filter3810);
            nested_op_input266=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input266.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_nested_filter3812);
            cond267=cond(plan);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond267.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)FILTER265 );
                   retval.op = builder.buildNestedFilterOp( loc, (LOFilter)((GScope_scope)GScope_stack.peek()).currentOp, ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan, alias, 
                       (nested_op_input266!=null?nested_op_input266.op:null), plan );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends TreeRuleReturnScope {
        public Operator op;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1207:1: nested_sort[String alias] returns [Operator op] : ^( ORDER nested_op_input order_by_clause ( func_clause[FunctionType.COMPARISONFUNC] )? ) ;
    public final LogicalPlanGenerator.nested_sort_return nested_sort(String alias) throws RecognitionException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.nested_sort_return retval = new LogicalPlanGenerator.nested_sort_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ORDER268=null;
        LogicalPlanGenerator.nested_op_input_return nested_op_input269 =null;

        LogicalPlanGenerator.order_by_clause_return order_by_clause270 =null;

        LogicalPlanGenerator.func_clause_return func_clause271 =null;


        CommonTree ORDER268_tree=null;


            Operator inputOp = null;
            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createNestedSortOp( ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan );

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1213:2: ( ^( ORDER nested_op_input order_by_clause ( func_clause[FunctionType.COMPARISONFUNC] )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1213:4: ^( ORDER nested_op_input order_by_clause ( func_clause[FunctionType.COMPARISONFUNC] )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            ORDER268=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_nested_sort3846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER268_tree = (CommonTree)adaptor.dupNode(ORDER268);


            root_1 = (CommonTree)adaptor.becomeRoot(ORDER268_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_sort3848);
            nested_op_input269=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input269.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_clause_in_nested_sort3850);
            order_by_clause270=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, order_by_clause270.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1213:45: ( func_clause[FunctionType.COMPARISONFUNC] )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==FUNC||LA90_0==FUNC_REF) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1213:45: func_clause[FunctionType.COMPARISONFUNC]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_nested_sort3852);
                    func_clause271=func_clause(FunctionType.COMPARISONFUNC);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause271.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)ORDER268 );
                   retval.op = builder.buildNestedSortOp( loc, (LOSort)((GScope_scope)GScope_stack.peek()).currentOp, ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan, alias,
                       (nested_op_input269!=null?nested_op_input269.op:null), 
                       (order_by_clause270!=null?order_by_clause270.plans:null), (order_by_clause270!=null?order_by_clause270.ascFlags:null), (func_clause271!=null?func_clause271.funcSpec:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends TreeRuleReturnScope {
        public Operator op;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1222:1: nested_distinct[String alias] returns [Operator op] : ^( DISTINCT nested_op_input ) ;
    public final LogicalPlanGenerator.nested_distinct_return nested_distinct(String alias) throws RecognitionException {
        LogicalPlanGenerator.nested_distinct_return retval = new LogicalPlanGenerator.nested_distinct_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DISTINCT272=null;
        LogicalPlanGenerator.nested_op_input_return nested_op_input273 =null;


        CommonTree DISTINCT272_tree=null;


            Operator inputOp = null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1226:2: ( ^( DISTINCT nested_op_input ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1226:4: ^( DISTINCT nested_op_input )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DISTINCT272=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct3882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT272_tree = (CommonTree)adaptor.dupNode(DISTINCT272);


            root_1 = (CommonTree)adaptor.becomeRoot(DISTINCT272_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_distinct3884);
            nested_op_input273=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input273.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)DISTINCT272 );
                   retval.op = builder.buildNestedDistinctOp( loc, ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan, alias, (nested_op_input273!=null?nested_op_input273.op:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends TreeRuleReturnScope {
        public Operator op;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1233:1: nested_limit[String alias] returns [Operator op] : ^( LIMIT nested_op_input ( INTEGER | expr[exprPlan] ) ) ;
    public final LogicalPlanGenerator.nested_limit_return nested_limit(String alias) throws RecognitionException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.nested_limit_return retval = new LogicalPlanGenerator.nested_limit_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LIMIT274=null;
        CommonTree INTEGER276=null;
        LogicalPlanGenerator.nested_op_input_return nested_op_input275 =null;

        LogicalPlanGenerator.expr_return expr277 =null;


        CommonTree LIMIT274_tree=null;
        CommonTree INTEGER276_tree=null;


            Operator inputOp = null;
            LogicalExpressionPlan exprPlan = new LogicalExpressionPlan();
            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createNestedLimitOp( ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan );

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1240:2: ( ^( LIMIT nested_op_input ( INTEGER | expr[exprPlan] ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1240:4: ^( LIMIT nested_op_input ( INTEGER | expr[exprPlan] ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LIMIT274=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit3917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT274_tree = (CommonTree)adaptor.dupNode(LIMIT274);


            root_1 = (CommonTree)adaptor.becomeRoot(LIMIT274_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_limit3919);
            nested_op_input275=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input275.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1240:29: ( INTEGER | expr[exprPlan] )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==INTEGER) ) {
                int LA91_1 = input.LA(2);

                if ( (synpred155_LogicalPlanGenerator()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA91_0==DIV||LA91_0==DOLLARVAR||LA91_0==DOUBLENUMBER||LA91_0==FALSE||LA91_0==FLOATNUMBER||LA91_0==GROUP||LA91_0==LONGINTEGER||LA91_0==MINUS||LA91_0==PERCENT||LA91_0==PLUS||LA91_0==QUOTEDSTRING||LA91_0==STAR||LA91_0==TRUE||(LA91_0 >= BAG_VAL && LA91_0 <= BIN_EXPR)||LA91_0==CAST_EXPR||LA91_0==EXPR_IN_PAREN||LA91_0==FUNC_EVAL||LA91_0==IDENTIFIER||(LA91_0 >= MAP_VAL && LA91_0 <= NEG)||LA91_0==NULL||LA91_0==TUPLE_VAL) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }
            switch (alt91) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1240:31: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER276=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit3923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER276_tree = (CommonTree)adaptor.dupNode(INTEGER276);


                    adaptor.addChild(root_1, INTEGER276_tree);
                    }


                    if ( state.backtracking==0 ) {
                           SourceLocation loc = new SourceLocation( (PigParserNode)LIMIT274 );
                           retval.op = builder.buildNestedLimitOp( loc, ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan, alias, (nested_op_input275!=null?nested_op_input275.op:null), 
                               Integer.valueOf( (INTEGER276!=null?INTEGER276.getText():null) ) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1246:4: expr[exprPlan]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_nested_limit3934);
                    expr277=expr(exprPlan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr277.getTree());


                    if ( state.backtracking==0 ) {
                           SourceLocation loc = new SourceLocation( (PigParserNode)LIMIT274 );
                           retval.op = builder.buildNestedLimitOp( loc, (LOLimit)((GScope_scope)GScope_stack.peek()).currentOp, ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan, alias,
                               (nested_op_input275!=null?nested_op_input275.op:null), exprPlan);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends TreeRuleReturnScope {
        public Operator op;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1255:1: nested_cross[String alias] returns [Operator op] : ^( CROSS nested_op_input_list ) ;
    public final LogicalPlanGenerator.nested_cross_return nested_cross(String alias) throws RecognitionException {
        LogicalPlanGenerator.nested_cross_return retval = new LogicalPlanGenerator.nested_cross_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CROSS278=null;
        LogicalPlanGenerator.nested_op_input_list_return nested_op_input_list279 =null;


        CommonTree CROSS278_tree=null;


            Operator inputOp = null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1259:2: ( ^( CROSS nested_op_input_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1259:4: ^( CROSS nested_op_input_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CROSS278=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_nested_cross3968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS278_tree = (CommonTree)adaptor.dupNode(CROSS278);


            root_1 = (CommonTree)adaptor.becomeRoot(CROSS278_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross3970);
            nested_op_input_list279=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input_list279.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)CROSS278 );
                   retval.op = builder.buildNestedCrossOp( loc, ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan, alias, (nested_op_input_list279!=null?nested_op_input_list279.opList:null) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    protected static class nested_foreach_scope {
        LogicalPlan innerPlan;
        LOForEach foreachOp;
    }
    protected Stack nested_foreach_stack = new Stack();


    public static class nested_foreach_return extends TreeRuleReturnScope {
        public Operator op;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1266:1: nested_foreach[String alias] returns [Operator op] : ^( FOREACH nested_op_input generate_clause ) ;
    public final LogicalPlanGenerator.nested_foreach_return nested_foreach(String alias) throws RecognitionException {
        nested_foreach_stack.push(new nested_foreach_scope());
        LogicalPlanGenerator.nested_foreach_return retval = new LogicalPlanGenerator.nested_foreach_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH280=null;
        LogicalPlanGenerator.nested_op_input_return nested_op_input281 =null;

        LogicalPlanGenerator.generate_clause_return generate_clause282 =null;


        CommonTree FOREACH280_tree=null;


        	Operator inputOp = null;
        	((nested_foreach_scope)nested_foreach_stack.peek()).innerPlan = new LogicalPlan();
        	((nested_foreach_scope)nested_foreach_stack.peek()).foreachOp = builder.createNestedForeachOp( ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan );

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1276:2: ( ^( FOREACH nested_op_input generate_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1276:4: ^( FOREACH nested_op_input generate_clause )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FOREACH280=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach4002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH280_tree = (CommonTree)adaptor.dupNode(FOREACH280);


            root_1 = (CommonTree)adaptor.becomeRoot(FOREACH280_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_foreach4004);
            nested_op_input281=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input281.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_generate_clause_in_nested_foreach4006);
            generate_clause282=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, generate_clause282.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
               		SourceLocation loc = new SourceLocation( (PigParserNode)FOREACH280 );
               		retval.op = builder.buildNestedForeachOp( loc, (LOForEach)((nested_foreach_scope)nested_foreach_stack.peek()).foreachOp, ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan,
               							alias, (nested_op_input281!=null?nested_op_input281.op:null), ((nested_foreach_scope)nested_foreach_stack.peek()).innerPlan);
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            nested_foreach_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class generate_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1284:1: generate_clause : ^( GENERATE ( flatten_generated_item )+ ) ;
    public final LogicalPlanGenerator.generate_clause_return generate_clause() throws RecognitionException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.generate_clause_return retval = new LogicalPlanGenerator.generate_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GENERATE283=null;
        LogicalPlanGenerator.flatten_generated_item_return flatten_generated_item284 =null;


        CommonTree GENERATE283_tree=null;


        	((GScope_scope)GScope_stack.peek()).currentOp = builder.createGenerateOp(inNestedCommand ? ((nested_foreach_scope)nested_foreach_stack.peek()).innerPlan : ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan );
            List<LogicalExpressionPlan> plans = new ArrayList<LogicalExpressionPlan>();
            List<Boolean> flattenFlags = new ArrayList<Boolean>();
            List<LogicalSchema> schemas = new ArrayList<LogicalSchema>();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1292:2: ( ^( GENERATE ( flatten_generated_item )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1292:4: ^( GENERATE ( flatten_generated_item )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            GENERATE283=(CommonTree)match(input,GENERATE,FOLLOW_GENERATE_in_generate_clause4035); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GENERATE283_tree = (CommonTree)adaptor.dupNode(GENERATE283);


            root_1 = (CommonTree)adaptor.becomeRoot(GENERATE283_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1292:16: ( flatten_generated_item )+
            int cnt92=0;
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==DIV||LA92_0==DOLLARVAR||LA92_0==DOUBLENUMBER||LA92_0==FALSE||LA92_0==FLATTEN||LA92_0==FLOATNUMBER||LA92_0==GROUP||LA92_0==INTEGER||LA92_0==LONGINTEGER||LA92_0==MINUS||LA92_0==PERCENT||LA92_0==PLUS||LA92_0==QUOTEDSTRING||LA92_0==STAR||LA92_0==TRUE||(LA92_0 >= BAG_VAL && LA92_0 <= BIN_EXPR)||(LA92_0 >= CAST_EXPR && LA92_0 <= EXPR_IN_PAREN)||LA92_0==FUNC_EVAL||LA92_0==IDENTIFIER||(LA92_0 >= MAP_VAL && LA92_0 <= NEG)||LA92_0==NULL||LA92_0==TUPLE_VAL) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1292:18: flatten_generated_item
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_flatten_generated_item_in_generate_clause4039);
            	    flatten_generated_item284=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, flatten_generated_item284.getTree());


            	    if ( state.backtracking==0 ) {
            	                         plans.add( (flatten_generated_item284!=null?flatten_generated_item284.plan:null) );
            	                         flattenFlags.add( (flatten_generated_item284!=null?flatten_generated_item284.flattenFlag:false) );
            	                         schemas.add( (flatten_generated_item284!=null?flatten_generated_item284.schema:null) );
            	                     }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {   
                   builder.buildGenerateOp( new SourceLocation( (PigParserNode)GENERATE283 ), 
                   	   inNestedCommand ? ((nested_foreach_scope)nested_foreach_stack.peek()).foreachOp : ((foreach_clause_scope)foreach_clause_stack.peek()).foreachOp, 
                       (LOGenerate)((GScope_scope)GScope_stack.peek()).currentOp, ((foreach_plan_scope)foreach_plan_stack.peek()).operators,
                       plans, flattenFlags, schemas );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "generate_clause"


    public static class nested_op_input_return extends TreeRuleReturnScope {
        public Operator op;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1308:1: nested_op_input returns [Operator op] : ( col_ref[plan] | nested_proj[null] );
    public final LogicalPlanGenerator.nested_op_input_return nested_op_input() throws RecognitionException {
        LogicalPlanGenerator.nested_op_input_return retval = new LogicalPlanGenerator.nested_op_input_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.col_ref_return col_ref285 =null;

        LogicalPlanGenerator.nested_proj_return nested_proj286 =null;




            LogicalExpressionPlan plan = new LogicalExpressionPlan();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1312:2: ( col_ref[plan] | nested_proj[null] )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==DOLLARVAR||LA93_0==GROUP||LA93_0==IDENTIFIER) ) {
                alt93=1;
            }
            else if ( (LA93_0==NESTED_PROJ) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1312:4: col_ref[plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_nested_op_input4105);
                    col_ref285=col_ref(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref285.getTree());


                    if ( state.backtracking==0 ) {
                           SourceLocation loc = new SourceLocation( (PigParserNode)(col_ref285!=null?((CommonTree)col_ref285.start):null) );
                           retval.op = builder.buildNestedOperatorInput( loc, ((foreach_plan_scope)foreach_plan_stack.peek()).innerPlan,
                               ((foreach_clause_scope)foreach_clause_stack.peek()).foreachOp, ((foreach_plan_scope)foreach_plan_stack.peek()).operators, (col_ref285!=null?col_ref285.expr:null) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1318:4: nested_proj[null]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_proj_in_nested_op_input4116);
                    nested_proj286=nested_proj(null);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_proj286.getTree());


                    if ( state.backtracking==0 ) { 
                           retval.op = (nested_proj286!=null?nested_proj286.op:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class nested_op_input_list_return extends TreeRuleReturnScope {
        public List<Operator> opList;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1324:1: nested_op_input_list returns [List<Operator> opList] : ( nested_op_input )+ ;
    public final LogicalPlanGenerator.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        LogicalPlanGenerator.nested_op_input_list_return retval = new LogicalPlanGenerator.nested_op_input_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.nested_op_input_return nested_op_input287 =null;



         retval.opList = new ArrayList<Operator>(); 
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1326:2: ( ( nested_op_input )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1326:4: ( nested_op_input )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1326:4: ( nested_op_input )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==DOLLARVAR||LA94_0==GROUP||LA94_0==IDENTIFIER||LA94_0==NESTED_PROJ) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1326:6: nested_op_input
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list4142);
            	    nested_op_input287=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_op_input287.getTree());


            	    if ( state.backtracking==0 ) { retval.opList.add( (nested_op_input287!=null?nested_op_input287.op:null) ); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class stream_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1329:1: stream_clause returns [String alias] : ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? ) ;
    public final LogicalPlanGenerator.stream_clause_return stream_clause() throws RecognitionException {
        LogicalPlanGenerator.stream_clause_return retval = new LogicalPlanGenerator.stream_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STREAM288=null;
        CommonTree EXECCOMMAND290=null;
        CommonTree IDENTIFIER291=null;
        LogicalPlanGenerator.rel_return rel289 =null;

        LogicalPlanGenerator.as_clause_return as_clause292 =null;


        CommonTree STREAM288_tree=null;
        CommonTree EXECCOMMAND290_tree=null;
        CommonTree IDENTIFIER291_tree=null;


            StreamingCommand cmd = null;
            SourceLocation loc = new SourceLocation( (PigParserNode)((CommonTree)retval.start) );

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1334:2: ( ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1334:4: ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STREAM288=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_stream_clause4167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM288_tree = (CommonTree)adaptor.dupNode(STREAM288);


            root_1 = (CommonTree)adaptor.becomeRoot(STREAM288_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_stream_clause4169);
            rel289=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel289.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1334:18: ( EXECCOMMAND | IDENTIFIER )
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==EXECCOMMAND) ) {
                alt95=1;
            }
            else if ( (LA95_0==IDENTIFIER) ) {
                alt95=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }
            switch (alt95) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1334:20: EXECCOMMAND
                    {
                    _last = (CommonTree)input.LT(1);
                    EXECCOMMAND290=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_stream_clause4173); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND290_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND290);


                    adaptor.addChild(root_1, EXECCOMMAND290_tree);
                    }


                    if ( state.backtracking==0 ) { cmd = builder.buildCommand( loc, builder.unquote( (EXECCOMMAND290!=null?EXECCOMMAND290.getText():null) ) ); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1335:20: IDENTIFIER
                    {
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER291=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_stream_clause4197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER291_tree = (CommonTree)adaptor.dupNode(IDENTIFIER291);


                    adaptor.addChild(root_1, IDENTIFIER291_tree);
                    }


                    if ( state.backtracking==0 ) { 
                                           cmd = builder.lookupCommand( (IDENTIFIER291!=null?IDENTIFIER291.getText():null) );
                                           if( cmd == null ) {
                                               String msg = "Undefined command-alias [" + (IDENTIFIER291!=null?IDENTIFIER291.getText():null) + "]";
                                               throw new ParserValidationException( input, 
                                                   new SourceLocation( (PigParserNode)IDENTIFIER291 ), msg );
                                           }
                                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1344:20: ( as_clause )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==AS) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1344:20: as_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_as_clause_in_stream_clause4240);
                    as_clause292=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, as_clause292.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.alias = builder.buildStreamOp( loc, ((statement_scope)statement_stack.peek()).alias,
                      ((statement_scope)statement_stack.peek()).inputAlias, cmd, (as_clause292!=null?as_clause292.logicalSchema:null), input );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends TreeRuleReturnScope {
        public String alias;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1351:1: mr_clause returns [String alias] : ^( MAPREDUCE QUOTEDSTRING ( path_list[paths] )? store_clause load_clause ( EXECCOMMAND )? ) ;
    public final LogicalPlanGenerator.mr_clause_return mr_clause() throws RecognitionException {
        LogicalPlanGenerator.mr_clause_return retval = new LogicalPlanGenerator.mr_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAPREDUCE293=null;
        CommonTree QUOTEDSTRING294=null;
        CommonTree EXECCOMMAND298=null;
        LogicalPlanGenerator.path_list_return path_list295 =null;

        LogicalPlanGenerator.store_clause_return store_clause296 =null;

        LogicalPlanGenerator.load_clause_return load_clause297 =null;


        CommonTree MAPREDUCE293_tree=null;
        CommonTree QUOTEDSTRING294_tree=null;
        CommonTree EXECCOMMAND298_tree=null;


            List<String> paths = new ArrayList<String>();
            String alias = ((statement_scope)statement_stack.peek()).alias;
            SourceLocation loc = new SourceLocation( (PigParserNode)((CommonTree)retval.start) );

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1357:2: ( ^( MAPREDUCE QUOTEDSTRING ( path_list[paths] )? store_clause load_clause ( EXECCOMMAND )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1357:4: ^( MAPREDUCE QUOTEDSTRING ( path_list[paths] )? store_clause load_clause ( EXECCOMMAND )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAPREDUCE293=(CommonTree)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause4268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE293_tree = (CommonTree)adaptor.dupNode(MAPREDUCE293);


            root_1 = (CommonTree)adaptor.becomeRoot(MAPREDUCE293_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING294=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause4270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING294_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING294);


            adaptor.addChild(root_1, QUOTEDSTRING294_tree);
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1357:30: ( path_list[paths] )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==QUOTEDSTRING) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1357:30: path_list[paths]
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_path_list_in_mr_clause4272);
                    path_list295=path_list(paths);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, path_list295.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) { ((statement_scope)statement_stack.peek()).alias = null; }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_store_clause_in_mr_clause4284);
            store_clause296=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, store_clause296.getTree());


            if ( state.backtracking==0 ) { ((statement_scope)statement_stack.peek()).alias = alias; }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_load_clause_in_mr_clause4294);
            load_clause297=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, load_clause297.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1360:6: ( EXECCOMMAND )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==EXECCOMMAND) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1360:6: EXECCOMMAND
                    {
                    _last = (CommonTree)input.LT(1);
                    EXECCOMMAND298=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause4301); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND298_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND298);


                    adaptor.addChild(root_1, EXECCOMMAND298_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.alias = builder.buildNativeOp( loc,
                       builder.unquote( (QUOTEDSTRING294!=null?QUOTEDSTRING294.getText():null) ), builder.unquote( (EXECCOMMAND298!=null?EXECCOMMAND298.getText():null) ), 
                       paths, (store_clause296!=null?store_clause296.alias:null), (load_clause297!=null?load_clause297.alias:null), input );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1368:1: split_clause : ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) ;
    public final LogicalPlanGenerator.split_clause_return split_clause() throws RecognitionException {
        LogicalPlanGenerator.split_clause_return retval = new LogicalPlanGenerator.split_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SPLIT299=null;
        LogicalPlanGenerator.rel_return rel300 =null;

        LogicalPlanGenerator.split_branch_return split_branch301 =null;

        LogicalPlanGenerator.split_otherwise_return split_otherwise302 =null;


        CommonTree SPLIT299_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1369:2: ( ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1369:4: ^( SPLIT rel ( split_branch )+ ( split_otherwise )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SPLIT299=(CommonTree)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause4321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT299_tree = (CommonTree)adaptor.dupNode(SPLIT299);


            root_1 = (CommonTree)adaptor.becomeRoot(SPLIT299_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_split_clause4329);
            rel300=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel300.getTree());


            if ( state.backtracking==0 ) { 
                      SourceLocation loc = new SourceLocation( (PigParserNode)SPLIT299 );
                      ((statement_scope)statement_stack.peek()).inputAlias = builder.buildSplitOp( loc, ((statement_scope)statement_stack.peek()).inputAlias );
                  }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1375:7: ( split_branch )+
            int cnt99=0;
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==SPLIT_BRANCH) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1375:7: split_branch
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_split_branch_in_split_clause4347);
            	    split_branch301=split_branch();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, split_branch301.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt99 >= 1 ) break loop99;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(99, input);
                        throw eee;
                }
                cnt99++;
            } while (true);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1375:21: ( split_otherwise )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==OTHERWISE) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1375:21: split_otherwise
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_otherwise_in_split_clause4350);
                    split_otherwise302=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, split_otherwise302.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1379:1: split_branch : ^( SPLIT_BRANCH alias cond[splitPlan] ) ;
    public final LogicalPlanGenerator.split_branch_return split_branch() throws RecognitionException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.split_branch_return retval = new LogicalPlanGenerator.split_branch_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SPLIT_BRANCH303=null;
        LogicalPlanGenerator.alias_return alias304 =null;

        LogicalPlanGenerator.cond_return cond305 =null;


        CommonTree SPLIT_BRANCH303_tree=null;


            LogicalExpressionPlan splitPlan = new LogicalExpressionPlan();
            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createSplitOutputOp();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1385:2: ( ^( SPLIT_BRANCH alias cond[splitPlan] ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1385:4: ^( SPLIT_BRANCH alias cond[splitPlan] )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SPLIT_BRANCH303=(CommonTree)match(input,SPLIT_BRANCH,FOLLOW_SPLIT_BRANCH_in_split_branch4379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT_BRANCH303_tree = (CommonTree)adaptor.dupNode(SPLIT_BRANCH303);


            root_1 = (CommonTree)adaptor.becomeRoot(SPLIT_BRANCH303_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_split_branch4381);
            alias304=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias304.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_split_branch4383);
            cond305=cond(splitPlan);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond305.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)(alias304!=null?((CommonTree)alias304.start):null) );
                   builder.buildSplitOutputOp( loc, (LOSplitOutput)((GScope_scope)GScope_stack.peek()).currentOp, (alias304!=null?alias304.name:null),
                       ((statement_scope)statement_stack.peek()).inputAlias, splitPlan );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1393:1: split_otherwise : ^( OTHERWISE alias ) ;
    public final LogicalPlanGenerator.split_otherwise_return split_otherwise() throws RecognitionException, PlanGenerationFailureException {
        GScope_stack.push(new GScope_scope());

        LogicalPlanGenerator.split_otherwise_return retval = new LogicalPlanGenerator.split_otherwise_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OTHERWISE306=null;
        LogicalPlanGenerator.alias_return alias307 =null;


        CommonTree OTHERWISE306_tree=null;


            ((GScope_scope)GScope_stack.peek()).currentOp = builder.createSplitOutputOp();

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1398:2: ( ^( OTHERWISE alias ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1398:4: ^( OTHERWISE alias )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            OTHERWISE306=(CommonTree)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise4417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OTHERWISE306_tree = (CommonTree)adaptor.dupNode(OTHERWISE306);


            root_1 = (CommonTree)adaptor.becomeRoot(OTHERWISE306_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_split_otherwise4419);
            alias307=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias307.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   SourceLocation loc = new SourceLocation( (PigParserNode)(alias307!=null?((CommonTree)alias307.start):null) );
                   builder.buildSplitOtherwiseOp( loc, (LOSplitOutput)((GScope_scope)GScope_stack.peek()).currentOp, (alias307!=null?alias307.name:null),
                       ((statement_scope)statement_stack.peek()).inputAlias);
              }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
            GScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class col_ref_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1406:1: col_ref[LogicalExpressionPlan plan] returns [LogicalExpression expr] : ( alias_col_ref[$plan] | dollar_col_ref[$plan] );
    public final LogicalPlanGenerator.col_ref_return col_ref(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.col_ref_return retval = new LogicalPlanGenerator.col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.alias_col_ref_return alias_col_ref308 =null;

        LogicalPlanGenerator.dollar_col_ref_return dollar_col_ref309 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1407:2: ( alias_col_ref[$plan] | dollar_col_ref[$plan] )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==GROUP||LA101_0==IDENTIFIER) ) {
                alt101=1;
            }
            else if ( (LA101_0==DOLLARVAR) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1407:4: alias_col_ref[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_col_ref_in_col_ref4440);
                    alias_col_ref308=alias_col_ref(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias_col_ref308.getTree());


                    if ( state.backtracking==0 ) { retval.expr = (alias_col_ref308!=null?alias_col_ref308.expr:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1408:4: dollar_col_ref[$plan]
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_dollar_col_ref_in_col_ref4448);
                    dollar_col_ref309=dollar_col_ref(plan);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dollar_col_ref309.getTree());


                    if ( state.backtracking==0 ) { retval.expr = (dollar_col_ref309!=null?dollar_col_ref309.expr:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class alias_col_ref_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1411:1: alias_col_ref[LogicalExpressionPlan plan] returns [LogicalExpression expr] : ( GROUP | IDENTIFIER );
    public final LogicalPlanGenerator.alias_col_ref_return alias_col_ref(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.alias_col_ref_return retval = new LogicalPlanGenerator.alias_col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GROUP310=null;
        CommonTree IDENTIFIER311=null;

        CommonTree GROUP310_tree=null;
        CommonTree IDENTIFIER311_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1412:2: ( GROUP | IDENTIFIER )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==GROUP) ) {
                alt102=1;
            }
            else if ( (LA102_0==IDENTIFIER) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1412:4: GROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GROUP310=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_alias_col_ref4465); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP310_tree = (CommonTree)adaptor.dupNode(GROUP310);


                    adaptor.addChild(root_0, GROUP310_tree);
                    }


                    if ( state.backtracking==0 ) {
                           retval.expr = builder.buildProjectExpr( new SourceLocation( (PigParserNode)GROUP310 ), plan, ((GScope_scope)GScope_stack.peek()).currentOp, 
                               ((statement_scope)statement_stack.peek()).inputIndex, (GROUP310!=null?GROUP310.getText():null), 0 );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1417:4: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER311=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias_col_ref4476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER311_tree = (CommonTree)adaptor.dupNode(IDENTIFIER311);


                    adaptor.addChild(root_0, IDENTIFIER311_tree);
                    }


                    if ( state.backtracking==0 ) {
                           SourceLocation loc = new SourceLocation( (PigParserNode)IDENTIFIER311 );
                           String alias = (IDENTIFIER311!=null?IDENTIFIER311.getText():null);
                           Operator inOp = builder.lookupOperator( ((statement_scope)statement_stack.peek()).inputAlias );
                           if(null == inOp)
                           {
                               throw new UndefinedAliasException (input,loc,((statement_scope)statement_stack.peek()).inputAlias);
                           }
                           LogicalSchema schema;
                           try {
                               schema = ((LogicalRelationalOperator)inOp).getSchema();
                           } catch (FrontendException e) {
                               throw new PlanGenerationFailureException( input, loc, e );
                           }
                           
                           Operator op = builder.lookupOperator( alias );
                           if( op != null && ( schema == null || schema.getFieldPosition( alias ) == -1 ) ) {
                               retval.expr = new ScalarExpression( plan, op,
                                   inForeachPlan ? ((foreach_clause_scope)foreach_clause_stack.peek()).foreachOp : ((GScope_scope)GScope_stack.peek()).currentOp );
                               retval.expr.setLocation( loc );
                           } else {
                               if( inForeachPlan ) {
                                   retval.expr = builder.buildProjectExpr( loc, plan, ((GScope_scope)GScope_stack.peek()).currentOp, 
                                       ((foreach_plan_scope)foreach_plan_stack.peek()).exprPlans, alias, 0 );
                               } else {
                                   retval.expr = builder.buildProjectExpr( loc, plan, ((GScope_scope)GScope_stack.peek()).currentOp, 
                                       ((statement_scope)statement_stack.peek()).inputIndex, alias, 0 );
                               }
                           }
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias_col_ref"


    public static class dollar_col_ref_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dollar_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1450:1: dollar_col_ref[LogicalExpressionPlan plan] returns [LogicalExpression expr] : DOLLARVAR ;
    public final LogicalPlanGenerator.dollar_col_ref_return dollar_col_ref(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.dollar_col_ref_return retval = new LogicalPlanGenerator.dollar_col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOLLARVAR312=null;

        CommonTree DOLLARVAR312_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1451:2: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1451:4: DOLLARVAR
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            DOLLARVAR312=(CommonTree)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_dollar_col_ref4495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR312_tree = (CommonTree)adaptor.dupNode(DOLLARVAR312);


            adaptor.addChild(root_0, DOLLARVAR312_tree);
            }


            if ( state.backtracking==0 ) {
                   int col = builder.undollar( (DOLLARVAR312!=null?DOLLARVAR312.getText():null) );
                   retval.expr = builder.buildProjectExpr( new SourceLocation( (PigParserNode)DOLLARVAR312 ), plan, ((GScope_scope)GScope_stack.peek()).currentOp, 
                       ((statement_scope)statement_stack.peek()).inputIndex, null, col );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dollar_col_ref"


    public static class const_expr_return extends TreeRuleReturnScope {
        public LogicalExpression expr;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1459:1: const_expr[LogicalExpressionPlan plan] returns [LogicalExpression expr] : literal ;
    public final LogicalPlanGenerator.const_expr_return const_expr(LogicalExpressionPlan plan) throws RecognitionException {
        LogicalPlanGenerator.const_expr_return retval = new LogicalPlanGenerator.const_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.literal_return literal313 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1460:2: ( literal )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1460:4: literal
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_literal_in_const_expr4514);
            literal313=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, literal313.getTree());


            if ( state.backtracking==0 ) {
                   retval.expr = new ConstantExpression( plan, (literal313!=null?literal313.value:null));
                   retval.expr.setLocation( new SourceLocation( (PigParserNode)((CommonTree)retval.start) ) );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class literal_return extends TreeRuleReturnScope {
        public Object value;
        public byte type;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1467:1: literal returns [Object value, byte type] : ( scalar | map | bag | tuple );
    public final LogicalPlanGenerator.literal_return literal() throws RecognitionException {
        LogicalPlanGenerator.literal_return retval = new LogicalPlanGenerator.literal_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        LogicalPlanGenerator.scalar_return scalar314 =null;

        LogicalPlanGenerator.map_return map315 =null;

        LogicalPlanGenerator.bag_return bag316 =null;

        LogicalPlanGenerator.tuple_return tuple317 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1468:2: ( scalar | map | bag | tuple )
            int alt103=4;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case QUOTEDSTRING:
            case TRUE:
            case NULL:
                {
                alt103=1;
                }
                break;
            case MAP_VAL:
                {
                alt103=2;
                }
                break;
            case BAG_VAL:
                {
                alt103=3;
                }
                break;
            case TUPLE_VAL:
                {
                alt103=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }

            switch (alt103) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1468:4: scalar
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_scalar_in_literal4532);
                    scalar314=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, scalar314.getTree());


                    if ( state.backtracking==0 ) {
                           retval.value = (scalar314!=null?scalar314.value:null);
                           retval.type = (scalar314!=null?scalar314.type:0);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1473:4: map
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_in_literal4542);
                    map315=map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map315.getTree());


                    if ( state.backtracking==0 ) {
                           retval.value = (map315!=null?map315.value:null);
                           retval.type = DataType.MAP;
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1478:4: bag
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_in_literal4552);
                    bag316=bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag316.getTree());


                    if ( state.backtracking==0 ) {
                           retval.value = (bag316!=null?bag316.value:null);
                           retval.type = DataType.BAG;
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1483:4: tuple
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_in_literal4562);
                    tuple317=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple317.getTree());


                    if ( state.backtracking==0 ) {
                           retval.value = (tuple317!=null?tuple317.value:null);
                           retval.type = DataType.TUPLE;
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class scalar_return extends TreeRuleReturnScope {
        public Object value;
        public byte type;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1490:1: scalar returns [Object value, byte type] : ( num_scalar | QUOTEDSTRING | NULL | TRUE | FALSE );
    public final LogicalPlanGenerator.scalar_return scalar() throws RecognitionException {
        LogicalPlanGenerator.scalar_return retval = new LogicalPlanGenerator.scalar_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING319=null;
        CommonTree NULL320=null;
        CommonTree TRUE321=null;
        CommonTree FALSE322=null;
        LogicalPlanGenerator.num_scalar_return num_scalar318 =null;


        CommonTree QUOTEDSTRING319_tree=null;
        CommonTree NULL320_tree=null;
        CommonTree TRUE321_tree=null;
        CommonTree FALSE322_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1491:2: ( num_scalar | QUOTEDSTRING | NULL | TRUE | FALSE )
            int alt104=5;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
                {
                alt104=1;
                }
                break;
            case QUOTEDSTRING:
                {
                alt104=2;
                }
                break;
            case NULL:
                {
                alt104=3;
                }
                break;
            case TRUE:
                {
                alt104=4;
                }
                break;
            case FALSE:
                {
                alt104=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }

            switch (alt104) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1491:4: num_scalar
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_num_scalar_in_scalar4580);
                    num_scalar318=num_scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, num_scalar318.getTree());


                    if ( state.backtracking==0 ) {
                           retval.type = (num_scalar318!=null?num_scalar318.type:0);
                           retval.value = (num_scalar318!=null?num_scalar318.value:null);
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1496:4: QUOTEDSTRING
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    QUOTEDSTRING319=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_scalar4590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING319_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING319);


                    adaptor.addChild(root_0, QUOTEDSTRING319_tree);
                    }


                    if ( state.backtracking==0 ) { 
                           retval.type = DataType.CHARARRAY;
                           retval.value = builder.unquote( (QUOTEDSTRING319!=null?QUOTEDSTRING319.getText():null) );
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1501:4: NULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NULL320=(CommonTree)match(input,NULL,FOLLOW_NULL_in_scalar4601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL320_tree = (CommonTree)adaptor.dupNode(NULL320);


                    adaptor.addChild(root_0, NULL320_tree);
                    }


                    if ( state.backtracking==0 ) { 
                           retval.type = DataType.NULL;
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1505:4: TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TRUE321=(CommonTree)match(input,TRUE,FOLLOW_TRUE_in_scalar4611); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE321_tree = (CommonTree)adaptor.dupNode(TRUE321);


                    adaptor.addChild(root_0, TRUE321_tree);
                    }


                    if ( state.backtracking==0 ) {
                           retval.type = DataType.BOOLEAN;
                           retval.value = Boolean.TRUE;
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1510:4: FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FALSE322=(CommonTree)match(input,FALSE,FOLLOW_FALSE_in_scalar4621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE322_tree = (CommonTree)adaptor.dupNode(FALSE322);


                    adaptor.addChild(root_0, FALSE322_tree);
                    }


                    if ( state.backtracking==0 ) {
                           retval.type = DataType.BOOLEAN;
                           retval.value = Boolean.FALSE;
                       }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class num_scalar_return extends TreeRuleReturnScope {
        public Object value;
        public byte type;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "num_scalar"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1517:1: num_scalar returns [Object value, byte type] : ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) ;
    public final LogicalPlanGenerator.num_scalar_return num_scalar() throws RecognitionException {
        LogicalPlanGenerator.num_scalar_return retval = new LogicalPlanGenerator.num_scalar_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MINUS323=null;
        CommonTree INTEGER324=null;
        CommonTree LONGINTEGER325=null;
        CommonTree FLOATNUMBER326=null;
        CommonTree DOUBLENUMBER327=null;

        CommonTree MINUS323_tree=null;
        CommonTree INTEGER324_tree=null;
        CommonTree LONGINTEGER325_tree=null;
        CommonTree FLOATNUMBER326_tree=null;
        CommonTree DOUBLENUMBER327_tree=null;


            int sign = 1;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1521:2: ( ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1521:4: ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER )
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1521:4: ( MINUS )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==MINUS) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1521:6: MINUS
                    {
                    _last = (CommonTree)input.LT(1);
                    MINUS323=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_num_scalar4646); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS323_tree = (CommonTree)adaptor.dupNode(MINUS323);


                    adaptor.addChild(root_0, MINUS323_tree);
                    }


                    if ( state.backtracking==0 ) { sign = -1; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1522:4: ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER )
            int alt106=4;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                alt106=1;
                }
                break;
            case LONGINTEGER:
                {
                alt106=2;
                }
                break;
            case FLOATNUMBER:
                {
                alt106=3;
                }
                break;
            case DOUBLENUMBER:
                {
                alt106=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }

            switch (alt106) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1522:6: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER324=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_num_scalar4659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER324_tree = (CommonTree)adaptor.dupNode(INTEGER324);


                    adaptor.addChild(root_0, INTEGER324_tree);
                    }


                    if ( state.backtracking==0 ) { 
                             retval.type = DataType.INTEGER;
                             retval.value = sign * Integer.valueOf( (INTEGER324!=null?INTEGER324.getText():null) );
                         }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1527:6: LONGINTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    LONGINTEGER325=(CommonTree)match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_num_scalar4673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINTEGER325_tree = (CommonTree)adaptor.dupNode(LONGINTEGER325);


                    adaptor.addChild(root_0, LONGINTEGER325_tree);
                    }


                    if ( state.backtracking==0 ) { 
                             retval.type = DataType.LONG;
                             retval.value = sign * builder.parseLong( (LONGINTEGER325!=null?LONGINTEGER325.getText():null) );
                         }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1532:6: FLOATNUMBER
                    {
                    _last = (CommonTree)input.LT(1);
                    FLOATNUMBER326=(CommonTree)match(input,FLOATNUMBER,FOLLOW_FLOATNUMBER_in_num_scalar4688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOATNUMBER326_tree = (CommonTree)adaptor.dupNode(FLOATNUMBER326);


                    adaptor.addChild(root_0, FLOATNUMBER326_tree);
                    }


                    if ( state.backtracking==0 ) { 
                             retval.type = DataType.FLOAT;
                             retval.value = sign * Float.valueOf( (FLOATNUMBER326!=null?FLOATNUMBER326.getText():null) );
                         }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1537:6: DOUBLENUMBER
                    {
                    _last = (CommonTree)input.LT(1);
                    DOUBLENUMBER327=(CommonTree)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_num_scalar4703); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER327_tree = (CommonTree)adaptor.dupNode(DOUBLENUMBER327);


                    adaptor.addChild(root_0, DOUBLENUMBER327_tree);
                    }


                    if ( state.backtracking==0 ) { 
                             retval.type = DataType.DOUBLE;
                             retval.value = sign * Double.valueOf( (DOUBLENUMBER327!=null?DOUBLENUMBER327.getText():null) );
                         }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "num_scalar"


    public static class map_return extends TreeRuleReturnScope {
        public Object value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1545:1: map returns [Object value] : ^( MAP_VAL ( keyvalue )* ) ;
    public final LogicalPlanGenerator.map_return map() throws RecognitionException {
        LogicalPlanGenerator.map_return retval = new LogicalPlanGenerator.map_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAP_VAL328=null;
        LogicalPlanGenerator.keyvalue_return keyvalue329 =null;


        CommonTree MAP_VAL328_tree=null;

         Map<String, Object> kvs = new HashMap<String, Object>(); 
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1547:2: ( ^( MAP_VAL ( keyvalue )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1547:4: ^( MAP_VAL ( keyvalue )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAP_VAL328=(CommonTree)match(input,MAP_VAL,FOLLOW_MAP_VAL_in_map4736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAP_VAL328_tree = (CommonTree)adaptor.dupNode(MAP_VAL328);


            root_1 = (CommonTree)adaptor.becomeRoot(MAP_VAL328_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1547:15: ( keyvalue )*
                loop107:
                do {
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==KEY_VAL_PAIR) ) {
                        alt107=1;
                    }


                    switch (alt107) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1547:17: keyvalue
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_keyvalue_in_map4740);
                	    keyvalue329=keyvalue();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, keyvalue329.getTree());


                	    if ( state.backtracking==0 ) { kvs.put( (keyvalue329!=null?keyvalue329.key:null), (keyvalue329!=null?keyvalue329.value:null) ); }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop107;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.value = kvs;
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map"


    public static class keyvalue_return extends TreeRuleReturnScope {
        public String key;
        public Object value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1553:1: keyvalue returns [String key, Object value] : ^( KEY_VAL_PAIR map_key literal ) ;
    public final LogicalPlanGenerator.keyvalue_return keyvalue() throws RecognitionException {
        LogicalPlanGenerator.keyvalue_return retval = new LogicalPlanGenerator.keyvalue_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree KEY_VAL_PAIR330=null;
        LogicalPlanGenerator.map_key_return map_key331 =null;

        LogicalPlanGenerator.literal_return literal332 =null;


        CommonTree KEY_VAL_PAIR330_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1554:2: ( ^( KEY_VAL_PAIR map_key literal ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1554:4: ^( KEY_VAL_PAIR map_key literal )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            KEY_VAL_PAIR330=(CommonTree)match(input,KEY_VAL_PAIR,FOLLOW_KEY_VAL_PAIR_in_keyvalue4767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            KEY_VAL_PAIR330_tree = (CommonTree)adaptor.dupNode(KEY_VAL_PAIR330);


            root_1 = (CommonTree)adaptor.becomeRoot(KEY_VAL_PAIR330_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_map_key_in_keyvalue4769);
            map_key331=map_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, map_key331.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_literal_in_keyvalue4771);
            literal332=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, literal332.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.key = (map_key331!=null?map_key331.value:null);
                   retval.value = (literal332!=null?literal332.value:null);
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class map_key_return extends TreeRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_key"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1561:1: map_key returns [String value] : QUOTEDSTRING ;
    public final LogicalPlanGenerator.map_key_return map_key() throws RecognitionException {
        LogicalPlanGenerator.map_key_return retval = new LogicalPlanGenerator.map_key_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING333=null;

        CommonTree QUOTEDSTRING333_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1562:2: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1562:4: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING333=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_map_key4791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING333_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING333);


            adaptor.addChild(root_0, QUOTEDSTRING333_tree);
            }


            if ( state.backtracking==0 ) { retval.value = builder.unquote( (QUOTEDSTRING333!=null?QUOTEDSTRING333.getText():null) ); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_key"


    public static class bag_return extends TreeRuleReturnScope {
        public Object value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1565:1: bag returns [Object value] : ^( BAG_VAL ( tuple )* ) ;
    public final LogicalPlanGenerator.bag_return bag() throws RecognitionException {
        LogicalPlanGenerator.bag_return retval = new LogicalPlanGenerator.bag_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_VAL334=null;
        LogicalPlanGenerator.tuple_return tuple335 =null;


        CommonTree BAG_VAL334_tree=null;

         DataBag dataBag = builder.createDataBag(); 
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1567:2: ( ^( BAG_VAL ( tuple )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1567:4: ^( BAG_VAL ( tuple )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_VAL334=(CommonTree)match(input,BAG_VAL,FOLLOW_BAG_VAL_in_bag4813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_VAL334_tree = (CommonTree)adaptor.dupNode(BAG_VAL334);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_VAL334_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1567:15: ( tuple )*
                loop108:
                do {
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==TUPLE_VAL) ) {
                        alt108=1;
                    }


                    switch (alt108) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1567:17: tuple
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_tuple_in_bag4817);
                	    tuple335=tuple();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, tuple335.getTree());


                	    if ( state.backtracking==0 ) { dataBag.add( (tuple335!=null?tuple335.value:null) ); }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop108;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.value = dataBag;
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag"


    public static class tuple_return extends TreeRuleReturnScope {
        public Tuple value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1573:1: tuple returns [Tuple value] : ^( TUPLE_VAL ( literal )* ) ;
    public final LogicalPlanGenerator.tuple_return tuple() throws RecognitionException {
        LogicalPlanGenerator.tuple_return retval = new LogicalPlanGenerator.tuple_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_VAL336=null;
        LogicalPlanGenerator.literal_return literal337 =null;


        CommonTree TUPLE_VAL336_tree=null;

         List<Object> objList = new ArrayList<Object>(); 
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1575:2: ( ^( TUPLE_VAL ( literal )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1575:4: ^( TUPLE_VAL ( literal )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_VAL336=(CommonTree)match(input,TUPLE_VAL,FOLLOW_TUPLE_VAL_in_tuple4849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_VAL336_tree = (CommonTree)adaptor.dupNode(TUPLE_VAL336);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_VAL336_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1575:17: ( literal )*
                loop109:
                do {
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==DOUBLENUMBER||LA109_0==FALSE||LA109_0==FLOATNUMBER||LA109_0==INTEGER||LA109_0==LONGINTEGER||LA109_0==MINUS||LA109_0==QUOTEDSTRING||LA109_0==TRUE||LA109_0==BAG_VAL||LA109_0==MAP_VAL||LA109_0==NULL||LA109_0==TUPLE_VAL) ) {
                        alt109=1;
                    }


                    switch (alt109) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1575:19: literal
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_literal_in_tuple4853);
                	    literal337=literal();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, literal337.getTree());


                	    if ( state.backtracking==0 ) { objList.add( (literal337!=null?literal337.value:null) ); }

                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop109;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
                   retval.value = builder.buildTuple( objList );
               }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple"


    public static class eid_return extends TreeRuleReturnScope {
        public String id;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1582:1: eid returns [String id] : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | MATCHES | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | EVAL | ASC | DESC | BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | NULL | TRUE | FALSE | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | IDENTIFIER | TOBAG | TOMAP | TOTUPLE );
    public final LogicalPlanGenerator.eid_return eid() throws RecognitionException {
        LogicalPlanGenerator.eid_return retval = new LogicalPlanGenerator.eid_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree IMPORT339=null;
        CommonTree RETURNS340=null;
        CommonTree DEFINE341=null;
        CommonTree LOAD342=null;
        CommonTree FILTER343=null;
        CommonTree FOREACH344=null;
        CommonTree MATCHES345=null;
        CommonTree ORDER346=null;
        CommonTree DISTINCT347=null;
        CommonTree COGROUP348=null;
        CommonTree JOIN349=null;
        CommonTree CROSS350=null;
        CommonTree UNION351=null;
        CommonTree SPLIT352=null;
        CommonTree INTO353=null;
        CommonTree IF354=null;
        CommonTree ALL355=null;
        CommonTree AS356=null;
        CommonTree BY357=null;
        CommonTree USING358=null;
        CommonTree INNER359=null;
        CommonTree OUTER360=null;
        CommonTree PARALLEL361=null;
        CommonTree PARTITION362=null;
        CommonTree GROUP363=null;
        CommonTree AND364=null;
        CommonTree OR365=null;
        CommonTree NOT366=null;
        CommonTree GENERATE367=null;
        CommonTree FLATTEN368=null;
        CommonTree EVAL369=null;
        CommonTree ASC370=null;
        CommonTree DESC371=null;
        CommonTree BOOLEAN372=null;
        CommonTree INT373=null;
        CommonTree LONG374=null;
        CommonTree FLOAT375=null;
        CommonTree DOUBLE376=null;
        CommonTree CHARARRAY377=null;
        CommonTree BYTEARRAY378=null;
        CommonTree BAG379=null;
        CommonTree TUPLE380=null;
        CommonTree MAP381=null;
        CommonTree IS382=null;
        CommonTree NULL383=null;
        CommonTree TRUE384=null;
        CommonTree FALSE385=null;
        CommonTree STREAM386=null;
        CommonTree THROUGH387=null;
        CommonTree STORE388=null;
        CommonTree MAPREDUCE389=null;
        CommonTree SHIP390=null;
        CommonTree CACHE391=null;
        CommonTree INPUT392=null;
        CommonTree OUTPUT393=null;
        CommonTree STDERROR394=null;
        CommonTree STDIN395=null;
        CommonTree STDOUT396=null;
        CommonTree LIMIT397=null;
        CommonTree SAMPLE398=null;
        CommonTree LEFT399=null;
        CommonTree RIGHT400=null;
        CommonTree FULL401=null;
        CommonTree IDENTIFIER402=null;
        CommonTree TOBAG403=null;
        CommonTree TOMAP404=null;
        CommonTree TOTUPLE405=null;
        LogicalPlanGenerator.rel_str_op_return rel_str_op338 =null;


        CommonTree IMPORT339_tree=null;
        CommonTree RETURNS340_tree=null;
        CommonTree DEFINE341_tree=null;
        CommonTree LOAD342_tree=null;
        CommonTree FILTER343_tree=null;
        CommonTree FOREACH344_tree=null;
        CommonTree MATCHES345_tree=null;
        CommonTree ORDER346_tree=null;
        CommonTree DISTINCT347_tree=null;
        CommonTree COGROUP348_tree=null;
        CommonTree JOIN349_tree=null;
        CommonTree CROSS350_tree=null;
        CommonTree UNION351_tree=null;
        CommonTree SPLIT352_tree=null;
        CommonTree INTO353_tree=null;
        CommonTree IF354_tree=null;
        CommonTree ALL355_tree=null;
        CommonTree AS356_tree=null;
        CommonTree BY357_tree=null;
        CommonTree USING358_tree=null;
        CommonTree INNER359_tree=null;
        CommonTree OUTER360_tree=null;
        CommonTree PARALLEL361_tree=null;
        CommonTree PARTITION362_tree=null;
        CommonTree GROUP363_tree=null;
        CommonTree AND364_tree=null;
        CommonTree OR365_tree=null;
        CommonTree NOT366_tree=null;
        CommonTree GENERATE367_tree=null;
        CommonTree FLATTEN368_tree=null;
        CommonTree EVAL369_tree=null;
        CommonTree ASC370_tree=null;
        CommonTree DESC371_tree=null;
        CommonTree BOOLEAN372_tree=null;
        CommonTree INT373_tree=null;
        CommonTree LONG374_tree=null;
        CommonTree FLOAT375_tree=null;
        CommonTree DOUBLE376_tree=null;
        CommonTree CHARARRAY377_tree=null;
        CommonTree BYTEARRAY378_tree=null;
        CommonTree BAG379_tree=null;
        CommonTree TUPLE380_tree=null;
        CommonTree MAP381_tree=null;
        CommonTree IS382_tree=null;
        CommonTree NULL383_tree=null;
        CommonTree TRUE384_tree=null;
        CommonTree FALSE385_tree=null;
        CommonTree STREAM386_tree=null;
        CommonTree THROUGH387_tree=null;
        CommonTree STORE388_tree=null;
        CommonTree MAPREDUCE389_tree=null;
        CommonTree SHIP390_tree=null;
        CommonTree CACHE391_tree=null;
        CommonTree INPUT392_tree=null;
        CommonTree OUTPUT393_tree=null;
        CommonTree STDERROR394_tree=null;
        CommonTree STDIN395_tree=null;
        CommonTree STDOUT396_tree=null;
        CommonTree LIMIT397_tree=null;
        CommonTree SAMPLE398_tree=null;
        CommonTree LEFT399_tree=null;
        CommonTree RIGHT400_tree=null;
        CommonTree FULL401_tree=null;
        CommonTree IDENTIFIER402_tree=null;
        CommonTree TOBAG403_tree=null;
        CommonTree TOMAP404_tree=null;
        CommonTree TOTUPLE405_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1582:24: ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | MATCHES | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | EVAL | ASC | DESC | BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | NULL | TRUE | FALSE | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | IDENTIFIER | TOBAG | TOMAP | TOTUPLE )
            int alt110=68;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt110=1;
                }
                break;
            case IMPORT:
                {
                alt110=2;
                }
                break;
            case RETURNS:
                {
                alt110=3;
                }
                break;
            case DEFINE:
                {
                alt110=4;
                }
                break;
            case LOAD:
                {
                alt110=5;
                }
                break;
            case FILTER:
                {
                alt110=6;
                }
                break;
            case FOREACH:
                {
                alt110=7;
                }
                break;
            case MATCHES:
                {
                alt110=8;
                }
                break;
            case ORDER:
                {
                alt110=9;
                }
                break;
            case DISTINCT:
                {
                alt110=10;
                }
                break;
            case COGROUP:
                {
                alt110=11;
                }
                break;
            case JOIN:
                {
                alt110=12;
                }
                break;
            case CROSS:
                {
                alt110=13;
                }
                break;
            case UNION:
                {
                alt110=14;
                }
                break;
            case SPLIT:
                {
                alt110=15;
                }
                break;
            case INTO:
                {
                alt110=16;
                }
                break;
            case IF:
                {
                alt110=17;
                }
                break;
            case ALL:
                {
                alt110=18;
                }
                break;
            case AS:
                {
                alt110=19;
                }
                break;
            case BY:
                {
                alt110=20;
                }
                break;
            case USING:
                {
                alt110=21;
                }
                break;
            case INNER:
                {
                alt110=22;
                }
                break;
            case OUTER:
                {
                alt110=23;
                }
                break;
            case PARALLEL:
                {
                alt110=24;
                }
                break;
            case PARTITION:
                {
                alt110=25;
                }
                break;
            case GROUP:
                {
                alt110=26;
                }
                break;
            case AND:
                {
                alt110=27;
                }
                break;
            case OR:
                {
                alt110=28;
                }
                break;
            case NOT:
                {
                alt110=29;
                }
                break;
            case GENERATE:
                {
                alt110=30;
                }
                break;
            case FLATTEN:
                {
                alt110=31;
                }
                break;
            case EVAL:
                {
                alt110=32;
                }
                break;
            case ASC:
                {
                alt110=33;
                }
                break;
            case DESC:
                {
                alt110=34;
                }
                break;
            case BOOLEAN:
                {
                alt110=35;
                }
                break;
            case INT:
                {
                alt110=36;
                }
                break;
            case LONG:
                {
                alt110=37;
                }
                break;
            case FLOAT:
                {
                alt110=38;
                }
                break;
            case DOUBLE:
                {
                alt110=39;
                }
                break;
            case CHARARRAY:
                {
                alt110=40;
                }
                break;
            case BYTEARRAY:
                {
                alt110=41;
                }
                break;
            case BAG:
                {
                alt110=42;
                }
                break;
            case TUPLE:
                {
                alt110=43;
                }
                break;
            case MAP:
                {
                alt110=44;
                }
                break;
            case IS:
                {
                alt110=45;
                }
                break;
            case NULL:
                {
                alt110=46;
                }
                break;
            case TRUE:
                {
                alt110=47;
                }
                break;
            case FALSE:
                {
                alt110=48;
                }
                break;
            case STREAM:
                {
                alt110=49;
                }
                break;
            case THROUGH:
                {
                alt110=50;
                }
                break;
            case STORE:
                {
                alt110=51;
                }
                break;
            case MAPREDUCE:
                {
                alt110=52;
                }
                break;
            case SHIP:
                {
                alt110=53;
                }
                break;
            case CACHE:
                {
                alt110=54;
                }
                break;
            case INPUT:
                {
                alt110=55;
                }
                break;
            case OUTPUT:
                {
                alt110=56;
                }
                break;
            case STDERROR:
                {
                alt110=57;
                }
                break;
            case STDIN:
                {
                alt110=58;
                }
                break;
            case STDOUT:
                {
                alt110=59;
                }
                break;
            case LIMIT:
                {
                alt110=60;
                }
                break;
            case SAMPLE:
                {
                alt110=61;
                }
                break;
            case LEFT:
                {
                alt110=62;
                }
                break;
            case RIGHT:
                {
                alt110=63;
                }
                break;
            case FULL:
                {
                alt110=64;
                }
                break;
            case IDENTIFIER:
                {
                alt110=65;
                }
                break;
            case TOBAG:
                {
                alt110=66;
                }
                break;
            case TOMAP:
                {
                alt110=67;
                }
                break;
            case TOTUPLE:
                {
                alt110=68;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }

            switch (alt110) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1582:26: rel_str_op
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_str_op_in_eid4878);
                    rel_str_op338=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_str_op338.getTree());


                    if ( state.backtracking==0 ) { retval.id = (rel_str_op338!=null?rel_str_op338.id:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1583:7: IMPORT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IMPORT339=(CommonTree)match(input,IMPORT,FOLLOW_IMPORT_in_eid4888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT339_tree = (CommonTree)adaptor.dupNode(IMPORT339);


                    adaptor.addChild(root_0, IMPORT339_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (IMPORT339!=null?IMPORT339.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1584:7: RETURNS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    RETURNS340=(CommonTree)match(input,RETURNS,FOLLOW_RETURNS_in_eid4898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS340_tree = (CommonTree)adaptor.dupNode(RETURNS340);


                    adaptor.addChild(root_0, RETURNS340_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (RETURNS340!=null?RETURNS340.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1585:7: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DEFINE341=(CommonTree)match(input,DEFINE,FOLLOW_DEFINE_in_eid4908); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE341_tree = (CommonTree)adaptor.dupNode(DEFINE341);


                    adaptor.addChild(root_0, DEFINE341_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (DEFINE341!=null?DEFINE341.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1586:7: LOAD
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LOAD342=(CommonTree)match(input,LOAD,FOLLOW_LOAD_in_eid4918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD342_tree = (CommonTree)adaptor.dupNode(LOAD342);


                    adaptor.addChild(root_0, LOAD342_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (LOAD342!=null?LOAD342.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1587:7: FILTER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FILTER343=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_eid4928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER343_tree = (CommonTree)adaptor.dupNode(FILTER343);


                    adaptor.addChild(root_0, FILTER343_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (FILTER343!=null?FILTER343.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1588:7: FOREACH
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FOREACH344=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_eid4938); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH344_tree = (CommonTree)adaptor.dupNode(FOREACH344);


                    adaptor.addChild(root_0, FOREACH344_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (FOREACH344!=null?FOREACH344.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1589:7: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MATCHES345=(CommonTree)match(input,MATCHES,FOLLOW_MATCHES_in_eid4948); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES345_tree = (CommonTree)adaptor.dupNode(MATCHES345);


                    adaptor.addChild(root_0, MATCHES345_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (MATCHES345!=null?MATCHES345.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1590:7: ORDER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ORDER346=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_eid4958); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER346_tree = (CommonTree)adaptor.dupNode(ORDER346);


                    adaptor.addChild(root_0, ORDER346_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (ORDER346!=null?ORDER346.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1591:7: DISTINCT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DISTINCT347=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid4968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT347_tree = (CommonTree)adaptor.dupNode(DISTINCT347);


                    adaptor.addChild(root_0, DISTINCT347_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (DISTINCT347!=null?DISTINCT347.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1592:7: COGROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    COGROUP348=(CommonTree)match(input,COGROUP,FOLLOW_COGROUP_in_eid4978); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP348_tree = (CommonTree)adaptor.dupNode(COGROUP348);


                    adaptor.addChild(root_0, COGROUP348_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (COGROUP348!=null?COGROUP348.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1593:7: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    JOIN349=(CommonTree)match(input,JOIN,FOLLOW_JOIN_in_eid4988); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN349_tree = (CommonTree)adaptor.dupNode(JOIN349);


                    adaptor.addChild(root_0, JOIN349_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (JOIN349!=null?JOIN349.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1594:7: CROSS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CROSS350=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_eid4998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS350_tree = (CommonTree)adaptor.dupNode(CROSS350);


                    adaptor.addChild(root_0, CROSS350_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (CROSS350!=null?CROSS350.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1595:7: UNION
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    UNION351=(CommonTree)match(input,UNION,FOLLOW_UNION_in_eid5008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION351_tree = (CommonTree)adaptor.dupNode(UNION351);


                    adaptor.addChild(root_0, UNION351_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (UNION351!=null?UNION351.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1596:7: SPLIT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SPLIT352=(CommonTree)match(input,SPLIT,FOLLOW_SPLIT_in_eid5018); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT352_tree = (CommonTree)adaptor.dupNode(SPLIT352);


                    adaptor.addChild(root_0, SPLIT352_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (SPLIT352!=null?SPLIT352.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1597:7: INTO
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INTO353=(CommonTree)match(input,INTO,FOLLOW_INTO_in_eid5028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO353_tree = (CommonTree)adaptor.dupNode(INTO353);


                    adaptor.addChild(root_0, INTO353_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (INTO353!=null?INTO353.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 17 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1598:7: IF
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IF354=(CommonTree)match(input,IF,FOLLOW_IF_in_eid5038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF354_tree = (CommonTree)adaptor.dupNode(IF354);


                    adaptor.addChild(root_0, IF354_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (IF354!=null?IF354.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 18 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1599:7: ALL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ALL355=(CommonTree)match(input,ALL,FOLLOW_ALL_in_eid5048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL355_tree = (CommonTree)adaptor.dupNode(ALL355);


                    adaptor.addChild(root_0, ALL355_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (ALL355!=null?ALL355.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 19 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1600:7: AS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    AS356=(CommonTree)match(input,AS,FOLLOW_AS_in_eid5058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS356_tree = (CommonTree)adaptor.dupNode(AS356);


                    adaptor.addChild(root_0, AS356_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (AS356!=null?AS356.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 20 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1601:7: BY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BY357=(CommonTree)match(input,BY,FOLLOW_BY_in_eid5068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY357_tree = (CommonTree)adaptor.dupNode(BY357);


                    adaptor.addChild(root_0, BY357_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (BY357!=null?BY357.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 21 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1602:7: USING
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    USING358=(CommonTree)match(input,USING,FOLLOW_USING_in_eid5078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING358_tree = (CommonTree)adaptor.dupNode(USING358);


                    adaptor.addChild(root_0, USING358_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (USING358!=null?USING358.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 22 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1603:7: INNER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INNER359=(CommonTree)match(input,INNER,FOLLOW_INNER_in_eid5088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER359_tree = (CommonTree)adaptor.dupNode(INNER359);


                    adaptor.addChild(root_0, INNER359_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (INNER359!=null?INNER359.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 23 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1604:7: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OUTER360=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_eid5098); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER360_tree = (CommonTree)adaptor.dupNode(OUTER360);


                    adaptor.addChild(root_0, OUTER360_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (OUTER360!=null?OUTER360.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 24 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1605:7: PARALLEL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    PARALLEL361=(CommonTree)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid5108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL361_tree = (CommonTree)adaptor.dupNode(PARALLEL361);


                    adaptor.addChild(root_0, PARALLEL361_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (PARALLEL361!=null?PARALLEL361.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 25 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1606:7: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    PARTITION362=(CommonTree)match(input,PARTITION,FOLLOW_PARTITION_in_eid5118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION362_tree = (CommonTree)adaptor.dupNode(PARTITION362);


                    adaptor.addChild(root_0, PARTITION362_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (PARTITION362!=null?PARTITION362.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 26 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1607:7: GROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GROUP363=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_eid5128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP363_tree = (CommonTree)adaptor.dupNode(GROUP363);


                    adaptor.addChild(root_0, GROUP363_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (GROUP363!=null?GROUP363.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 27 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1608:7: AND
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    AND364=(CommonTree)match(input,AND,FOLLOW_AND_in_eid5138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND364_tree = (CommonTree)adaptor.dupNode(AND364);


                    adaptor.addChild(root_0, AND364_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (AND364!=null?AND364.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 28 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1609:7: OR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OR365=(CommonTree)match(input,OR,FOLLOW_OR_in_eid5148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR365_tree = (CommonTree)adaptor.dupNode(OR365);


                    adaptor.addChild(root_0, OR365_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (OR365!=null?OR365.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 29 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1610:7: NOT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NOT366=(CommonTree)match(input,NOT,FOLLOW_NOT_in_eid5158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT366_tree = (CommonTree)adaptor.dupNode(NOT366);


                    adaptor.addChild(root_0, NOT366_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (NOT366!=null?NOT366.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 30 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1611:7: GENERATE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GENERATE367=(CommonTree)match(input,GENERATE,FOLLOW_GENERATE_in_eid5168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE367_tree = (CommonTree)adaptor.dupNode(GENERATE367);


                    adaptor.addChild(root_0, GENERATE367_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (GENERATE367!=null?GENERATE367.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 31 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1612:7: FLATTEN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLATTEN368=(CommonTree)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid5178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN368_tree = (CommonTree)adaptor.dupNode(FLATTEN368);


                    adaptor.addChild(root_0, FLATTEN368_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (FLATTEN368!=null?FLATTEN368.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 32 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1613:7: EVAL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    EVAL369=(CommonTree)match(input,EVAL,FOLLOW_EVAL_in_eid5188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVAL369_tree = (CommonTree)adaptor.dupNode(EVAL369);


                    adaptor.addChild(root_0, EVAL369_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (EVAL369!=null?EVAL369.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 33 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1614:7: ASC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ASC370=(CommonTree)match(input,ASC,FOLLOW_ASC_in_eid5198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC370_tree = (CommonTree)adaptor.dupNode(ASC370);


                    adaptor.addChild(root_0, ASC370_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (ASC370!=null?ASC370.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 34 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1615:7: DESC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DESC371=(CommonTree)match(input,DESC,FOLLOW_DESC_in_eid5208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC371_tree = (CommonTree)adaptor.dupNode(DESC371);


                    adaptor.addChild(root_0, DESC371_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (DESC371!=null?DESC371.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 35 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1616:7: BOOLEAN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BOOLEAN372=(CommonTree)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_eid5218); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLEAN372_tree = (CommonTree)adaptor.dupNode(BOOLEAN372);


                    adaptor.addChild(root_0, BOOLEAN372_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (BOOLEAN372!=null?BOOLEAN372.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 36 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1617:7: INT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INT373=(CommonTree)match(input,INT,FOLLOW_INT_in_eid5228); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT373_tree = (CommonTree)adaptor.dupNode(INT373);


                    adaptor.addChild(root_0, INT373_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (INT373!=null?INT373.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 37 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1618:7: LONG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LONG374=(CommonTree)match(input,LONG,FOLLOW_LONG_in_eid5238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG374_tree = (CommonTree)adaptor.dupNode(LONG374);


                    adaptor.addChild(root_0, LONG374_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (LONG374!=null?LONG374.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 38 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1619:7: FLOAT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLOAT375=(CommonTree)match(input,FLOAT,FOLLOW_FLOAT_in_eid5248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT375_tree = (CommonTree)adaptor.dupNode(FLOAT375);


                    adaptor.addChild(root_0, FLOAT375_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (FLOAT375!=null?FLOAT375.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 39 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1620:7: DOUBLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DOUBLE376=(CommonTree)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid5258); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE376_tree = (CommonTree)adaptor.dupNode(DOUBLE376);


                    adaptor.addChild(root_0, DOUBLE376_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (DOUBLE376!=null?DOUBLE376.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 40 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1621:7: CHARARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CHARARRAY377=(CommonTree)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid5268); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY377_tree = (CommonTree)adaptor.dupNode(CHARARRAY377);


                    adaptor.addChild(root_0, CHARARRAY377_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (CHARARRAY377!=null?CHARARRAY377.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 41 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1622:7: BYTEARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BYTEARRAY378=(CommonTree)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid5278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY378_tree = (CommonTree)adaptor.dupNode(BYTEARRAY378);


                    adaptor.addChild(root_0, BYTEARRAY378_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (BYTEARRAY378!=null?BYTEARRAY378.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 42 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1623:7: BAG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BAG379=(CommonTree)match(input,BAG,FOLLOW_BAG_in_eid5288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG379_tree = (CommonTree)adaptor.dupNode(BAG379);


                    adaptor.addChild(root_0, BAG379_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (BAG379!=null?BAG379.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 43 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1624:7: TUPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TUPLE380=(CommonTree)match(input,TUPLE,FOLLOW_TUPLE_in_eid5298); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE380_tree = (CommonTree)adaptor.dupNode(TUPLE380);


                    adaptor.addChild(root_0, TUPLE380_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (TUPLE380!=null?TUPLE380.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 44 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1625:7: MAP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MAP381=(CommonTree)match(input,MAP,FOLLOW_MAP_in_eid5308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP381_tree = (CommonTree)adaptor.dupNode(MAP381);


                    adaptor.addChild(root_0, MAP381_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (MAP381!=null?MAP381.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 45 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1626:7: IS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IS382=(CommonTree)match(input,IS,FOLLOW_IS_in_eid5318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS382_tree = (CommonTree)adaptor.dupNode(IS382);


                    adaptor.addChild(root_0, IS382_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (IS382!=null?IS382.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 46 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1627:7: NULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NULL383=(CommonTree)match(input,NULL,FOLLOW_NULL_in_eid5328); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL383_tree = (CommonTree)adaptor.dupNode(NULL383);


                    adaptor.addChild(root_0, NULL383_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (NULL383!=null?NULL383.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 47 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1628:7: TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TRUE384=(CommonTree)match(input,TRUE,FOLLOW_TRUE_in_eid5338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE384_tree = (CommonTree)adaptor.dupNode(TRUE384);


                    adaptor.addChild(root_0, TRUE384_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (TRUE384!=null?TRUE384.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 48 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1629:7: FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FALSE385=(CommonTree)match(input,FALSE,FOLLOW_FALSE_in_eid5348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE385_tree = (CommonTree)adaptor.dupNode(FALSE385);


                    adaptor.addChild(root_0, FALSE385_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (FALSE385!=null?FALSE385.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 49 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1630:7: STREAM
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STREAM386=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_eid5358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM386_tree = (CommonTree)adaptor.dupNode(STREAM386);


                    adaptor.addChild(root_0, STREAM386_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STREAM386!=null?STREAM386.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 50 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1631:7: THROUGH
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    THROUGH387=(CommonTree)match(input,THROUGH,FOLLOW_THROUGH_in_eid5368); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH387_tree = (CommonTree)adaptor.dupNode(THROUGH387);


                    adaptor.addChild(root_0, THROUGH387_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (THROUGH387!=null?THROUGH387.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 51 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1632:7: STORE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STORE388=(CommonTree)match(input,STORE,FOLLOW_STORE_in_eid5378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE388_tree = (CommonTree)adaptor.dupNode(STORE388);


                    adaptor.addChild(root_0, STORE388_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STORE388!=null?STORE388.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 52 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1633:7: MAPREDUCE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MAPREDUCE389=(CommonTree)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid5388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE389_tree = (CommonTree)adaptor.dupNode(MAPREDUCE389);


                    adaptor.addChild(root_0, MAPREDUCE389_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (MAPREDUCE389!=null?MAPREDUCE389.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 53 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1634:7: SHIP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SHIP390=(CommonTree)match(input,SHIP,FOLLOW_SHIP_in_eid5398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP390_tree = (CommonTree)adaptor.dupNode(SHIP390);


                    adaptor.addChild(root_0, SHIP390_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (SHIP390!=null?SHIP390.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 54 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1635:7: CACHE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CACHE391=(CommonTree)match(input,CACHE,FOLLOW_CACHE_in_eid5408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE391_tree = (CommonTree)adaptor.dupNode(CACHE391);


                    adaptor.addChild(root_0, CACHE391_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (CACHE391!=null?CACHE391.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 55 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1636:7: INPUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INPUT392=(CommonTree)match(input,INPUT,FOLLOW_INPUT_in_eid5418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT392_tree = (CommonTree)adaptor.dupNode(INPUT392);


                    adaptor.addChild(root_0, INPUT392_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (INPUT392!=null?INPUT392.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 56 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1637:7: OUTPUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OUTPUT393=(CommonTree)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid5428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT393_tree = (CommonTree)adaptor.dupNode(OUTPUT393);


                    adaptor.addChild(root_0, OUTPUT393_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (OUTPUT393!=null?OUTPUT393.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 57 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1638:7: STDERROR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDERROR394=(CommonTree)match(input,STDERROR,FOLLOW_STDERROR_in_eid5438); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR394_tree = (CommonTree)adaptor.dupNode(STDERROR394);


                    adaptor.addChild(root_0, STDERROR394_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STDERROR394!=null?STDERROR394.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 58 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1639:7: STDIN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDIN395=(CommonTree)match(input,STDIN,FOLLOW_STDIN_in_eid5448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN395_tree = (CommonTree)adaptor.dupNode(STDIN395);


                    adaptor.addChild(root_0, STDIN395_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STDIN395!=null?STDIN395.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 59 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1640:7: STDOUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDOUT396=(CommonTree)match(input,STDOUT,FOLLOW_STDOUT_in_eid5458); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT396_tree = (CommonTree)adaptor.dupNode(STDOUT396);


                    adaptor.addChild(root_0, STDOUT396_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STDOUT396!=null?STDOUT396.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 60 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1641:7: LIMIT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LIMIT397=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_eid5468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT397_tree = (CommonTree)adaptor.dupNode(LIMIT397);


                    adaptor.addChild(root_0, LIMIT397_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (LIMIT397!=null?LIMIT397.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 61 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1642:7: SAMPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SAMPLE398=(CommonTree)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid5478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE398_tree = (CommonTree)adaptor.dupNode(SAMPLE398);


                    adaptor.addChild(root_0, SAMPLE398_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (SAMPLE398!=null?SAMPLE398.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 62 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1643:7: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LEFT399=(CommonTree)match(input,LEFT,FOLLOW_LEFT_in_eid5488); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT399_tree = (CommonTree)adaptor.dupNode(LEFT399);


                    adaptor.addChild(root_0, LEFT399_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (LEFT399!=null?LEFT399.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 63 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1644:7: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    RIGHT400=(CommonTree)match(input,RIGHT,FOLLOW_RIGHT_in_eid5498); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT400_tree = (CommonTree)adaptor.dupNode(RIGHT400);


                    adaptor.addChild(root_0, RIGHT400_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (RIGHT400!=null?RIGHT400.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 64 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1645:7: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FULL401=(CommonTree)match(input,FULL,FOLLOW_FULL_in_eid5508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL401_tree = (CommonTree)adaptor.dupNode(FULL401);


                    adaptor.addChild(root_0, FULL401_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (FULL401!=null?FULL401.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 65 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1646:7: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER402=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_eid5518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER402_tree = (CommonTree)adaptor.dupNode(IDENTIFIER402);


                    adaptor.addChild(root_0, IDENTIFIER402_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (IDENTIFIER402!=null?IDENTIFIER402.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 66 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1647:7: TOBAG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOBAG403=(CommonTree)match(input,TOBAG,FOLLOW_TOBAG_in_eid5528); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOBAG403_tree = (CommonTree)adaptor.dupNode(TOBAG403);


                    adaptor.addChild(root_0, TOBAG403_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = "TOBAG"; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 67 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1648:7: TOMAP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOMAP404=(CommonTree)match(input,TOMAP,FOLLOW_TOMAP_in_eid5538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOMAP404_tree = (CommonTree)adaptor.dupNode(TOMAP404);


                    adaptor.addChild(root_0, TOMAP404_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = "TOMAP"; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 68 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1649:7: TOTUPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOTUPLE405=(CommonTree)match(input,TOTUPLE,FOLLOW_TOTUPLE_in_eid5548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOTUPLE405_tree = (CommonTree)adaptor.dupNode(TOTUPLE405);


                    adaptor.addChild(root_0, TOTUPLE405_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = "TOTUPLE"; }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1653:1: rel_op : ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES );
    public final LogicalPlanGenerator.rel_op_return rel_op() throws RecognitionException {
        LogicalPlanGenerator.rel_op_return retval = new LogicalPlanGenerator.rel_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_MATCHES412=null;
        LogicalPlanGenerator.rel_op_eq_return rel_op_eq406 =null;

        LogicalPlanGenerator.rel_op_ne_return rel_op_ne407 =null;

        LogicalPlanGenerator.rel_op_gt_return rel_op_gt408 =null;

        LogicalPlanGenerator.rel_op_gte_return rel_op_gte409 =null;

        LogicalPlanGenerator.rel_op_lt_return rel_op_lt410 =null;

        LogicalPlanGenerator.rel_op_lte_return rel_op_lte411 =null;


        CommonTree STR_OP_MATCHES412_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1653:8: ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES )
            int alt111=7;
            switch ( input.LA(1) ) {
            case NUM_OP_EQ:
            case STR_OP_EQ:
                {
                alt111=1;
                }
                break;
            case NUM_OP_NE:
            case STR_OP_NE:
                {
                alt111=2;
                }
                break;
            case NUM_OP_GT:
            case STR_OP_GT:
                {
                alt111=3;
                }
                break;
            case NUM_OP_GTE:
            case STR_OP_GTE:
                {
                alt111=4;
                }
                break;
            case NUM_OP_LT:
            case STR_OP_LT:
                {
                alt111=5;
                }
                break;
            case NUM_OP_LTE:
            case STR_OP_LTE:
                {
                alt111=6;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt111=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }

            switch (alt111) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1653:10: rel_op_eq
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_eq_in_rel_op5560);
                    rel_op_eq406=rel_op_eq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_eq406.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1654:10: rel_op_ne
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_ne_in_rel_op5571);
                    rel_op_ne407=rel_op_ne();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_ne407.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1655:10: rel_op_gt
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gt_in_rel_op5582);
                    rel_op_gt408=rel_op_gt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_gt408.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1656:10: rel_op_gte
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gte_in_rel_op5593);
                    rel_op_gte409=rel_op_gte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_gte409.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1657:10: rel_op_lt
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lt_in_rel_op5604);
                    rel_op_lt410=rel_op_lt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_lt410.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1658:10: rel_op_lte
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lte_in_rel_op5615);
                    rel_op_lte411=rel_op_lte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_lte411.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1659:10: STR_OP_MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_MATCHES412=(CommonTree)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_rel_op5626); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES412_tree = (CommonTree)adaptor.dupNode(STR_OP_MATCHES412);


                    adaptor.addChild(root_0, STR_OP_MATCHES412_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_op_eq_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_eq"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1662:1: rel_op_eq : ( STR_OP_EQ | NUM_OP_EQ );
    public final LogicalPlanGenerator.rel_op_eq_return rel_op_eq() throws RecognitionException {
        LogicalPlanGenerator.rel_op_eq_return retval = new LogicalPlanGenerator.rel_op_eq_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set413=null;

        CommonTree set413_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1662:11: ( STR_OP_EQ | NUM_OP_EQ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set413=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_EQ||input.LA(1)==STR_OP_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set413_tree = (CommonTree)adaptor.dupNode(set413);


                adaptor.addChild(root_0, set413_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_eq"


    public static class rel_op_ne_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_ne"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1665:1: rel_op_ne : ( STR_OP_NE | NUM_OP_NE );
    public final LogicalPlanGenerator.rel_op_ne_return rel_op_ne() throws RecognitionException {
        LogicalPlanGenerator.rel_op_ne_return retval = new LogicalPlanGenerator.rel_op_ne_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set414=null;

        CommonTree set414_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1665:11: ( STR_OP_NE | NUM_OP_NE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set414=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_NE||input.LA(1)==STR_OP_NE ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set414_tree = (CommonTree)adaptor.dupNode(set414);


                adaptor.addChild(root_0, set414_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_ne"


    public static class rel_op_gt_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1668:1: rel_op_gt : ( STR_OP_GT | NUM_OP_GT );
    public final LogicalPlanGenerator.rel_op_gt_return rel_op_gt() throws RecognitionException {
        LogicalPlanGenerator.rel_op_gt_return retval = new LogicalPlanGenerator.rel_op_gt_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set415=null;

        CommonTree set415_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1668:11: ( STR_OP_GT | NUM_OP_GT )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set415=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_GT||input.LA(1)==STR_OP_GT ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set415_tree = (CommonTree)adaptor.dupNode(set415);


                adaptor.addChild(root_0, set415_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gt"


    public static class rel_op_gte_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1671:1: rel_op_gte : ( STR_OP_GTE | NUM_OP_GTE );
    public final LogicalPlanGenerator.rel_op_gte_return rel_op_gte() throws RecognitionException {
        LogicalPlanGenerator.rel_op_gte_return retval = new LogicalPlanGenerator.rel_op_gte_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set416=null;

        CommonTree set416_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1671:12: ( STR_OP_GTE | NUM_OP_GTE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set416=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_GTE||input.LA(1)==STR_OP_GTE ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set416_tree = (CommonTree)adaptor.dupNode(set416);


                adaptor.addChild(root_0, set416_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gte"


    public static class rel_op_lt_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1674:1: rel_op_lt : ( STR_OP_LT | NUM_OP_LT );
    public final LogicalPlanGenerator.rel_op_lt_return rel_op_lt() throws RecognitionException {
        LogicalPlanGenerator.rel_op_lt_return retval = new LogicalPlanGenerator.rel_op_lt_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set417=null;

        CommonTree set417_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1674:11: ( STR_OP_LT | NUM_OP_LT )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set417=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_LT||input.LA(1)==STR_OP_LT ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set417_tree = (CommonTree)adaptor.dupNode(set417);


                adaptor.addChild(root_0, set417_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lt"


    public static class rel_op_lte_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1677:1: rel_op_lte : ( STR_OP_LTE | NUM_OP_LTE );
    public final LogicalPlanGenerator.rel_op_lte_return rel_op_lte() throws RecognitionException {
        LogicalPlanGenerator.rel_op_lte_return retval = new LogicalPlanGenerator.rel_op_lte_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set418=null;

        CommonTree set418_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1677:12: ( STR_OP_LTE | NUM_OP_LTE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set418=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_LTE||input.LA(1)==STR_OP_LTE ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set418_tree = (CommonTree)adaptor.dupNode(set418);


                adaptor.addChild(root_0, set418_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lte"


    public static class rel_str_op_return extends TreeRuleReturnScope {
        public String id;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1680:1: rel_str_op returns [String id] : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final LogicalPlanGenerator.rel_str_op_return rel_str_op() throws RecognitionException {
        LogicalPlanGenerator.rel_str_op_return retval = new LogicalPlanGenerator.rel_str_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_EQ419=null;
        CommonTree STR_OP_NE420=null;
        CommonTree STR_OP_GT421=null;
        CommonTree STR_OP_LT422=null;
        CommonTree STR_OP_GTE423=null;
        CommonTree STR_OP_LTE424=null;
        CommonTree STR_OP_MATCHES425=null;

        CommonTree STR_OP_EQ419_tree=null;
        CommonTree STR_OP_NE420_tree=null;
        CommonTree STR_OP_GT421_tree=null;
        CommonTree STR_OP_LT422_tree=null;
        CommonTree STR_OP_GTE423_tree=null;
        CommonTree STR_OP_LTE424_tree=null;
        CommonTree STR_OP_MATCHES425_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1681:2: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            int alt112=7;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
                {
                alt112=1;
                }
                break;
            case STR_OP_NE:
                {
                alt112=2;
                }
                break;
            case STR_OP_GT:
                {
                alt112=3;
                }
                break;
            case STR_OP_LT:
                {
                alt112=4;
                }
                break;
            case STR_OP_GTE:
                {
                alt112=5;
                }
                break;
            case STR_OP_LTE:
                {
                alt112=6;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt112=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;

            }

            switch (alt112) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1681:4: STR_OP_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_EQ419=(CommonTree)match(input,STR_OP_EQ,FOLLOW_STR_OP_EQ_in_rel_str_op5717); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_EQ419_tree = (CommonTree)adaptor.dupNode(STR_OP_EQ419);


                    adaptor.addChild(root_0, STR_OP_EQ419_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STR_OP_EQ419!=null?STR_OP_EQ419.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1682:4: STR_OP_NE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_NE420=(CommonTree)match(input,STR_OP_NE,FOLLOW_STR_OP_NE_in_rel_str_op5724); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_NE420_tree = (CommonTree)adaptor.dupNode(STR_OP_NE420);


                    adaptor.addChild(root_0, STR_OP_NE420_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STR_OP_NE420!=null?STR_OP_NE420.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1683:4: STR_OP_GT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_GT421=(CommonTree)match(input,STR_OP_GT,FOLLOW_STR_OP_GT_in_rel_str_op5731); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_GT421_tree = (CommonTree)adaptor.dupNode(STR_OP_GT421);


                    adaptor.addChild(root_0, STR_OP_GT421_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STR_OP_GT421!=null?STR_OP_GT421.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1684:4: STR_OP_LT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_LT422=(CommonTree)match(input,STR_OP_LT,FOLLOW_STR_OP_LT_in_rel_str_op5738); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_LT422_tree = (CommonTree)adaptor.dupNode(STR_OP_LT422);


                    adaptor.addChild(root_0, STR_OP_LT422_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STR_OP_LT422!=null?STR_OP_LT422.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1685:4: STR_OP_GTE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_GTE423=(CommonTree)match(input,STR_OP_GTE,FOLLOW_STR_OP_GTE_in_rel_str_op5745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_GTE423_tree = (CommonTree)adaptor.dupNode(STR_OP_GTE423);


                    adaptor.addChild(root_0, STR_OP_GTE423_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STR_OP_GTE423!=null?STR_OP_GTE423.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1686:4: STR_OP_LTE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_LTE424=(CommonTree)match(input,STR_OP_LTE,FOLLOW_STR_OP_LTE_in_rel_str_op5752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_LTE424_tree = (CommonTree)adaptor.dupNode(STR_OP_LTE424);


                    adaptor.addChild(root_0, STR_OP_LTE424_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STR_OP_LTE424!=null?STR_OP_LTE424.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1687:4: STR_OP_MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_MATCHES425=(CommonTree)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_rel_str_op5759); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES425_tree = (CommonTree)adaptor.dupNode(STR_OP_MATCHES425);


                    adaptor.addChild(root_0, STR_OP_MATCHES425_tree);
                    }


                    if ( state.backtracking==0 ) { retval.id = (STR_OP_MATCHES425!=null?STR_OP_MATCHES425.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"

    // $ANTLR start synpred117_LogicalPlanGenerator
    public final void synpred117_LogicalPlanGenerator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:908:20: ( INTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:908:20: INTEGER
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred117_LogicalPlanGenerator2882); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred117_LogicalPlanGenerator

    // $ANTLR start synpred118_LogicalPlanGenerator
    public final void synpred118_LogicalPlanGenerator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:913:4: ( LONGINTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:913:4: LONGINTEGER
        {
        match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_synpred118_LogicalPlanGenerator2892); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred118_LogicalPlanGenerator

    // $ANTLR start synpred119_LogicalPlanGenerator
    public final void synpred119_LogicalPlanGenerator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:932:20: ( DOUBLENUMBER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:932:20: DOUBLENUMBER
        {
        match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_synpred119_LogicalPlanGenerator2944); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred119_LogicalPlanGenerator

    // $ANTLR start synpred138_LogicalPlanGenerator
    public final void synpred138_LogicalPlanGenerator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1051:4: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1051:4: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item
        {
        pushFollow(FOLLOW_join_item_in_synpred138_LogicalPlanGenerator3297);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1056:66: ( OUTER )?
        int alt123=2;
        int LA123_0 = input.LA(1);

        if ( (LA123_0==OUTER) ) {
            alt123=1;
        }
        switch (alt123) {
            case 1 :
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1056:66: OUTER
                {
                match(input,OUTER,FOLLOW_OUTER_in_synpred138_LogicalPlanGenerator3346); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_join_item_in_synpred138_LogicalPlanGenerator3349);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred138_LogicalPlanGenerator

    // $ANTLR start synpred155_LogicalPlanGenerator
    public final void synpred155_LogicalPlanGenerator_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1240:31: ( INTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/LogicalPlanGenerator.g:1240:31: INTEGER
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred155_LogicalPlanGenerator3923); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred155_LogicalPlanGenerator

    // Delegated rules

    public final boolean synpred117_LogicalPlanGenerator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_LogicalPlanGenerator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_LogicalPlanGenerator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_LogicalPlanGenerator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_LogicalPlanGenerator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_LogicalPlanGenerator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_LogicalPlanGenerator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_LogicalPlanGenerator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_LogicalPlanGenerator() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_LogicalPlanGenerator_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_QUERY_in_query88 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_in_query90 = new BitSet(new long[]{0x0000000000000008L,0x0000000200000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_general_statement_in_statement112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_statement_in_statement117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_split_statement126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATEMENT_in_general_statement138 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_general_statement142 = new BitSet(new long[]{0x46080121004A4000L,0x000400C010000800L});
    public static final BitSet FOLLOW_op_clause_in_general_statement153 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement155 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause174 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause176 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_clause_in_op_clause444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause459 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_define_clause461 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_cmd_in_define_clause463 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause479 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_define_clause481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_define_clause483 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd512 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ship_clause_in_cmd516 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd521 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_input_clause_in_cmd526 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_output_clause_in_cmd530 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_error_clause_in_cmd534 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause557 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_path_list_in_ship_clause559 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause594 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_path_list_in_cache_clause596 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INPUT_in_input_clause619 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stream_cmd_in_input_clause623 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_STDIN_in_stream_cmd657 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd669 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STDOUT_in_stream_cmd684 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd696 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_stream_cmd711 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd723 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause751 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stream_cmd_in_output_clause755 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause783 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause794 = new BitSet(new long[]{0x0001000000000008L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause817 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOAD_in_load_clause871 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_filename_in_load_clause873 = new BitSet(new long[]{0x0000000000000048L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_load_clause875 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_as_clause_in_load_clause879 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_filename899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_as_clause916 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause918 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIELD_DEF_in_field_def947 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_field_def949 = new BitSet(new long[]{0x0800800404002A08L,0x0080000000000000L,0x0000000008001000L});
    public static final BitSet FOLLOW_type_in_field_def953 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIELD_DEF_WITHOUT_IDENTIFIER_in_field_def972 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_field_def976 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_field_def_in_field_def_list1007 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_simple_type_in_type1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_in_type1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_in_type1047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type1057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_simple_type1075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_simple_type1082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_simple_type1089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_simple_type1096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_simple_type1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_simple_type1110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_simple_type1117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_TYPE_in_tuple_type1134 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_field_def_list_in_tuple_type1145 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BAG_TYPE_in_bag_type1185 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_bag_type1187 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_tuple_type_in_bag_type1190 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAP_TYPE_in_map_type1213 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_map_type1215 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNC_REF_in_func_clause1244 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_clause1246 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNC_in_func_clause1260 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_clause1262 = new BitSet(new long[]{0x0000000000000008L,0x0000000000400002L});
    public static final BitSet FOLLOW_func_args_in_func_clause1264 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_eid_in_func_name1295 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_PERIOD_in_func_name1309 = new BitSet(new long[]{0x6E1EF9E7845A7FF0L,0x000FFFFA5181EC04L,0x00000000C7040040L});
    public static final BitSet FOLLOW_DOLLAR_in_func_name1315 = new BitSet(new long[]{0x6E1EF9E7845A7FF0L,0x000FFFFA5181EC04L,0x00000000C7040040L});
    public static final BitSet FOLLOW_eid_in_func_name1331 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_func_args1360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400002L});
    public static final BitSet FOLLOW_MULTILINE_QUOTEDSTRING_in_func_args1371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400002L});
    public static final BitSet FOLLOW_GROUP_in_group_clause1412 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_group_item_in_group_clause1414 = new BitSet(new long[]{0x46080121004A4008L,0x000400C010410800L,0x0000000000000040L});
    public static final BitSet FOLLOW_group_type_in_group_clause1419 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause1426 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COGROUP_in_group_clause1441 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_group_item_in_group_clause1443 = new BitSet(new long[]{0x46080121004A4008L,0x000400C010410800L,0x0000000000000040L});
    public static final BitSet FOLLOW_group_type_in_group_clause1448 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause1455 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_type1476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_group_item1497 = new BitSet(new long[]{0x0000000000000410L,0x0040000000000000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item1501 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ALL_in_group_item1526 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ANY_in_group_item1551 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_INNER_in_group_item1576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_group_item1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_rel1600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_op_in_rel1610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_clause_in_inline_op1630 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_parallel_clause_in_inline_op1632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item1658 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_col_range_in_flatten_generated_item1668 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_flatten_generated_item1676 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_flatten_generated_item1684 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item1703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause1721 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_flatten_clause1723 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STORE_in_store_clause1741 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_store_clause1743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_filename_in_store_clause1745 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_store_clause1747 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause1781 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_filter_clause1783 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_filter_clause1785 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OR_in_cond1809 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1815 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_cond1822 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AND_in_cond1837 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1843 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_cond1850 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_in_cond1865 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1871 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NULL_in_cond1886 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1888 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_NOT_in_cond1891 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_op_eq_in_cond1906 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1912 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond1919 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_op_ne_in_cond1935 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1941 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond1948 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_op_lt_in_cond1964 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1970 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond1977 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_op_lte_in_cond1993 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1999 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond2006 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_op_gt_in_cond2021 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond2027 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond2034 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_op_gte_in_cond2050 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond2056 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond2063 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_cond2078 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond2084 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond2091 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_func_eval_in_cond2104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNC_EVAL_in_func_eval2131 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_eval2133 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_real_arg_in_func_eval2137 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_real_arg2169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg2177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_real_arg2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_expr2210 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr2216 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr2223 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_expr2238 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr2244 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr2251 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_expr2266 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr2272 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr2279 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIV_in_expr2294 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr2300 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr2307 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERCENT_in_expr2322 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr2328 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr2335 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_const_expr_in_expr2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_expr_in_expr2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEG_in_expr2372 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr2378 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_expr2393 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_expr2395 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr2401 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPR_IN_PAREN_in_expr2417 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr2423 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_simple_type_in_type_cast2445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type_cast2455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_cast_in_type_cast2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_cast_in_type_cast2475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast2500 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast2504 = new BitSet(new long[]{0x0800800404002A08L,0x0100000000000000L,0x0000000010001000L});
    public static final BitSet FOLLOW_BAG_TYPE_CAST_in_bag_type_cast2531 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tuple_type_cast_in_bag_type_cast2533 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_projectable_expr_in_var_expr2560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_dot_proj_in_var_expr2570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_pound_proj_in_var_expr2585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_func_eval_in_projectable_expr2615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_projectable_expr2626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_projectable_expr2637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_dot_proj2663 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj2667 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_alias_in_col_alias_or_index2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_index_in_col_alias_or_index2693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_col_alias2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_col_alias2715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_col_index2730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COL_RANGE_in_col_range2749 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_ref_in_col_range2756 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range2761 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_ref_in_col_range2768 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_POUND_in_pound_proj2796 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_pound_proj2800 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NULL_in_pound_proj2806 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BIN_EXPR_in_bin_expr2826 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_bin_expr2828 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_bin_expr2835 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_bin_expr2842 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause2876 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_limit_clause2878 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_INTEGER_in_limit_clause2882 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LONGINTEGER_in_limit_clause2892 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_limit_clause2902 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause2938 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_sample_clause2940 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_sample_clause2944 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_sample_clause2954 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ORDER_in_order_clause2991 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_order_clause2993 = new BitSet(new long[]{0x0000010002000000L,0x2000000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause2995 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_order_clause2997 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause3024 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_ASC_in_order_by_clause3033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_order_by_clause3039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_col_in_order_by_clause3051 = new BitSet(new long[]{0x0000010002000002L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_range_in_order_col3077 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_ASC_in_order_col3081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_order_col3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_order_col3095 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_ASC_in_order_col3100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_order_col3104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause3132 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_distinct_clause3134 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause3136 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause3159 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_partition_clause3161 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause3183 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause3185 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause3187 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_in_rel_list3215 = new BitSet(new long[]{0x46080121004A4002L,0x000400C010000800L,0x0000000000000040L});
    public static final BitSet FOLLOW_JOIN_in_join_clause3254 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause3256 = new BitSet(new long[]{0x0000000000000008L,0x0000000000410000L});
    public static final BitSet FOLLOW_join_type_in_join_clause3258 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause3261 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type3282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3297 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_in_join_sub_clause3301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RIGHT_in_join_sub_clause3321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_FULL_in_join_sub_clause3340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause3346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3359 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_JOIN_ITEM_in_join_item3372 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_join_item3374 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item3376 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause3403 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_clause3407 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_col_range_in_join_group_by_expr3432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_join_group_by_expr3438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_join_group_by_expr3444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause3470 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause3474 = new BitSet(new long[]{0x46080121004A4000L,0x000400C010000800L,0x0000000000000040L});
    public static final BitSet FOLLOW_rel_list_in_union_clause3481 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause3517 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_foreach_clause3519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_foreach_plan_in_foreach_clause3521 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_PLAN_SIMPLE_in_foreach_plan3557 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_generate_clause_in_foreach_plan3559 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_PLAN_COMPLEX_in_foreach_plan3568 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan3570 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_command_in_nested_blk3581 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_blk3584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NESTED_CMD_in_nested_command3606 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_nested_command3608 = new BitSet(new long[]{0x0200002100420000L,0x0000000000000800L,0x0000000000020000L});
    public static final BitSet FOLLOW_nested_op_in_nested_command3610 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NESTED_CMD_ASSI_in_nested_command3629 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_nested_command3631 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_nested_command3633 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op3655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op3663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op3671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op3680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op3688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op3696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NESTED_PROJ_in_nested_proj3728 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj3740 = new BitSet(new long[]{0x0000010002000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj3755 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter3808 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter3810 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_nested_filter3812 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort3846 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort3848 = new BitSet(new long[]{0x0000010002000000L,0x2000000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort3850 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_nested_sort3852 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct3882 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct3884 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit3917 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit3919 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit3923 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_nested_limit3934 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross3968 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross3970 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach4002 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach4004 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_foreach4006 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GENERATE_in_generate_clause4035 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause4039 = new BitSet(new long[]{0x900101128A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input4105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input4116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list4142 = new BitSet(new long[]{0x0000010002000002L,0x0000000000000000L,0x0000000000020040L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause4167 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_stream_clause4169 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_stream_clause4173 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_IDENTIFIER_in_stream_clause4197 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause4240 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause4268 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause4270 = new BitSet(new long[]{0x0000000000000000L,0x0000004000400000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause4272 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause4284 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause4294 = new BitSet(new long[]{0x0000000040000008L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause4301 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause4321 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_split_clause4329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause4347 = new BitSet(new long[]{0x0000000000000008L,0x0000000000001000L,0x0000000000400000L});
    public static final BitSet FOLLOW_split_otherwise_in_split_clause4350 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SPLIT_BRANCH_in_split_branch4379 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_split_branch4381 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_split_branch4383 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise4417 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_split_otherwise4419 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_alias_col_ref_in_col_ref4440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dollar_col_ref_in_col_ref4448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_alias_col_ref4465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias_col_ref4476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_dollar_col_ref4495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_const_expr4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal4532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_in_literal4542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_in_literal4552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_in_literal4562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_scalar_in_scalar4580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_scalar4590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_scalar4601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_scalar4611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_scalar4621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_num_scalar4646 = new BitSet(new long[]{0x1001001008000000L});
    public static final BitSet FOLLOW_INTEGER_in_num_scalar4659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_num_scalar4673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATNUMBER_in_num_scalar4688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_num_scalar4703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_VAL_in_map4736 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_keyvalue_in_map4740 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KEY_VAL_PAIR_in_keyvalue4767 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_map_key_in_keyvalue4769 = new BitSet(new long[]{0x9001001088000000L,0x0201000000400000L,0x0000000020042000L});
    public static final BitSet FOLLOW_literal_in_keyvalue4771 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_map_key4791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_VAL_in_bag4813 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tuple_in_bag4817 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_TUPLE_VAL_in_tuple4849 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_literal_in_tuple4853 = new BitSet(new long[]{0x9001001088000008L,0x0201000000400000L,0x0000000020042000L});
    public static final BitSet FOLLOW_rel_str_op_in_eid4878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid4888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid4908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid4918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid4928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid4938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_eid4948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid4958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid4968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid4978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid4988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid4998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid5008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid5018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid5028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid5038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid5048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid5058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid5068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid5078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid5088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid5098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid5108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid5118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid5128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid5138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid5148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid5158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid5168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid5178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVAL_in_eid5188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid5198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid5208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_eid5218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid5228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid5238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid5248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid5258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid5268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid5278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid5288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid5298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid5308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_eid5328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid5338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid5348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid5358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid5368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid5378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid5388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid5398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid5408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid5418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid5428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid5438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid5448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid5458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid5468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid5478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid5488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid5498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid5508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_eid5518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOBAG_in_eid5528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOMAP_in_eid5538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOTUPLE_in_eid5548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_eq_in_rel_op5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_ne_in_rel_op5571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gt_in_rel_op5582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gte_in_rel_op5593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lt_in_rel_op5604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lte_in_rel_op5615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_rel_op5626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_EQ_in_rel_str_op5717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_NE_in_rel_str_op5724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_GT_in_rel_str_op5731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_LT_in_rel_str_op5738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_GTE_in_rel_str_op5745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_LTE_in_rel_str_op5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_rel_str_op5759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred117_LogicalPlanGenerator2882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_synpred118_LogicalPlanGenerator2892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_synpred119_LogicalPlanGenerator2944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_synpred138_LogicalPlanGenerator3297 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_synpred138_LogicalPlanGenerator3299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_OUTER_in_synpred138_LogicalPlanGenerator3346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_join_item_in_synpred138_LogicalPlanGenerator3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred155_LogicalPlanGenerator3923 = new BitSet(new long[]{0x0000000000000002L});

}