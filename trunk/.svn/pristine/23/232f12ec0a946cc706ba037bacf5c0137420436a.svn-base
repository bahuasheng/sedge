package edu.umass.cs.pig.vm;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.pig.backend.executionengine.ExecException;
import org.apache.pig.data.DataBag;
import org.apache.pig.data.Tuple;
import org.apache.pig.impl.logicalLayer.FrontendException;
import org.apache.pig.newplan.logical.relational.LogicalSchema;
import org.apache.pig.pen.util.ExampleTuple;

import edu.umass.cs.pig.MainConfig;
import edu.umass.cs.pig.cntr.CountConstraint;
import edu.umass.cs.pig.cntr.EqualVarCntr;
import edu.umass.cs.pig.cntr.NullConcrete;
import edu.umass.cs.pig.dataflow.LoadArgs;
import edu.umass.cs.pig.dataflow.ParentEncapSol;
import edu.umass.cs.pig.dataflow.ParentEncapsulation;
import edu.umass.cs.pig.dataflow.Relation;
import edu.umass.cs.pig.dataflow.ValueExtractor;
import edu.umass.cs.pig.dataflow.VarInfo;
import edu.umass.cs.pig.util.ConversionUtility;
import edu.umass.cs.pig.util.DefaultTuple;
import edu.umass.cs.pig.util.TupleMutation;
import edu.umass.cs.pig.z3.ConstraintSolution;
import edu.umass.cs.pig.z3.CoralSolutionImpl;
import edu.umass.cs.pig.z3.Z3Context;
import edu.umass.cs.pig.z3.Z3SolutionImpl;

public class ComputeSolution {
	ValueExtractor extr;
	
	public ComputeSolution() {
		extr = new ValueExtractor();
	}

	public void compute(ArrayList<PathList> outputConstraints, QueryManager q, LogicalSchema schema, 
			DataBag newInputData, DataBag inputData, Map<PathList, LoadArgs> childrenPathlistMap,
			Map<PathList, ParentEncapsulation> parentTupleMap, Map<PathList, 
			ParentEncapSol> parentSolMap, List<LogicalSchema> allSchema) throws FrontendException {//DataBag inputD, , Map<PathList, List<ParentEncapsulation>> parentTupleMapDuo
		

        
		
        // run through output constraints; for each one synthesize a tuple and
        // add it to the base data
        // (while synthesizing individual fields, try to match fields that exist
        // in the real data)
//        boolean newInput = false;
        Iterator<Tuple> inputDItr = inputData.iterator();
        Tuple exampleTuple = null;
        boolean realDataEnd = false;
        
        for (Iterator<PathList> it = outputConstraints.iterator(); it.hasNext();) {
        	
        	PathList pl = it.next();
        	if (pl.isLeftouterjoin()) {
        		TupleMutation tm = new TupleMutation(schema, allSchema);
        		exampleTuple = tm.mutate(inputData.iterator().next());
        	} else if(inputDItr.hasNext() && !realDataEnd) {
        		exampleTuple = inputDItr.next();
        	} else {
        		if(!realDataEnd)
        			realDataEnd = true;
        		TupleMutation tm = new TupleMutation(schema, allSchema);
        		if(inputData != null && inputData.iterator().hasNext())
        			exampleTuple = tm.mutate(inputData.iterator().next());
        		else {
        			DefaultTuple dt = new DefaultTuple(schema, allSchema);
        			exampleTuple = dt.newDefaultTuple();
        		}
        			
        	}
        	// create example tuple to steal values from when we encounter
            // "don't care" fields (i.e. null fields)
            //System.out.println(exampleTuple.toString());
        	
        	if(pl.parents.size() != 0) {
        		LoadArgs la = new LoadArgs(exampleTuple, q, schema, 
        				newInputData, inputData);
        		childrenPathlistMap.put(pl, la);
        		la.setAllSchema(allSchema);
        		continue;
        	}
        	
        	// add code to deal with children constraints
        	if(pl.children.size() != 0) {
				List<Relation> childrenPL = pl.children;
				
				for(Relation r : childrenPL) {
					Map<VarInfo, VarInfo> childParentMap = r.child_to_parent_map;
					Set<VarInfo> keySet = childParentMap.keySet();
					byte keyType = keySet.iterator().next().getType();
					EqualVarCntr evc = new EqualVarCntr(r.child_to_parent_map, keyType);
					PathBranch b = new PathBranch(evc);
//					pl.getMainConstraints().add(b);
					// we should add a equal constraint to the child to say parent's value is equal to child's value
					PathList child = r.child;
					child.getMainConstraints().add(b);
				}
        	}
        	
        	ArrayList<PathBranch> outputConstraint = pl.getMainConstraints();
//        	ArrayList<ExampleTuple> duplicateConstraint = pl.getDuplicateTuples();
        	q.getC().resettOut();
        	q.getC().resetNullPos();

//            Tuple inputT = TupleFactory.getInstance().newTuple(
//                    outputConstraint.size());
//            ExampleTuple inputTuple = new ExampleTuple(inputT);

        	if(MainConfig.debug) {
        		// Generate concrete value by sending constraints to a constraint solver  
                System.out.println(outputConstraint.toString());
        	}
            
//            if(outputConstraint.size() == 0)
//            	continue;
            ConstraintSolution solution = q.solve(outputConstraint);
 //           Map<Integer, Integer> index2val = null;
            Map<Integer, Object> index2val = null;
            if(solution != null) {
            	if((solution instanceof Z3SolutionImpl && ((Z3SolutionImpl)solution).getModel() != null)
            			|| solution instanceof CoralSolutionImpl)
            	index2val = extr.extractsGenVal(schema, solution);
            }
            	
            ExampleTuple inputTuple = q.getC().gettOut();
            List<Integer> nullPos = q.getC().getNullPos();
            // only deal with countNum == 0 now
            CountConstraint cc = null;
            if(solution != null) {
            	cc = solution.getCc();
            }
            	
            List<Integer> ccPos = null;
            if (cc != null)
            	ccPos = extr.extractsGenVal(schema, cc);
            ExampleTuple newExample = null;
            
//            if(outputConstraint.size()==0 && duplicateConstraint.size()>0) {
//            	for(Iterator<ExampleTuple> t = duplicateConstraint.iterator(); t.hasNext();) {
//            		ExampleTuple newadd = t.next();
//            		ParentEncapsulation penc = new ParentEncapsulation(newadd, schema);
//                	newInputData.add(newadd);
//                	parentTupleMap.put(pl, penc);
//                }
//            }
//            else {
            	try {
                	int nullnum = 0;
                	
                    for (int i = 0; i < inputTuple.size(); i++) {
                    	Object d = null;
                    	//if there are values that are already set in inputTuple,
                    	//and index2val has some value for that,
                    	//the following will reset it.
                    	if(index2val != null && index2val.containsKey(i)) {
                    		d = index2val.get(i);
                    		inputTuple.set(i, d);
                    	} else if (inputTuple.get(i) != null) {
                    		if (inputTuple.get(i) instanceof NullConcrete) {
                    			inputTuple.set(i, null);
                    		}
                    		else
                    			continue;
                    	} else if (inputTuple.get(i) == null && nullPos.contains(i)) {
                    		continue;
                    	} else if (cc != null && ccPos.contains(i) && cc.getCountNum() == 0L) { // count constraint is equal to isnull if count number is equal to 0
                    		continue;
                    	} 
                    	else if (i<exampleTuple.size()) {
                    		d = exampleTuple.get(i);
                            nullnum++;
                            inputTuple.set(i, d);
                    	}
                        
                        
                        
                    }
                    
                    int inputSize = inputTuple.size();
                    if (nullnum != inputSize)
                        inputTuple.synthetic = true;
                    
             
                    
                    
                    if(pl.children.size() != 0) {
                    	ParentEncapsulation penc;
//                    	if(pl.children.size() > 1) {
//                    		if(!inputTuple.synthetic && !realDataEnd) {
//                            	TupleMutation tm = new TupleMutation(schema, allSchema);
//                        		Tuple newInputTuple = tm.mutate(inputTuple);
//                        		newExample = new ExampleTuple(newInputTuple);
//                        		penc = new ParentEncapsulation(newExample, schema);
//                        		
//                            } else {
//                            	penc = new ParentEncapsulation(inputTuple, schema);
//                            }
//                    		if (!parentTupleMapDuo.containsKey(pl))
//                                parentTupleMapDuo.put(pl, new ArrayList<ParentEncapsulation>(1));
//                    		parentTupleMapDuo.get(pl).add(penc);
//                    	} else {
                    		
                        	if(!inputTuple.synthetic && !realDataEnd) {
                            	TupleMutation tm = new TupleMutation(schema, allSchema);
                        		Tuple newInputTuple = tm.mutate(inputTuple);
                        		newExample = new ExampleTuple(newInputTuple);
                        		penc = new ParentEncapsulation(newExample, schema);
                            } else {
                            	penc = new ParentEncapsulation(inputTuple, schema);
                            }
                        	parentTupleMap.put(pl, penc);
//                    	}

                    }
                    
                    if(solution != null) {
                    	ParentEncapSol pens = new ParentEncapSol(solution.getVariablesAry1());
                    	parentSolMap.put(pl, pens);
                    }
                    
                    
                } catch (ExecException e) {
                    throw new FrontendException(
                            "Error visiting Load during Augmentation phase of Example Generator! "
                                    + e.getMessage());

                }
            	
//            	if(solution != null) {
//            		
//            	}
            	try {
                    if (inputTuple.synthetic || !inInput(inputTuple, inputData, schema))
                    {
                        inputTuple.synthetic = true;

                        newInputData.add(inputTuple);
                        
                        if(solution != null && solution.isDuplicate())
                        	newInputData.add(inputTuple);
                		
//                        if (!newInput)
//                            newInput = true;
                    } else if (!inputTuple.synthetic && solution != null && solution.isDuplicate()) {
                    	//FIXME: this else if branch is wrote especially for cogroup
                    	newInputData.add(inputTuple);

                    } else if (!inputTuple.synthetic && !realDataEnd && newExample != null) {
                    	newInputData.add(newExample);
                    } else if (cc != null) { // equals special duplicate now
                    	long numCount = cc.getCountNum();
                    	if (numCount != 0L) {
                    		int inumCount = ConversionUtility.safeLongToInt(numCount);
                    		int countPos = ccPos.get(0); // only support one field used in count now
                    		for(int countIndex = 0; countIndex < inumCount; countIndex++) {
                    			TupleMutation tm = new TupleMutation(schema, allSchema);
                    			Tuple countTuple = tm.mutate(inputTuple, countPos);
                    			newInputData.add(countTuple);
                    		}
                    	}
                    }
                } catch (ExecException e) {
                    throw new FrontendException(
                      "Error visiting Load during Augmentation phase of Example Generator! "
                              + e.getMessage());
                }
//            }
            
            if(solution != null)
            	solution.deleteModel(); // clean up
            Z3Context.get().pop(1);
        }
	}
	
	

	
	public void compute(PathList pl, Tuple exampleTuple, QueryManager q, LogicalSchema schema, 
			DataBag newInputData, DataBag inputData, List<LogicalSchema> allSchema) throws FrontendException {
		boolean newInput = false;
		
		if(pl.children.size() != 0) {
			List<Relation> childrenPL = pl.children;
			
			for(Relation r : childrenPL) {
				Map<VarInfo, VarInfo> childParentMap = r.child_to_parent_map;
				Set<VarInfo> keySet = childParentMap.keySet();
				byte keyType = keySet.iterator().next().getType();
				EqualVarCntr evc = new EqualVarCntr(r.child_to_parent_map, keyType);
				PathBranch b = new PathBranch(evc);
				pl.getMainConstraints().add(b);
			}
    	}
		
    	ArrayList<PathBranch> outputConstraint = pl.getMainConstraints();
//    	ArrayList<ExampleTuple> duplicateConstraint = pl.getDuplicateTuples();
//    	q.getC().resettOut();

//        Tuple inputT = TupleFactory.getInstance().newTuple(
//                outputConstraint.size());
//        ExampleTuple inputTuple = new ExampleTuple(inputT);

    	if(MainConfig.debug) {
    		// Generate concrete value by sending constraints to a constraint solver  
            System.out.println(outputConstraint.toString());    
    	}
        	
    	
        ConstraintSolution solution = q.solve(outputConstraint);
//        Map<Integer, Integer> index2val = null;
        Map<Integer, Object> index2val = null;
        if(solution != null && solution.getVariablesAry1() != null)
        	index2val = extr.extractsGenVal(schema, solution);
        ExampleTuple inputTuple = q.getC().gettOut();
        List<Integer> nullPos = q.getC().getNullPos();
        // only deal with countNum == 0 now
        CountConstraint cc = null;
        if(solution != null)
        	cc = solution.getCc();
        List<Integer> ccPos = null;
        if(cc != null)
        	ccPos = extr.extractsGenVal(schema, cc);

//        if(outputConstraint.size()==0 && duplicateConstraint.size()>0) {
//        	for(Iterator<ExampleTuple> t = duplicateConstraint.iterator(); t.hasNext();) {
//        		ExampleTuple newadd = t.next();
//            	newInputData.add(newadd);
//            }
//        }
//        else {
        	try {
            	int nullnum = 0;
            	
                for (int i = 0; i < inputTuple.size(); i++) {
                	Object d = null;
                	if(index2val != null && index2val.containsKey(i)) {
                		d = index2val.get(i);
                		inputTuple.set(i, d);
                	} else if (inputTuple.get(i) != null) {
                		if (inputTuple.get(i) instanceof NullConcrete) {
                			inputTuple.set(i, null);
                		}
                		else
                			continue;
                	} else if (inputTuple.get(i) == null && nullPos.contains(i)) {
                		continue;
                	} else if (cc != null && ccPos.contains(i) && cc.getCountNum() == 0L) { // count constraint is equal to isnull if count number is equal to 0
                		continue;
                	} else if (i<exampleTuple.size()) {
                		d = exampleTuple.get(i);
                        nullnum++;
                        inputTuple.set(i, d);
                	}
                    
                    
                    
                }
                if (nullnum != inputTuple.size())
                    inputTuple.synthetic = true;
            } catch (ExecException e) {
                throw new FrontendException(
                        "Error visiting Load during Augmentation phase of Example Generator! "
                                + e.getMessage());

            }
            try {
                if (inputTuple.synthetic || !inInput(inputTuple, inputData, schema))
                {
                    inputTuple.synthetic = true;

                    newInputData.add(inputTuple);
                    
                    if(solution != null && solution.isDuplicate())
                    	newInputData.add(inputTuple);
                    
                    
                    if (!newInput)
                        newInput = true;
                } else if (cc != null) { // equals special duplicate now
                	long numCount = cc.getCountNum();
                	if (numCount != 0L) {
                		int inumCount = ConversionUtility.safeLongToInt(numCount);
                		int countPos = ccPos.get(0); // only support one field used in count now
                		for(int countIndex = 0; countIndex < inumCount; countIndex++) {
                			TupleMutation tm = new TupleMutation(schema, allSchema);
                			Tuple countTuple = tm.mutate(inputTuple, countPos);
                			newInputData.add(countTuple);
                		}
                	}
                }
            } catch (ExecException e) {
                throw new FrontendException(
                  "Error visiting Load during Augmentation phase of Example Generator! "
                          + e.getMessage());
            }
        //}
        
        if(solution != null)
        	solution.deleteModel(); // clean up
        Z3Context.get().pop(1);
	}
	
	private boolean inInput(Tuple newTuple, DataBag input, LogicalSchema schema) throws ExecException {
        boolean result;
        for (Iterator<Tuple> iter = input.iterator(); iter.hasNext();) {
            result = true;
            Tuple tmp = iter.next();
            for (int i = 0; i < schema.size(); ++i)
                if (!newTuple.get(i).equals(tmp.get(i)))
                {
                    result = false;
                    break;
                }
            if (result)
                return true;
        }
        return false;
    }

}
