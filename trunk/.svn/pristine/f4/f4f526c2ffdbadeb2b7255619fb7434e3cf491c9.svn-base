// $ANTLR 3.4 /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g 2012-02-22 16:40:34

package org.apache.pig.parser;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;


/**
 * Grammar file for Pig tree parser (visitor for printing Pig script from Ast).
 *
 * NOTE: THIS FILE IS BASED ON QueryParser.g, SO IF YOU CHANGE THAT FILE, YOU WILL 
 *       PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO THIS FILE AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class AstPrinter extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AND", "AS", "ASC", "BAG", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CHARARRAY", "COGROUP", "COLON", "COMMA", "CROSS", "DCOLON", "DEFINE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "EQUAL", "EXECCOMMAND", "FALSE", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER_L", "IF", "IMPORT", "INNER", "INPUT", "INT", "INTEGER", "INTO", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FIELD_DEF_WITHOUT_IDENTIFIER", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "IDENTIFIER", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "NULL", "PARAMS", "QUERY", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL", "EVAL", "MATCHES"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AND=5;
    public static final int AS=6;
    public static final int ASC=7;
    public static final int BAG=8;
    public static final int BOOLEAN=9;
    public static final int BY=10;
    public static final int BYTEARRAY=11;
    public static final int CACHE=12;
    public static final int CHARARRAY=13;
    public static final int COGROUP=14;
    public static final int COLON=15;
    public static final int COMMA=16;
    public static final int CROSS=17;
    public static final int DCOLON=18;
    public static final int DEFINE=19;
    public static final int DESC=20;
    public static final int DIGIT=21;
    public static final int DISTINCT=22;
    public static final int DIV=23;
    public static final int DOLLAR=24;
    public static final int DOLLARVAR=25;
    public static final int DOUBLE=26;
    public static final int DOUBLENUMBER=27;
    public static final int DOUBLE_PERIOD=28;
    public static final int EQUAL=29;
    public static final int EXECCOMMAND=30;
    public static final int FALSE=31;
    public static final int FILTER=32;
    public static final int FLATTEN=33;
    public static final int FLOAT=34;
    public static final int FLOATINGPOINT=35;
    public static final int FLOATNUMBER=36;
    public static final int FOREACH=37;
    public static final int FULL=38;
    public static final int GENERATE=39;
    public static final int GROUP=40;
    public static final int ID=41;
    public static final int IDENTIFIER_L=42;
    public static final int IF=43;
    public static final int IMPORT=44;
    public static final int INNER=45;
    public static final int INPUT=46;
    public static final int INT=47;
    public static final int INTEGER=48;
    public static final int INTO=49;
    public static final int IS=50;
    public static final int JOIN=51;
    public static final int LEFT=52;
    public static final int LEFT_BRACKET=53;
    public static final int LEFT_CURLY=54;
    public static final int LEFT_PAREN=55;
    public static final int LETTER=56;
    public static final int LIMIT=57;
    public static final int LOAD=58;
    public static final int LONG=59;
    public static final int LONGINTEGER=60;
    public static final int MAP=61;
    public static final int MAPREDUCE=62;
    public static final int MINUS=63;
    public static final int ML_COMMENT=64;
    public static final int MULTILINE_QUOTEDSTRING=65;
    public static final int NOT=66;
    public static final int NUM_OP_EQ=67;
    public static final int NUM_OP_GT=68;
    public static final int NUM_OP_GTE=69;
    public static final int NUM_OP_LT=70;
    public static final int NUM_OP_LTE=71;
    public static final int NUM_OP_NE=72;
    public static final int ONSCHEMA=73;
    public static final int OR=74;
    public static final int ORDER=75;
    public static final int OTHERWISE=76;
    public static final int OUTER=77;
    public static final int OUTPUT=78;
    public static final int PARALLEL=79;
    public static final int PARTITION=80;
    public static final int PERCENT=81;
    public static final int PERIOD=82;
    public static final int PLUS=83;
    public static final int POUND=84;
    public static final int QMARK=85;
    public static final int QUOTEDSTRING=86;
    public static final int RETURNS=87;
    public static final int RIGHT=88;
    public static final int RIGHT_BRACKET=89;
    public static final int RIGHT_CURLY=90;
    public static final int RIGHT_PAREN=91;
    public static final int SAMPLE=92;
    public static final int SEMI_COLON=93;
    public static final int SHIP=94;
    public static final int SL_COMMENT=95;
    public static final int SPECIALCHAR=96;
    public static final int SPLIT=97;
    public static final int STAR=98;
    public static final int STDERROR=99;
    public static final int STDIN=100;
    public static final int STDOUT=101;
    public static final int STORE=102;
    public static final int STREAM=103;
    public static final int STR_OP_EQ=104;
    public static final int STR_OP_GT=105;
    public static final int STR_OP_GTE=106;
    public static final int STR_OP_LT=107;
    public static final int STR_OP_LTE=108;
    public static final int STR_OP_MATCHES=109;
    public static final int STR_OP_NE=110;
    public static final int THROUGH=111;
    public static final int TRUE=112;
    public static final int TUPLE=113;
    public static final int UNION=114;
    public static final int USING=115;
    public static final int VOID=116;
    public static final int WS=117;
    public static final int ANY=118;
    public static final int BAG_TYPE=119;
    public static final int BAG_TYPE_CAST=120;
    public static final int BAG_VAL=121;
    public static final int BIN_EXPR=122;
    public static final int BOOL=123;
    public static final int CAST_EXPR=124;
    public static final int COL_RANGE=125;
    public static final int EXPR_IN_PAREN=126;
    public static final int FIELD_DEF=127;
    public static final int FIELD_DEF_WITHOUT_IDENTIFIER=128;
    public static final int FOREACH_PLAN_COMPLEX=129;
    public static final int FOREACH_PLAN_SIMPLE=130;
    public static final int FUNC=131;
    public static final int FUNC_EVAL=132;
    public static final int FUNC_REF=133;
    public static final int IDENTIFIER=134;
    public static final int JOIN_ITEM=135;
    public static final int KEY_VAL_PAIR=136;
    public static final int MACRO_BODY=137;
    public static final int MACRO_DEF=138;
    public static final int MACRO_INLINE=139;
    public static final int MAP_TYPE=140;
    public static final int MAP_VAL=141;
    public static final int NEG=142;
    public static final int NESTED_CMD=143;
    public static final int NESTED_CMD_ASSI=144;
    public static final int NESTED_PROJ=145;
    public static final int NULL=146;
    public static final int PARAMS=147;
    public static final int QUERY=148;
    public static final int RETURN_VAL=149;
    public static final int SPLIT_BRANCH=150;
    public static final int STATEMENT=151;
    public static final int TOBAG=152;
    public static final int TOMAP=153;
    public static final int TOTUPLE=154;
    public static final int TUPLE_TYPE=155;
    public static final int TUPLE_TYPE_CAST=156;
    public static final int TUPLE_VAL=157;
    public static final int EVAL=158;
    public static final int MATCHES=159;

    // delegates
    public TreeParser[] getDelegates() {
        return new TreeParser[] {};
    }

    // delegators


    public AstPrinter(TreeNodeStream input) {
        this(input, new RecognizerSharedState());
    }
    public AstPrinter(TreeNodeStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return AstPrinter.tokenNames; }
    public String getGrammarFileName() { return "/nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g"; }



    public String getResult() { return sb.toString(); }

    private StringBuilder sb = new StringBuilder();



    public static class query_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:53:1: query : ^( QUERY ( statement )* ) ;
    public final AstPrinter.query_return query() throws RecognitionException {
        AstPrinter.query_return retval = new AstPrinter.query_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUERY1=null;
        AstPrinter.statement_return statement2 =null;


        CommonTree QUERY1_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:53:7: ( ^( QUERY ( statement )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:53:9: ^( QUERY ( statement )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            QUERY1=(CommonTree)match(input,QUERY,FOLLOW_QUERY_in_query81); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUERY1_tree = (CommonTree)adaptor.dupNode(QUERY1);


            root_1 = (CommonTree)adaptor.becomeRoot(QUERY1_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:53:18: ( statement )*
                loop1:
                do {
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==SPLIT||LA1_0==STATEMENT) ) {
                        alt1=1;
                    }


                    switch (alt1) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:53:18: statement
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_statement_in_query83);
                	    statement2=statement();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, statement2.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop1;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:56:1: statement : ( general_statement | split_statement );
    public final AstPrinter.statement_return statement() throws RecognitionException {
        AstPrinter.statement_return retval = new AstPrinter.statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.general_statement_return general_statement3 =null;

        AstPrinter.split_statement_return split_statement4 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:56:11: ( general_statement | split_statement )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==STATEMENT) ) {
                alt2=1;
            }
            else if ( (LA2_0==SPLIT) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:56:13: general_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_general_statement_in_statement95);
                    general_statement3=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, general_statement3.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:57:13: split_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_statement_in_statement109);
                    split_statement4=split_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, split_statement4.getTree());


                    if ( state.backtracking==0 ) { sb.append(";\n"); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class split_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:60:1: split_statement : split_clause ;
    public final AstPrinter.split_statement_return split_statement() throws RecognitionException {
        AstPrinter.split_statement_return retval = new AstPrinter.split_statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.split_clause_return split_clause5 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:60:17: ( split_clause )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:60:19: split_clause
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_split_clause_in_split_statement120);
            split_clause5=split_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, split_clause5.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_statement"


    public static class general_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:64:1: general_statement : ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) ;
    public final AstPrinter.general_statement_return general_statement() throws RecognitionException {
        AstPrinter.general_statement_return retval = new AstPrinter.general_statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STATEMENT6=null;
        AstPrinter.alias_return alias7 =null;

        AstPrinter.op_clause_return op_clause8 =null;

        AstPrinter.parallel_clause_return parallel_clause9 =null;


        CommonTree STATEMENT6_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:65:5: ( ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:65:7: ^( STATEMENT ( alias )? op_clause ( parallel_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STATEMENT6=(CommonTree)match(input,STATEMENT,FOLLOW_STATEMENT_in_general_statement137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STATEMENT6_tree = (CommonTree)adaptor.dupNode(STATEMENT6);


            root_1 = (CommonTree)adaptor.becomeRoot(STATEMENT6_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:65:20: ( alias )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IDENTIFIER) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:65:22: alias
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_general_statement141);
                    alias7=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, alias7.getTree());


                    if ( state.backtracking==0 ) { sb.append(" = "); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_op_clause_in_general_statement157);
            op_clause8=op_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, op_clause8.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:66:19: ( parallel_clause )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==PARALLEL) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:66:19: parallel_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_parallel_clause_in_general_statement159);
                    parallel_clause9=parallel_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, parallel_clause9.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) { sb.append(";\n"); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class parallel_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:69:1: parallel_clause : ^( PARALLEL INTEGER ) ;
    public final AstPrinter.parallel_clause_return parallel_clause() throws RecognitionException {
        AstPrinter.parallel_clause_return retval = new AstPrinter.parallel_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PARALLEL10=null;
        CommonTree INTEGER11=null;

        CommonTree PARALLEL10_tree=null;
        CommonTree INTEGER11_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:70:5: ( ^( PARALLEL INTEGER ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:70:7: ^( PARALLEL INTEGER )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PARALLEL10=(CommonTree)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL10_tree = (CommonTree)adaptor.dupNode(PARALLEL10);


            root_1 = (CommonTree)adaptor.becomeRoot(PARALLEL10_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            INTEGER11=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER11_tree = (CommonTree)adaptor.dupNode(INTEGER11);


            adaptor.addChild(root_1, INTEGER11_tree);
            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((PARALLEL10!=null?PARALLEL10.getText():null)).append(" ").append((INTEGER11!=null?INTEGER11.getText():null)); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class alias_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:73:1: alias : IDENTIFIER ;
    public final AstPrinter.alias_return alias() throws RecognitionException {
        AstPrinter.alias_return retval = new AstPrinter.alias_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree IDENTIFIER12=null;

        CommonTree IDENTIFIER12_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:74:5: ( IDENTIFIER )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:74:7: IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            IDENTIFIER12=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER12_tree = (CommonTree)adaptor.dupNode(IDENTIFIER12);


            adaptor.addChild(root_0, IDENTIFIER12_tree);
            }


            if ( state.backtracking==0 ) { sb.append((IDENTIFIER12!=null?IDENTIFIER12.getText():null)); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias"


    public static class op_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:77:1: op_clause : ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause | split_clause | foreach_clause );
    public final AstPrinter.op_clause_return op_clause() throws RecognitionException {
        AstPrinter.op_clause_return retval = new AstPrinter.op_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.define_clause_return define_clause13 =null;

        AstPrinter.load_clause_return load_clause14 =null;

        AstPrinter.group_clause_return group_clause15 =null;

        AstPrinter.store_clause_return store_clause16 =null;

        AstPrinter.filter_clause_return filter_clause17 =null;

        AstPrinter.distinct_clause_return distinct_clause18 =null;

        AstPrinter.limit_clause_return limit_clause19 =null;

        AstPrinter.sample_clause_return sample_clause20 =null;

        AstPrinter.order_clause_return order_clause21 =null;

        AstPrinter.cross_clause_return cross_clause22 =null;

        AstPrinter.join_clause_return join_clause23 =null;

        AstPrinter.union_clause_return union_clause24 =null;

        AstPrinter.stream_clause_return stream_clause25 =null;

        AstPrinter.mr_clause_return mr_clause26 =null;

        AstPrinter.split_clause_return split_clause27 =null;

        AstPrinter.foreach_clause_return foreach_clause28 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:77:11: ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause | split_clause | foreach_clause )
            int alt5=16;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt5=1;
                }
                break;
            case LOAD:
                {
                alt5=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt5=3;
                }
                break;
            case STORE:
                {
                alt5=4;
                }
                break;
            case FILTER:
                {
                alt5=5;
                }
                break;
            case DISTINCT:
                {
                alt5=6;
                }
                break;
            case LIMIT:
                {
                alt5=7;
                }
                break;
            case SAMPLE:
                {
                alt5=8;
                }
                break;
            case ORDER:
                {
                alt5=9;
                }
                break;
            case CROSS:
                {
                alt5=10;
                }
                break;
            case JOIN:
                {
                alt5=11;
                }
                break;
            case UNION:
                {
                alt5=12;
                }
                break;
            case STREAM:
                {
                alt5=13;
                }
                break;
            case MAPREDUCE:
                {
                alt5=14;
                }
                break;
            case SPLIT:
                {
                alt5=15;
                }
                break;
            case FOREACH:
                {
                alt5=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:77:13: define_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_define_clause_in_op_clause211);
                    define_clause13=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, define_clause13.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:78:13: load_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_load_clause_in_op_clause226);
                    load_clause14=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, load_clause14.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:79:13: group_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_group_clause_in_op_clause240);
                    group_clause15=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, group_clause15.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:80:13: store_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_store_clause_in_op_clause254);
                    store_clause16=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, store_clause16.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:81:13: filter_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_filter_clause_in_op_clause268);
                    filter_clause17=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, filter_clause17.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:82:13: distinct_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_distinct_clause_in_op_clause282);
                    distinct_clause18=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, distinct_clause18.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:83:13: limit_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_limit_clause_in_op_clause296);
                    limit_clause19=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, limit_clause19.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:84:13: sample_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sample_clause_in_op_clause310);
                    sample_clause20=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sample_clause20.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:85:13: order_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_order_clause_in_op_clause324);
                    order_clause21=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, order_clause21.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:86:13: cross_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cross_clause_in_op_clause338);
                    cross_clause22=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cross_clause22.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:87:13: join_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_clause_in_op_clause352);
                    join_clause23=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_clause23.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:88:13: union_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_union_clause_in_op_clause366);
                    union_clause24=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, union_clause24.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:89:13: stream_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_stream_clause_in_op_clause380);
                    stream_clause25=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, stream_clause25.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:90:13: mr_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_mr_clause_in_op_clause394);
                    mr_clause26=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, mr_clause26.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:91:13: split_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_clause_in_op_clause408);
                    split_clause27=split_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, split_clause27.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:92:13: foreach_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_foreach_clause_in_op_clause422);
                    foreach_clause28=foreach_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, foreach_clause28.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class define_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:95:1: define_clause : ^( DEFINE IDENTIFIER ( cmd | func_clause ) ) ;
    public final AstPrinter.define_clause_return define_clause() throws RecognitionException {
        AstPrinter.define_clause_return retval = new AstPrinter.define_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DEFINE29=null;
        CommonTree IDENTIFIER30=null;
        AstPrinter.cmd_return cmd31 =null;

        AstPrinter.func_clause_return func_clause32 =null;


        CommonTree DEFINE29_tree=null;
        CommonTree IDENTIFIER30_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:96:5: ( ^( DEFINE IDENTIFIER ( cmd | func_clause ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:96:7: ^( DEFINE IDENTIFIER ( cmd | func_clause ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DEFINE29=(CommonTree)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINE29_tree = (CommonTree)adaptor.dupNode(DEFINE29);


            root_1 = (CommonTree)adaptor.becomeRoot(DEFINE29_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            IDENTIFIER30=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_define_clause440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER30_tree = (CommonTree)adaptor.dupNode(IDENTIFIER30);


            adaptor.addChild(root_1, IDENTIFIER30_tree);
            }


            if ( state.backtracking==0 ) { sb.append((DEFINE29!=null?DEFINE29.getText():null)).append(" ").append((IDENTIFIER30!=null?IDENTIFIER30.getText():null)).append(" "); }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:97:9: ( cmd | func_clause )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==EXECCOMMAND) ) {
                alt6=1;
            }
            else if ( (LA6_0==FUNC||LA6_0==FUNC_REF) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:97:11: cmd
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cmd_in_define_clause455);
                    cmd31=cmd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cmd31.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:97:17: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_define_clause459);
                    func_clause32=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause32.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class cmd_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:100:1: cmd : ^( EXECCOMMAND ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ) ;
    public final AstPrinter.cmd_return cmd() throws RecognitionException {
        AstPrinter.cmd_return retval = new AstPrinter.cmd_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree EXECCOMMAND33=null;
        AstPrinter.ship_clause_return ship_clause34 =null;

        AstPrinter.cache_clause_return cache_clause35 =null;

        AstPrinter.input_clause_return input_clause36 =null;

        AstPrinter.output_clause_return output_clause37 =null;

        AstPrinter.error_clause_return error_clause38 =null;


        CommonTree EXECCOMMAND33_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:101:5: ( ^( EXECCOMMAND ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:101:7: ^( EXECCOMMAND ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            EXECCOMMAND33=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND33_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND33);


            root_1 = (CommonTree)adaptor.becomeRoot(EXECCOMMAND33_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((EXECCOMMAND33!=null?EXECCOMMAND33.getText():null)); }

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:102:9: ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
                loop7:
                do {
                    int alt7=6;
                    switch ( input.LA(1) ) {
                    case SHIP:
                        {
                        alt7=1;
                        }
                        break;
                    case CACHE:
                        {
                        alt7=2;
                        }
                        break;
                    case INPUT:
                        {
                        alt7=3;
                        }
                        break;
                    case OUTPUT:
                        {
                        alt7=4;
                        }
                        break;
                    case STDERROR:
                        {
                        alt7=5;
                        }
                        break;

                    }

                    switch (alt7) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:102:11: ship_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_ship_clause_in_cmd493);
                	    ship_clause34=ship_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, ship_clause34.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 2 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:102:25: cache_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_cache_clause_in_cmd497);
                	    cache_clause35=cache_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, cache_clause35.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 3 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:102:40: input_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_input_clause_in_cmd501);
                	    input_clause36=input_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, input_clause36.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 4 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:102:55: output_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_output_clause_in_cmd505);
                	    output_clause37=output_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, output_clause37.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 5 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:102:71: error_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_error_clause_in_cmd509);
                	    error_clause38=error_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, error_clause38.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop7;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class ship_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:105:1: ship_clause : ^( SHIP ( path_list )? ) ;
    public final AstPrinter.ship_clause_return ship_clause() throws RecognitionException {
        AstPrinter.ship_clause_return retval = new AstPrinter.ship_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SHIP39=null;
        AstPrinter.path_list_return path_list40 =null;


        CommonTree SHIP39_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:106:5: ( ^( SHIP ( path_list )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:106:7: ^( SHIP ( path_list )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SHIP39=(CommonTree)match(input,SHIP,FOLLOW_SHIP_in_ship_clause530); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP39_tree = (CommonTree)adaptor.dupNode(SHIP39);


            root_1 = (CommonTree)adaptor.becomeRoot(SHIP39_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((SHIP39!=null?SHIP39.getText():null)).append(" ("); }

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:106:67: ( path_list )?
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==QUOTEDSTRING) ) {
                    alt8=1;
                }
                switch (alt8) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:106:67: path_list
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_path_list_in_ship_clause534);
                        path_list40=path_list();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, path_list40.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                if ( state.backtracking==0 ) { sb.append(")"); }

                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:109:1: path_list : a= QUOTEDSTRING (b= QUOTEDSTRING )* ;
    public final AstPrinter.path_list_return path_list() throws RecognitionException {
        AstPrinter.path_list_return retval = new AstPrinter.path_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree a=null;
        CommonTree b=null;

        CommonTree a_tree=null;
        CommonTree b_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:110:5: (a= QUOTEDSTRING (b= QUOTEDSTRING )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:110:7: a= QUOTEDSTRING (b= QUOTEDSTRING )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            a=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            a_tree = (CommonTree)adaptor.dupNode(a);


            adaptor.addChild(root_0, a_tree);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((a!=null?a.getText():null)); }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:111:9: (b= QUOTEDSTRING )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==QUOTEDSTRING) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:111:10: b= QUOTEDSTRING
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    b=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list570); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    b_tree = (CommonTree)adaptor.dupNode(b);


            	    adaptor.addChild(root_0, b_tree);
            	    }


            	    if ( state.backtracking==0 ) { sb.append(", ").append((b!=null?b.getText():null)); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:114:1: cache_clause : ^( CACHE path_list ) ;
    public final AstPrinter.cache_clause_return cache_clause() throws RecognitionException {
        AstPrinter.cache_clause_return retval = new AstPrinter.cache_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CACHE41=null;
        AstPrinter.path_list_return path_list42 =null;


        CommonTree CACHE41_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:115:5: ( ^( CACHE path_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:115:7: ^( CACHE path_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CACHE41=(CommonTree)match(input,CACHE,FOLLOW_CACHE_in_cache_clause591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE41_tree = (CommonTree)adaptor.dupNode(CACHE41);


            root_1 = (CommonTree)adaptor.becomeRoot(CACHE41_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((CACHE41!=null?CACHE41.getText():null)).append(" ("); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_path_list_in_cache_clause595);
            path_list42=path_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, path_list42.getTree());


            if ( state.backtracking==0 ) { sb.append(")"); }

            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:118:1: input_clause : ^( INPUT stream_cmd ( stream_cmd )* ) ;
    public final AstPrinter.input_clause_return input_clause() throws RecognitionException {
        AstPrinter.input_clause_return retval = new AstPrinter.input_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree INPUT43=null;
        AstPrinter.stream_cmd_return stream_cmd44 =null;

        AstPrinter.stream_cmd_return stream_cmd45 =null;


        CommonTree INPUT43_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:119:5: ( ^( INPUT stream_cmd ( stream_cmd )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:119:7: ^( INPUT stream_cmd ( stream_cmd )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            INPUT43=(CommonTree)match(input,INPUT,FOLLOW_INPUT_in_input_clause615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT43_tree = (CommonTree)adaptor.dupNode(INPUT43);


            root_1 = (CommonTree)adaptor.becomeRoot(INPUT43_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((INPUT43!=null?INPUT43.getText():null)).append("("); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_stream_cmd_in_input_clause628);
            stream_cmd44=stream_cmd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, stream_cmd44.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:120:20: ( stream_cmd )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==QUOTEDSTRING||(LA10_0 >= STDIN && LA10_0 <= STDOUT)) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:120:22: stream_cmd
            	    {
            	    if ( state.backtracking==0 ) { sb.append(", "); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_stream_cmd_in_input_clause634);
            	    stream_cmd45=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, stream_cmd45.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);


            if ( state.backtracking==0 ) { sb.append(")"); }

            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class stream_cmd_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:123:1: stream_cmd : ( ^( STDIN ( func_clause )? ) | ^( STDOUT ( func_clause )? ) | ^( QUOTEDSTRING ( func_clause )? ) );
    public final AstPrinter.stream_cmd_return stream_cmd() throws RecognitionException {
        AstPrinter.stream_cmd_return retval = new AstPrinter.stream_cmd_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STDIN46=null;
        CommonTree STDOUT48=null;
        CommonTree QUOTEDSTRING50=null;
        AstPrinter.func_clause_return func_clause47 =null;

        AstPrinter.func_clause_return func_clause49 =null;

        AstPrinter.func_clause_return func_clause51 =null;


        CommonTree STDIN46_tree=null;
        CommonTree STDOUT48_tree=null;
        CommonTree QUOTEDSTRING50_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:124:5: ( ^( STDIN ( func_clause )? ) | ^( STDOUT ( func_clause )? ) | ^( QUOTEDSTRING ( func_clause )? ) )
            int alt14=3;
            switch ( input.LA(1) ) {
            case STDIN:
                {
                alt14=1;
                }
                break;
            case STDOUT:
                {
                alt14=2;
                }
                break;
            case QUOTEDSTRING:
                {
                alt14=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:124:7: ^( STDIN ( func_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STDIN46=(CommonTree)match(input,STDIN,FOLLOW_STDIN_in_stream_cmd656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN46_tree = (CommonTree)adaptor.dupNode(STDIN46);


                    root_1 = (CommonTree)adaptor.becomeRoot(STDIN46_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append((STDIN46!=null?STDIN46.getText():null)).append(" USING "); }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:124:62: ( func_clause )?
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==FUNC||LA11_0==FUNC_REF) ) {
                            alt11=1;
                        }
                        switch (alt11) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:124:62: func_clause
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd660);
                                func_clause47=func_clause();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause47.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:125:7: ^( STDOUT ( func_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STDOUT48=(CommonTree)match(input,STDOUT,FOLLOW_STDOUT_in_stream_cmd673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT48_tree = (CommonTree)adaptor.dupNode(STDOUT48);


                    root_1 = (CommonTree)adaptor.becomeRoot(STDOUT48_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append((STDOUT48!=null?STDOUT48.getText():null)).append(" USING "); }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:125:64: ( func_clause )?
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==FUNC||LA12_0==FUNC_REF) ) {
                            alt12=1;
                        }
                        switch (alt12) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:125:64: func_clause
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd677);
                                func_clause49=func_clause();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause49.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:126:7: ^( QUOTEDSTRING ( func_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    QUOTEDSTRING50=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_stream_cmd690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING50_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING50);


                    root_1 = (CommonTree)adaptor.becomeRoot(QUOTEDSTRING50_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append((QUOTEDSTRING50!=null?QUOTEDSTRING50.getText():null)).append(" USING "); }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:126:76: ( func_clause )?
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==FUNC||LA13_0==FUNC_REF) ) {
                            alt13=1;
                        }
                        switch (alt13) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:126:76: func_clause
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd694);
                                func_clause51=func_clause();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause51.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class output_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:129:1: output_clause : ^( OUTPUT stream_cmd ( stream_cmd )* ) ;
    public final AstPrinter.output_clause_return output_clause() throws RecognitionException {
        AstPrinter.output_clause_return retval = new AstPrinter.output_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OUTPUT52=null;
        AstPrinter.stream_cmd_return stream_cmd53 =null;

        AstPrinter.stream_cmd_return stream_cmd54 =null;


        CommonTree OUTPUT52_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:130:5: ( ^( OUTPUT stream_cmd ( stream_cmd )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:130:7: ^( OUTPUT stream_cmd ( stream_cmd )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            OUTPUT52=(CommonTree)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT52_tree = (CommonTree)adaptor.dupNode(OUTPUT52);


            root_1 = (CommonTree)adaptor.becomeRoot(OUTPUT52_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((OUTPUT52!=null?OUTPUT52.getText():null)).append(" ("); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_stream_cmd_in_output_clause727);
            stream_cmd53=stream_cmd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, stream_cmd53.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:131:20: ( stream_cmd )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==QUOTEDSTRING||(LA15_0 >= STDIN && LA15_0 <= STDOUT)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:131:22: stream_cmd
            	    {
            	    if ( state.backtracking==0 ) { sb.append(","); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_stream_cmd_in_output_clause733);
            	    stream_cmd54=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, stream_cmd54.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            if ( state.backtracking==0 ) { sb.append(")"); }

            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:134:1: error_clause : ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? ) ;
    public final AstPrinter.error_clause_return error_clause() throws RecognitionException {
        AstPrinter.error_clause_return retval = new AstPrinter.error_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STDERROR55=null;
        CommonTree QUOTEDSTRING56=null;
        CommonTree INTEGER57=null;

        CommonTree STDERROR55_tree=null;
        CommonTree QUOTEDSTRING56_tree=null;
        CommonTree INTEGER57_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:135:5: ( ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:135:7: ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STDERROR55=(CommonTree)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR55_tree = (CommonTree)adaptor.dupNode(STDERROR55);


            root_1 = (CommonTree)adaptor.becomeRoot(STDERROR55_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((STDERROR55!=null?STDERROR55.getText():null)).append(" ("); }

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:136:9: ( QUOTEDSTRING ( INTEGER )? )?
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==QUOTEDSTRING) ) {
                    alt17=1;
                }
                switch (alt17) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:136:11: QUOTEDSTRING ( INTEGER )?
                        {
                        _last = (CommonTree)input.LT(1);
                        QUOTEDSTRING56=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause769); if (state.failed) return retval;
                        if ( state.backtracking==0 ) {
                        QUOTEDSTRING56_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING56);


                        adaptor.addChild(root_1, QUOTEDSTRING56_tree);
                        }


                        if ( state.backtracking==0 ) { sb.append((QUOTEDSTRING56!=null?QUOTEDSTRING56.getText():null)); }

                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:136:59: ( INTEGER )?
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==INTEGER) ) {
                            alt16=1;
                        }
                        switch (alt16) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:136:60: INTEGER
                                {
                                _last = (CommonTree)input.LT(1);
                                INTEGER57=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause774); if (state.failed) return retval;
                                if ( state.backtracking==0 ) {
                                INTEGER57_tree = (CommonTree)adaptor.dupNode(INTEGER57);


                                adaptor.addChild(root_1, INTEGER57_tree);
                                }


                                if ( state.backtracking==0 ) { sb.append(" LIMIT ").append(INTEGER57); }

                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                if ( state.backtracking==0 ) { sb.append(")"); }

                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:139:1: load_clause : ^( LOAD filename ( func_clause )? ( as_clause )? ) ;
    public final AstPrinter.load_clause_return load_clause() throws RecognitionException {
        AstPrinter.load_clause_return retval = new AstPrinter.load_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LOAD58=null;
        AstPrinter.filename_return filename59 =null;

        AstPrinter.func_clause_return func_clause60 =null;

        AstPrinter.as_clause_return as_clause61 =null;


        CommonTree LOAD58_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:140:5: ( ^( LOAD filename ( func_clause )? ( as_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:140:7: ^( LOAD filename ( func_clause )? ( as_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LOAD58=(CommonTree)match(input,LOAD,FOLLOW_LOAD_in_load_clause802); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD58_tree = (CommonTree)adaptor.dupNode(LOAD58);


            root_1 = (CommonTree)adaptor.becomeRoot(LOAD58_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((LOAD58!=null?LOAD58.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_filename_in_load_clause806);
            filename59=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, filename59.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:141:9: ( func_clause )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FUNC||LA18_0==FUNC_REF) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:141:11: func_clause
                    {
                    if ( state.backtracking==0 ) { sb.append(" USING "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_load_clause821);
                    func_clause60=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause60.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:141:51: ( as_clause )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==AS) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:141:51: as_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_as_clause_in_load_clause825);
                    as_clause61=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, as_clause61.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class filename_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filename"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:144:1: filename : QUOTEDSTRING ;
    public final AstPrinter.filename_return filename() throws RecognitionException {
        AstPrinter.filename_return retval = new AstPrinter.filename_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING62=null;

        CommonTree QUOTEDSTRING62_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:145:5: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:145:7: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING62=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_filename842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING62_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING62);


            adaptor.addChild(root_0, QUOTEDSTRING62_tree);
            }


            if ( state.backtracking==0 ) { sb.append((QUOTEDSTRING62!=null?QUOTEDSTRING62.getText():null)); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filename"


    public static class as_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:148:1: as_clause : ^( AS field_def_list ) ;
    public final AstPrinter.as_clause_return as_clause() throws RecognitionException {
        AstPrinter.as_clause_return retval = new AstPrinter.as_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree AS63=null;
        AstPrinter.field_def_list_return field_def_list64 =null;


        CommonTree AS63_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:149:5: ( ^( AS field_def_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:149:7: ^( AS field_def_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            AS63=(CommonTree)match(input,AS,FOLLOW_AS_in_as_clause859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS63_tree = (CommonTree)adaptor.dupNode(AS63);


            root_1 = (CommonTree)adaptor.becomeRoot(AS63_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((AS63!=null?AS63.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_field_def_list_in_as_clause863);
            field_def_list64=field_def_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, field_def_list64.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class field_def_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:152:1: field_def : ( ^( FIELD_DEF IDENTIFIER ( type )? ) | ^( FIELD_DEF type ) );
    public final AstPrinter.field_def_return field_def() throws RecognitionException {
        AstPrinter.field_def_return retval = new AstPrinter.field_def_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FIELD_DEF65=null;
        CommonTree IDENTIFIER66=null;
        CommonTree FIELD_DEF68=null;
        AstPrinter.type_return type67 =null;

        AstPrinter.type_return type69 =null;


        CommonTree FIELD_DEF65_tree=null;
        CommonTree IDENTIFIER66_tree=null;
        CommonTree FIELD_DEF68_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:153:5: ( ^( FIELD_DEF IDENTIFIER ( type )? ) | ^( FIELD_DEF type ) )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==FIELD_DEF) ) {
                int LA21_1 = input.LA(2);

                if ( (LA21_1==DOWN) ) {
                    int LA21_2 = input.LA(3);

                    if ( (LA21_2==IDENTIFIER) ) {
                        alt21=1;
                    }
                    else if ( (LA21_2==BOOLEAN||LA21_2==BYTEARRAY||LA21_2==CHARARRAY||LA21_2==DOUBLE||LA21_2==FLOAT||LA21_2==INT||LA21_2==LONG||LA21_2==BAG_TYPE||LA21_2==MAP_TYPE||LA21_2==TUPLE_TYPE) ) {
                        alt21=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }
            switch (alt21) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:153:7: ^( FIELD_DEF IDENTIFIER ( type )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FIELD_DEF65=(CommonTree)match(input,FIELD_DEF,FOLLOW_FIELD_DEF_in_field_def880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIELD_DEF65_tree = (CommonTree)adaptor.dupNode(FIELD_DEF65);


                    root_1 = (CommonTree)adaptor.becomeRoot(FIELD_DEF65_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER66=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_field_def882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER66_tree = (CommonTree)adaptor.dupNode(IDENTIFIER66);


                    adaptor.addChild(root_1, IDENTIFIER66_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IDENTIFIER66!=null?IDENTIFIER66.getText():null)); }

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:153:65: ( type )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==BOOLEAN||LA20_0==BYTEARRAY||LA20_0==CHARARRAY||LA20_0==DOUBLE||LA20_0==FLOAT||LA20_0==INT||LA20_0==LONG||LA20_0==BAG_TYPE||LA20_0==MAP_TYPE||LA20_0==TUPLE_TYPE) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:153:67: type
                            {
                            if ( state.backtracking==0 ) {sb.append(":"); }

                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_type_in_field_def892);
                            type67=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, type67.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:154:7: ^( FIELD_DEF type )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FIELD_DEF68=(CommonTree)match(input,FIELD_DEF,FOLLOW_FIELD_DEF_in_field_def906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIELD_DEF68_tree = (CommonTree)adaptor.dupNode(FIELD_DEF68);


                    root_1 = (CommonTree)adaptor.becomeRoot(FIELD_DEF68_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_in_field_def908);
                    type69=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type69.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    public static class field_def_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:157:1: field_def_list : ( field_def ( field_def )+ | field_def );
    public final AstPrinter.field_def_list_return field_def_list() throws RecognitionException {
        AstPrinter.field_def_list_return retval = new AstPrinter.field_def_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.field_def_return field_def70 =null;

        AstPrinter.field_def_return field_def71 =null;

        AstPrinter.field_def_return field_def72 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:158:5: ( field_def ( field_def )+ | field_def )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==FIELD_DEF) ) {
                int LA23_1 = input.LA(2);

                if ( (synpred42_AstPrinter()) ) {
                    alt23=1;
                }
                else if ( (true) ) {
                    alt23=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 23, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:158:7: field_def ( field_def )+
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    if ( state.backtracking==0 ) { sb.append("("); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_field_def_in_field_def_list925);
                    field_def70=field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, field_def70.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:158:37: ( field_def )+
                    int cnt22=0;
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);

                        if ( (LA22_0==FIELD_DEF) ) {
                            alt22=1;
                        }


                        switch (alt22) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:158:39: field_def
                    	    {
                    	    if ( state.backtracking==0 ) { sb.append(", "); }

                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_field_def_in_field_def_list931);
                    	    field_def71=field_def();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, field_def71.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt22 >= 1 ) break loop22;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(22, input);
                                throw eee;
                        }
                        cnt22++;
                    } while (true);


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:159:7: field_def
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_field_def_in_field_def_list944);
                    field_def72=field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, field_def72.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:162:1: type : ( simple_type | tuple_type | bag_type | map_type );
    public final AstPrinter.type_return type() throws RecognitionException {
        AstPrinter.type_return retval = new AstPrinter.type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.simple_type_return simple_type73 =null;

        AstPrinter.tuple_type_return tuple_type74 =null;

        AstPrinter.bag_type_return bag_type75 =null;

        AstPrinter.map_type_return map_type76 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:162:6: ( simple_type | tuple_type | bag_type | map_type )
            int alt24=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt24=1;
                }
                break;
            case TUPLE_TYPE:
                {
                alt24=2;
                }
                break;
            case BAG_TYPE:
                {
                alt24=3;
                }
                break;
            case MAP_TYPE:
                {
                alt24=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }

            switch (alt24) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:162:8: simple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_type_in_type953);
                    simple_type73=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_type73.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:162:22: tuple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_type_in_type957);
                    tuple_type74=tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple_type74.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:162:35: bag_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_type_in_type961);
                    bag_type75=bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag_type75.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:162:46: map_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_type_in_type965);
                    map_type76=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map_type76.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class simple_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:165:1: simple_type : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY );
    public final AstPrinter.simple_type_return simple_type() throws RecognitionException {
        AstPrinter.simple_type_return retval = new AstPrinter.simple_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BOOLEAN77=null;
        CommonTree INT78=null;
        CommonTree LONG79=null;
        CommonTree FLOAT80=null;
        CommonTree DOUBLE81=null;
        CommonTree CHARARRAY82=null;
        CommonTree BYTEARRAY83=null;

        CommonTree BOOLEAN77_tree=null;
        CommonTree INT78_tree=null;
        CommonTree LONG79_tree=null;
        CommonTree FLOAT80_tree=null;
        CommonTree DOUBLE81_tree=null;
        CommonTree CHARARRAY82_tree=null;
        CommonTree BYTEARRAY83_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:166:5: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY )
            int alt25=7;
            switch ( input.LA(1) ) {
            case BOOLEAN:
                {
                alt25=1;
                }
                break;
            case INT:
                {
                alt25=2;
                }
                break;
            case LONG:
                {
                alt25=3;
                }
                break;
            case FLOAT:
                {
                alt25=4;
                }
                break;
            case DOUBLE:
                {
                alt25=5;
                }
                break;
            case CHARARRAY:
                {
                alt25=6;
                }
                break;
            case BYTEARRAY:
                {
                alt25=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }

            switch (alt25) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:166:7: BOOLEAN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BOOLEAN77=(CommonTree)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_simple_type979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLEAN77_tree = (CommonTree)adaptor.dupNode(BOOLEAN77);


                    adaptor.addChild(root_0, BOOLEAN77_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((BOOLEAN77!=null?BOOLEAN77.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:167:7: INT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INT78=(CommonTree)match(input,INT,FOLLOW_INT_in_simple_type989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT78_tree = (CommonTree)adaptor.dupNode(INT78);


                    adaptor.addChild(root_0, INT78_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((INT78!=null?INT78.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:168:7: LONG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LONG79=(CommonTree)match(input,LONG,FOLLOW_LONG_in_simple_type999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG79_tree = (CommonTree)adaptor.dupNode(LONG79);


                    adaptor.addChild(root_0, LONG79_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((LONG79!=null?LONG79.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:169:7: FLOAT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLOAT80=(CommonTree)match(input,FLOAT,FOLLOW_FLOAT_in_simple_type1009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT80_tree = (CommonTree)adaptor.dupNode(FLOAT80);


                    adaptor.addChild(root_0, FLOAT80_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((FLOAT80!=null?FLOAT80.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:170:7: DOUBLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DOUBLE81=(CommonTree)match(input,DOUBLE,FOLLOW_DOUBLE_in_simple_type1019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE81_tree = (CommonTree)adaptor.dupNode(DOUBLE81);


                    adaptor.addChild(root_0, DOUBLE81_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((DOUBLE81!=null?DOUBLE81.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:171:7: CHARARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CHARARRAY82=(CommonTree)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_simple_type1029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY82_tree = (CommonTree)adaptor.dupNode(CHARARRAY82);


                    adaptor.addChild(root_0, CHARARRAY82_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((CHARARRAY82!=null?CHARARRAY82.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:172:7: BYTEARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BYTEARRAY83=(CommonTree)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_simple_type1039); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY83_tree = (CommonTree)adaptor.dupNode(BYTEARRAY83);


                    adaptor.addChild(root_0, BYTEARRAY83_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((BYTEARRAY83!=null?BYTEARRAY83.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class tuple_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:175:1: tuple_type : ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final AstPrinter.tuple_type_return tuple_type() throws RecognitionException {
        AstPrinter.tuple_type_return retval = new AstPrinter.tuple_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_TYPE84=null;
        AstPrinter.field_def_list_return field_def_list85 =null;


        CommonTree TUPLE_TYPE84_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:176:5: ( ^( TUPLE_TYPE ( field_def_list )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:176:7: ^( TUPLE_TYPE ( field_def_list )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_TYPE84=(CommonTree)match(input,TUPLE_TYPE,FOLLOW_TUPLE_TYPE_in_tuple_type1057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_TYPE84_tree = (CommonTree)adaptor.dupNode(TUPLE_TYPE84);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_TYPE84_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:176:21: ( field_def_list )?
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==FIELD_DEF) ) {
                    alt26=1;
                }
                switch (alt26) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:176:21: field_def_list
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_field_def_list_in_tuple_type1059);
                        field_def_list85=field_def_list();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, field_def_list85.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class bag_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:179:1: bag_type : ^( BAG_TYPE ( ( IDENTIFIER )? tuple_type )? ) ;
    public final AstPrinter.bag_type_return bag_type() throws RecognitionException {
        AstPrinter.bag_type_return retval = new AstPrinter.bag_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_TYPE86=null;
        CommonTree IDENTIFIER87=null;
        AstPrinter.tuple_type_return tuple_type88 =null;


        CommonTree BAG_TYPE86_tree=null;
        CommonTree IDENTIFIER87_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:180:5: ( ^( BAG_TYPE ( ( IDENTIFIER )? tuple_type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:180:7: ^( BAG_TYPE ( ( IDENTIFIER )? tuple_type )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_TYPE86=(CommonTree)match(input,BAG_TYPE,FOLLOW_BAG_TYPE_in_bag_type1078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_TYPE86_tree = (CommonTree)adaptor.dupNode(BAG_TYPE86);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_TYPE86_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append("bag{"); }

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:180:42: ( ( IDENTIFIER )? tuple_type )?
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==IDENTIFIER||LA28_0==TUPLE_TYPE) ) {
                    alt28=1;
                }
                switch (alt28) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:180:44: ( IDENTIFIER )? tuple_type
                        {
                        if ( state.backtracking==0 ) { sb.append("T:"); }

                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:180:65: ( IDENTIFIER )?
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==IDENTIFIER) ) {
                            alt27=1;
                        }
                        switch (alt27) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:180:65: IDENTIFIER
                                {
                                _last = (CommonTree)input.LT(1);
                                IDENTIFIER87=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_bag_type1086); if (state.failed) return retval;
                                if ( state.backtracking==0 ) {
                                IDENTIFIER87_tree = (CommonTree)adaptor.dupNode(IDENTIFIER87);


                                adaptor.addChild(root_1, IDENTIFIER87_tree);
                                }


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_tuple_type_in_bag_type1089);
                        tuple_type88=tuple_type();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, tuple_type88.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) { sb.append("}"); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type"


    public static class map_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:183:1: map_type : ^( MAP_TYPE ( type )? ) ;
    public final AstPrinter.map_type_return map_type() throws RecognitionException {
        AstPrinter.map_type_return retval = new AstPrinter.map_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAP_TYPE89=null;
        AstPrinter.type_return type90 =null;


        CommonTree MAP_TYPE89_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:183:10: ( ^( MAP_TYPE ( type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:183:12: ^( MAP_TYPE ( type )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAP_TYPE89=(CommonTree)match(input,MAP_TYPE,FOLLOW_MAP_TYPE_in_map_type1108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAP_TYPE89_tree = (CommonTree)adaptor.dupNode(MAP_TYPE89);


            root_1 = (CommonTree)adaptor.becomeRoot(MAP_TYPE89_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append("map["); }

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:183:47: ( type )?
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==BOOLEAN||LA29_0==BYTEARRAY||LA29_0==CHARARRAY||LA29_0==DOUBLE||LA29_0==FLOAT||LA29_0==INT||LA29_0==LONG||LA29_0==BAG_TYPE||LA29_0==MAP_TYPE||LA29_0==TUPLE_TYPE) ) {
                    alt29=1;
                }
                switch (alt29) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:183:47: type
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_type_in_map_type1112);
                        type90=type();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, type90.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) { sb.append("]"); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class func_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:186:1: func_clause : ( ^( FUNC_REF func_name ) | ^( FUNC func_name ( func_args )? ) );
    public final AstPrinter.func_clause_return func_clause() throws RecognitionException {
        AstPrinter.func_clause_return retval = new AstPrinter.func_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FUNC_REF91=null;
        CommonTree FUNC93=null;
        AstPrinter.func_name_return func_name92 =null;

        AstPrinter.func_name_return func_name94 =null;

        AstPrinter.func_args_return func_args95 =null;


        CommonTree FUNC_REF91_tree=null;
        CommonTree FUNC93_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:187:5: ( ^( FUNC_REF func_name ) | ^( FUNC func_name ( func_args )? ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==FUNC_REF) ) {
                alt31=1;
            }
            else if ( (LA31_0==FUNC) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:187:7: ^( FUNC_REF func_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC_REF91=(CommonTree)match(input,FUNC_REF,FOLLOW_FUNC_REF_in_func_clause1133); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC_REF91_tree = (CommonTree)adaptor.dupNode(FUNC_REF91);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC_REF91_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_clause1135);
                    func_name92=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name92.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:188:7: ^( FUNC func_name ( func_args )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC93=(CommonTree)match(input,FUNC,FOLLOW_FUNC_in_func_clause1147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC93_tree = (CommonTree)adaptor.dupNode(FUNC93);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC93_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_clause1149);
                    func_name94=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name94.getTree());


                    if ( state.backtracking==0 ) { sb.append("("); }

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:188:45: ( func_args )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==QUOTEDSTRING) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:188:45: func_args
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_func_args_in_func_clause1153);
                            func_args95=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, func_args95.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:191:1: func_name : eid ( ( PERIOD | DOLLAR ) eid )* ;
    public final AstPrinter.func_name_return func_name() throws RecognitionException {
        AstPrinter.func_name_return retval = new AstPrinter.func_name_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PERIOD97=null;
        CommonTree DOLLAR98=null;
        AstPrinter.eid_return eid96 =null;

        AstPrinter.eid_return eid99 =null;


        CommonTree PERIOD97_tree=null;
        CommonTree DOLLAR98_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:192:5: ( eid ( ( PERIOD | DOLLAR ) eid )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:192:7: eid ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_eid_in_func_name1172);
            eid96=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, eid96.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:192:11: ( ( PERIOD | DOLLAR ) eid )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==DOLLAR||LA33_0==PERIOD) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:192:13: ( PERIOD | DOLLAR ) eid
            	    {
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:192:13: ( PERIOD | DOLLAR )
            	    int alt32=2;
            	    int LA32_0 = input.LA(1);

            	    if ( (LA32_0==PERIOD) ) {
            	        alt32=1;
            	    }
            	    else if ( (LA32_0==DOLLAR) ) {
            	        alt32=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 32, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt32) {
            	        case 1 :
            	            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:192:15: PERIOD
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            PERIOD97=(CommonTree)match(input,PERIOD,FOLLOW_PERIOD_in_func_name1178); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PERIOD97_tree = (CommonTree)adaptor.dupNode(PERIOD97);


            	            adaptor.addChild(root_0, PERIOD97_tree);
            	            }


            	            if ( state.backtracking==0 ) { sb.append((PERIOD97!=null?PERIOD97.getText():null)); }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 2 :
            	            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:192:53: DOLLAR
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            DOLLAR98=(CommonTree)match(input,DOLLAR,FOLLOW_DOLLAR_in_func_name1184); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DOLLAR98_tree = (CommonTree)adaptor.dupNode(DOLLAR98);


            	            adaptor.addChild(root_0, DOLLAR98_tree);
            	            }


            	            if ( state.backtracking==0 ) { sb.append((DOLLAR98!=null?DOLLAR98.getText():null)); }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }


            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_eid_in_func_name1190);
            	    eid99=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, eid99.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:195:1: func_args : a= QUOTEDSTRING (b= QUOTEDSTRING )* ;
    public final AstPrinter.func_args_return func_args() throws RecognitionException {
        AstPrinter.func_args_return retval = new AstPrinter.func_args_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree a=null;
        CommonTree b=null;

        CommonTree a_tree=null;
        CommonTree b_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:196:5: (a= QUOTEDSTRING (b= QUOTEDSTRING )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:196:7: a= QUOTEDSTRING (b= QUOTEDSTRING )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            a=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_func_args1209); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            a_tree = (CommonTree)adaptor.dupNode(a);


            adaptor.addChild(root_0, a_tree);
            }


            if ( state.backtracking==0 ) { sb.append((a!=null?a.getText():null)); }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:197:9: (b= QUOTEDSTRING )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==QUOTEDSTRING) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:197:10: b= QUOTEDSTRING
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    b=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_func_args1224); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    b_tree = (CommonTree)adaptor.dupNode(b);


            	    adaptor.addChild(root_0, b_tree);
            	    }


            	    if ( state.backtracking==0 ) { sb.append(", ").append((b!=null?b.getText():null)); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    public static class group_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:200:1: group_clause : ^( ( GROUP | COGROUP ) group_item ( group_item )* ( group_type )? ( partition_clause )? ) ;
    public final AstPrinter.group_clause_return group_clause() throws RecognitionException {
        AstPrinter.group_clause_return retval = new AstPrinter.group_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GROUP100=null;
        CommonTree COGROUP101=null;
        AstPrinter.group_item_return group_item102 =null;

        AstPrinter.group_item_return group_item103 =null;

        AstPrinter.group_type_return group_type104 =null;

        AstPrinter.partition_clause_return partition_clause105 =null;


        CommonTree GROUP100_tree=null;
        CommonTree COGROUP101_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:201:5: ( ^( ( GROUP | COGROUP ) group_item ( group_item )* ( group_type )? ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:201:7: ^( ( GROUP | COGROUP ) group_item ( group_item )* ( group_type )? ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:201:10: ( GROUP | COGROUP )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==GROUP) ) {
                alt35=1;
            }
            else if ( (LA35_0==COGROUP) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:201:12: GROUP
                    {
                    _last = (CommonTree)input.LT(1);
                    GROUP100=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_group_clause1246); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP100_tree = (CommonTree)adaptor.dupNode(GROUP100);


                    adaptor.addChild(root_1, GROUP100_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((GROUP100!=null?GROUP100.getText():null)).append(" "); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:201:60: COGROUP
                    {
                    _last = (CommonTree)input.LT(1);
                    COGROUP101=(CommonTree)match(input,COGROUP,FOLLOW_COGROUP_in_group_clause1252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP101_tree = (CommonTree)adaptor.dupNode(COGROUP101);


                    adaptor.addChild(root_1, COGROUP101_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((COGROUP101!=null?COGROUP101.getText():null)).append(" "); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_group_item_in_group_clause1267);
            group_item102=group_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, group_item102.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:202:20: ( group_item )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==COGROUP||LA36_0==CROSS||LA36_0==DEFINE||LA36_0==DISTINCT||LA36_0==FILTER||LA36_0==FOREACH||LA36_0==GROUP||LA36_0==JOIN||(LA36_0 >= LIMIT && LA36_0 <= LOAD)||LA36_0==MAPREDUCE||LA36_0==ORDER||LA36_0==SAMPLE||LA36_0==SPLIT||(LA36_0 >= STORE && LA36_0 <= STREAM)||LA36_0==UNION||LA36_0==IDENTIFIER) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:202:22: group_item
            	    {
            	    if ( state.backtracking==0 ) { sb.append(", "); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_group_item_in_group_clause1273);
            	    group_item103=group_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, group_item103.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:203:7: ( group_type )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==QUOTEDSTRING) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:203:9: group_type
                    {
                    if ( state.backtracking==0 ) { sb.append(" USING "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_group_type_in_group_clause1289);
                    group_type104=group_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, group_type104.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:204:7: ( partition_clause )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==PARTITION) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:204:7: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_group_clause1301);
                    partition_clause105=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause105.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:208:1: group_type : QUOTEDSTRING ;
    public final AstPrinter.group_type_return group_type() throws RecognitionException {
        AstPrinter.group_type_return retval = new AstPrinter.group_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING106=null;

        CommonTree QUOTEDSTRING106_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:208:12: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:208:14: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING106=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_type1317); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING106_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING106);


            adaptor.addChild(root_0, QUOTEDSTRING106_tree);
            }


            if ( state.backtracking==0 ) { sb.append((QUOTEDSTRING106!=null?QUOTEDSTRING106.getText():null)); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_type"


    public static class group_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:211:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final AstPrinter.group_item_return group_item() throws RecognitionException {
        AstPrinter.group_item_return retval = new AstPrinter.group_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ALL109=null;
        CommonTree ANY110=null;
        CommonTree INNER111=null;
        CommonTree OUTER112=null;
        AstPrinter.rel_return rel107 =null;

        AstPrinter.join_group_by_clause_return join_group_by_clause108 =null;


        CommonTree ALL109_tree=null;
        CommonTree ANY110_tree=null;
        CommonTree INNER111_tree=null;
        CommonTree OUTER112_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:212:5: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:212:7: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_group_item1332);
            rel107=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, rel107.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:212:11: ( join_group_by_clause | ALL | ANY )
            int alt39=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt39=1;
                }
                break;
            case ALL:
                {
                alt39=2;
                }
                break;
            case ANY:
                {
                alt39=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:212:13: join_group_by_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item1336);
                    join_group_by_clause108=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_group_by_clause108.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:213:15: ALL
                    {
                    _last = (CommonTree)input.LT(1);
                    ALL109=(CommonTree)match(input,ALL,FOLLOW_ALL_in_group_item1353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL109_tree = (CommonTree)adaptor.dupNode(ALL109);


                    adaptor.addChild(root_0, ALL109_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((ALL109!=null?ALL109.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:213:59: ANY
                    {
                    _last = (CommonTree)input.LT(1);
                    ANY110=(CommonTree)match(input,ANY,FOLLOW_ANY_in_group_item1359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY110_tree = (CommonTree)adaptor.dupNode(ANY110);


                    adaptor.addChild(root_0, ANY110_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((ANY110!=null?ANY110.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:214:13: ( INNER | OUTER )?
            int alt40=3;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==INNER) ) {
                alt40=1;
            }
            else if ( (LA40_0==OUTER) ) {
                alt40=2;
            }
            switch (alt40) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:214:15: INNER
                    {
                    _last = (CommonTree)input.LT(1);
                    INNER111=(CommonTree)match(input,INNER,FOLLOW_INNER_in_group_item1380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER111_tree = (CommonTree)adaptor.dupNode(INNER111);


                    adaptor.addChild(root_0, INNER111_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((INNER111!=null?INNER111.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:214:63: OUTER
                    {
                    _last = (CommonTree)input.LT(1);
                    OUTER112=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_group_item1386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER112_tree = (CommonTree)adaptor.dupNode(OUTER112);


                    adaptor.addChild(root_0, OUTER112_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((OUTER112!=null?OUTER112.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class rel_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:217:1: rel : ( alias | ( op_clause ( parallel_clause )? ) );
    public final AstPrinter.rel_return rel() throws RecognitionException {
        AstPrinter.rel_return retval = new AstPrinter.rel_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.alias_return alias113 =null;

        AstPrinter.op_clause_return op_clause114 =null;

        AstPrinter.parallel_clause_return parallel_clause115 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:218:5: ( alias | ( op_clause ( parallel_clause )? ) )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==IDENTIFIER) ) {
                alt42=1;
            }
            else if ( (LA42_0==COGROUP||LA42_0==CROSS||LA42_0==DEFINE||LA42_0==DISTINCT||LA42_0==FILTER||LA42_0==FOREACH||LA42_0==GROUP||LA42_0==JOIN||(LA42_0 >= LIMIT && LA42_0 <= LOAD)||LA42_0==MAPREDUCE||LA42_0==ORDER||LA42_0==SAMPLE||LA42_0==SPLIT||(LA42_0 >= STORE && LA42_0 <= STREAM)||LA42_0==UNION) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:218:7: alias
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_rel1405);
                    alias113=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias113.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:219:7: ( op_clause ( parallel_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:219:7: ( op_clause ( parallel_clause )? )
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:219:9: op_clause ( parallel_clause )?
                    {
                    if ( state.backtracking==0 ) { sb.append(" ("); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_op_clause_in_rel1418);
                    op_clause114=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, op_clause114.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:219:40: ( parallel_clause )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==PARALLEL) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:219:40: parallel_clause
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_parallel_clause_in_rel1420);
                            parallel_clause115=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, parallel_clause115.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { sb.append(") "); }

                    if ( state.backtracking==0 ) {
                    }
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class flatten_generated_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:222:1: flatten_generated_item : ( flatten_clause | col_range | expr | STAR ) ( field_def_list )? ;
    public final AstPrinter.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        AstPrinter.flatten_generated_item_return retval = new AstPrinter.flatten_generated_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR119=null;
        AstPrinter.flatten_clause_return flatten_clause116 =null;

        AstPrinter.col_range_return col_range117 =null;

        AstPrinter.expr_return expr118 =null;

        AstPrinter.field_def_list_return field_def_list120 =null;


        CommonTree STAR119_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:223:5: ( ( flatten_clause | col_range | expr | STAR ) ( field_def_list )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:223:7: ( flatten_clause | col_range | expr | STAR ) ( field_def_list )?
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:223:7: ( flatten_clause | col_range | expr | STAR )
            int alt43=4;
            switch ( input.LA(1) ) {
            case FLATTEN:
                {
                alt43=1;
                }
                break;
            case COL_RANGE:
                {
                alt43=2;
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt43=3;
                }
                break;
            case STAR:
                {
                int LA43_4 = input.LA(2);

                if ( (LA43_4==DOWN) ) {
                    alt43=3;
                }
                else if ( (LA43_4==EOF||LA43_4==UP||LA43_4==DIV||LA43_4==DOLLARVAR||LA43_4==DOUBLENUMBER||LA43_4==FALSE||LA43_4==FLATTEN||LA43_4==FLOATNUMBER||LA43_4==GROUP||LA43_4==INTEGER||LA43_4==LONGINTEGER||LA43_4==MINUS||LA43_4==PERCENT||LA43_4==PLUS||LA43_4==QUOTEDSTRING||LA43_4==STAR||LA43_4==TRUE||(LA43_4 >= BAG_VAL && LA43_4 <= BIN_EXPR)||(LA43_4 >= CAST_EXPR && LA43_4 <= FIELD_DEF)||LA43_4==FUNC_EVAL||LA43_4==IDENTIFIER||(LA43_4 >= MAP_VAL && LA43_4 <= NEG)||LA43_4==NULL||LA43_4==TUPLE_VAL) ) {
                    alt43=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }

            switch (alt43) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:223:9: flatten_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item1441);
                    flatten_clause116=flatten_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, flatten_clause116.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:223:26: col_range
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_flatten_generated_item1445);
                    col_range117=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range117.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:223:38: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_flatten_generated_item1449);
                    expr118=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr118.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:223:45: STAR
                    {
                    _last = (CommonTree)input.LT(1);
                    STAR119=(CommonTree)match(input,STAR,FOLLOW_STAR_in_flatten_generated_item1453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR119_tree = (CommonTree)adaptor.dupNode(STAR119);


                    adaptor.addChild(root_0, STAR119_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((STAR119!=null?STAR119.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:223:91: ( field_def_list )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==FIELD_DEF) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:223:93: field_def_list
                    {
                    if ( state.backtracking==0 ) { sb.append(" AS "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item1463);
                    field_def_list120=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, field_def_list120.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class flatten_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:226:1: flatten_clause : ^( FLATTEN expr ) ;
    public final AstPrinter.flatten_clause_return flatten_clause() throws RecognitionException {
        AstPrinter.flatten_clause_return retval = new AstPrinter.flatten_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FLATTEN121=null;
        AstPrinter.expr_return expr122 =null;


        CommonTree FLATTEN121_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:227:5: ( ^( FLATTEN expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:227:7: ^( FLATTEN expr )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FLATTEN121=(CommonTree)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause1481); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN121_tree = (CommonTree)adaptor.dupNode(FLATTEN121);


            root_1 = (CommonTree)adaptor.becomeRoot(FLATTEN121_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((FLATTEN121!=null?FLATTEN121.getText():null)).append("("); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_flatten_clause1485);
            expr122=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr122.getTree());


            if ( state.backtracking==0 ) { sb.append(") "); }

            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class store_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:230:1: store_clause : ^( STORE rel filename ( func_clause )? ) ;
    public final AstPrinter.store_clause_return store_clause() throws RecognitionException {
        AstPrinter.store_clause_return retval = new AstPrinter.store_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STORE123=null;
        AstPrinter.rel_return rel124 =null;

        AstPrinter.filename_return filename125 =null;

        AstPrinter.func_clause_return func_clause126 =null;


        CommonTree STORE123_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:231:5: ( ^( STORE rel filename ( func_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:231:7: ^( STORE rel filename ( func_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STORE123=(CommonTree)match(input,STORE,FOLLOW_STORE_in_store_clause1505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE123_tree = (CommonTree)adaptor.dupNode(STORE123);


            root_1 = (CommonTree)adaptor.becomeRoot(STORE123_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((STORE123!=null?STORE123.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_store_clause1509);
            rel124=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel124.getTree());


            if ( state.backtracking==0 ) { sb.append(" INTO "); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_filename_in_store_clause1513);
            filename125=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, filename125.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:231:94: ( func_clause )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==FUNC||LA45_0==FUNC_REF) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:231:96: func_clause
                    {
                    if ( state.backtracking==0 ) { sb.append(" USING "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_store_clause1519);
                    func_clause126=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause126.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class filter_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:234:1: filter_clause : ^( FILTER rel cond ) ;
    public final AstPrinter.filter_clause_return filter_clause() throws RecognitionException {
        AstPrinter.filter_clause_return retval = new AstPrinter.filter_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FILTER127=null;
        AstPrinter.rel_return rel128 =null;

        AstPrinter.cond_return cond129 =null;


        CommonTree FILTER127_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:235:5: ( ^( FILTER rel cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:235:7: ^( FILTER rel cond )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FILTER127=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_filter_clause1539); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER127_tree = (CommonTree)adaptor.dupNode(FILTER127);


            root_1 = (CommonTree)adaptor.becomeRoot(FILTER127_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((FILTER127!=null?FILTER127.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_filter_clause1543);
            rel128=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel128.getTree());


            if ( state.backtracking==0 ) { sb.append(" BY ("); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_filter_clause1547);
            cond129=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond129.getTree());


            if ( state.backtracking==0 ) { sb.append(")"); }

            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class cond_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:238:1: cond : ( ^( OR cond cond ) | ^( AND cond cond ) | ^( NOT cond ) | ^( NULL expr ( NOT )? ) | ^( rel_op expr expr ) | func_eval );
    public final AstPrinter.cond_return cond() throws RecognitionException {
        AstPrinter.cond_return retval = new AstPrinter.cond_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OR130=null;
        CommonTree AND133=null;
        CommonTree NOT136=null;
        CommonTree NULL138=null;
        CommonTree NOT140=null;
        AstPrinter.cond_return cond131 =null;

        AstPrinter.cond_return cond132 =null;

        AstPrinter.cond_return cond134 =null;

        AstPrinter.cond_return cond135 =null;

        AstPrinter.cond_return cond137 =null;

        AstPrinter.expr_return expr139 =null;

        AstPrinter.rel_op_return rel_op141 =null;

        AstPrinter.expr_return expr142 =null;

        AstPrinter.expr_return expr143 =null;

        AstPrinter.func_eval_return func_eval144 =null;


        CommonTree OR130_tree=null;
        CommonTree AND133_tree=null;
        CommonTree NOT136_tree=null;
        CommonTree NULL138_tree=null;
        CommonTree NOT140_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:239:5: ( ^( OR cond cond ) | ^( AND cond cond ) | ^( NOT cond ) | ^( NULL expr ( NOT )? ) | ^( rel_op expr expr ) | func_eval )
            int alt47=6;
            switch ( input.LA(1) ) {
            case OR:
                {
                alt47=1;
                }
                break;
            case AND:
                {
                alt47=2;
                }
                break;
            case NOT:
                {
                alt47=3;
                }
                break;
            case NULL:
                {
                alt47=4;
                }
                break;
            case NUM_OP_EQ:
            case NUM_OP_GT:
            case NUM_OP_GTE:
            case NUM_OP_LT:
            case NUM_OP_LTE:
            case NUM_OP_NE:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt47=5;
                }
                break;
            case FUNC_EVAL:
                {
                alt47=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }

            switch (alt47) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:239:7: ^( OR cond cond )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    OR130=(CommonTree)match(input,OR,FOLLOW_OR_in_cond1567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR130_tree = (CommonTree)adaptor.dupNode(OR130);


                    root_1 = (CommonTree)adaptor.becomeRoot(OR130_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("("); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1571);
                    cond131=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond131.getTree());


                    if ( state.backtracking==0 ) { sb.append(") ").append((OR130!=null?OR130.getText():null)).append(" ("); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1575);
                    cond132=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond132.getTree());


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:240:7: ^( AND cond cond )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    AND133=(CommonTree)match(input,AND,FOLLOW_AND_in_cond1589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND133_tree = (CommonTree)adaptor.dupNode(AND133);


                    root_1 = (CommonTree)adaptor.becomeRoot(AND133_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("("); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1593);
                    cond134=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond134.getTree());


                    if ( state.backtracking==0 ) { sb.append(") ").append((AND133!=null?AND133.getText():null)).append(" ("); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1597);
                    cond135=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond135.getTree());


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:241:7: ^( NOT cond )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NOT136=(CommonTree)match(input,NOT,FOLLOW_NOT_in_cond1611); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT136_tree = (CommonTree)adaptor.dupNode(NOT136);


                    root_1 = (CommonTree)adaptor.becomeRoot(NOT136_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((NOT136!=null?NOT136.getText():null)).append(" ("); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1615);
                    cond137=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond137.getTree());


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:242:7: ^( NULL expr ( NOT )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NULL138=(CommonTree)match(input,NULL,FOLLOW_NULL_in_cond1629); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL138_tree = (CommonTree)adaptor.dupNode(NULL138);


                    root_1 = (CommonTree)adaptor.becomeRoot(NULL138_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1631);
                    expr139=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr139.getTree());


                    if ( state.backtracking==0 ) { sb.append(" IS "); }

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:242:43: ( NOT )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==NOT) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:242:44: NOT
                            {
                            _last = (CommonTree)input.LT(1);
                            NOT140=(CommonTree)match(input,NOT,FOLLOW_NOT_in_cond1636); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT140_tree = (CommonTree)adaptor.dupNode(NOT140);


                            adaptor.addChild(root_1, NOT140_tree);
                            }


                            if ( state.backtracking==0 ) { sb.append((NOT140!=null?NOT140.getText():null)).append(" "); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { sb.append((NULL138!=null?NULL138.getText():null)); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:243:7: ^( rel_op expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_in_cond1656);
                    rel_op141=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_1 = (CommonTree)adaptor.becomeRoot(rel_op141.getTree(), root_1);


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1658);
                    expr142=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr142.getTree());


                    if ( state.backtracking==0 ) { sb.append(" ").append((rel_op141!=null?rel_op141.result:null)).append(" "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1662);
                    expr143=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr143.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:244:7: func_eval
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_eval_in_cond1672);
                    func_eval144=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, func_eval144.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class func_eval_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_eval"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:247:1: func_eval : ( ^( FUNC_EVAL func_name real_arg ( real_arg )* ) | ^( FUNC_EVAL func_name ) );
    public final AstPrinter.func_eval_return func_eval() throws RecognitionException {
        AstPrinter.func_eval_return retval = new AstPrinter.func_eval_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FUNC_EVAL145=null;
        CommonTree FUNC_EVAL149=null;
        AstPrinter.func_name_return func_name146 =null;

        AstPrinter.real_arg_return real_arg147 =null;

        AstPrinter.real_arg_return real_arg148 =null;

        AstPrinter.func_name_return func_name150 =null;


        CommonTree FUNC_EVAL145_tree=null;
        CommonTree FUNC_EVAL149_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:248:5: ( ^( FUNC_EVAL func_name real_arg ( real_arg )* ) | ^( FUNC_EVAL func_name ) )
            int alt49=2;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:248:7: ^( FUNC_EVAL func_name real_arg ( real_arg )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC_EVAL145=(CommonTree)match(input,FUNC_EVAL,FOLLOW_FUNC_EVAL_in_func_eval1687); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC_EVAL145_tree = (CommonTree)adaptor.dupNode(FUNC_EVAL145);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC_EVAL145_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_eval1689);
                    func_name146=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name146.getTree());


                    if ( state.backtracking==0 ) { sb.append("("); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_real_arg_in_func_eval1693);
                    real_arg147=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, real_arg147.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:248:59: ( real_arg )*
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( (LA48_0==DIV||LA48_0==DOLLARVAR||LA48_0==DOUBLENUMBER||LA48_0==FALSE||LA48_0==FLOATNUMBER||LA48_0==GROUP||LA48_0==INTEGER||LA48_0==LONGINTEGER||LA48_0==MINUS||LA48_0==PERCENT||LA48_0==PLUS||LA48_0==QUOTEDSTRING||LA48_0==STAR||LA48_0==TRUE||(LA48_0 >= BAG_VAL && LA48_0 <= BIN_EXPR)||(LA48_0 >= CAST_EXPR && LA48_0 <= EXPR_IN_PAREN)||LA48_0==FUNC_EVAL||LA48_0==IDENTIFIER||(LA48_0 >= MAP_VAL && LA48_0 <= NEG)||LA48_0==NULL||LA48_0==TUPLE_VAL) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:248:61: real_arg
                    	    {
                    	    if ( state.backtracking==0 ) { sb.append(", "); }

                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_real_arg_in_func_eval1699);
                    	    real_arg148=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, real_arg148.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:249:7: ^( FUNC_EVAL func_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC_EVAL149=(CommonTree)match(input,FUNC_EVAL,FOLLOW_FUNC_EVAL_in_func_eval1715); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC_EVAL149_tree = (CommonTree)adaptor.dupNode(FUNC_EVAL149);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC_EVAL149_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_eval1717);
                    func_name150=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name150.getTree());


                    if ( state.backtracking==0 ) { sb.append("()"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_eval"


    public static class real_arg_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:252:1: real_arg : ( expr | STAR | col_range );
    public final AstPrinter.real_arg_return real_arg() throws RecognitionException {
        AstPrinter.real_arg_return retval = new AstPrinter.real_arg_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR152=null;
        AstPrinter.expr_return expr151 =null;

        AstPrinter.col_range_return col_range153 =null;


        CommonTree STAR152_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:253:5: ( expr | STAR | col_range )
            int alt50=3;
            switch ( input.LA(1) ) {
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt50=1;
                }
                break;
            case STAR:
                {
                int LA50_2 = input.LA(2);

                if ( (LA50_2==DOWN) ) {
                    alt50=1;
                }
                else if ( (LA50_2==EOF||LA50_2==UP||LA50_2==DIV||LA50_2==DOLLARVAR||LA50_2==DOUBLENUMBER||LA50_2==FALSE||LA50_2==FLOATNUMBER||LA50_2==GROUP||LA50_2==INTEGER||LA50_2==LONGINTEGER||LA50_2==MINUS||LA50_2==PERCENT||LA50_2==PLUS||LA50_2==QUOTEDSTRING||LA50_2==STAR||LA50_2==TRUE||(LA50_2 >= BAG_VAL && LA50_2 <= BIN_EXPR)||(LA50_2 >= CAST_EXPR && LA50_2 <= EXPR_IN_PAREN)||LA50_2==FUNC_EVAL||LA50_2==IDENTIFIER||(LA50_2 >= MAP_VAL && LA50_2 <= NEG)||LA50_2==NULL||LA50_2==TUPLE_VAL) ) {
                    alt50=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 2, input);

                    throw nvae;

                }
                }
                break;
            case COL_RANGE:
                {
                alt50=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }

            switch (alt50) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:253:7: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_real_arg1736);
                    expr151=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr151.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:253:14: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR152=(CommonTree)match(input,STAR,FOLLOW_STAR_in_real_arg1740); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR152_tree = (CommonTree)adaptor.dupNode(STAR152);


                    adaptor.addChild(root_0, STAR152_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STAR152!=null?STAR152.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:253:48: col_range
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_real_arg1746);
                    col_range153=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range153.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:256:1: expr : ( ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( PERCENT expr expr ) | ^( CAST_EXPR type expr ) | const_expr | var_expr | ^( NEG expr ) | ^( CAST_EXPR type_cast expr ) | ^( EXPR_IN_PAREN expr ) );
    public final AstPrinter.expr_return expr() throws RecognitionException {
        AstPrinter.expr_return retval = new AstPrinter.expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PLUS154=null;
        CommonTree MINUS157=null;
        CommonTree STAR160=null;
        CommonTree DIV163=null;
        CommonTree PERCENT166=null;
        CommonTree CAST_EXPR169=null;
        CommonTree NEG174=null;
        CommonTree CAST_EXPR176=null;
        CommonTree EXPR_IN_PAREN179=null;
        AstPrinter.expr_return expr155 =null;

        AstPrinter.expr_return expr156 =null;

        AstPrinter.expr_return expr158 =null;

        AstPrinter.expr_return expr159 =null;

        AstPrinter.expr_return expr161 =null;

        AstPrinter.expr_return expr162 =null;

        AstPrinter.expr_return expr164 =null;

        AstPrinter.expr_return expr165 =null;

        AstPrinter.expr_return expr167 =null;

        AstPrinter.expr_return expr168 =null;

        AstPrinter.type_return type170 =null;

        AstPrinter.expr_return expr171 =null;

        AstPrinter.const_expr_return const_expr172 =null;

        AstPrinter.var_expr_return var_expr173 =null;

        AstPrinter.expr_return expr175 =null;

        AstPrinter.type_cast_return type_cast177 =null;

        AstPrinter.expr_return expr178 =null;

        AstPrinter.expr_return expr180 =null;


        CommonTree PLUS154_tree=null;
        CommonTree MINUS157_tree=null;
        CommonTree STAR160_tree=null;
        CommonTree DIV163_tree=null;
        CommonTree PERCENT166_tree=null;
        CommonTree CAST_EXPR169_tree=null;
        CommonTree NEG174_tree=null;
        CommonTree CAST_EXPR176_tree=null;
        CommonTree EXPR_IN_PAREN179_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:257:5: ( ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( PERCENT expr expr ) | ^( CAST_EXPR type expr ) | const_expr | var_expr | ^( NEG expr ) | ^( CAST_EXPR type_cast expr ) | ^( EXPR_IN_PAREN expr ) )
            int alt51=11;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt51=1;
                }
                break;
            case MINUS:
                {
                int LA51_2 = input.LA(2);

                if ( (synpred87_AstPrinter()) ) {
                    alt51=2;
                }
                else if ( (synpred92_AstPrinter()) ) {
                    alt51=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 2, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                alt51=3;
                }
                break;
            case DIV:
                {
                alt51=4;
                }
                break;
            case PERCENT:
                {
                alt51=5;
                }
                break;
            case CAST_EXPR:
                {
                int LA51_6 = input.LA(2);

                if ( (synpred91_AstPrinter()) ) {
                    alt51=6;
                }
                else if ( (synpred95_AstPrinter()) ) {
                    alt51=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 6, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case MAP_VAL:
            case NULL:
            case TUPLE_VAL:
                {
                alt51=7;
                }
                break;
            case DOLLARVAR:
            case GROUP:
            case BIN_EXPR:
            case FUNC_EVAL:
            case IDENTIFIER:
                {
                alt51=8;
                }
                break;
            case NEG:
                {
                alt51=9;
                }
                break;
            case EXPR_IN_PAREN:
                {
                alt51=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }

            switch (alt51) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:257:7: ^( PLUS expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    PLUS154=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_expr1762); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS154_tree = (CommonTree)adaptor.dupNode(PLUS154);


                    root_1 = (CommonTree)adaptor.becomeRoot(PLUS154_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1764);
                    expr155=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr155.getTree());


                    if ( state.backtracking==0 ) { sb.append(" ").append((PLUS154!=null?PLUS154.getText():null)).append(" "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1768);
                    expr156=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr156.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:258:7: ^( MINUS expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    MINUS157=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_expr1780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS157_tree = (CommonTree)adaptor.dupNode(MINUS157);


                    root_1 = (CommonTree)adaptor.becomeRoot(MINUS157_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1782);
                    expr158=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr158.getTree());


                    if ( state.backtracking==0 ) { sb.append(" ").append((MINUS157!=null?MINUS157.getText():null)).append(" "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1786);
                    expr159=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr159.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:259:7: ^( STAR expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STAR160=(CommonTree)match(input,STAR,FOLLOW_STAR_in_expr1798); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR160_tree = (CommonTree)adaptor.dupNode(STAR160);


                    root_1 = (CommonTree)adaptor.becomeRoot(STAR160_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1800);
                    expr161=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr161.getTree());


                    if ( state.backtracking==0 ) { sb.append(" ").append((STAR160!=null?STAR160.getText():null)).append(" "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1804);
                    expr162=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr162.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:260:7: ^( DIV expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    DIV163=(CommonTree)match(input,DIV,FOLLOW_DIV_in_expr1816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV163_tree = (CommonTree)adaptor.dupNode(DIV163);


                    root_1 = (CommonTree)adaptor.becomeRoot(DIV163_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1818);
                    expr164=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr164.getTree());


                    if ( state.backtracking==0 ) { sb.append(" ").append((DIV163!=null?DIV163.getText():null)).append(" "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1822);
                    expr165=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr165.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:261:7: ^( PERCENT expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    PERCENT166=(CommonTree)match(input,PERCENT,FOLLOW_PERCENT_in_expr1834); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PERCENT166_tree = (CommonTree)adaptor.dupNode(PERCENT166);


                    root_1 = (CommonTree)adaptor.becomeRoot(PERCENT166_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1836);
                    expr167=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr167.getTree());


                    if ( state.backtracking==0 ) { sb.append(" ").append((PERCENT166!=null?PERCENT166.getText():null)).append(" "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1840);
                    expr168=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr168.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:262:7: ^( CAST_EXPR type expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    CAST_EXPR169=(CommonTree)match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_expr1852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST_EXPR169_tree = (CommonTree)adaptor.dupNode(CAST_EXPR169);


                    root_1 = (CommonTree)adaptor.becomeRoot(CAST_EXPR169_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("("); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_in_expr1856);
                    type170=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type170.getTree());


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1860);
                    expr171=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr171.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:263:7: const_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_const_expr_in_expr1870);
                    const_expr172=const_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, const_expr172.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:264:7: var_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_var_expr_in_expr1878);
                    var_expr173=var_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, var_expr173.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:265:7: ^( NEG expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NEG174=(CommonTree)match(input,NEG,FOLLOW_NEG_in_expr1888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEG174_tree = (CommonTree)adaptor.dupNode(NEG174);


                    root_1 = (CommonTree)adaptor.becomeRoot(NEG174_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append((NEG174!=null?NEG174.getText():null)); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1892);
                    expr175=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr175.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:266:7: ^( CAST_EXPR type_cast expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    CAST_EXPR176=(CommonTree)match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_expr1904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST_EXPR176_tree = (CommonTree)adaptor.dupNode(CAST_EXPR176);


                    root_1 = (CommonTree)adaptor.becomeRoot(CAST_EXPR176_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("("); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_cast_in_expr1908);
                    type_cast177=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type_cast177.getTree());


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1912);
                    expr178=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr178.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:267:7: ^( EXPR_IN_PAREN expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    EXPR_IN_PAREN179=(CommonTree)match(input,EXPR_IN_PAREN,FOLLOW_EXPR_IN_PAREN_in_expr1924); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXPR_IN_PAREN179_tree = (CommonTree)adaptor.dupNode(EXPR_IN_PAREN179);


                    root_1 = (CommonTree)adaptor.becomeRoot(EXPR_IN_PAREN179_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("("); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1928);
                    expr180=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr180.getTree());


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class type_cast_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:270:1: type_cast : ( simple_type | map_type | tuple_type_cast | bag_type_cast );
    public final AstPrinter.type_cast_return type_cast() throws RecognitionException {
        AstPrinter.type_cast_return retval = new AstPrinter.type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.simple_type_return simple_type181 =null;

        AstPrinter.map_type_return map_type182 =null;

        AstPrinter.tuple_type_cast_return tuple_type_cast183 =null;

        AstPrinter.bag_type_cast_return bag_type_cast184 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:271:5: ( simple_type | map_type | tuple_type_cast | bag_type_cast )
            int alt52=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt52=1;
                }
                break;
            case MAP_TYPE:
                {
                alt52=2;
                }
                break;
            case TUPLE_TYPE_CAST:
                {
                alt52=3;
                }
                break;
            case BAG_TYPE_CAST:
                {
                alt52=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }

            switch (alt52) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:271:7: simple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_type_in_type_cast1946);
                    simple_type181=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_type181.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:271:21: map_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_type_in_type_cast1950);
                    map_type182=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map_type182.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:271:32: tuple_type_cast
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_type_cast_in_type_cast1954);
                    tuple_type_cast183=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple_type_cast183.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:271:50: bag_type_cast
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_type_cast_in_type_cast1958);
                    bag_type_cast184=bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag_type_cast184.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast"


    public static class tuple_type_cast_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:274:1: tuple_type_cast : ( ^( TUPLE_TYPE_CAST type_cast ( type_cast )* ) | ^( TUPLE_TYPE_CAST ( type_cast )? ) );
    public final AstPrinter.tuple_type_cast_return tuple_type_cast() throws RecognitionException {
        AstPrinter.tuple_type_cast_return retval = new AstPrinter.tuple_type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_TYPE_CAST185=null;
        CommonTree TUPLE_TYPE_CAST188=null;
        AstPrinter.type_cast_return type_cast186 =null;

        AstPrinter.type_cast_return type_cast187 =null;

        AstPrinter.type_cast_return type_cast189 =null;


        CommonTree TUPLE_TYPE_CAST185_tree=null;
        CommonTree TUPLE_TYPE_CAST188_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:275:5: ( ^( TUPLE_TYPE_CAST type_cast ( type_cast )* ) | ^( TUPLE_TYPE_CAST ( type_cast )? ) )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==TUPLE_TYPE_CAST) ) {
                int LA55_1 = input.LA(2);

                if ( (synpred100_AstPrinter()) ) {
                    alt55=1;
                }
                else if ( (true) ) {
                    alt55=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 55, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }
            switch (alt55) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:275:7: ^( TUPLE_TYPE_CAST type_cast ( type_cast )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    TUPLE_TYPE_CAST185=(CommonTree)match(input,TUPLE_TYPE_CAST,FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast1974); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE_TYPE_CAST185_tree = (CommonTree)adaptor.dupNode(TUPLE_TYPE_CAST185);


                    root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_TYPE_CAST185_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("tuple("); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_cast_in_tuple_type_cast1978);
                    type_cast186=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type_cast186.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:275:61: ( type_cast )*
                    loop53:
                    do {
                        int alt53=2;
                        int LA53_0 = input.LA(1);

                        if ( (LA53_0==BOOLEAN||LA53_0==BYTEARRAY||LA53_0==CHARARRAY||LA53_0==DOUBLE||LA53_0==FLOAT||LA53_0==INT||LA53_0==LONG||LA53_0==BAG_TYPE_CAST||LA53_0==MAP_TYPE||LA53_0==TUPLE_TYPE_CAST) ) {
                            alt53=1;
                        }


                        switch (alt53) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:275:63: type_cast
                    	    {
                    	    if ( state.backtracking==0 ) {sb.append(", "); }

                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_type_cast_in_tuple_type_cast1984);
                    	    type_cast187=type_cast();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, type_cast187.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop53;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {sb.append(")"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:276:7: ^( TUPLE_TYPE_CAST ( type_cast )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    TUPLE_TYPE_CAST188=(CommonTree)match(input,TUPLE_TYPE_CAST,FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast2000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE_TYPE_CAST188_tree = (CommonTree)adaptor.dupNode(TUPLE_TYPE_CAST188);


                    root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_TYPE_CAST188_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("tuple("); }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:276:51: ( type_cast )?
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==BOOLEAN||LA54_0==BYTEARRAY||LA54_0==CHARARRAY||LA54_0==DOUBLE||LA54_0==FLOAT||LA54_0==INT||LA54_0==LONG||LA54_0==BAG_TYPE_CAST||LA54_0==MAP_TYPE||LA54_0==TUPLE_TYPE_CAST) ) {
                            alt54=1;
                        }
                        switch (alt54) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:276:51: type_cast
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_type_cast_in_tuple_type_cast2004);
                                type_cast189=type_cast();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, type_cast189.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        if ( state.backtracking==0 ) {sb.append(")"); }

                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type_cast"


    public static class bag_type_cast_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:279:1: bag_type_cast : ^( BAG_TYPE_CAST ( tuple_type_cast )? ) ;
    public final AstPrinter.bag_type_cast_return bag_type_cast() throws RecognitionException {
        AstPrinter.bag_type_cast_return retval = new AstPrinter.bag_type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_TYPE_CAST190=null;
        AstPrinter.tuple_type_cast_return tuple_type_cast191 =null;


        CommonTree BAG_TYPE_CAST190_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:280:5: ( ^( BAG_TYPE_CAST ( tuple_type_cast )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:280:7: ^( BAG_TYPE_CAST ( tuple_type_cast )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_TYPE_CAST190=(CommonTree)match(input,BAG_TYPE_CAST,FOLLOW_BAG_TYPE_CAST_in_bag_type_cast2025); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_TYPE_CAST190_tree = (CommonTree)adaptor.dupNode(BAG_TYPE_CAST190);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_TYPE_CAST190_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append("bag{"); }

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:280:47: ( tuple_type_cast )?
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==TUPLE_TYPE_CAST) ) {
                    alt56=1;
                }
                switch (alt56) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:280:47: tuple_type_cast
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_tuple_type_cast_in_bag_type_cast2029);
                        tuple_type_cast191=tuple_type_cast();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, tuple_type_cast191.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                if ( state.backtracking==0 ) {sb.append("}"); }

                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type_cast"


    public static class var_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "var_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:283:1: var_expr : projectable_expr ( dot_proj | pound_proj )* ;
    public final AstPrinter.var_expr_return var_expr() throws RecognitionException {
        AstPrinter.var_expr_return retval = new AstPrinter.var_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.projectable_expr_return projectable_expr192 =null;

        AstPrinter.dot_proj_return dot_proj193 =null;

        AstPrinter.pound_proj_return pound_proj194 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:284:5: ( projectable_expr ( dot_proj | pound_proj )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:284:7: projectable_expr ( dot_proj | pound_proj )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_projectable_expr_in_var_expr2048);
            projectable_expr192=projectable_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, projectable_expr192.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:284:24: ( dot_proj | pound_proj )*
            loop57:
            do {
                int alt57=3;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==PERIOD) ) {
                    alt57=1;
                }
                else if ( (LA57_0==POUND) ) {
                    alt57=2;
                }


                switch (alt57) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:284:26: dot_proj
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_dot_proj_in_var_expr2052);
            	    dot_proj193=dot_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dot_proj193.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:284:37: pound_proj
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_pound_proj_in_var_expr2056);
            	    pound_proj194=pound_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, pound_proj194.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "var_expr"


    public static class projectable_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projectable_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:287:1: projectable_expr : ( func_eval | col_ref | bin_expr );
    public final AstPrinter.projectable_expr_return projectable_expr() throws RecognitionException {
        AstPrinter.projectable_expr_return retval = new AstPrinter.projectable_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.func_eval_return func_eval195 =null;

        AstPrinter.col_ref_return col_ref196 =null;

        AstPrinter.bin_expr_return bin_expr197 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:288:5: ( func_eval | col_ref | bin_expr )
            int alt58=3;
            switch ( input.LA(1) ) {
            case FUNC_EVAL:
                {
                alt58=1;
                }
                break;
            case DOLLARVAR:
            case GROUP:
            case IDENTIFIER:
                {
                alt58=2;
                }
                break;
            case BIN_EXPR:
                {
                alt58=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }

            switch (alt58) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:288:7: func_eval
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_eval_in_projectable_expr2072);
                    func_eval195=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, func_eval195.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:288:19: col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_projectable_expr2076);
                    col_ref196=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref196.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:288:29: bin_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bin_expr_in_projectable_expr2080);
                    bin_expr197=bin_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bin_expr197.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projectable_expr"


    public static class dot_proj_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dot_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:291:1: dot_proj : ^( PERIOD col_alias_or_index ( col_alias_or_index )* ) ;
    public final AstPrinter.dot_proj_return dot_proj() throws RecognitionException {
        AstPrinter.dot_proj_return retval = new AstPrinter.dot_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PERIOD198=null;
        AstPrinter.col_alias_or_index_return col_alias_or_index199 =null;

        AstPrinter.col_alias_or_index_return col_alias_or_index200 =null;


        CommonTree PERIOD198_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:292:5: ( ^( PERIOD col_alias_or_index ( col_alias_or_index )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:292:7: ^( PERIOD col_alias_or_index ( col_alias_or_index )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PERIOD198=(CommonTree)match(input,PERIOD,FOLLOW_PERIOD_in_dot_proj2096); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PERIOD198_tree = (CommonTree)adaptor.dupNode(PERIOD198);


            root_1 = (CommonTree)adaptor.becomeRoot(PERIOD198_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(".("); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_col_alias_or_index_in_dot_proj2100);
            col_alias_or_index199=col_alias_or_index();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, col_alias_or_index199.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:292:57: ( col_alias_or_index )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==DOLLARVAR||LA59_0==GROUP||LA59_0==IDENTIFIER) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:292:59: col_alias_or_index
            	    {
            	    if ( state.backtracking==0 ) { sb.append(", "); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj2106);
            	    col_alias_or_index200=col_alias_or_index();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, col_alias_or_index200.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            if ( state.backtracking==0 ) { sb.append(")"); }

            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dot_proj"


    public static class col_alias_or_index_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias_or_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:295:1: col_alias_or_index : ( col_alias | col_index );
    public final AstPrinter.col_alias_or_index_return col_alias_or_index() throws RecognitionException {
        AstPrinter.col_alias_or_index_return retval = new AstPrinter.col_alias_or_index_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.col_alias_return col_alias201 =null;

        AstPrinter.col_index_return col_index202 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:295:20: ( col_alias | col_index )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==GROUP||LA60_0==IDENTIFIER) ) {
                alt60=1;
            }
            else if ( (LA60_0==DOLLARVAR) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }
            switch (alt60) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:295:22: col_alias
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_alias_in_col_alias_or_index2122);
                    col_alias201=col_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_alias201.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:295:34: col_index
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_index_in_col_alias_or_index2126);
                    col_index202=col_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_index202.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias_or_index"


    public static class col_alias_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:298:1: col_alias : ( GROUP | IDENTIFIER );
    public final AstPrinter.col_alias_return col_alias() throws RecognitionException {
        AstPrinter.col_alias_return retval = new AstPrinter.col_alias_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GROUP203=null;
        CommonTree IDENTIFIER204=null;

        CommonTree GROUP203_tree=null;
        CommonTree IDENTIFIER204_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:299:5: ( GROUP | IDENTIFIER )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==GROUP) ) {
                alt61=1;
            }
            else if ( (LA61_0==IDENTIFIER) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:299:7: GROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GROUP203=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_col_alias2140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP203_tree = (CommonTree)adaptor.dupNode(GROUP203);


                    adaptor.addChild(root_0, GROUP203_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((GROUP203!=null?GROUP203.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:300:7: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER204=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_col_alias2150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER204_tree = (CommonTree)adaptor.dupNode(IDENTIFIER204);


                    adaptor.addChild(root_0, IDENTIFIER204_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IDENTIFIER204!=null?IDENTIFIER204.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias"


    public static class col_index_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:303:1: col_index : DOLLARVAR ;
    public final AstPrinter.col_index_return col_index() throws RecognitionException {
        AstPrinter.col_index_return retval = new AstPrinter.col_index_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOLLARVAR205=null;

        CommonTree DOLLARVAR205_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:304:5: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:304:7: DOLLARVAR
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            DOLLARVAR205=(CommonTree)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_col_index2166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR205_tree = (CommonTree)adaptor.dupNode(DOLLARVAR205);


            adaptor.addChild(root_0, DOLLARVAR205_tree);
            }


            if ( state.backtracking==0 ) { sb.append((DOLLARVAR205!=null?DOLLARVAR205.getText():null)); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_index"


    public static class col_range_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:307:1: col_range : ^( COL_RANGE ( col_ref )? DOUBLE_PERIOD ( col_ref )? ) ;
    public final AstPrinter.col_range_return col_range() throws RecognitionException {
        AstPrinter.col_range_return retval = new AstPrinter.col_range_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COL_RANGE206=null;
        CommonTree DOUBLE_PERIOD208=null;
        AstPrinter.col_ref_return col_ref207 =null;

        AstPrinter.col_ref_return col_ref209 =null;


        CommonTree COL_RANGE206_tree=null;
        CommonTree DOUBLE_PERIOD208_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:307:11: ( ^( COL_RANGE ( col_ref )? DOUBLE_PERIOD ( col_ref )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:307:14: ^( COL_RANGE ( col_ref )? DOUBLE_PERIOD ( col_ref )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            COL_RANGE206=(CommonTree)match(input,COL_RANGE,FOLLOW_COL_RANGE_in_col_range2179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COL_RANGE206_tree = (CommonTree)adaptor.dupNode(COL_RANGE206);


            root_1 = (CommonTree)adaptor.becomeRoot(COL_RANGE206_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:307:26: ( col_ref )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==DOLLARVAR||LA62_0==GROUP||LA62_0==IDENTIFIER) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:307:26: col_ref
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_col_range2181);
                    col_ref207=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, col_ref207.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) { sb.append(".."); }

            _last = (CommonTree)input.LT(1);
            DOUBLE_PERIOD208=(CommonTree)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range2186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOUBLE_PERIOD208_tree = (CommonTree)adaptor.dupNode(DOUBLE_PERIOD208);


            adaptor.addChild(root_1, DOUBLE_PERIOD208_tree);
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:307:70: ( col_ref )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==DOLLARVAR||LA63_0==GROUP||LA63_0==IDENTIFIER) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:307:70: col_ref
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_col_range2188);
                    col_ref209=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, col_ref209.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class pound_proj_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pound_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:310:1: pound_proj : ^( POUND ( QUOTEDSTRING | NULL ) ) ;
    public final AstPrinter.pound_proj_return pound_proj() throws RecognitionException {
        AstPrinter.pound_proj_return retval = new AstPrinter.pound_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree POUND210=null;
        CommonTree QUOTEDSTRING211=null;
        CommonTree NULL212=null;

        CommonTree POUND210_tree=null;
        CommonTree QUOTEDSTRING211_tree=null;
        CommonTree NULL212_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:311:5: ( ^( POUND ( QUOTEDSTRING | NULL ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:311:7: ^( POUND ( QUOTEDSTRING | NULL ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            POUND210=(CommonTree)match(input,POUND,FOLLOW_POUND_in_pound_proj2206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            POUND210_tree = (CommonTree)adaptor.dupNode(POUND210);


            root_1 = (CommonTree)adaptor.becomeRoot(POUND210_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((POUND210!=null?POUND210.getText():null)); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:312:9: ( QUOTEDSTRING | NULL )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==QUOTEDSTRING) ) {
                alt64=1;
            }
            else if ( (LA64_0==NULL) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }
            switch (alt64) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:312:11: QUOTEDSTRING
                    {
                    _last = (CommonTree)input.LT(1);
                    QUOTEDSTRING211=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_pound_proj2220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING211_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING211);


                    adaptor.addChild(root_1, QUOTEDSTRING211_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((QUOTEDSTRING211!=null?QUOTEDSTRING211.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:312:61: NULL
                    {
                    _last = (CommonTree)input.LT(1);
                    NULL212=(CommonTree)match(input,NULL,FOLLOW_NULL_in_pound_proj2226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL212_tree = (CommonTree)adaptor.dupNode(NULL212);


                    adaptor.addChild(root_1, NULL212_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((NULL212!=null?NULL212.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pound_proj"


    public static class bin_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bin_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:315:1: bin_expr : ^( BIN_EXPR cond expr expr ) ;
    public final AstPrinter.bin_expr_return bin_expr() throws RecognitionException {
        AstPrinter.bin_expr_return retval = new AstPrinter.bin_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BIN_EXPR213=null;
        AstPrinter.cond_return cond214 =null;

        AstPrinter.expr_return expr215 =null;

        AstPrinter.expr_return expr216 =null;


        CommonTree BIN_EXPR213_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:316:5: ( ^( BIN_EXPR cond expr expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:316:7: ^( BIN_EXPR cond expr expr )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BIN_EXPR213=(CommonTree)match(input,BIN_EXPR,FOLLOW_BIN_EXPR_in_bin_expr2248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIN_EXPR213_tree = (CommonTree)adaptor.dupNode(BIN_EXPR213);


            root_1 = (CommonTree)adaptor.becomeRoot(BIN_EXPR213_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ("); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_bin_expr2252);
            cond214=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond214.getTree());


            if ( state.backtracking==0 ) { sb.append(" ? "); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_bin_expr2256);
            expr215=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr215.getTree());


            if ( state.backtracking==0 ) { sb.append(" : "); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_bin_expr2260);
            expr216=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr216.getTree());


            if ( state.backtracking==0 ) { sb.append(") "); }

            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bin_expr"


    public static class limit_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:319:1: limit_clause : ^( LIMIT rel ( INTEGER | LONGINTEGER | expr ) ) ;
    public final AstPrinter.limit_clause_return limit_clause() throws RecognitionException {
        AstPrinter.limit_clause_return retval = new AstPrinter.limit_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LIMIT217=null;
        CommonTree INTEGER219=null;
        CommonTree LONGINTEGER220=null;
        AstPrinter.rel_return rel218 =null;

        AstPrinter.expr_return expr221 =null;


        CommonTree LIMIT217_tree=null;
        CommonTree INTEGER219_tree=null;
        CommonTree LONGINTEGER220_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:320:5: ( ^( LIMIT rel ( INTEGER | LONGINTEGER | expr ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:320:7: ^( LIMIT rel ( INTEGER | LONGINTEGER | expr ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LIMIT217=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause2285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT217_tree = (CommonTree)adaptor.dupNode(LIMIT217);


            root_1 = (CommonTree)adaptor.becomeRoot(LIMIT217_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((LIMIT217!=null?LIMIT217.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_limit_clause2289);
            rel218=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel218.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:321:9: ( INTEGER | LONGINTEGER | expr )
            int alt65=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                int LA65_1 = input.LA(2);

                if ( (synpred113_AstPrinter()) ) {
                    alt65=1;
                }
                else if ( (true) ) {
                    alt65=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 65, 1, input);

                    throw nvae;

                }
                }
                break;
            case LONGINTEGER:
                {
                int LA65_2 = input.LA(2);

                if ( (synpred114_AstPrinter()) ) {
                    alt65=2;
                }
                else if ( (true) ) {
                    alt65=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 65, 2, input);

                    throw nvae;

                }
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case STAR:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt65=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }

            switch (alt65) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:321:11: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER219=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_limit_clause2302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER219_tree = (CommonTree)adaptor.dupNode(INTEGER219);


                    adaptor.addChild(root_1, INTEGER219_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((INTEGER219!=null?INTEGER219.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:321:63: LONGINTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    LONGINTEGER220=(CommonTree)match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_limit_clause2308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINTEGER220_tree = (CommonTree)adaptor.dupNode(LONGINTEGER220);


                    adaptor.addChild(root_1, LONGINTEGER220_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((LONGINTEGER220!=null?LONGINTEGER220.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:321:123: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_limit_clause2314);
                    expr221=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr221.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:324:1: sample_clause : ^( SAMPLE rel ( DOUBLENUMBER | expr ) ) ;
    public final AstPrinter.sample_clause_return sample_clause() throws RecognitionException {
        AstPrinter.sample_clause_return retval = new AstPrinter.sample_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SAMPLE222=null;
        CommonTree DOUBLENUMBER224=null;
        AstPrinter.rel_return rel223 =null;

        AstPrinter.expr_return expr225 =null;


        CommonTree SAMPLE222_tree=null;
        CommonTree DOUBLENUMBER224_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:325:5: ( ^( SAMPLE rel ( DOUBLENUMBER | expr ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:325:7: ^( SAMPLE rel ( DOUBLENUMBER | expr ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SAMPLE222=(CommonTree)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause2334); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE222_tree = (CommonTree)adaptor.dupNode(SAMPLE222);


            root_1 = (CommonTree)adaptor.becomeRoot(SAMPLE222_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((SAMPLE222!=null?SAMPLE222.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_sample_clause2338);
            rel223=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel223.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:325:62: ( DOUBLENUMBER | expr )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==DOUBLENUMBER) ) {
                int LA66_1 = input.LA(2);

                if ( (synpred115_AstPrinter()) ) {
                    alt66=1;
                }
                else if ( (true) ) {
                    alt66=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 66, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA66_0==DIV||LA66_0==DOLLARVAR||LA66_0==FALSE||LA66_0==FLOATNUMBER||LA66_0==GROUP||LA66_0==INTEGER||LA66_0==LONGINTEGER||LA66_0==MINUS||LA66_0==PERCENT||LA66_0==PLUS||LA66_0==QUOTEDSTRING||LA66_0==STAR||LA66_0==TRUE||(LA66_0 >= BAG_VAL && LA66_0 <= BIN_EXPR)||LA66_0==CAST_EXPR||LA66_0==EXPR_IN_PAREN||LA66_0==FUNC_EVAL||LA66_0==IDENTIFIER||(LA66_0 >= MAP_VAL && LA66_0 <= NEG)||LA66_0==NULL||LA66_0==TUPLE_VAL) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }
            switch (alt66) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:325:64: DOUBLENUMBER
                    {
                    _last = (CommonTree)input.LT(1);
                    DOUBLENUMBER224=(CommonTree)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_sample_clause2342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER224_tree = (CommonTree)adaptor.dupNode(DOUBLENUMBER224);


                    adaptor.addChild(root_1, DOUBLENUMBER224_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((DOUBLENUMBER224!=null?DOUBLENUMBER224.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:325:126: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_sample_clause2348);
                    expr225=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr225.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class order_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:328:1: order_clause : ^( ORDER rel order_by_clause ( func_clause )? ) ;
    public final AstPrinter.order_clause_return order_clause() throws RecognitionException {
        AstPrinter.order_clause_return retval = new AstPrinter.order_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ORDER226=null;
        AstPrinter.rel_return rel227 =null;

        AstPrinter.order_by_clause_return order_by_clause228 =null;

        AstPrinter.func_clause_return func_clause229 =null;


        CommonTree ORDER226_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:329:5: ( ^( ORDER rel order_by_clause ( func_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:329:7: ^( ORDER rel order_by_clause ( func_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            ORDER226=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_order_clause2372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER226_tree = (CommonTree)adaptor.dupNode(ORDER226);


            root_1 = (CommonTree)adaptor.becomeRoot(ORDER226_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((ORDER226!=null?ORDER226.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_order_clause2376);
            rel227=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel227.getTree());


            if ( state.backtracking==0 ) { sb.append(" BY "); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_clause_in_order_clause2388);
            order_by_clause228=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, order_by_clause228.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:331:9: ( func_clause )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==FUNC||LA67_0==FUNC_REF) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:331:11: func_clause
                    {
                    if ( state.backtracking==0 ) { sb.append(" USING "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_order_clause2402);
                    func_clause229=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause229.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:334:1: order_by_clause : ( STAR ( ASC | DESC )? | order_col ( order_col )* );
    public final AstPrinter.order_by_clause_return order_by_clause() throws RecognitionException {
        AstPrinter.order_by_clause_return retval = new AstPrinter.order_by_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR230=null;
        CommonTree ASC231=null;
        CommonTree DESC232=null;
        AstPrinter.order_col_return order_col233 =null;

        AstPrinter.order_col_return order_col234 =null;


        CommonTree STAR230_tree=null;
        CommonTree ASC231_tree=null;
        CommonTree DESC232_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:335:5: ( STAR ( ASC | DESC )? | order_col ( order_col )* )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==STAR) ) {
                alt70=1;
            }
            else if ( (LA70_0==DOLLARVAR||LA70_0==GROUP||LA70_0==COL_RANGE||LA70_0==IDENTIFIER) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:335:7: STAR ( ASC | DESC )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR230=(CommonTree)match(input,STAR,FOLLOW_STAR_in_order_by_clause2421); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR230_tree = (CommonTree)adaptor.dupNode(STAR230);


                    adaptor.addChild(root_0, STAR230_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STAR230!=null?STAR230.getText():null)); }

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:335:39: ( ASC | DESC )?
                    int alt68=3;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==ASC) ) {
                        alt68=1;
                    }
                    else if ( (LA68_0==DESC) ) {
                        alt68=2;
                    }
                    switch (alt68) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:335:41: ASC
                            {
                            _last = (CommonTree)input.LT(1);
                            ASC231=(CommonTree)match(input,ASC,FOLLOW_ASC_in_order_by_clause2427); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASC231_tree = (CommonTree)adaptor.dupNode(ASC231);


                            adaptor.addChild(root_0, ASC231_tree);
                            }


                            if ( state.backtracking==0 ) { sb.append(" ").append((ASC231!=null?ASC231.getText():null)); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:335:85: DESC
                            {
                            _last = (CommonTree)input.LT(1);
                            DESC232=(CommonTree)match(input,DESC,FOLLOW_DESC_in_order_by_clause2433); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DESC232_tree = (CommonTree)adaptor.dupNode(DESC232);


                            adaptor.addChild(root_0, DESC232_tree);
                            }


                            if ( state.backtracking==0 ) { sb.append(" ").append((DESC232!=null?DESC232.getText():null)); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:336:7: order_col ( order_col )*
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_order_col_in_order_by_clause2446);
                    order_col233=order_col();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, order_col233.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:336:17: ( order_col )*
                    loop69:
                    do {
                        int alt69=2;
                        int LA69_0 = input.LA(1);

                        if ( (LA69_0==DOLLARVAR||LA69_0==GROUP||LA69_0==COL_RANGE||LA69_0==IDENTIFIER) ) {
                            alt69=1;
                        }


                        switch (alt69) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:336:19: order_col
                    	    {
                    	    if ( state.backtracking==0 ) { sb.append(", "); }

                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_order_col_in_order_by_clause2452);
                    	    order_col234=order_col();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, order_col234.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:339:1: order_col : ( col_range | col_ref ) ( ASC | DESC )? ;
    public final AstPrinter.order_col_return order_col() throws RecognitionException {
        AstPrinter.order_col_return retval = new AstPrinter.order_col_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ASC237=null;
        CommonTree DESC238=null;
        AstPrinter.col_range_return col_range235 =null;

        AstPrinter.col_ref_return col_ref236 =null;


        CommonTree ASC237_tree=null;
        CommonTree DESC238_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:340:5: ( ( col_range | col_ref ) ( ASC | DESC )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:340:7: ( col_range | col_ref ) ( ASC | DESC )?
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:340:7: ( col_range | col_ref )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==COL_RANGE) ) {
                alt71=1;
            }
            else if ( (LA71_0==DOLLARVAR||LA71_0==GROUP||LA71_0==IDENTIFIER) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;

            }
            switch (alt71) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:340:8: col_range
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_order_col2469);
                    col_range235=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range235.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:340:20: col_ref
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_order_col2473);
                    col_ref236=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref236.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:340:29: ( ASC | DESC )?
            int alt72=3;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==ASC) ) {
                alt72=1;
            }
            else if ( (LA72_0==DESC) ) {
                alt72=2;
            }
            switch (alt72) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:340:31: ASC
                    {
                    _last = (CommonTree)input.LT(1);
                    ASC237=(CommonTree)match(input,ASC,FOLLOW_ASC_in_order_col2478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC237_tree = (CommonTree)adaptor.dupNode(ASC237);


                    adaptor.addChild(root_0, ASC237_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((ASC237!=null?ASC237.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:340:75: DESC
                    {
                    _last = (CommonTree)input.LT(1);
                    DESC238=(CommonTree)match(input,DESC,FOLLOW_DESC_in_order_col2484); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC238_tree = (CommonTree)adaptor.dupNode(DESC238);


                    adaptor.addChild(root_0, DESC238_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((DESC238!=null?DESC238.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:343:1: distinct_clause : ^( DISTINCT rel ( partition_clause )? ) ;
    public final AstPrinter.distinct_clause_return distinct_clause() throws RecognitionException {
        AstPrinter.distinct_clause_return retval = new AstPrinter.distinct_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DISTINCT239=null;
        AstPrinter.rel_return rel240 =null;

        AstPrinter.partition_clause_return partition_clause241 =null;


        CommonTree DISTINCT239_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:344:5: ( ^( DISTINCT rel ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:344:7: ^( DISTINCT rel ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DISTINCT239=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause2509); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT239_tree = (CommonTree)adaptor.dupNode(DISTINCT239);


            root_1 = (CommonTree)adaptor.becomeRoot(DISTINCT239_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((DISTINCT239!=null?DISTINCT239.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_distinct_clause2513);
            rel240=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel240.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:344:66: ( partition_clause )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==PARTITION) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:344:66: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause2515);
                    partition_clause241=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause241.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:347:1: partition_clause : ^( PARTITION func_name ) ;
    public final AstPrinter.partition_clause_return partition_clause() throws RecognitionException {
        AstPrinter.partition_clause_return retval = new AstPrinter.partition_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PARTITION242=null;
        AstPrinter.func_name_return func_name243 =null;


        CommonTree PARTITION242_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:348:5: ( ^( PARTITION func_name ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:348:7: ^( PARTITION func_name )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PARTITION242=(CommonTree)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause2534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION242_tree = (CommonTree)adaptor.dupNode(PARTITION242);


            root_1 = (CommonTree)adaptor.becomeRoot(PARTITION242_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((PARTITION242!=null?PARTITION242.getText():null)).append(" BY "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_func_name_in_partition_clause2538);
            func_name243=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, func_name243.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class cross_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:351:1: cross_clause : ^( CROSS rel_list ( partition_clause )? ) ;
    public final AstPrinter.cross_clause_return cross_clause() throws RecognitionException {
        AstPrinter.cross_clause_return retval = new AstPrinter.cross_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CROSS244=null;
        AstPrinter.rel_list_return rel_list245 =null;

        AstPrinter.partition_clause_return partition_clause246 =null;


        CommonTree CROSS244_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:352:5: ( ^( CROSS rel_list ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:352:7: ^( CROSS rel_list ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CROSS244=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_cross_clause2560); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS244_tree = (CommonTree)adaptor.dupNode(CROSS244);


            root_1 = (CommonTree)adaptor.becomeRoot(CROSS244_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((CROSS244!=null?CROSS244.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_list_in_cross_clause2564);
            rel_list245=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel_list245.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:352:65: ( partition_clause )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==PARTITION) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:352:65: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_cross_clause2566);
                    partition_clause246=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause246.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class rel_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:355:1: rel_list : rel ( rel )* ;
    public final AstPrinter.rel_list_return rel_list() throws RecognitionException {
        AstPrinter.rel_list_return retval = new AstPrinter.rel_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.rel_return rel247 =null;

        AstPrinter.rel_return rel248 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:356:5: ( rel ( rel )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:356:7: rel ( rel )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_rel_list2587);
            rel247=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, rel247.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:356:11: ( rel )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COGROUP||LA75_0==CROSS||LA75_0==DEFINE||LA75_0==DISTINCT||LA75_0==FILTER||LA75_0==FOREACH||LA75_0==GROUP||LA75_0==JOIN||(LA75_0 >= LIMIT && LA75_0 <= LOAD)||LA75_0==MAPREDUCE||LA75_0==ORDER||LA75_0==SAMPLE||LA75_0==SPLIT||(LA75_0 >= STORE && LA75_0 <= STREAM)||LA75_0==UNION||LA75_0==IDENTIFIER) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:356:13: rel
            	    {
            	    if ( state.backtracking==0 ) { sb.append(", "); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_rel_in_rel_list2593);
            	    rel248=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, rel248.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    public static class join_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:359:1: join_clause : ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? ) ;
    public final AstPrinter.join_clause_return join_clause() throws RecognitionException {
        AstPrinter.join_clause_return retval = new AstPrinter.join_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree JOIN249=null;
        AstPrinter.join_sub_clause_return join_sub_clause250 =null;

        AstPrinter.join_type_return join_type251 =null;

        AstPrinter.partition_clause_return partition_clause252 =null;


        CommonTree JOIN249_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:360:5: ( ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:360:7: ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            JOIN249=(CommonTree)match(input,JOIN,FOLLOW_JOIN_in_join_clause2610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN249_tree = (CommonTree)adaptor.dupNode(JOIN249);


            root_1 = (CommonTree)adaptor.becomeRoot(JOIN249_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((JOIN249!=null?JOIN249.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_join_sub_clause_in_join_clause2614);
            join_sub_clause250=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, join_sub_clause250.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:360:70: ( join_type )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==QUOTEDSTRING) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:360:72: join_type
                    {
                    if ( state.backtracking==0 ) { sb.append(" USING "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_type_in_join_clause2620);
                    join_type251=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, join_type251.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:361:5: ( partition_clause )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==PARTITION) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:361:7: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_join_clause2632);
                    partition_clause252=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause252.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:364:1: join_type : QUOTEDSTRING ;
    public final AstPrinter.join_type_return join_type() throws RecognitionException {
        AstPrinter.join_type_return retval = new AstPrinter.join_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING253=null;

        CommonTree QUOTEDSTRING253_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:364:11: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:364:13: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING253=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type2646); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING253_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING253);


            adaptor.addChild(root_0, QUOTEDSTRING253_tree);
            }


            if ( state.backtracking==0 ) { sb.append((QUOTEDSTRING253!=null?QUOTEDSTRING253.getText():null)); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:367:1: join_sub_clause : ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item | join_item ( join_item )* );
    public final AstPrinter.join_sub_clause_return join_sub_clause() throws RecognitionException {
        AstPrinter.join_sub_clause_return retval = new AstPrinter.join_sub_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LEFT255=null;
        CommonTree RIGHT256=null;
        CommonTree FULL257=null;
        CommonTree OUTER258=null;
        AstPrinter.join_item_return join_item254 =null;

        AstPrinter.join_item_return join_item259 =null;

        AstPrinter.join_item_return join_item260 =null;

        AstPrinter.join_item_return join_item261 =null;


        CommonTree LEFT255_tree=null;
        CommonTree RIGHT256_tree=null;
        CommonTree FULL257_tree=null;
        CommonTree OUTER258_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:368:5: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item | join_item ( join_item )* )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==JOIN_ITEM) ) {
                int LA81_1 = input.LA(2);

                if ( (synpred132_AstPrinter()) ) {
                    alt81=1;
                }
                else if ( (true) ) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:368:7: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_item_in_join_sub_clause2661);
                    join_item254=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_item254.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:368:17: ( LEFT | RIGHT | FULL )
                    int alt78=3;
                    switch ( input.LA(1) ) {
                    case LEFT:
                        {
                        alt78=1;
                        }
                        break;
                    case RIGHT:
                        {
                        alt78=2;
                        }
                        break;
                    case FULL:
                        {
                        alt78=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 78, 0, input);

                        throw nvae;

                    }

                    switch (alt78) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:368:19: LEFT
                            {
                            _last = (CommonTree)input.LT(1);
                            LEFT255=(CommonTree)match(input,LEFT,FOLLOW_LEFT_in_join_sub_clause2665); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LEFT255_tree = (CommonTree)adaptor.dupNode(LEFT255);


                            adaptor.addChild(root_0, LEFT255_tree);
                            }


                            if ( state.backtracking==0 ) { sb.append(" ").append((LEFT255!=null?LEFT255.getText():null)); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:369:16: RIGHT
                            {
                            _last = (CommonTree)input.LT(1);
                            RIGHT256=(CommonTree)match(input,RIGHT,FOLLOW_RIGHT_in_join_sub_clause2684); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RIGHT256_tree = (CommonTree)adaptor.dupNode(RIGHT256);


                            adaptor.addChild(root_0, RIGHT256_tree);
                            }


                            if ( state.backtracking==0 ) { sb.append(" ").append((RIGHT256!=null?RIGHT256.getText():null)); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:370:16: FULL
                            {
                            _last = (CommonTree)input.LT(1);
                            FULL257=(CommonTree)match(input,FULL,FOLLOW_FULL_in_join_sub_clause2703); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            FULL257_tree = (CommonTree)adaptor.dupNode(FULL257);


                            adaptor.addChild(root_0, FULL257_tree);
                            }


                            if ( state.backtracking==0 ) { sb.append(" ").append((FULL257!=null?FULL257.getText():null)); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:371:16: ( OUTER )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==OUTER) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:371:17: OUTER
                            {
                            _last = (CommonTree)input.LT(1);
                            OUTER258=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause2723); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER258_tree = (CommonTree)adaptor.dupNode(OUTER258);


                            adaptor.addChild(root_0, OUTER258_tree);
                            }


                            if ( state.backtracking==0 ) { sb.append(" ").append((OUTER258!=null?OUTER258.getText():null)); }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { sb.append(", "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_item_in_join_sub_clause2732);
                    join_item259=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_item259.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:372:7: join_item ( join_item )*
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_item_in_join_sub_clause2740);
                    join_item260=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_item260.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:372:17: ( join_item )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==JOIN_ITEM) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:372:19: join_item
                    	    {
                    	    if ( state.backtracking==0 ) { sb.append(", "); }

                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_join_item_in_join_sub_clause2746);
                    	    join_item261=join_item();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, join_item261.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:375:1: join_item : ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final AstPrinter.join_item_return join_item() throws RecognitionException {
        AstPrinter.join_item_return retval = new AstPrinter.join_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree JOIN_ITEM262=null;
        AstPrinter.rel_return rel263 =null;

        AstPrinter.join_group_by_clause_return join_group_by_clause264 =null;


        CommonTree JOIN_ITEM262_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:376:5: ( ^( JOIN_ITEM rel join_group_by_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:376:7: ^( JOIN_ITEM rel join_group_by_clause )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            JOIN_ITEM262=(CommonTree)match(input,JOIN_ITEM,FOLLOW_JOIN_ITEM_in_join_item2764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN_ITEM262_tree = (CommonTree)adaptor.dupNode(JOIN_ITEM262);


            root_1 = (CommonTree)adaptor.becomeRoot(JOIN_ITEM262_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_join_item2766);
            rel263=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel263.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_join_group_by_clause_in_join_item2768);
            join_group_by_clause264=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, join_group_by_clause264.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:379:1: join_group_by_clause : ^( BY join_group_by_expr ( join_group_by_expr )* ) ;
    public final AstPrinter.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        AstPrinter.join_group_by_clause_return retval = new AstPrinter.join_group_by_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BY265=null;
        AstPrinter.join_group_by_expr_return join_group_by_expr266 =null;

        AstPrinter.join_group_by_expr_return join_group_by_expr267 =null;


        CommonTree BY265_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:380:5: ( ^( BY join_group_by_expr ( join_group_by_expr )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:380:7: ^( BY join_group_by_expr ( join_group_by_expr )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BY265=(CommonTree)match(input,BY,FOLLOW_BY_in_join_group_by_clause2785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY265_tree = (CommonTree)adaptor.dupNode(BY265);


            root_1 = (CommonTree)adaptor.becomeRoot(BY265_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((BY265!=null?BY265.getText():null)).append(" ("); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_clause2794);
            join_group_by_expr266=join_group_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, join_group_by_expr266.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:381:24: ( join_group_by_expr )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==DIV||LA82_0==DOLLARVAR||LA82_0==DOUBLENUMBER||LA82_0==FALSE||LA82_0==FLOATNUMBER||LA82_0==GROUP||LA82_0==INTEGER||LA82_0==LONGINTEGER||LA82_0==MINUS||LA82_0==PERCENT||LA82_0==PLUS||LA82_0==QUOTEDSTRING||LA82_0==STAR||LA82_0==TRUE||(LA82_0 >= BAG_VAL && LA82_0 <= BIN_EXPR)||(LA82_0 >= CAST_EXPR && LA82_0 <= EXPR_IN_PAREN)||LA82_0==FUNC_EVAL||LA82_0==IDENTIFIER||(LA82_0 >= MAP_VAL && LA82_0 <= NEG)||LA82_0==NULL||LA82_0==TUPLE_VAL) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:381:26: join_group_by_expr
            	    {
            	    if ( state.backtracking==0 ) { sb.append(", "); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_clause2800);
            	    join_group_by_expr267=join_group_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, join_group_by_expr267.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            if ( state.backtracking==0 ) { sb.append(")"); }

            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class join_group_by_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:384:1: join_group_by_expr : ( col_range | expr | STAR );
    public final AstPrinter.join_group_by_expr_return join_group_by_expr() throws RecognitionException {
        AstPrinter.join_group_by_expr_return retval = new AstPrinter.join_group_by_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR270=null;
        AstPrinter.col_range_return col_range268 =null;

        AstPrinter.expr_return expr269 =null;


        CommonTree STAR270_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:385:5: ( col_range | expr | STAR )
            int alt83=3;
            switch ( input.LA(1) ) {
            case COL_RANGE:
                {
                alt83=1;
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt83=2;
                }
                break;
            case STAR:
                {
                int LA83_3 = input.LA(2);

                if ( (LA83_3==DOWN) ) {
                    alt83=2;
                }
                else if ( (LA83_3==EOF||LA83_3==UP||LA83_3==DIV||LA83_3==DOLLARVAR||LA83_3==DOUBLENUMBER||LA83_3==FALSE||LA83_3==FLOATNUMBER||LA83_3==GROUP||LA83_3==INTEGER||LA83_3==LONGINTEGER||LA83_3==MINUS||LA83_3==PERCENT||LA83_3==PLUS||LA83_3==QUOTEDSTRING||LA83_3==STAR||LA83_3==TRUE||(LA83_3 >= BAG_VAL && LA83_3 <= BIN_EXPR)||(LA83_3 >= CAST_EXPR && LA83_3 <= EXPR_IN_PAREN)||LA83_3==FUNC_EVAL||LA83_3==IDENTIFIER||(LA83_3 >= MAP_VAL && LA83_3 <= NEG)||LA83_3==NULL||LA83_3==TUPLE_VAL) ) {
                    alt83=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 83, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }

            switch (alt83) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:385:7: col_range
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_join_group_by_expr2821);
                    col_range268=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range268.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:385:19: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_join_group_by_expr2825);
                    expr269=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr269.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:385:26: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR270=(CommonTree)match(input,STAR,FOLLOW_STAR_in_join_group_by_expr2829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR270_tree = (CommonTree)adaptor.dupNode(STAR270);


                    adaptor.addChild(root_0, STAR270_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STAR270!=null?STAR270.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr"


    public static class union_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:388:1: union_clause : ^( UNION ( ONSCHEMA )? rel_list ) ;
    public final AstPrinter.union_clause_return union_clause() throws RecognitionException {
        AstPrinter.union_clause_return retval = new AstPrinter.union_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree UNION271=null;
        CommonTree ONSCHEMA272=null;
        AstPrinter.rel_list_return rel_list273 =null;


        CommonTree UNION271_tree=null;
        CommonTree ONSCHEMA272_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:389:5: ( ^( UNION ( ONSCHEMA )? rel_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:389:7: ^( UNION ( ONSCHEMA )? rel_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            UNION271=(CommonTree)match(input,UNION,FOLLOW_UNION_in_union_clause2847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION271_tree = (CommonTree)adaptor.dupNode(UNION271);


            root_1 = (CommonTree)adaptor.becomeRoot(UNION271_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((UNION271!=null?UNION271.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:389:56: ( ONSCHEMA )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==ONSCHEMA) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:389:57: ONSCHEMA
                    {
                    _last = (CommonTree)input.LT(1);
                    ONSCHEMA272=(CommonTree)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause2852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA272_tree = (CommonTree)adaptor.dupNode(ONSCHEMA272);


                    adaptor.addChild(root_1, ONSCHEMA272_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((ONSCHEMA272!=null?ONSCHEMA272.getText():null)).append(" "); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_list_in_union_clause2859);
            rel_list273=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel_list273.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    public static class foreach_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:392:1: foreach_clause : ^( FOREACH rel foreach_plan ) ;
    public final AstPrinter.foreach_clause_return foreach_clause() throws RecognitionException {
        AstPrinter.foreach_clause_return retval = new AstPrinter.foreach_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH274=null;
        AstPrinter.rel_return rel275 =null;

        AstPrinter.foreach_plan_return foreach_plan276 =null;


        CommonTree FOREACH274_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:393:5: ( ^( FOREACH rel foreach_plan ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:393:7: ^( FOREACH rel foreach_plan )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FOREACH274=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause2881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH274_tree = (CommonTree)adaptor.dupNode(FOREACH274);


            root_1 = (CommonTree)adaptor.becomeRoot(FOREACH274_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((FOREACH274!=null?FOREACH274.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_foreach_clause2885);
            rel275=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel275.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_foreach_plan_in_foreach_clause2887);
            foreach_plan276=foreach_plan();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, foreach_plan276.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_clause"


    public static class foreach_plan_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:396:1: foreach_plan : ( ^( FOREACH_PLAN_SIMPLE generate_clause ) | ^( FOREACH_PLAN_COMPLEX nested_blk ) );
    public final AstPrinter.foreach_plan_return foreach_plan() throws RecognitionException {
        AstPrinter.foreach_plan_return retval = new AstPrinter.foreach_plan_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH_PLAN_SIMPLE277=null;
        CommonTree FOREACH_PLAN_COMPLEX279=null;
        AstPrinter.generate_clause_return generate_clause278 =null;

        AstPrinter.nested_blk_return nested_blk280 =null;


        CommonTree FOREACH_PLAN_SIMPLE277_tree=null;
        CommonTree FOREACH_PLAN_COMPLEX279_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:397:5: ( ^( FOREACH_PLAN_SIMPLE generate_clause ) | ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==FOREACH_PLAN_SIMPLE) ) {
                alt85=1;
            }
            else if ( (LA85_0==FOREACH_PLAN_COMPLEX) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:397:7: ^( FOREACH_PLAN_SIMPLE generate_clause )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FOREACH_PLAN_SIMPLE277=(CommonTree)match(input,FOREACH_PLAN_SIMPLE,FOLLOW_FOREACH_PLAN_SIMPLE_in_foreach_plan2909); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH_PLAN_SIMPLE277_tree = (CommonTree)adaptor.dupNode(FOREACH_PLAN_SIMPLE277);


                    root_1 = (CommonTree)adaptor.becomeRoot(FOREACH_PLAN_SIMPLE277_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_generate_clause_in_foreach_plan2911);
                    generate_clause278=generate_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, generate_clause278.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:398:7: ^( FOREACH_PLAN_COMPLEX nested_blk )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FOREACH_PLAN_COMPLEX279=(CommonTree)match(input,FOREACH_PLAN_COMPLEX,FOLLOW_FOREACH_PLAN_COMPLEX_in_foreach_plan2923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH_PLAN_COMPLEX279_tree = (CommonTree)adaptor.dupNode(FOREACH_PLAN_COMPLEX279);


                    root_1 = (CommonTree)adaptor.becomeRoot(FOREACH_PLAN_COMPLEX279_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_blk_in_foreach_plan2925);
                    nested_blk280=nested_blk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, nested_blk280.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan"


    public static class nested_blk_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:401:1: nested_blk : ( nested_command )* generate_clause ;
    public final AstPrinter.nested_blk_return nested_blk() throws RecognitionException {
        AstPrinter.nested_blk_return retval = new AstPrinter.nested_blk_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.nested_command_return nested_command281 =null;

        AstPrinter.generate_clause_return generate_clause282 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:402:5: ( ( nested_command )* generate_clause )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:402:7: ( nested_command )* generate_clause
            {
            root_0 = (CommonTree)adaptor.nil();


            if ( state.backtracking==0 ) { sb.append(" { "); }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:402:29: ( nested_command )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( ((LA86_0 >= NESTED_CMD && LA86_0 <= NESTED_CMD_ASSI)) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:402:30: nested_command
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_command_in_nested_blk2943);
            	    nested_command281=nested_command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_command281.getTree());


            	    if ( state.backtracking==0 ) { sb.append("; "); }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_generate_clause_in_nested_blk2950);
            generate_clause282=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, generate_clause282.getTree());


            if ( state.backtracking==0 ) { sb.append("; } "); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class generate_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:405:1: generate_clause : ^( GENERATE flatten_generated_item ( flatten_generated_item )* ) ;
    public final AstPrinter.generate_clause_return generate_clause() throws RecognitionException {
        AstPrinter.generate_clause_return retval = new AstPrinter.generate_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GENERATE283=null;
        AstPrinter.flatten_generated_item_return flatten_generated_item284 =null;

        AstPrinter.flatten_generated_item_return flatten_generated_item285 =null;


        CommonTree GENERATE283_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:406:5: ( ^( GENERATE flatten_generated_item ( flatten_generated_item )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:406:7: ^( GENERATE flatten_generated_item ( flatten_generated_item )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            GENERATE283=(CommonTree)match(input,GENERATE,FOLLOW_GENERATE_in_generate_clause2968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GENERATE283_tree = (CommonTree)adaptor.dupNode(GENERATE283);


            root_1 = (CommonTree)adaptor.becomeRoot(GENERATE283_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append(" ").append((GENERATE283!=null?GENERATE283.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_flatten_generated_item_in_generate_clause2980);
            flatten_generated_item284=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, flatten_generated_item284.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:407:32: ( flatten_generated_item )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==DIV||LA87_0==DOLLARVAR||LA87_0==DOUBLENUMBER||LA87_0==FALSE||LA87_0==FLATTEN||LA87_0==FLOATNUMBER||LA87_0==GROUP||LA87_0==INTEGER||LA87_0==LONGINTEGER||LA87_0==MINUS||LA87_0==PERCENT||LA87_0==PLUS||LA87_0==QUOTEDSTRING||LA87_0==STAR||LA87_0==TRUE||(LA87_0 >= BAG_VAL && LA87_0 <= BIN_EXPR)||(LA87_0 >= CAST_EXPR && LA87_0 <= EXPR_IN_PAREN)||LA87_0==FUNC_EVAL||LA87_0==IDENTIFIER||(LA87_0 >= MAP_VAL && LA87_0 <= NEG)||LA87_0==NULL||LA87_0==TUPLE_VAL) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:407:34: flatten_generated_item
            	    {
            	    if ( state.backtracking==0 ) { sb.append(", "); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_flatten_generated_item_in_generate_clause2986);
            	    flatten_generated_item285=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, flatten_generated_item285.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generate_clause"


    public static class nested_command_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:410:1: nested_command : ( ^( NESTED_CMD IDENTIFIER nested_op ) | ^( NESTED_CMD_ASSI IDENTIFIER expr ) );
    public final AstPrinter.nested_command_return nested_command() throws RecognitionException {
        AstPrinter.nested_command_return retval = new AstPrinter.nested_command_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NESTED_CMD286=null;
        CommonTree IDENTIFIER287=null;
        CommonTree NESTED_CMD_ASSI289=null;
        CommonTree IDENTIFIER290=null;
        AstPrinter.nested_op_return nested_op288 =null;

        AstPrinter.expr_return expr291 =null;


        CommonTree NESTED_CMD286_tree=null;
        CommonTree IDENTIFIER287_tree=null;
        CommonTree NESTED_CMD_ASSI289_tree=null;
        CommonTree IDENTIFIER290_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:411:5: ( ^( NESTED_CMD IDENTIFIER nested_op ) | ^( NESTED_CMD_ASSI IDENTIFIER expr ) )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==NESTED_CMD) ) {
                alt88=1;
            }
            else if ( (LA88_0==NESTED_CMD_ASSI) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }
            switch (alt88) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:411:7: ^( NESTED_CMD IDENTIFIER nested_op )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NESTED_CMD286=(CommonTree)match(input,NESTED_CMD,FOLLOW_NESTED_CMD_in_nested_command3009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_CMD286_tree = (CommonTree)adaptor.dupNode(NESTED_CMD286);


                    root_1 = (CommonTree)adaptor.becomeRoot(NESTED_CMD286_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER287=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_nested_command3011); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER287_tree = (CommonTree)adaptor.dupNode(IDENTIFIER287);


                    adaptor.addChild(root_1, IDENTIFIER287_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IDENTIFIER287!=null?IDENTIFIER287.getText():null)).append(" = "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_op_in_nested_command3015);
                    nested_op288=nested_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, nested_op288.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:412:7: ^( NESTED_CMD_ASSI IDENTIFIER expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NESTED_CMD_ASSI289=(CommonTree)match(input,NESTED_CMD_ASSI,FOLLOW_NESTED_CMD_ASSI_in_nested_command3027); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_CMD_ASSI289_tree = (CommonTree)adaptor.dupNode(NESTED_CMD_ASSI289);


                    root_1 = (CommonTree)adaptor.becomeRoot(NESTED_CMD_ASSI289_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER290=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_nested_command3029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER290_tree = (CommonTree)adaptor.dupNode(IDENTIFIER290);


                    adaptor.addChild(root_1, IDENTIFIER290_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IDENTIFIER290!=null?IDENTIFIER290.getText():null)).append(" = "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_nested_command3033);
                    expr291=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr291.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:415:1: nested_op : ( nested_proj | nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach );
    public final AstPrinter.nested_op_return nested_op() throws RecognitionException {
        AstPrinter.nested_op_return retval = new AstPrinter.nested_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.nested_proj_return nested_proj292 =null;

        AstPrinter.nested_filter_return nested_filter293 =null;

        AstPrinter.nested_sort_return nested_sort294 =null;

        AstPrinter.nested_distinct_return nested_distinct295 =null;

        AstPrinter.nested_limit_return nested_limit296 =null;

        AstPrinter.nested_cross_return nested_cross297 =null;

        AstPrinter.nested_foreach_return nested_foreach298 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:415:11: ( nested_proj | nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach )
            int alt89=7;
            switch ( input.LA(1) ) {
            case NESTED_PROJ:
                {
                alt89=1;
                }
                break;
            case FILTER:
                {
                alt89=2;
                }
                break;
            case ORDER:
                {
                alt89=3;
                }
                break;
            case DISTINCT:
                {
                alt89=4;
                }
                break;
            case LIMIT:
                {
                alt89=5;
                }
                break;
            case CROSS:
                {
                alt89=6;
                }
                break;
            case FOREACH:
                {
                alt89=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;

            }

            switch (alt89) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:415:13: nested_proj
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_proj_in_nested_op3044);
                    nested_proj292=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_proj292.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:416:13: nested_filter
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_filter_in_nested_op3058);
                    nested_filter293=nested_filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_filter293.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:417:13: nested_sort
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_sort_in_nested_op3072);
                    nested_sort294=nested_sort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_sort294.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:418:13: nested_distinct
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_distinct_in_nested_op3086);
                    nested_distinct295=nested_distinct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_distinct295.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:419:13: nested_limit
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_limit_in_nested_op3100);
                    nested_limit296=nested_limit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_limit296.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:420:13: nested_cross
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_cross_in_nested_op3114);
                    nested_cross297=nested_cross();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_cross297.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:421:13: nested_foreach
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_foreach_in_nested_op3128);
                    nested_foreach298=nested_foreach();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_foreach298.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:424:1: nested_proj : ^( NESTED_PROJ col_ref col_ref ( col_ref )* ) ;
    public final AstPrinter.nested_proj_return nested_proj() throws RecognitionException {
        AstPrinter.nested_proj_return retval = new AstPrinter.nested_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NESTED_PROJ299=null;
        AstPrinter.col_ref_return col_ref300 =null;

        AstPrinter.col_ref_return col_ref301 =null;

        AstPrinter.col_ref_return col_ref302 =null;


        CommonTree NESTED_PROJ299_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:425:5: ( ^( NESTED_PROJ col_ref col_ref ( col_ref )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:425:7: ^( NESTED_PROJ col_ref col_ref ( col_ref )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            NESTED_PROJ299=(CommonTree)match(input,NESTED_PROJ,FOLLOW_NESTED_PROJ_in_nested_proj3144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NESTED_PROJ299_tree = (CommonTree)adaptor.dupNode(NESTED_PROJ299);


            root_1 = (CommonTree)adaptor.becomeRoot(NESTED_PROJ299_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_col_ref_in_nested_proj3146);
            col_ref300=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, col_ref300.getTree());


            if ( state.backtracking==0 ) { sb.append(".("); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_col_ref_in_nested_proj3150);
            col_ref301=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, col_ref301.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:425:59: ( col_ref )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==DOLLARVAR||LA90_0==GROUP||LA90_0==IDENTIFIER) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:425:61: col_ref
            	    {
            	    if ( state.backtracking==0 ) { sb.append(", "); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_col_ref_in_nested_proj3156);
            	    col_ref302=col_ref();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, col_ref302.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            if ( state.backtracking==0 ) { sb.append(")"); }

            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class nested_filter_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:428:1: nested_filter : ^( FILTER nested_op_input cond ) ;
    public final AstPrinter.nested_filter_return nested_filter() throws RecognitionException {
        AstPrinter.nested_filter_return retval = new AstPrinter.nested_filter_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FILTER303=null;
        AstPrinter.nested_op_input_return nested_op_input304 =null;

        AstPrinter.cond_return cond305 =null;


        CommonTree FILTER303_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:429:5: ( ^( FILTER nested_op_input cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:429:7: ^( FILTER nested_op_input cond )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FILTER303=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_nested_filter3181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER303_tree = (CommonTree)adaptor.dupNode(FILTER303);


            root_1 = (CommonTree)adaptor.becomeRoot(FILTER303_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((FILTER303!=null?FILTER303.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_filter3185);
            nested_op_input304=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input304.getTree());


            if ( state.backtracking==0 ) { sb.append(" BY "); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_nested_filter3189);
            cond305=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond305.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:432:1: nested_sort : ^( ORDER nested_op_input order_by_clause ( func_clause )? ) ;
    public final AstPrinter.nested_sort_return nested_sort() throws RecognitionException {
        AstPrinter.nested_sort_return retval = new AstPrinter.nested_sort_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ORDER306=null;
        AstPrinter.nested_op_input_return nested_op_input307 =null;

        AstPrinter.order_by_clause_return order_by_clause308 =null;

        AstPrinter.func_clause_return func_clause309 =null;


        CommonTree ORDER306_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:433:5: ( ^( ORDER nested_op_input order_by_clause ( func_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:433:7: ^( ORDER nested_op_input order_by_clause ( func_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            ORDER306=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_nested_sort3211); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER306_tree = (CommonTree)adaptor.dupNode(ORDER306);


            root_1 = (CommonTree)adaptor.becomeRoot(ORDER306_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((ORDER306!=null?ORDER306.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_sort3215);
            nested_op_input307=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input307.getTree());


            if ( state.backtracking==0 ) { sb.append(" BY "); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_clause_in_nested_sort3227);
            order_by_clause308=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, order_by_clause308.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:434:48: ( func_clause )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==FUNC||LA91_0==FUNC_REF) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:434:50: func_clause
                    {
                    if ( state.backtracking==0 ) { sb.append(" USING "); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_nested_sort3233);
                    func_clause309=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause309.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:437:1: nested_distinct : ^( DISTINCT nested_op_input ) ;
    public final AstPrinter.nested_distinct_return nested_distinct() throws RecognitionException {
        AstPrinter.nested_distinct_return retval = new AstPrinter.nested_distinct_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DISTINCT310=null;
        AstPrinter.nested_op_input_return nested_op_input311 =null;


        CommonTree DISTINCT310_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:438:5: ( ^( DISTINCT nested_op_input ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:438:7: ^( DISTINCT nested_op_input )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DISTINCT310=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct3257); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT310_tree = (CommonTree)adaptor.dupNode(DISTINCT310);


            root_1 = (CommonTree)adaptor.becomeRoot(DISTINCT310_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((DISTINCT310!=null?DISTINCT310.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_distinct3262);
            nested_op_input311=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input311.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:441:1: nested_limit : ^( LIMIT nested_op_input ( INTEGER | expr ) ) ;
    public final AstPrinter.nested_limit_return nested_limit() throws RecognitionException {
        AstPrinter.nested_limit_return retval = new AstPrinter.nested_limit_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LIMIT312=null;
        CommonTree INTEGER314=null;
        AstPrinter.nested_op_input_return nested_op_input313 =null;

        AstPrinter.expr_return expr315 =null;


        CommonTree LIMIT312_tree=null;
        CommonTree INTEGER314_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:442:5: ( ^( LIMIT nested_op_input ( INTEGER | expr ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:442:7: ^( LIMIT nested_op_input ( INTEGER | expr ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LIMIT312=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit3284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT312_tree = (CommonTree)adaptor.dupNode(LIMIT312);


            root_1 = (CommonTree)adaptor.becomeRoot(LIMIT312_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((LIMIT312!=null?LIMIT312.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_limit3289);
            nested_op_input313=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input313.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:442:73: ( INTEGER | expr )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==INTEGER) ) {
                int LA92_1 = input.LA(2);

                if ( (synpred150_AstPrinter()) ) {
                    alt92=1;
                }
                else if ( (true) ) {
                    alt92=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA92_0==DIV||LA92_0==DOLLARVAR||LA92_0==DOUBLENUMBER||LA92_0==FALSE||LA92_0==FLOATNUMBER||LA92_0==GROUP||LA92_0==LONGINTEGER||LA92_0==MINUS||LA92_0==PERCENT||LA92_0==PLUS||LA92_0==QUOTEDSTRING||LA92_0==STAR||LA92_0==TRUE||(LA92_0 >= BAG_VAL && LA92_0 <= BIN_EXPR)||LA92_0==CAST_EXPR||LA92_0==EXPR_IN_PAREN||LA92_0==FUNC_EVAL||LA92_0==IDENTIFIER||(LA92_0 >= MAP_VAL && LA92_0 <= NEG)||LA92_0==NULL||LA92_0==TUPLE_VAL) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:442:75: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER314=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit3293); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER314_tree = (CommonTree)adaptor.dupNode(INTEGER314);


                    adaptor.addChild(root_1, INTEGER314_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((INTEGER314!=null?INTEGER314.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:442:127: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_nested_limit3299);
                    expr315=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr315.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:445:1: nested_cross : ^( CROSS nested_op_input_list ) ;
    public final AstPrinter.nested_cross_return nested_cross() throws RecognitionException {
        AstPrinter.nested_cross_return retval = new AstPrinter.nested_cross_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CROSS316=null;
        AstPrinter.nested_op_input_list_return nested_op_input_list317 =null;


        CommonTree CROSS316_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:446:5: ( ^( CROSS nested_op_input_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:446:7: ^( CROSS nested_op_input_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CROSS316=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_nested_cross3318); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS316_tree = (CommonTree)adaptor.dupNode(CROSS316);


            root_1 = (CommonTree)adaptor.becomeRoot(CROSS316_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((CROSS316!=null?CROSS316.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross3323);
            nested_op_input_list317=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input_list317.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    public static class nested_foreach_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:449:1: nested_foreach : ^( FOREACH nested_op_input generate_clause ) ;
    public final AstPrinter.nested_foreach_return nested_foreach() throws RecognitionException {
        AstPrinter.nested_foreach_return retval = new AstPrinter.nested_foreach_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH318=null;
        AstPrinter.nested_op_input_return nested_op_input319 =null;

        AstPrinter.generate_clause_return generate_clause320 =null;


        CommonTree FOREACH318_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:450:2: ( ^( FOREACH nested_op_input generate_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:450:4: ^( FOREACH nested_op_input generate_clause )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FOREACH318=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach3337); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH318_tree = (CommonTree)adaptor.dupNode(FOREACH318);


            root_1 = (CommonTree)adaptor.becomeRoot(FOREACH318_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((FOREACH318!=null?FOREACH318.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_foreach3342);
            nested_op_input319=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input319.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_generate_clause_in_nested_foreach3344);
            generate_clause320=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, generate_clause320.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class nested_op_input_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:453:1: nested_op_input : ( col_ref | nested_proj );
    public final AstPrinter.nested_op_input_return nested_op_input() throws RecognitionException {
        AstPrinter.nested_op_input_return retval = new AstPrinter.nested_op_input_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.col_ref_return col_ref321 =null;

        AstPrinter.nested_proj_return nested_proj322 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:453:17: ( col_ref | nested_proj )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==DOLLARVAR||LA93_0==GROUP||LA93_0==IDENTIFIER) ) {
                alt93=1;
            }
            else if ( (LA93_0==NESTED_PROJ) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:453:19: col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_nested_op_input3355);
                    col_ref321=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref321.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:453:29: nested_proj
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_proj_in_nested_op_input3359);
                    nested_proj322=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_proj322.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class nested_op_input_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:456:1: nested_op_input_list : nested_op_input ( nested_op_input )* ;
    public final AstPrinter.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        AstPrinter.nested_op_input_list_return retval = new AstPrinter.nested_op_input_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.nested_op_input_return nested_op_input323 =null;

        AstPrinter.nested_op_input_return nested_op_input324 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:457:5: ( nested_op_input ( nested_op_input )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:457:7: nested_op_input ( nested_op_input )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list3373);
            nested_op_input323=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_op_input323.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:457:23: ( nested_op_input )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==DOLLARVAR||LA94_0==GROUP||LA94_0==IDENTIFIER||LA94_0==NESTED_PROJ) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:457:25: nested_op_input
            	    {
            	    if ( state.backtracking==0 ) { sb.append(", "); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list3379);
            	    nested_op_input324=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_op_input324.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class stream_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:460:1: stream_clause : ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? ) ;
    public final AstPrinter.stream_clause_return stream_clause() throws RecognitionException {
        AstPrinter.stream_clause_return retval = new AstPrinter.stream_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STREAM325=null;
        CommonTree EXECCOMMAND327=null;
        CommonTree IDENTIFIER328=null;
        AstPrinter.rel_return rel326 =null;

        AstPrinter.as_clause_return as_clause329 =null;


        CommonTree STREAM325_tree=null;
        CommonTree EXECCOMMAND327_tree=null;
        CommonTree IDENTIFIER328_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:461:5: ( ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:461:7: ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STREAM325=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_stream_clause3397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM325_tree = (CommonTree)adaptor.dupNode(STREAM325);


            root_1 = (CommonTree)adaptor.becomeRoot(STREAM325_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((STREAM325!=null?STREAM325.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_stream_clause3401);
            rel326=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel326.getTree());


            if ( state.backtracking==0 ) { sb.append(" THROUGH "); }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:462:9: ( EXECCOMMAND | IDENTIFIER )
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==EXECCOMMAND) ) {
                alt95=1;
            }
            else if ( (LA95_0==IDENTIFIER) ) {
                alt95=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }
            switch (alt95) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:462:11: EXECCOMMAND
                    {
                    _last = (CommonTree)input.LT(1);
                    EXECCOMMAND327=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_stream_clause3415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND327_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND327);


                    adaptor.addChild(root_1, EXECCOMMAND327_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((EXECCOMMAND327!=null?EXECCOMMAND327.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:463:11: IDENTIFIER
                    {
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER328=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_stream_clause3429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER328_tree = (CommonTree)adaptor.dupNode(IDENTIFIER328);


                    adaptor.addChild(root_1, IDENTIFIER328_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IDENTIFIER328!=null?IDENTIFIER328.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:463:57: ( as_clause )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==AS) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:463:57: as_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_as_clause_in_stream_clause3435);
                    as_clause329=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, as_clause329.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:466:1: mr_clause : ^( MAPREDUCE QUOTEDSTRING ( path_list )? store_clause load_clause ( EXECCOMMAND )? ) ;
    public final AstPrinter.mr_clause_return mr_clause() throws RecognitionException {
        AstPrinter.mr_clause_return retval = new AstPrinter.mr_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAPREDUCE330=null;
        CommonTree QUOTEDSTRING331=null;
        CommonTree EXECCOMMAND335=null;
        AstPrinter.path_list_return path_list332 =null;

        AstPrinter.store_clause_return store_clause333 =null;

        AstPrinter.load_clause_return load_clause334 =null;


        CommonTree MAPREDUCE330_tree=null;
        CommonTree QUOTEDSTRING331_tree=null;
        CommonTree EXECCOMMAND335_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:467:5: ( ^( MAPREDUCE QUOTEDSTRING ( path_list )? store_clause load_clause ( EXECCOMMAND )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:467:7: ^( MAPREDUCE QUOTEDSTRING ( path_list )? store_clause load_clause ( EXECCOMMAND )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAPREDUCE330=(CommonTree)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause3454); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE330_tree = (CommonTree)adaptor.dupNode(MAPREDUCE330);


            root_1 = (CommonTree)adaptor.becomeRoot(MAPREDUCE330_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING331=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause3456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING331_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING331);


            adaptor.addChild(root_1, QUOTEDSTRING331_tree);
            }


            if ( state.backtracking==0 ) { sb.append((MAPREDUCE330!=null?MAPREDUCE330.getText():null)).append(" ").append((QUOTEDSTRING331!=null?QUOTEDSTRING331.getText():null)).append(" "); }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:468:9: ( path_list )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==QUOTEDSTRING) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:468:10: path_list
                    {
                    if ( state.backtracking==0 ) { sb.append(" ("); }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_path_list_in_mr_clause3471);
                    path_list332=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, path_list332.getTree());


                    if ( state.backtracking==0 ) { sb.append(") "); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_store_clause_in_mr_clause3478);
            store_clause333=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, store_clause333.getTree());


            if ( state.backtracking==0 ) { sb.append(" "); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_load_clause_in_mr_clause3482);
            load_clause334=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, load_clause334.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:469:9: ( EXECCOMMAND )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==EXECCOMMAND) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:469:10: EXECCOMMAND
                    {
                    _last = (CommonTree)input.LT(1);
                    EXECCOMMAND335=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause3493); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND335_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND335);


                    adaptor.addChild(root_1, EXECCOMMAND335_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append(" ").append((EXECCOMMAND335!=null?EXECCOMMAND335.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:472:1: split_clause : ^( SPLIT rel split_branch ( split_branch )* ( split_otherwise )? ) ;
    public final AstPrinter.split_clause_return split_clause() throws RecognitionException {
        AstPrinter.split_clause_return retval = new AstPrinter.split_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SPLIT336=null;
        AstPrinter.rel_return rel337 =null;

        AstPrinter.split_branch_return split_branch338 =null;

        AstPrinter.split_branch_return split_branch339 =null;

        AstPrinter.split_otherwise_return split_otherwise340 =null;


        CommonTree SPLIT336_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:473:5: ( ^( SPLIT rel split_branch ( split_branch )* ( split_otherwise )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:473:7: ^( SPLIT rel split_branch ( split_branch )* ( split_otherwise )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SPLIT336=(CommonTree)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause3516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT336_tree = (CommonTree)adaptor.dupNode(SPLIT336);


            root_1 = (CommonTree)adaptor.becomeRoot(SPLIT336_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((SPLIT336!=null?SPLIT336.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_split_clause3529);
            rel337=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel337.getTree());


            if ( state.backtracking==0 ) { sb.append(" INTO "); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_split_branch_in_split_clause3533);
            split_branch338=split_branch();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, split_branch338.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:474:51: ( split_branch )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==SPLIT_BRANCH) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:474:53: split_branch
            	    {
            	    if ( state.backtracking==0 ) { sb.append(", "); }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_split_branch_in_split_clause3539);
            	    split_branch339=split_branch();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, split_branch339.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:474:90: ( split_otherwise )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==OTHERWISE) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:474:90: split_otherwise
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_otherwise_in_split_clause3544);
                    split_otherwise340=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, split_otherwise340.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:477:1: split_branch : ^( SPLIT_BRANCH alias cond ) ;
    public final AstPrinter.split_branch_return split_branch() throws RecognitionException {
        AstPrinter.split_branch_return retval = new AstPrinter.split_branch_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SPLIT_BRANCH341=null;
        AstPrinter.alias_return alias342 =null;

        AstPrinter.cond_return cond343 =null;


        CommonTree SPLIT_BRANCH341_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:478:5: ( ^( SPLIT_BRANCH alias cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:478:7: ^( SPLIT_BRANCH alias cond )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SPLIT_BRANCH341=(CommonTree)match(input,SPLIT_BRANCH,FOLLOW_SPLIT_BRANCH_in_split_branch3562); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT_BRANCH341_tree = (CommonTree)adaptor.dupNode(SPLIT_BRANCH341);


            root_1 = (CommonTree)adaptor.becomeRoot(SPLIT_BRANCH341_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_split_branch3564);
            alias342=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias342.getTree());


            if ( state.backtracking==0 ) { sb.append(" IF "); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_split_branch3568);
            cond343=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond343.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:481:1: split_otherwise : ^( OTHERWISE alias ) ;
    public final AstPrinter.split_otherwise_return split_otherwise() throws RecognitionException {
        AstPrinter.split_otherwise_return retval = new AstPrinter.split_otherwise_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OTHERWISE344=null;
        AstPrinter.alias_return alias345 =null;


        CommonTree OTHERWISE344_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:482:5: ( ^( OTHERWISE alias ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:482:7: ^( OTHERWISE alias )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            OTHERWISE344=(CommonTree)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise3590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OTHERWISE344_tree = (CommonTree)adaptor.dupNode(OTHERWISE344);


            root_1 = (CommonTree)adaptor.becomeRoot(OTHERWISE344_tree, root_1);
            }


            if ( state.backtracking==0 ) { sb.append((OTHERWISE344!=null?OTHERWISE344.getText():null)).append(" "); }

            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_split_otherwise3594);
            alias345=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias345.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class col_ref_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:485:1: col_ref : ( alias_col_ref | dollar_col_ref );
    public final AstPrinter.col_ref_return col_ref() throws RecognitionException {
        AstPrinter.col_ref_return retval = new AstPrinter.col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.alias_col_ref_return alias_col_ref346 =null;

        AstPrinter.dollar_col_ref_return dollar_col_ref347 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:485:9: ( alias_col_ref | dollar_col_ref )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==GROUP||LA101_0==IDENTIFIER) ) {
                alt101=1;
            }
            else if ( (LA101_0==DOLLARVAR) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:485:11: alias_col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_col_ref_in_col_ref3606);
                    alias_col_ref346=alias_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias_col_ref346.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:485:27: dollar_col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_dollar_col_ref_in_col_ref3610);
                    dollar_col_ref347=dollar_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dollar_col_ref347.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class alias_col_ref_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:488:1: alias_col_ref : ( GROUP | IDENTIFIER );
    public final AstPrinter.alias_col_ref_return alias_col_ref() throws RecognitionException {
        AstPrinter.alias_col_ref_return retval = new AstPrinter.alias_col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GROUP348=null;
        CommonTree IDENTIFIER349=null;

        CommonTree GROUP348_tree=null;
        CommonTree IDENTIFIER349_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:489:5: ( GROUP | IDENTIFIER )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==GROUP) ) {
                alt102=1;
            }
            else if ( (LA102_0==IDENTIFIER) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:489:7: GROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GROUP348=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_alias_col_ref3624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP348_tree = (CommonTree)adaptor.dupNode(GROUP348);


                    adaptor.addChild(root_0, GROUP348_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((GROUP348!=null?GROUP348.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:490:7: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER349=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias_col_ref3634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER349_tree = (CommonTree)adaptor.dupNode(IDENTIFIER349);


                    adaptor.addChild(root_0, IDENTIFIER349_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IDENTIFIER349!=null?IDENTIFIER349.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias_col_ref"


    public static class dollar_col_ref_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dollar_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:493:1: dollar_col_ref : DOLLARVAR ;
    public final AstPrinter.dollar_col_ref_return dollar_col_ref() throws RecognitionException {
        AstPrinter.dollar_col_ref_return retval = new AstPrinter.dollar_col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOLLARVAR350=null;

        CommonTree DOLLARVAR350_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:494:5: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:494:7: DOLLARVAR
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            DOLLARVAR350=(CommonTree)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_dollar_col_ref3650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR350_tree = (CommonTree)adaptor.dupNode(DOLLARVAR350);


            adaptor.addChild(root_0, DOLLARVAR350_tree);
            }


            if ( state.backtracking==0 ) { sb.append((DOLLARVAR350!=null?DOLLARVAR350.getText():null)); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dollar_col_ref"


    public static class const_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:497:1: const_expr : literal ;
    public final AstPrinter.const_expr_return const_expr() throws RecognitionException {
        AstPrinter.const_expr_return retval = new AstPrinter.const_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.literal_return literal351 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:497:12: ( literal )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:497:14: literal
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_literal_in_const_expr3661);
            literal351=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, literal351.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class literal_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:500:1: literal : ( scalar | map | bag | tuple );
    public final AstPrinter.literal_return literal() throws RecognitionException {
        AstPrinter.literal_return retval = new AstPrinter.literal_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AstPrinter.scalar_return scalar352 =null;

        AstPrinter.map_return map353 =null;

        AstPrinter.bag_return bag354 =null;

        AstPrinter.tuple_return tuple355 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:500:9: ( scalar | map | bag | tuple )
            int alt103=4;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case QUOTEDSTRING:
            case TRUE:
            case NULL:
                {
                alt103=1;
                }
                break;
            case MAP_VAL:
                {
                alt103=2;
                }
                break;
            case BAG_VAL:
                {
                alt103=3;
                }
                break;
            case TUPLE_VAL:
                {
                alt103=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }

            switch (alt103) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:500:11: scalar
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_scalar_in_literal3670);
                    scalar352=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, scalar352.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:500:20: map
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_in_literal3674);
                    map353=map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map353.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:500:26: bag
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_in_literal3678);
                    bag354=bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag354.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:500:32: tuple
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_in_literal3682);
                    tuple355=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple355.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class scalar_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:503:1: scalar : ( num_scalar | QUOTEDSTRING | NULL | TRUE | FALSE );
    public final AstPrinter.scalar_return scalar() throws RecognitionException {
        AstPrinter.scalar_return retval = new AstPrinter.scalar_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING357=null;
        CommonTree NULL358=null;
        CommonTree TRUE359=null;
        CommonTree FALSE360=null;
        AstPrinter.num_scalar_return num_scalar356 =null;


        CommonTree QUOTEDSTRING357_tree=null;
        CommonTree NULL358_tree=null;
        CommonTree TRUE359_tree=null;
        CommonTree FALSE360_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:503:8: ( num_scalar | QUOTEDSTRING | NULL | TRUE | FALSE )
            int alt104=5;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
                {
                alt104=1;
                }
                break;
            case QUOTEDSTRING:
                {
                alt104=2;
                }
                break;
            case NULL:
                {
                alt104=3;
                }
                break;
            case TRUE:
                {
                alt104=4;
                }
                break;
            case FALSE:
                {
                alt104=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }

            switch (alt104) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:503:10: num_scalar
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_num_scalar_in_scalar3691);
                    num_scalar356=num_scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, num_scalar356.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:504:10: QUOTEDSTRING
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    QUOTEDSTRING357=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_scalar3702); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING357_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING357);


                    adaptor.addChild(root_0, QUOTEDSTRING357_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((QUOTEDSTRING357!=null?QUOTEDSTRING357.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:505:10: NULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NULL358=(CommonTree)match(input,NULL,FOLLOW_NULL_in_scalar3715); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL358_tree = (CommonTree)adaptor.dupNode(NULL358);


                    adaptor.addChild(root_0, NULL358_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((NULL358!=null?NULL358.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:506:10: TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TRUE359=(CommonTree)match(input,TRUE,FOLLOW_TRUE_in_scalar3729); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE359_tree = (CommonTree)adaptor.dupNode(TRUE359);


                    adaptor.addChild(root_0, TRUE359_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((TRUE359!=null?TRUE359.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:507:10: FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FALSE360=(CommonTree)match(input,FALSE,FOLLOW_FALSE_in_scalar3742); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE360_tree = (CommonTree)adaptor.dupNode(FALSE360);


                    adaptor.addChild(root_0, FALSE360_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((FALSE360!=null?FALSE360.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class num_scalar_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "num_scalar"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:510:1: num_scalar : ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) ;
    public final AstPrinter.num_scalar_return num_scalar() throws RecognitionException {
        AstPrinter.num_scalar_return retval = new AstPrinter.num_scalar_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MINUS361=null;
        CommonTree INTEGER362=null;
        CommonTree LONGINTEGER363=null;
        CommonTree FLOATNUMBER364=null;
        CommonTree DOUBLENUMBER365=null;

        CommonTree MINUS361_tree=null;
        CommonTree INTEGER362_tree=null;
        CommonTree LONGINTEGER363_tree=null;
        CommonTree FLOATNUMBER364_tree=null;
        CommonTree DOUBLENUMBER365_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:510:12: ( ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:510:14: ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER )
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:510:14: ( MINUS )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==MINUS) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:510:16: MINUS
                    {
                    _last = (CommonTree)input.LT(1);
                    MINUS361=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_num_scalar3758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS361_tree = (CommonTree)adaptor.dupNode(MINUS361);


                    adaptor.addChild(root_0, MINUS361_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append( "-" ); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:511:14: ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER )
            int alt106=4;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                alt106=1;
                }
                break;
            case LONGINTEGER:
                {
                alt106=2;
                }
                break;
            case FLOATNUMBER:
                {
                alt106=3;
                }
                break;
            case DOUBLENUMBER:
                {
                alt106=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }

            switch (alt106) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:511:16: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER362=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_num_scalar3780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER362_tree = (CommonTree)adaptor.dupNode(INTEGER362);


                    adaptor.addChild(root_0, INTEGER362_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((INTEGER362!=null?INTEGER362.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:512:16: LONGINTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    LONGINTEGER363=(CommonTree)match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_num_scalar3799); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINTEGER363_tree = (CommonTree)adaptor.dupNode(LONGINTEGER363);


                    adaptor.addChild(root_0, LONGINTEGER363_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((LONGINTEGER363!=null?LONGINTEGER363.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:513:16: FLOATNUMBER
                    {
                    _last = (CommonTree)input.LT(1);
                    FLOATNUMBER364=(CommonTree)match(input,FLOATNUMBER,FOLLOW_FLOATNUMBER_in_num_scalar3818); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOATNUMBER364_tree = (CommonTree)adaptor.dupNode(FLOATNUMBER364);


                    adaptor.addChild(root_0, FLOATNUMBER364_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((FLOATNUMBER364!=null?FLOATNUMBER364.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:514:16: DOUBLENUMBER
                    {
                    _last = (CommonTree)input.LT(1);
                    DOUBLENUMBER365=(CommonTree)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_num_scalar3837); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER365_tree = (CommonTree)adaptor.dupNode(DOUBLENUMBER365);


                    adaptor.addChild(root_0, DOUBLENUMBER365_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((DOUBLENUMBER365!=null?DOUBLENUMBER365.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "num_scalar"


    public static class map_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:518:1: map : ( ^( MAP_VAL keyvalue ( keyvalue )* ) | ^( MAP_VAL ) );
    public final AstPrinter.map_return map() throws RecognitionException {
        AstPrinter.map_return retval = new AstPrinter.map_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAP_VAL366=null;
        CommonTree MAP_VAL369=null;
        AstPrinter.keyvalue_return keyvalue367 =null;

        AstPrinter.keyvalue_return keyvalue368 =null;


        CommonTree MAP_VAL366_tree=null;
        CommonTree MAP_VAL369_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:519:5: ( ^( MAP_VAL keyvalue ( keyvalue )* ) | ^( MAP_VAL ) )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==MAP_VAL) ) {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==DOWN) ) {
                    int LA108_2 = input.LA(3);

                    if ( (LA108_2==KEY_VAL_PAIR) ) {
                        alt108=1;
                    }
                    else if ( (LA108_2==UP) ) {
                        alt108=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 108, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:519:7: ^( MAP_VAL keyvalue ( keyvalue )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    MAP_VAL366=(CommonTree)match(input,MAP_VAL,FOLLOW_MAP_VAL_in_map3870); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP_VAL366_tree = (CommonTree)adaptor.dupNode(MAP_VAL366);


                    root_1 = (CommonTree)adaptor.becomeRoot(MAP_VAL366_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("["); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyvalue_in_map3874);
                    keyvalue367=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, keyvalue367.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:519:47: ( keyvalue )*
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==KEY_VAL_PAIR) ) {
                            alt107=1;
                        }


                        switch (alt107) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:519:49: keyvalue
                    	    {
                    	    if ( state.backtracking==0 ) { sb.append(", "); }

                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_keyvalue_in_map3880);
                    	    keyvalue368=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, keyvalue368.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop107;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) { sb.append("]"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:520:7: ^( MAP_VAL )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    MAP_VAL369=(CommonTree)match(input,MAP_VAL,FOLLOW_MAP_VAL_in_map3896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP_VAL369_tree = (CommonTree)adaptor.dupNode(MAP_VAL369);


                    root_1 = (CommonTree)adaptor.becomeRoot(MAP_VAL369_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("[]"); }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map"


    public static class keyvalue_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:523:1: keyvalue : ^( KEY_VAL_PAIR map_key const_expr ) ;
    public final AstPrinter.keyvalue_return keyvalue() throws RecognitionException {
        AstPrinter.keyvalue_return retval = new AstPrinter.keyvalue_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree KEY_VAL_PAIR370=null;
        AstPrinter.map_key_return map_key371 =null;

        AstPrinter.const_expr_return const_expr372 =null;


        CommonTree KEY_VAL_PAIR370_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:524:5: ( ^( KEY_VAL_PAIR map_key const_expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:524:7: ^( KEY_VAL_PAIR map_key const_expr )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            KEY_VAL_PAIR370=(CommonTree)match(input,KEY_VAL_PAIR,FOLLOW_KEY_VAL_PAIR_in_keyvalue3916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            KEY_VAL_PAIR370_tree = (CommonTree)adaptor.dupNode(KEY_VAL_PAIR370);


            root_1 = (CommonTree)adaptor.becomeRoot(KEY_VAL_PAIR370_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_map_key_in_keyvalue3918);
            map_key371=map_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, map_key371.getTree());


            if ( state.backtracking==0 ) { sb.append("#"); }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_const_expr_in_keyvalue3922);
            const_expr372=const_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, const_expr372.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class map_key_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_key"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:527:1: map_key : QUOTEDSTRING ;
    public final AstPrinter.map_key_return map_key() throws RecognitionException {
        AstPrinter.map_key_return retval = new AstPrinter.map_key_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING373=null;

        CommonTree QUOTEDSTRING373_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:527:9: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:527:11: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING373=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_map_key3937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING373_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING373);


            adaptor.addChild(root_0, QUOTEDSTRING373_tree);
            }


            if ( state.backtracking==0 ) { sb.append((QUOTEDSTRING373!=null?QUOTEDSTRING373.getText():null)); }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_key"


    public static class bag_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:530:1: bag : ( ^( BAG_VAL tuple ( tuple )* ) | ^( BAG_VAL ) );
    public final AstPrinter.bag_return bag() throws RecognitionException {
        AstPrinter.bag_return retval = new AstPrinter.bag_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_VAL374=null;
        CommonTree BAG_VAL377=null;
        AstPrinter.tuple_return tuple375 =null;

        AstPrinter.tuple_return tuple376 =null;


        CommonTree BAG_VAL374_tree=null;
        CommonTree BAG_VAL377_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:531:5: ( ^( BAG_VAL tuple ( tuple )* ) | ^( BAG_VAL ) )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==BAG_VAL) ) {
                int LA110_1 = input.LA(2);

                if ( (LA110_1==DOWN) ) {
                    int LA110_2 = input.LA(3);

                    if ( (LA110_2==TUPLE_VAL) ) {
                        alt110=1;
                    }
                    else if ( (LA110_2==UP) ) {
                        alt110=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 110, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:531:7: ^( BAG_VAL tuple ( tuple )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    BAG_VAL374=(CommonTree)match(input,BAG_VAL,FOLLOW_BAG_VAL_in_bag3955); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG_VAL374_tree = (CommonTree)adaptor.dupNode(BAG_VAL374);


                    root_1 = (CommonTree)adaptor.becomeRoot(BAG_VAL374_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("{"); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_in_bag3959);
                    tuple375=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, tuple375.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:531:44: ( tuple )*
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==TUPLE_VAL) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:531:46: tuple
                    	    {
                    	    if ( state.backtracking==0 ) { sb.append(", "); }

                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_tuple_in_bag3965);
                    	    tuple376=tuple();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, tuple376.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) { sb.append("}"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:532:7: ^( BAG_VAL )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    BAG_VAL377=(CommonTree)match(input,BAG_VAL,FOLLOW_BAG_VAL_in_bag3981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG_VAL377_tree = (CommonTree)adaptor.dupNode(BAG_VAL377);


                    root_1 = (CommonTree)adaptor.becomeRoot(BAG_VAL377_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("{}"); }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag"


    public static class tuple_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:535:1: tuple : ( ^( TUPLE_VAL literal ( literal )* ) | ^( TUPLE_VAL ) );
    public final AstPrinter.tuple_return tuple() throws RecognitionException {
        AstPrinter.tuple_return retval = new AstPrinter.tuple_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_VAL378=null;
        CommonTree TUPLE_VAL381=null;
        AstPrinter.literal_return literal379 =null;

        AstPrinter.literal_return literal380 =null;


        CommonTree TUPLE_VAL378_tree=null;
        CommonTree TUPLE_VAL381_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:536:5: ( ^( TUPLE_VAL literal ( literal )* ) | ^( TUPLE_VAL ) )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==TUPLE_VAL) ) {
                int LA112_1 = input.LA(2);

                if ( (LA112_1==DOWN) ) {
                    int LA112_2 = input.LA(3);

                    if ( (LA112_2==DOUBLENUMBER||LA112_2==FALSE||LA112_2==FLOATNUMBER||LA112_2==INTEGER||LA112_2==LONGINTEGER||LA112_2==MINUS||LA112_2==QUOTEDSTRING||LA112_2==TRUE||LA112_2==BAG_VAL||LA112_2==MAP_VAL||LA112_2==NULL||LA112_2==TUPLE_VAL) ) {
                        alt112=1;
                    }
                    else if ( (LA112_2==UP) ) {
                        alt112=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 112, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;

            }
            switch (alt112) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:536:7: ^( TUPLE_VAL literal ( literal )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    TUPLE_VAL378=(CommonTree)match(input,TUPLE_VAL,FOLLOW_TUPLE_VAL_in_tuple4001); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE_VAL378_tree = (CommonTree)adaptor.dupNode(TUPLE_VAL378);


                    root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_VAL378_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("("); }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_literal_in_tuple4005);
                    literal379=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, literal379.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:536:48: ( literal )*
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);

                        if ( (LA111_0==DOUBLENUMBER||LA111_0==FALSE||LA111_0==FLOATNUMBER||LA111_0==INTEGER||LA111_0==LONGINTEGER||LA111_0==MINUS||LA111_0==QUOTEDSTRING||LA111_0==TRUE||LA111_0==BAG_VAL||LA111_0==MAP_VAL||LA111_0==NULL||LA111_0==TUPLE_VAL) ) {
                            alt111=1;
                        }


                        switch (alt111) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:536:50: literal
                    	    {
                    	    if ( state.backtracking==0 ) { sb.append(", "); }

                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_literal_in_tuple4012);
                    	    literal380=literal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_1, literal380.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop111;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) { sb.append(")"); }

                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:537:7: ^( TUPLE_VAL )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    TUPLE_VAL381=(CommonTree)match(input,TUPLE_VAL,FOLLOW_TUPLE_VAL_in_tuple4028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE_VAL381_tree = (CommonTree)adaptor.dupNode(TUPLE_VAL381);


                    root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_VAL381_tree, root_1);
                    }


                    if ( state.backtracking==0 ) { sb.append("()"); }

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple"


    public static class eid_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:541:1: eid : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | MATCHES | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | EVAL | ASC | DESC | BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | NULL | TRUE | FALSE | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | IDENTIFIER | TOBAG | TOMAP | TOTUPLE );
    public final AstPrinter.eid_return eid() throws RecognitionException {
        AstPrinter.eid_return retval = new AstPrinter.eid_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree IMPORT383=null;
        CommonTree RETURNS384=null;
        CommonTree DEFINE385=null;
        CommonTree LOAD386=null;
        CommonTree FILTER387=null;
        CommonTree FOREACH388=null;
        CommonTree MATCHES389=null;
        CommonTree ORDER390=null;
        CommonTree DISTINCT391=null;
        CommonTree COGROUP392=null;
        CommonTree JOIN393=null;
        CommonTree CROSS394=null;
        CommonTree UNION395=null;
        CommonTree SPLIT396=null;
        CommonTree INTO397=null;
        CommonTree IF398=null;
        CommonTree ALL399=null;
        CommonTree AS400=null;
        CommonTree BY401=null;
        CommonTree USING402=null;
        CommonTree INNER403=null;
        CommonTree OUTER404=null;
        CommonTree PARALLEL405=null;
        CommonTree PARTITION406=null;
        CommonTree GROUP407=null;
        CommonTree AND408=null;
        CommonTree OR409=null;
        CommonTree NOT410=null;
        CommonTree GENERATE411=null;
        CommonTree FLATTEN412=null;
        CommonTree EVAL413=null;
        CommonTree ASC414=null;
        CommonTree DESC415=null;
        CommonTree BOOLEAN416=null;
        CommonTree INT417=null;
        CommonTree LONG418=null;
        CommonTree FLOAT419=null;
        CommonTree DOUBLE420=null;
        CommonTree CHARARRAY421=null;
        CommonTree BYTEARRAY422=null;
        CommonTree BAG423=null;
        CommonTree TUPLE424=null;
        CommonTree MAP425=null;
        CommonTree IS426=null;
        CommonTree NULL427=null;
        CommonTree TRUE428=null;
        CommonTree FALSE429=null;
        CommonTree STREAM430=null;
        CommonTree THROUGH431=null;
        CommonTree STORE432=null;
        CommonTree MAPREDUCE433=null;
        CommonTree SHIP434=null;
        CommonTree CACHE435=null;
        CommonTree INPUT436=null;
        CommonTree OUTPUT437=null;
        CommonTree STDERROR438=null;
        CommonTree STDIN439=null;
        CommonTree STDOUT440=null;
        CommonTree LIMIT441=null;
        CommonTree SAMPLE442=null;
        CommonTree LEFT443=null;
        CommonTree RIGHT444=null;
        CommonTree FULL445=null;
        CommonTree IDENTIFIER446=null;
        CommonTree TOBAG447=null;
        CommonTree TOMAP448=null;
        CommonTree TOTUPLE449=null;
        AstPrinter.rel_str_op_return rel_str_op382 =null;


        CommonTree IMPORT383_tree=null;
        CommonTree RETURNS384_tree=null;
        CommonTree DEFINE385_tree=null;
        CommonTree LOAD386_tree=null;
        CommonTree FILTER387_tree=null;
        CommonTree FOREACH388_tree=null;
        CommonTree MATCHES389_tree=null;
        CommonTree ORDER390_tree=null;
        CommonTree DISTINCT391_tree=null;
        CommonTree COGROUP392_tree=null;
        CommonTree JOIN393_tree=null;
        CommonTree CROSS394_tree=null;
        CommonTree UNION395_tree=null;
        CommonTree SPLIT396_tree=null;
        CommonTree INTO397_tree=null;
        CommonTree IF398_tree=null;
        CommonTree ALL399_tree=null;
        CommonTree AS400_tree=null;
        CommonTree BY401_tree=null;
        CommonTree USING402_tree=null;
        CommonTree INNER403_tree=null;
        CommonTree OUTER404_tree=null;
        CommonTree PARALLEL405_tree=null;
        CommonTree PARTITION406_tree=null;
        CommonTree GROUP407_tree=null;
        CommonTree AND408_tree=null;
        CommonTree OR409_tree=null;
        CommonTree NOT410_tree=null;
        CommonTree GENERATE411_tree=null;
        CommonTree FLATTEN412_tree=null;
        CommonTree EVAL413_tree=null;
        CommonTree ASC414_tree=null;
        CommonTree DESC415_tree=null;
        CommonTree BOOLEAN416_tree=null;
        CommonTree INT417_tree=null;
        CommonTree LONG418_tree=null;
        CommonTree FLOAT419_tree=null;
        CommonTree DOUBLE420_tree=null;
        CommonTree CHARARRAY421_tree=null;
        CommonTree BYTEARRAY422_tree=null;
        CommonTree BAG423_tree=null;
        CommonTree TUPLE424_tree=null;
        CommonTree MAP425_tree=null;
        CommonTree IS426_tree=null;
        CommonTree NULL427_tree=null;
        CommonTree TRUE428_tree=null;
        CommonTree FALSE429_tree=null;
        CommonTree STREAM430_tree=null;
        CommonTree THROUGH431_tree=null;
        CommonTree STORE432_tree=null;
        CommonTree MAPREDUCE433_tree=null;
        CommonTree SHIP434_tree=null;
        CommonTree CACHE435_tree=null;
        CommonTree INPUT436_tree=null;
        CommonTree OUTPUT437_tree=null;
        CommonTree STDERROR438_tree=null;
        CommonTree STDIN439_tree=null;
        CommonTree STDOUT440_tree=null;
        CommonTree LIMIT441_tree=null;
        CommonTree SAMPLE442_tree=null;
        CommonTree LEFT443_tree=null;
        CommonTree RIGHT444_tree=null;
        CommonTree FULL445_tree=null;
        CommonTree IDENTIFIER446_tree=null;
        CommonTree TOBAG447_tree=null;
        CommonTree TOMAP448_tree=null;
        CommonTree TOTUPLE449_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:541:5: ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | MATCHES | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | EVAL | ASC | DESC | BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | NULL | TRUE | FALSE | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | IDENTIFIER | TOBAG | TOMAP | TOTUPLE )
            int alt113=68;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt113=1;
                }
                break;
            case IMPORT:
                {
                alt113=2;
                }
                break;
            case RETURNS:
                {
                alt113=3;
                }
                break;
            case DEFINE:
                {
                alt113=4;
                }
                break;
            case LOAD:
                {
                alt113=5;
                }
                break;
            case FILTER:
                {
                alt113=6;
                }
                break;
            case FOREACH:
                {
                alt113=7;
                }
                break;
            case MATCHES:
                {
                alt113=8;
                }
                break;
            case ORDER:
                {
                alt113=9;
                }
                break;
            case DISTINCT:
                {
                alt113=10;
                }
                break;
            case COGROUP:
                {
                alt113=11;
                }
                break;
            case JOIN:
                {
                alt113=12;
                }
                break;
            case CROSS:
                {
                alt113=13;
                }
                break;
            case UNION:
                {
                alt113=14;
                }
                break;
            case SPLIT:
                {
                alt113=15;
                }
                break;
            case INTO:
                {
                alt113=16;
                }
                break;
            case IF:
                {
                alt113=17;
                }
                break;
            case ALL:
                {
                alt113=18;
                }
                break;
            case AS:
                {
                alt113=19;
                }
                break;
            case BY:
                {
                alt113=20;
                }
                break;
            case USING:
                {
                alt113=21;
                }
                break;
            case INNER:
                {
                alt113=22;
                }
                break;
            case OUTER:
                {
                alt113=23;
                }
                break;
            case PARALLEL:
                {
                alt113=24;
                }
                break;
            case PARTITION:
                {
                alt113=25;
                }
                break;
            case GROUP:
                {
                alt113=26;
                }
                break;
            case AND:
                {
                alt113=27;
                }
                break;
            case OR:
                {
                alt113=28;
                }
                break;
            case NOT:
                {
                alt113=29;
                }
                break;
            case GENERATE:
                {
                alt113=30;
                }
                break;
            case FLATTEN:
                {
                alt113=31;
                }
                break;
            case EVAL:
                {
                alt113=32;
                }
                break;
            case ASC:
                {
                alt113=33;
                }
                break;
            case DESC:
                {
                alt113=34;
                }
                break;
            case BOOLEAN:
                {
                alt113=35;
                }
                break;
            case INT:
                {
                alt113=36;
                }
                break;
            case LONG:
                {
                alt113=37;
                }
                break;
            case FLOAT:
                {
                alt113=38;
                }
                break;
            case DOUBLE:
                {
                alt113=39;
                }
                break;
            case CHARARRAY:
                {
                alt113=40;
                }
                break;
            case BYTEARRAY:
                {
                alt113=41;
                }
                break;
            case BAG:
                {
                alt113=42;
                }
                break;
            case TUPLE:
                {
                alt113=43;
                }
                break;
            case MAP:
                {
                alt113=44;
                }
                break;
            case IS:
                {
                alt113=45;
                }
                break;
            case NULL:
                {
                alt113=46;
                }
                break;
            case TRUE:
                {
                alt113=47;
                }
                break;
            case FALSE:
                {
                alt113=48;
                }
                break;
            case STREAM:
                {
                alt113=49;
                }
                break;
            case THROUGH:
                {
                alt113=50;
                }
                break;
            case STORE:
                {
                alt113=51;
                }
                break;
            case MAPREDUCE:
                {
                alt113=52;
                }
                break;
            case SHIP:
                {
                alt113=53;
                }
                break;
            case CACHE:
                {
                alt113=54;
                }
                break;
            case INPUT:
                {
                alt113=55;
                }
                break;
            case OUTPUT:
                {
                alt113=56;
                }
                break;
            case STDERROR:
                {
                alt113=57;
                }
                break;
            case STDIN:
                {
                alt113=58;
                }
                break;
            case STDOUT:
                {
                alt113=59;
                }
                break;
            case LIMIT:
                {
                alt113=60;
                }
                break;
            case SAMPLE:
                {
                alt113=61;
                }
                break;
            case LEFT:
                {
                alt113=62;
                }
                break;
            case RIGHT:
                {
                alt113=63;
                }
                break;
            case FULL:
                {
                alt113=64;
                }
                break;
            case IDENTIFIER:
                {
                alt113=65;
                }
                break;
            case TOBAG:
                {
                alt113=66;
                }
                break;
            case TOMAP:
                {
                alt113=67;
                }
                break;
            case TOTUPLE:
                {
                alt113=68;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }

            switch (alt113) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:541:7: rel_str_op
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_str_op_in_eid4042);
                    rel_str_op382=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_str_op382.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:542:7: IMPORT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IMPORT383=(CommonTree)match(input,IMPORT,FOLLOW_IMPORT_in_eid4050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT383_tree = (CommonTree)adaptor.dupNode(IMPORT383);


                    adaptor.addChild(root_0, IMPORT383_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IMPORT383!=null?IMPORT383.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:543:7: RETURNS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    RETURNS384=(CommonTree)match(input,RETURNS,FOLLOW_RETURNS_in_eid4063); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS384_tree = (CommonTree)adaptor.dupNode(RETURNS384);


                    adaptor.addChild(root_0, RETURNS384_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((RETURNS384!=null?RETURNS384.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:544:7: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DEFINE385=(CommonTree)match(input,DEFINE,FOLLOW_DEFINE_in_eid4075); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE385_tree = (CommonTree)adaptor.dupNode(DEFINE385);


                    adaptor.addChild(root_0, DEFINE385_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((DEFINE385!=null?DEFINE385.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:545:7: LOAD
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LOAD386=(CommonTree)match(input,LOAD,FOLLOW_LOAD_in_eid4088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD386_tree = (CommonTree)adaptor.dupNode(LOAD386);


                    adaptor.addChild(root_0, LOAD386_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((LOAD386!=null?LOAD386.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:546:7: FILTER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FILTER387=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_eid4103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER387_tree = (CommonTree)adaptor.dupNode(FILTER387);


                    adaptor.addChild(root_0, FILTER387_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((FILTER387!=null?FILTER387.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:547:7: FOREACH
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FOREACH388=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_eid4116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH388_tree = (CommonTree)adaptor.dupNode(FOREACH388);


                    adaptor.addChild(root_0, FOREACH388_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((FOREACH388!=null?FOREACH388.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:548:7: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MATCHES389=(CommonTree)match(input,MATCHES,FOLLOW_MATCHES_in_eid4128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES389_tree = (CommonTree)adaptor.dupNode(MATCHES389);


                    adaptor.addChild(root_0, MATCHES389_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((MATCHES389!=null?MATCHES389.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:549:7: ORDER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ORDER390=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_eid4140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER390_tree = (CommonTree)adaptor.dupNode(ORDER390);


                    adaptor.addChild(root_0, ORDER390_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((ORDER390!=null?ORDER390.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:550:7: DISTINCT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DISTINCT391=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid4154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT391_tree = (CommonTree)adaptor.dupNode(DISTINCT391);


                    adaptor.addChild(root_0, DISTINCT391_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((DISTINCT391!=null?DISTINCT391.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:551:7: COGROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    COGROUP392=(CommonTree)match(input,COGROUP,FOLLOW_COGROUP_in_eid4165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP392_tree = (CommonTree)adaptor.dupNode(COGROUP392);


                    adaptor.addChild(root_0, COGROUP392_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((COGROUP392!=null?COGROUP392.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:552:7: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    JOIN393=(CommonTree)match(input,JOIN,FOLLOW_JOIN_in_eid4177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN393_tree = (CommonTree)adaptor.dupNode(JOIN393);


                    adaptor.addChild(root_0, JOIN393_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((JOIN393!=null?JOIN393.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:553:7: CROSS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CROSS394=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_eid4192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS394_tree = (CommonTree)adaptor.dupNode(CROSS394);


                    adaptor.addChild(root_0, CROSS394_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((CROSS394!=null?CROSS394.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:554:7: UNION
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    UNION395=(CommonTree)match(input,UNION,FOLLOW_UNION_in_eid4206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION395_tree = (CommonTree)adaptor.dupNode(UNION395);


                    adaptor.addChild(root_0, UNION395_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((UNION395!=null?UNION395.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:555:7: SPLIT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SPLIT396=(CommonTree)match(input,SPLIT,FOLLOW_SPLIT_in_eid4220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT396_tree = (CommonTree)adaptor.dupNode(SPLIT396);


                    adaptor.addChild(root_0, SPLIT396_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((SPLIT396!=null?SPLIT396.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:556:7: INTO
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INTO397=(CommonTree)match(input,INTO,FOLLOW_INTO_in_eid4234); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO397_tree = (CommonTree)adaptor.dupNode(INTO397);


                    adaptor.addChild(root_0, INTO397_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((INTO397!=null?INTO397.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 17 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:557:7: IF
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IF398=(CommonTree)match(input,IF,FOLLOW_IF_in_eid4249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF398_tree = (CommonTree)adaptor.dupNode(IF398);


                    adaptor.addChild(root_0, IF398_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IF398!=null?IF398.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 18 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:558:7: ALL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ALL399=(CommonTree)match(input,ALL,FOLLOW_ALL_in_eid4266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL399_tree = (CommonTree)adaptor.dupNode(ALL399);


                    adaptor.addChild(root_0, ALL399_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((ALL399!=null?ALL399.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 19 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:559:7: AS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    AS400=(CommonTree)match(input,AS,FOLLOW_AS_in_eid4282); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS400_tree = (CommonTree)adaptor.dupNode(AS400);


                    adaptor.addChild(root_0, AS400_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((AS400!=null?AS400.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 20 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:560:7: BY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BY401=(CommonTree)match(input,BY,FOLLOW_BY_in_eid4299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY401_tree = (CommonTree)adaptor.dupNode(BY401);


                    adaptor.addChild(root_0, BY401_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((BY401!=null?BY401.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 21 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:561:7: USING
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    USING402=(CommonTree)match(input,USING,FOLLOW_USING_in_eid4316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING402_tree = (CommonTree)adaptor.dupNode(USING402);


                    adaptor.addChild(root_0, USING402_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((USING402!=null?USING402.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 22 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:562:7: INNER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INNER403=(CommonTree)match(input,INNER,FOLLOW_INNER_in_eid4330); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER403_tree = (CommonTree)adaptor.dupNode(INNER403);


                    adaptor.addChild(root_0, INNER403_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((INNER403!=null?INNER403.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 23 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:563:7: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OUTER404=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_eid4344); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER404_tree = (CommonTree)adaptor.dupNode(OUTER404);


                    adaptor.addChild(root_0, OUTER404_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((OUTER404!=null?OUTER404.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 24 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:564:7: PARALLEL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    PARALLEL405=(CommonTree)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid4358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL405_tree = (CommonTree)adaptor.dupNode(PARALLEL405);


                    adaptor.addChild(root_0, PARALLEL405_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((PARALLEL405!=null?PARALLEL405.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 25 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:565:7: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    PARTITION406=(CommonTree)match(input,PARTITION,FOLLOW_PARTITION_in_eid4369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION406_tree = (CommonTree)adaptor.dupNode(PARTITION406);


                    adaptor.addChild(root_0, PARTITION406_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((PARTITION406!=null?PARTITION406.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 26 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:566:7: GROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GROUP407=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_eid4379); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP407_tree = (CommonTree)adaptor.dupNode(GROUP407);


                    adaptor.addChild(root_0, GROUP407_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((GROUP407!=null?GROUP407.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 27 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:567:7: AND
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    AND408=(CommonTree)match(input,AND,FOLLOW_AND_in_eid4393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND408_tree = (CommonTree)adaptor.dupNode(AND408);


                    adaptor.addChild(root_0, AND408_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((AND408!=null?AND408.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 28 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:568:7: OR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OR409=(CommonTree)match(input,OR,FOLLOW_OR_in_eid4409); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR409_tree = (CommonTree)adaptor.dupNode(OR409);


                    adaptor.addChild(root_0, OR409_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((OR409!=null?OR409.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 29 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:569:7: NOT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NOT410=(CommonTree)match(input,NOT,FOLLOW_NOT_in_eid4426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT410_tree = (CommonTree)adaptor.dupNode(NOT410);


                    adaptor.addChild(root_0, NOT410_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((NOT410!=null?NOT410.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 30 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:570:7: GENERATE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GENERATE411=(CommonTree)match(input,GENERATE,FOLLOW_GENERATE_in_eid4442); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE411_tree = (CommonTree)adaptor.dupNode(GENERATE411);


                    adaptor.addChild(root_0, GENERATE411_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((GENERATE411!=null?GENERATE411.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 31 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:571:7: FLATTEN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLATTEN412=(CommonTree)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid4453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN412_tree = (CommonTree)adaptor.dupNode(FLATTEN412);


                    adaptor.addChild(root_0, FLATTEN412_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((FLATTEN412!=null?FLATTEN412.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 32 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:572:7: EVAL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    EVAL413=(CommonTree)match(input,EVAL,FOLLOW_EVAL_in_eid4465); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVAL413_tree = (CommonTree)adaptor.dupNode(EVAL413);


                    adaptor.addChild(root_0, EVAL413_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((EVAL413!=null?EVAL413.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 33 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:573:7: ASC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ASC414=(CommonTree)match(input,ASC,FOLLOW_ASC_in_eid4480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC414_tree = (CommonTree)adaptor.dupNode(ASC414);


                    adaptor.addChild(root_0, ASC414_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((ASC414!=null?ASC414.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 34 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:574:7: DESC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DESC415=(CommonTree)match(input,DESC,FOLLOW_DESC_in_eid4496); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC415_tree = (CommonTree)adaptor.dupNode(DESC415);


                    adaptor.addChild(root_0, DESC415_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((DESC415!=null?DESC415.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 35 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:575:7: BOOLEAN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BOOLEAN416=(CommonTree)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_eid4511); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLEAN416_tree = (CommonTree)adaptor.dupNode(BOOLEAN416);


                    adaptor.addChild(root_0, BOOLEAN416_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((BOOLEAN416!=null?BOOLEAN416.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 36 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:576:7: INT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INT417=(CommonTree)match(input,INT,FOLLOW_INT_in_eid4523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT417_tree = (CommonTree)adaptor.dupNode(INT417);


                    adaptor.addChild(root_0, INT417_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((INT417!=null?INT417.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 37 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:577:7: LONG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LONG418=(CommonTree)match(input,LONG,FOLLOW_LONG_in_eid4539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG418_tree = (CommonTree)adaptor.dupNode(LONG418);


                    adaptor.addChild(root_0, LONG418_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((LONG418!=null?LONG418.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 38 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:578:7: FLOAT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLOAT419=(CommonTree)match(input,FLOAT,FOLLOW_FLOAT_in_eid4554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT419_tree = (CommonTree)adaptor.dupNode(FLOAT419);


                    adaptor.addChild(root_0, FLOAT419_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((FLOAT419!=null?FLOAT419.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 39 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:579:7: DOUBLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DOUBLE420=(CommonTree)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid4568); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE420_tree = (CommonTree)adaptor.dupNode(DOUBLE420);


                    adaptor.addChild(root_0, DOUBLE420_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((DOUBLE420!=null?DOUBLE420.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 40 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:580:7: CHARARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CHARARRAY421=(CommonTree)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid4581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY421_tree = (CommonTree)adaptor.dupNode(CHARARRAY421);


                    adaptor.addChild(root_0, CHARARRAY421_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((CHARARRAY421!=null?CHARARRAY421.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 41 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:581:7: BYTEARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BYTEARRAY422=(CommonTree)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid4591); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY422_tree = (CommonTree)adaptor.dupNode(BYTEARRAY422);


                    adaptor.addChild(root_0, BYTEARRAY422_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((BYTEARRAY422!=null?BYTEARRAY422.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 42 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:582:7: BAG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BAG423=(CommonTree)match(input,BAG,FOLLOW_BAG_in_eid4601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG423_tree = (CommonTree)adaptor.dupNode(BAG423);


                    adaptor.addChild(root_0, BAG423_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((BAG423!=null?BAG423.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 43 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:583:7: TUPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TUPLE424=(CommonTree)match(input,TUPLE,FOLLOW_TUPLE_in_eid4617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE424_tree = (CommonTree)adaptor.dupNode(TUPLE424);


                    adaptor.addChild(root_0, TUPLE424_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((TUPLE424!=null?TUPLE424.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 44 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:584:7: MAP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MAP425=(CommonTree)match(input,MAP,FOLLOW_MAP_in_eid4631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP425_tree = (CommonTree)adaptor.dupNode(MAP425);


                    adaptor.addChild(root_0, MAP425_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((MAP425!=null?MAP425.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 45 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:585:7: IS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IS426=(CommonTree)match(input,IS,FOLLOW_IS_in_eid4647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS426_tree = (CommonTree)adaptor.dupNode(IS426);


                    adaptor.addChild(root_0, IS426_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IS426!=null?IS426.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 46 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:586:7: NULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NULL427=(CommonTree)match(input,NULL,FOLLOW_NULL_in_eid4664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL427_tree = (CommonTree)adaptor.dupNode(NULL427);


                    adaptor.addChild(root_0, NULL427_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((NULL427!=null?NULL427.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 47 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:587:7: TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TRUE428=(CommonTree)match(input,TRUE,FOLLOW_TRUE_in_eid4679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE428_tree = (CommonTree)adaptor.dupNode(TRUE428);


                    adaptor.addChild(root_0, TRUE428_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((TRUE428!=null?TRUE428.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 48 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:588:7: FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FALSE429=(CommonTree)match(input,FALSE,FOLLOW_FALSE_in_eid4694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE429_tree = (CommonTree)adaptor.dupNode(FALSE429);


                    adaptor.addChild(root_0, FALSE429_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((FALSE429!=null?FALSE429.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 49 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:589:7: STREAM
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STREAM430=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_eid4708); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM430_tree = (CommonTree)adaptor.dupNode(STREAM430);


                    adaptor.addChild(root_0, STREAM430_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STREAM430!=null?STREAM430.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 50 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:590:7: THROUGH
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    THROUGH431=(CommonTree)match(input,THROUGH,FOLLOW_THROUGH_in_eid4721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH431_tree = (CommonTree)adaptor.dupNode(THROUGH431);


                    adaptor.addChild(root_0, THROUGH431_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((THROUGH431!=null?THROUGH431.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 51 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:591:7: STORE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STORE432=(CommonTree)match(input,STORE,FOLLOW_STORE_in_eid4733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE432_tree = (CommonTree)adaptor.dupNode(STORE432);


                    adaptor.addChild(root_0, STORE432_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STORE432!=null?STORE432.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 52 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:592:7: MAPREDUCE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MAPREDUCE433=(CommonTree)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid4747); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE433_tree = (CommonTree)adaptor.dupNode(MAPREDUCE433);


                    adaptor.addChild(root_0, MAPREDUCE433_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((MAPREDUCE433!=null?MAPREDUCE433.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 53 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:593:7: SHIP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SHIP434=(CommonTree)match(input,SHIP,FOLLOW_SHIP_in_eid4757); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP434_tree = (CommonTree)adaptor.dupNode(SHIP434);


                    adaptor.addChild(root_0, SHIP434_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((SHIP434!=null?SHIP434.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 54 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:594:7: CACHE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CACHE435=(CommonTree)match(input,CACHE,FOLLOW_CACHE_in_eid4772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE435_tree = (CommonTree)adaptor.dupNode(CACHE435);


                    adaptor.addChild(root_0, CACHE435_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((CACHE435!=null?CACHE435.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 55 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:595:7: INPUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INPUT436=(CommonTree)match(input,INPUT,FOLLOW_INPUT_in_eid4786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT436_tree = (CommonTree)adaptor.dupNode(INPUT436);


                    adaptor.addChild(root_0, INPUT436_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((INPUT436!=null?INPUT436.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 56 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:596:7: OUTPUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OUTPUT437=(CommonTree)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid4800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT437_tree = (CommonTree)adaptor.dupNode(OUTPUT437);


                    adaptor.addChild(root_0, OUTPUT437_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((OUTPUT437!=null?OUTPUT437.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 57 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:597:7: STDERROR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDERROR438=(CommonTree)match(input,STDERROR,FOLLOW_STDERROR_in_eid4813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR438_tree = (CommonTree)adaptor.dupNode(STDERROR438);


                    adaptor.addChild(root_0, STDERROR438_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STDERROR438!=null?STDERROR438.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 58 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:598:7: STDIN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDIN439=(CommonTree)match(input,STDIN,FOLLOW_STDIN_in_eid4824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN439_tree = (CommonTree)adaptor.dupNode(STDIN439);


                    adaptor.addChild(root_0, STDIN439_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STDIN439!=null?STDIN439.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 59 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:599:7: STDOUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDOUT440=(CommonTree)match(input,STDOUT,FOLLOW_STDOUT_in_eid4838); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT440_tree = (CommonTree)adaptor.dupNode(STDOUT440);


                    adaptor.addChild(root_0, STDOUT440_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STDOUT440!=null?STDOUT440.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 60 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:600:7: LIMIT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LIMIT441=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_eid4851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT441_tree = (CommonTree)adaptor.dupNode(LIMIT441);


                    adaptor.addChild(root_0, LIMIT441_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((LIMIT441!=null?LIMIT441.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 61 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:601:7: SAMPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SAMPLE442=(CommonTree)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid4865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE442_tree = (CommonTree)adaptor.dupNode(SAMPLE442);


                    adaptor.addChild(root_0, SAMPLE442_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((SAMPLE442!=null?SAMPLE442.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 62 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:602:7: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LEFT443=(CommonTree)match(input,LEFT,FOLLOW_LEFT_in_eid4878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT443_tree = (CommonTree)adaptor.dupNode(LEFT443);


                    adaptor.addChild(root_0, LEFT443_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((LEFT443!=null?LEFT443.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 63 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:603:7: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    RIGHT444=(CommonTree)match(input,RIGHT,FOLLOW_RIGHT_in_eid4893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT444_tree = (CommonTree)adaptor.dupNode(RIGHT444);


                    adaptor.addChild(root_0, RIGHT444_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((RIGHT444!=null?RIGHT444.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 64 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:604:7: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FULL445=(CommonTree)match(input,FULL,FOLLOW_FULL_in_eid4907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL445_tree = (CommonTree)adaptor.dupNode(FULL445);


                    adaptor.addChild(root_0, FULL445_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((FULL445!=null?FULL445.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 65 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:605:7: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER446=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_eid4922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER446_tree = (CommonTree)adaptor.dupNode(IDENTIFIER446);


                    adaptor.addChild(root_0, IDENTIFIER446_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((IDENTIFIER446!=null?IDENTIFIER446.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 66 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:606:7: TOBAG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOBAG447=(CommonTree)match(input,TOBAG,FOLLOW_TOBAG_in_eid4935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOBAG447_tree = (CommonTree)adaptor.dupNode(TOBAG447);


                    adaptor.addChild(root_0, TOBAG447_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append("TOBAG"); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 67 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:607:7: TOMAP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOMAP448=(CommonTree)match(input,TOMAP,FOLLOW_TOMAP_in_eid4948); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOMAP448_tree = (CommonTree)adaptor.dupNode(TOMAP448);


                    adaptor.addChild(root_0, TOMAP448_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append("TOMAP"); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 68 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:608:7: TOTUPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOTUPLE449=(CommonTree)match(input,TOTUPLE,FOLLOW_TOTUPLE_in_eid4961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOTUPLE449_tree = (CommonTree)adaptor.dupNode(TOTUPLE449);


                    adaptor.addChild(root_0, TOTUPLE449_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append("TOTUPLE"); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends TreeRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:612:1: rel_op returns [String result] : ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES );
    public final AstPrinter.rel_op_return rel_op() throws RecognitionException {
        AstPrinter.rel_op_return retval = new AstPrinter.rel_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_MATCHES456=null;
        AstPrinter.rel_op_eq_return rel_op_eq450 =null;

        AstPrinter.rel_op_ne_return rel_op_ne451 =null;

        AstPrinter.rel_op_gt_return rel_op_gt452 =null;

        AstPrinter.rel_op_gte_return rel_op_gte453 =null;

        AstPrinter.rel_op_lt_return rel_op_lt454 =null;

        AstPrinter.rel_op_lte_return rel_op_lte455 =null;


        CommonTree STR_OP_MATCHES456_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:613:5: ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES )
            int alt114=7;
            switch ( input.LA(1) ) {
            case NUM_OP_EQ:
            case STR_OP_EQ:
                {
                alt114=1;
                }
                break;
            case NUM_OP_NE:
            case STR_OP_NE:
                {
                alt114=2;
                }
                break;
            case NUM_OP_GT:
            case STR_OP_GT:
                {
                alt114=3;
                }
                break;
            case NUM_OP_GTE:
            case STR_OP_GTE:
                {
                alt114=4;
                }
                break;
            case NUM_OP_LT:
            case STR_OP_LT:
                {
                alt114=5;
                }
                break;
            case NUM_OP_LTE:
            case STR_OP_LTE:
                {
                alt114=6;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt114=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }

            switch (alt114) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:613:7: rel_op_eq
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_eq_in_rel_op4983);
                    rel_op_eq450=rel_op_eq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_eq450.getTree());


                    if ( state.backtracking==0 ) { retval.result = (rel_op_eq450!=null?rel_op_eq450.result:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:614:7: rel_op_ne
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_ne_in_rel_op4997);
                    rel_op_ne451=rel_op_ne();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_ne451.getTree());


                    if ( state.backtracking==0 ) { retval.result = (rel_op_ne451!=null?rel_op_ne451.result:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:615:7: rel_op_gt
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gt_in_rel_op5011);
                    rel_op_gt452=rel_op_gt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_gt452.getTree());


                    if ( state.backtracking==0 ) { retval.result = (rel_op_gt452!=null?rel_op_gt452.result:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:616:7: rel_op_gte
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gte_in_rel_op5025);
                    rel_op_gte453=rel_op_gte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_gte453.getTree());


                    if ( state.backtracking==0 ) { retval.result = (rel_op_gte453!=null?rel_op_gte453.result:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:617:7: rel_op_lt
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lt_in_rel_op5038);
                    rel_op_lt454=rel_op_lt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_lt454.getTree());


                    if ( state.backtracking==0 ) { retval.result = (rel_op_lt454!=null?rel_op_lt454.result:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:618:7: rel_op_lte
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lte_in_rel_op5052);
                    rel_op_lte455=rel_op_lte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_lte455.getTree());


                    if ( state.backtracking==0 ) { retval.result = (rel_op_lte455!=null?rel_op_lte455.result:null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:619:7: STR_OP_MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_MATCHES456=(CommonTree)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_rel_op5065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES456_tree = (CommonTree)adaptor.dupNode(STR_OP_MATCHES456);


                    adaptor.addChild(root_0, STR_OP_MATCHES456_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (STR_OP_MATCHES456!=null?STR_OP_MATCHES456.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_op_eq_return extends TreeRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_eq"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:622:1: rel_op_eq returns [String result] : ( STR_OP_EQ | NUM_OP_EQ );
    public final AstPrinter.rel_op_eq_return rel_op_eq() throws RecognitionException {
        AstPrinter.rel_op_eq_return retval = new AstPrinter.rel_op_eq_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_EQ457=null;
        CommonTree NUM_OP_EQ458=null;

        CommonTree STR_OP_EQ457_tree=null;
        CommonTree NUM_OP_EQ458_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:623:5: ( STR_OP_EQ | NUM_OP_EQ )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==STR_OP_EQ) ) {
                alt115=1;
            }
            else if ( (LA115_0==NUM_OP_EQ) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }
            switch (alt115) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:623:7: STR_OP_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_EQ457=(CommonTree)match(input,STR_OP_EQ,FOLLOW_STR_OP_EQ_in_rel_op_eq5084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_EQ457_tree = (CommonTree)adaptor.dupNode(STR_OP_EQ457);


                    adaptor.addChild(root_0, STR_OP_EQ457_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (STR_OP_EQ457!=null?STR_OP_EQ457.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:624:7: NUM_OP_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NUM_OP_EQ458=(CommonTree)match(input,NUM_OP_EQ,FOLLOW_NUM_OP_EQ_in_rel_op_eq5094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_EQ458_tree = (CommonTree)adaptor.dupNode(NUM_OP_EQ458);


                    adaptor.addChild(root_0, NUM_OP_EQ458_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (NUM_OP_EQ458!=null?NUM_OP_EQ458.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_eq"


    public static class rel_op_ne_return extends TreeRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_ne"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:627:1: rel_op_ne returns [String result] : ( STR_OP_NE | NUM_OP_NE );
    public final AstPrinter.rel_op_ne_return rel_op_ne() throws RecognitionException {
        AstPrinter.rel_op_ne_return retval = new AstPrinter.rel_op_ne_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_NE459=null;
        CommonTree NUM_OP_NE460=null;

        CommonTree STR_OP_NE459_tree=null;
        CommonTree NUM_OP_NE460_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:628:5: ( STR_OP_NE | NUM_OP_NE )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==STR_OP_NE) ) {
                alt116=1;
            }
            else if ( (LA116_0==NUM_OP_NE) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:628:7: STR_OP_NE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_NE459=(CommonTree)match(input,STR_OP_NE,FOLLOW_STR_OP_NE_in_rel_op_ne5112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_NE459_tree = (CommonTree)adaptor.dupNode(STR_OP_NE459);


                    adaptor.addChild(root_0, STR_OP_NE459_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (STR_OP_NE459!=null?STR_OP_NE459.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:629:7: NUM_OP_NE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NUM_OP_NE460=(CommonTree)match(input,NUM_OP_NE,FOLLOW_NUM_OP_NE_in_rel_op_ne5122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_NE460_tree = (CommonTree)adaptor.dupNode(NUM_OP_NE460);


                    adaptor.addChild(root_0, NUM_OP_NE460_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (NUM_OP_NE460!=null?NUM_OP_NE460.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_ne"


    public static class rel_op_gt_return extends TreeRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:632:1: rel_op_gt returns [String result] : ( STR_OP_GT | NUM_OP_GT );
    public final AstPrinter.rel_op_gt_return rel_op_gt() throws RecognitionException {
        AstPrinter.rel_op_gt_return retval = new AstPrinter.rel_op_gt_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_GT461=null;
        CommonTree NUM_OP_GT462=null;

        CommonTree STR_OP_GT461_tree=null;
        CommonTree NUM_OP_GT462_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:633:5: ( STR_OP_GT | NUM_OP_GT )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==STR_OP_GT) ) {
                alt117=1;
            }
            else if ( (LA117_0==NUM_OP_GT) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }
            switch (alt117) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:633:7: STR_OP_GT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_GT461=(CommonTree)match(input,STR_OP_GT,FOLLOW_STR_OP_GT_in_rel_op_gt5140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_GT461_tree = (CommonTree)adaptor.dupNode(STR_OP_GT461);


                    adaptor.addChild(root_0, STR_OP_GT461_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (STR_OP_GT461!=null?STR_OP_GT461.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:634:7: NUM_OP_GT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NUM_OP_GT462=(CommonTree)match(input,NUM_OP_GT,FOLLOW_NUM_OP_GT_in_rel_op_gt5150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_GT462_tree = (CommonTree)adaptor.dupNode(NUM_OP_GT462);


                    adaptor.addChild(root_0, NUM_OP_GT462_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (NUM_OP_GT462!=null?NUM_OP_GT462.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gt"


    public static class rel_op_gte_return extends TreeRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:637:1: rel_op_gte returns [String result] : ( STR_OP_GTE | NUM_OP_GTE );
    public final AstPrinter.rel_op_gte_return rel_op_gte() throws RecognitionException {
        AstPrinter.rel_op_gte_return retval = new AstPrinter.rel_op_gte_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_GTE463=null;
        CommonTree NUM_OP_GTE464=null;

        CommonTree STR_OP_GTE463_tree=null;
        CommonTree NUM_OP_GTE464_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:638:5: ( STR_OP_GTE | NUM_OP_GTE )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==STR_OP_GTE) ) {
                alt118=1;
            }
            else if ( (LA118_0==NUM_OP_GTE) ) {
                alt118=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:638:7: STR_OP_GTE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_GTE463=(CommonTree)match(input,STR_OP_GTE,FOLLOW_STR_OP_GTE_in_rel_op_gte5168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_GTE463_tree = (CommonTree)adaptor.dupNode(STR_OP_GTE463);


                    adaptor.addChild(root_0, STR_OP_GTE463_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (STR_OP_GTE463!=null?STR_OP_GTE463.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:639:7: NUM_OP_GTE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NUM_OP_GTE464=(CommonTree)match(input,NUM_OP_GTE,FOLLOW_NUM_OP_GTE_in_rel_op_gte5178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_GTE464_tree = (CommonTree)adaptor.dupNode(NUM_OP_GTE464);


                    adaptor.addChild(root_0, NUM_OP_GTE464_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (NUM_OP_GTE464!=null?NUM_OP_GTE464.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gte"


    public static class rel_op_lt_return extends TreeRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:642:1: rel_op_lt returns [String result] : ( STR_OP_LT | NUM_OP_LT );
    public final AstPrinter.rel_op_lt_return rel_op_lt() throws RecognitionException {
        AstPrinter.rel_op_lt_return retval = new AstPrinter.rel_op_lt_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_LT465=null;
        CommonTree NUM_OP_LT466=null;

        CommonTree STR_OP_LT465_tree=null;
        CommonTree NUM_OP_LT466_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:643:5: ( STR_OP_LT | NUM_OP_LT )
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==STR_OP_LT) ) {
                alt119=1;
            }
            else if ( (LA119_0==NUM_OP_LT) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;

            }
            switch (alt119) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:643:7: STR_OP_LT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_LT465=(CommonTree)match(input,STR_OP_LT,FOLLOW_STR_OP_LT_in_rel_op_lt5196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_LT465_tree = (CommonTree)adaptor.dupNode(STR_OP_LT465);


                    adaptor.addChild(root_0, STR_OP_LT465_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (STR_OP_LT465!=null?STR_OP_LT465.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:644:7: NUM_OP_LT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NUM_OP_LT466=(CommonTree)match(input,NUM_OP_LT,FOLLOW_NUM_OP_LT_in_rel_op_lt5206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_LT466_tree = (CommonTree)adaptor.dupNode(NUM_OP_LT466);


                    adaptor.addChild(root_0, NUM_OP_LT466_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (NUM_OP_LT466!=null?NUM_OP_LT466.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lt"


    public static class rel_op_lte_return extends TreeRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:647:1: rel_op_lte returns [String result] : ( STR_OP_LTE | NUM_OP_LTE );
    public final AstPrinter.rel_op_lte_return rel_op_lte() throws RecognitionException {
        AstPrinter.rel_op_lte_return retval = new AstPrinter.rel_op_lte_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_LTE467=null;
        CommonTree NUM_OP_LTE468=null;

        CommonTree STR_OP_LTE467_tree=null;
        CommonTree NUM_OP_LTE468_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:648:5: ( STR_OP_LTE | NUM_OP_LTE )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==STR_OP_LTE) ) {
                alt120=1;
            }
            else if ( (LA120_0==NUM_OP_LTE) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:648:7: STR_OP_LTE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_LTE467=(CommonTree)match(input,STR_OP_LTE,FOLLOW_STR_OP_LTE_in_rel_op_lte5224); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_LTE467_tree = (CommonTree)adaptor.dupNode(STR_OP_LTE467);


                    adaptor.addChild(root_0, STR_OP_LTE467_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (STR_OP_LTE467!=null?STR_OP_LTE467.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:649:7: NUM_OP_LTE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NUM_OP_LTE468=(CommonTree)match(input,NUM_OP_LTE,FOLLOW_NUM_OP_LTE_in_rel_op_lte5234); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_OP_LTE468_tree = (CommonTree)adaptor.dupNode(NUM_OP_LTE468);


                    adaptor.addChild(root_0, NUM_OP_LTE468_tree);
                    }


                    if ( state.backtracking==0 ) { retval.result = (NUM_OP_LTE468!=null?NUM_OP_LTE468.getText():null); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lte"


    public static class rel_str_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:652:1: rel_str_op : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final AstPrinter.rel_str_op_return rel_str_op() throws RecognitionException {
        AstPrinter.rel_str_op_return retval = new AstPrinter.rel_str_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_EQ469=null;
        CommonTree STR_OP_NE470=null;
        CommonTree STR_OP_GT471=null;
        CommonTree STR_OP_LT472=null;
        CommonTree STR_OP_GTE473=null;
        CommonTree STR_OP_LTE474=null;
        CommonTree STR_OP_MATCHES475=null;

        CommonTree STR_OP_EQ469_tree=null;
        CommonTree STR_OP_NE470_tree=null;
        CommonTree STR_OP_GT471_tree=null;
        CommonTree STR_OP_LT472_tree=null;
        CommonTree STR_OP_GTE473_tree=null;
        CommonTree STR_OP_LTE474_tree=null;
        CommonTree STR_OP_MATCHES475_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:653:5: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            int alt121=7;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
                {
                alt121=1;
                }
                break;
            case STR_OP_NE:
                {
                alt121=2;
                }
                break;
            case STR_OP_GT:
                {
                alt121=3;
                }
                break;
            case STR_OP_LT:
                {
                alt121=4;
                }
                break;
            case STR_OP_GTE:
                {
                alt121=5;
                }
                break;
            case STR_OP_LTE:
                {
                alt121=6;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt121=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }

            switch (alt121) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:653:7: STR_OP_EQ
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_EQ469=(CommonTree)match(input,STR_OP_EQ,FOLLOW_STR_OP_EQ_in_rel_str_op5249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_EQ469_tree = (CommonTree)adaptor.dupNode(STR_OP_EQ469);


                    adaptor.addChild(root_0, STR_OP_EQ469_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STR_OP_EQ469!=null?STR_OP_EQ469.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:654:7: STR_OP_NE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_NE470=(CommonTree)match(input,STR_OP_NE,FOLLOW_STR_OP_NE_in_rel_str_op5259); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_NE470_tree = (CommonTree)adaptor.dupNode(STR_OP_NE470);


                    adaptor.addChild(root_0, STR_OP_NE470_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STR_OP_NE470!=null?STR_OP_NE470.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:655:7: STR_OP_GT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_GT471=(CommonTree)match(input,STR_OP_GT,FOLLOW_STR_OP_GT_in_rel_str_op5269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_GT471_tree = (CommonTree)adaptor.dupNode(STR_OP_GT471);


                    adaptor.addChild(root_0, STR_OP_GT471_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STR_OP_GT471!=null?STR_OP_GT471.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:656:7: STR_OP_LT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_LT472=(CommonTree)match(input,STR_OP_LT,FOLLOW_STR_OP_LT_in_rel_str_op5279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_LT472_tree = (CommonTree)adaptor.dupNode(STR_OP_LT472);


                    adaptor.addChild(root_0, STR_OP_LT472_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STR_OP_LT472!=null?STR_OP_LT472.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:657:7: STR_OP_GTE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_GTE473=(CommonTree)match(input,STR_OP_GTE,FOLLOW_STR_OP_GTE_in_rel_str_op5289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_GTE473_tree = (CommonTree)adaptor.dupNode(STR_OP_GTE473);


                    adaptor.addChild(root_0, STR_OP_GTE473_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STR_OP_GTE473!=null?STR_OP_GTE473.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:658:7: STR_OP_LTE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_LTE474=(CommonTree)match(input,STR_OP_LTE,FOLLOW_STR_OP_LTE_in_rel_str_op5299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_LTE474_tree = (CommonTree)adaptor.dupNode(STR_OP_LTE474);


                    adaptor.addChild(root_0, STR_OP_LTE474_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STR_OP_LTE474!=null?STR_OP_LTE474.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:659:7: STR_OP_MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_MATCHES475=(CommonTree)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_rel_str_op5309); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES475_tree = (CommonTree)adaptor.dupNode(STR_OP_MATCHES475);


                    adaptor.addChild(root_0, STR_OP_MATCHES475_tree);
                    }


                    if ( state.backtracking==0 ) { sb.append((STR_OP_MATCHES475!=null?STR_OP_MATCHES475.getText():null)); }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"

    // $ANTLR start synpred42_AstPrinter
    public final void synpred42_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:158:7: ( field_def ( field_def )+ )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:158:7: field_def ( field_def )+
        {
        pushFollow(FOLLOW_field_def_in_synpred42_AstPrinter925);
        field_def();

        state._fsp--;
        if (state.failed) return ;

        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:158:37: ( field_def )+
        int cnt126=0;
        loop126:
        do {
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==FIELD_DEF) ) {
                alt126=1;
            }


            switch (alt126) {
        	case 1 :
        	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:158:39: field_def
        	    {
        	    pushFollow(FOLLOW_field_def_in_synpred42_AstPrinter931);
        	    field_def();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt126 >= 1 ) break loop126;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(126, input);
                    throw eee;
            }
            cnt126++;
        } while (true);


        }

    }
    // $ANTLR end synpred42_AstPrinter

    // $ANTLR start synpred87_AstPrinter
    public final void synpred87_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:258:7: ( ^( MINUS expr expr ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:258:7: ^( MINUS expr expr )
        {
        match(input,MINUS,FOLLOW_MINUS_in_synpred87_AstPrinter1780); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_expr_in_synpred87_AstPrinter1782);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred87_AstPrinter1786);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred87_AstPrinter

    // $ANTLR start synpred91_AstPrinter
    public final void synpred91_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:262:7: ( ^( CAST_EXPR type expr ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:262:7: ^( CAST_EXPR type expr )
        {
        match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_synpred91_AstPrinter1852); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred91_AstPrinter1856);
        type();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred91_AstPrinter1860);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred91_AstPrinter

    // $ANTLR start synpred92_AstPrinter
    public final void synpred92_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:263:7: ( const_expr )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:263:7: const_expr
        {
        pushFollow(FOLLOW_const_expr_in_synpred92_AstPrinter1870);
        const_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred92_AstPrinter

    // $ANTLR start synpred95_AstPrinter
    public final void synpred95_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:266:7: ( ^( CAST_EXPR type_cast expr ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:266:7: ^( CAST_EXPR type_cast expr )
        {
        match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_synpred95_AstPrinter1904); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_type_cast_in_synpred95_AstPrinter1908);
        type_cast();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred95_AstPrinter1912);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred95_AstPrinter

    // $ANTLR start synpred100_AstPrinter
    public final void synpred100_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:275:7: ( ^( TUPLE_TYPE_CAST type_cast ( type_cast )* ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:275:7: ^( TUPLE_TYPE_CAST type_cast ( type_cast )* )
        {
        match(input,TUPLE_TYPE_CAST,FOLLOW_TUPLE_TYPE_CAST_in_synpred100_AstPrinter1974); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_type_cast_in_synpred100_AstPrinter1978);
        type_cast();

        state._fsp--;
        if (state.failed) return ;

        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:275:61: ( type_cast )*
        loop130:
        do {
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==BOOLEAN||LA130_0==BYTEARRAY||LA130_0==CHARARRAY||LA130_0==DOUBLE||LA130_0==FLOAT||LA130_0==INT||LA130_0==LONG||LA130_0==BAG_TYPE_CAST||LA130_0==MAP_TYPE||LA130_0==TUPLE_TYPE_CAST) ) {
                alt130=1;
            }


            switch (alt130) {
        	case 1 :
        	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:275:63: type_cast
        	    {
        	    pushFollow(FOLLOW_type_cast_in_synpred100_AstPrinter1984);
        	    type_cast();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop130;
            }
        } while (true);


        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred100_AstPrinter

    // $ANTLR start synpred113_AstPrinter
    public final void synpred113_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:321:11: ( INTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:321:11: INTEGER
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred113_AstPrinter2302); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred113_AstPrinter

    // $ANTLR start synpred114_AstPrinter
    public final void synpred114_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:321:63: ( LONGINTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:321:63: LONGINTEGER
        {
        match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_synpred114_AstPrinter2308); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred114_AstPrinter

    // $ANTLR start synpred115_AstPrinter
    public final void synpred115_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:325:64: ( DOUBLENUMBER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:325:64: DOUBLENUMBER
        {
        match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_synpred115_AstPrinter2342); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred115_AstPrinter

    // $ANTLR start synpred132_AstPrinter
    public final void synpred132_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:368:7: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:368:7: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item
        {
        pushFollow(FOLLOW_join_item_in_synpred132_AstPrinter2661);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:371:16: ( OUTER )?
        int alt132=2;
        int LA132_0 = input.LA(1);

        if ( (LA132_0==OUTER) ) {
            alt132=1;
        }
        switch (alt132) {
            case 1 :
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:371:17: OUTER
                {
                match(input,OUTER,FOLLOW_OUTER_in_synpred132_AstPrinter2723); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_join_item_in_synpred132_AstPrinter2732);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred132_AstPrinter

    // $ANTLR start synpred150_AstPrinter
    public final void synpred150_AstPrinter_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:442:75: ( INTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AstPrinter.g:442:75: INTEGER
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred150_AstPrinter3293); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred150_AstPrinter

    // Delegated rules

    public final boolean synpred87_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_AstPrinter() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_AstPrinter_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA49 dfa49 = new DFA49(this);
    static final String DFA49_eotS =
        "\u009b\uffff";
    static final String DFA49_eofS =
        "\u009b\uffff";
    static final String DFA49_minS =
        "\1\u0084\1\2\1\4\112\3\2\4\2\uffff\112\3";
    static final String DFA49_maxS =
        "\1\u0084\1\2\1\u009f\112\u009d\2\u009f\2\uffff\112\u009d";
    static final String DFA49_acceptS =
        "\117\uffff\1\1\1\2\112\uffff";
    static final String DFA49_specialS =
        "\u009b\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\1",
            "\1\2",
            "\1\32\1\43\1\33\1\51\1\62\1\53\1\34\1\61\1\76\1\60\1\23\2\uffff"+
            "\1\25\1\uffff\1\14\1\52\1\uffff\1\22\3\uffff\1\57\4\uffff\1"+
            "\70\1\16\1\47\1\56\2\uffff\1\17\1\110\1\46\1\42\2\uffff\1\31"+
            "\1\12\1\36\1\77\1\54\1\uffff\1\30\1\65\1\24\1\106\4\uffff\1"+
            "\104\1\15\1\55\1\uffff\1\64\1\74\3\uffff\1\45\7\uffff\1\44\1"+
            "\21\1\uffff\1\37\1\100\1\40\1\41\6\uffff\1\13\1\107\3\uffff"+
            "\1\105\1\uffff\1\75\2\uffff\1\27\1\uffff\1\101\1\102\1\103\1"+
            "\73\1\71\1\3\1\5\1\7\1\6\1\10\1\11\1\4\1\72\1\67\1\63\1\26\1"+
            "\35\22\uffff\1\111\13\uffff\1\66\5\uffff\1\112\1\113\1\114\3"+
            "\uffff\1\50\1\20",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\150\1\161\1\151\1\167\1\u0080\1\171\1\152\1\177\1\u008c"+
            "\1\176\1\141\2\uffff\1\143\1\uffff\1\132\1\170\1\uffff\1\140"+
            "\3\uffff\1\175\4\uffff\1\u0086\1\134\1\165\1\174\2\uffff\1\135"+
            "\1\u0096\1\164\1\160\2\uffff\1\147\1\130\1\154\1\u008d\1\172"+
            "\1\uffff\1\146\1\u0083\1\142\1\u0094\4\uffff\1\u0092\1\133\1"+
            "\173\1\uffff\1\u0082\1\u008a\3\uffff\1\163\7\uffff\1\162\1\137"+
            "\1\uffff\1\155\1\u008e\1\156\1\157\6\uffff\1\131\1\u0095\3\uffff"+
            "\1\u0093\1\uffff\1\u008b\2\uffff\1\145\1\uffff\1\u008f\1\u0090"+
            "\1\u0091\1\u0089\1\u0087\1\121\1\123\1\125\1\124\1\126\1\127"+
            "\1\122\1\u0088\1\u0085\1\u0081\1\144\1\153\22\uffff\1\u0097"+
            "\13\uffff\1\u0084\5\uffff\1\u0098\1\u0099\1\u009a\3\uffff\1"+
            "\166\1\136",
            "\1\150\1\161\1\151\1\167\1\u0080\1\171\1\152\1\177\1\u008c"+
            "\1\176\1\141\2\uffff\1\143\1\uffff\1\132\1\170\1\uffff\1\140"+
            "\3\uffff\1\175\4\uffff\1\u0086\1\134\1\165\1\174\2\uffff\1\135"+
            "\1\u0096\1\164\1\160\2\uffff\1\147\1\130\1\154\1\u008d\1\172"+
            "\1\uffff\1\146\1\u0083\1\142\1\u0094\4\uffff\1\u0092\1\133\1"+
            "\173\1\uffff\1\u0082\1\u008a\3\uffff\1\163\7\uffff\1\162\1\137"+
            "\1\uffff\1\155\1\u008e\1\156\1\157\6\uffff\1\131\1\u0095\3\uffff"+
            "\1\u0093\1\uffff\1\u008b\2\uffff\1\145\1\uffff\1\u008f\1\u0090"+
            "\1\u0091\1\u0089\1\u0087\1\121\1\123\1\125\1\124\1\126\1\127"+
            "\1\122\1\u0088\1\u0085\1\u0081\1\144\1\153\22\uffff\1\u0097"+
            "\13\uffff\1\u0084\5\uffff\1\u0098\1\u0099\1\u009a\3\uffff\1"+
            "\166\1\136",
            "",
            "",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117",
            "\1\120\23\uffff\1\117\1\116\1\117\1\uffff\1\117\3\uffff\1\117"+
            "\4\uffff\1\117\3\uffff\1\117\7\uffff\1\117\13\uffff\1\117\2"+
            "\uffff\1\117\21\uffff\1\117\1\115\1\117\2\uffff\1\117\13\uffff"+
            "\1\117\15\uffff\1\117\10\uffff\2\117\1\uffff\3\117\5\uffff\1"+
            "\117\1\uffff\1\117\6\uffff\2\117\3\uffff\1\117\12\uffff\1\117"
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "247:1: func_eval : ( ^( FUNC_EVAL func_name real_arg ( real_arg )* ) | ^( FUNC_EVAL func_name ) );";
        }
    }
 

    public static final BitSet FOLLOW_QUERY_in_query81 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_in_query83 = new BitSet(new long[]{0x0000000000000008L,0x0000000200000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_general_statement_in_statement95 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_statement_in_statement109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_split_statement120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATEMENT_in_general_statement137 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_general_statement141 = new BitSet(new long[]{0x46080121004A4000L,0x000400C210000800L});
    public static final BitSet FOLLOW_op_clause_in_general_statement157 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement159 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause180 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause182 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_op_clause408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_clause_in_op_clause422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause438 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_define_clause440 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_cmd_in_define_clause455 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_func_clause_in_define_clause459 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd479 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ship_clause_in_cmd493 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd497 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_input_clause_in_cmd501 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_output_clause_in_cmd505 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_error_clause_in_cmd509 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause530 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_path_list_in_ship_clause534 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause591 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_path_list_in_cache_clause595 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INPUT_in_input_clause615 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stream_cmd_in_input_clause628 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_stream_cmd_in_input_clause634 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_STDIN_in_stream_cmd656 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd660 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STDOUT_in_stream_cmd673 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd677 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_stream_cmd690 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd694 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause713 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stream_cmd_in_output_clause727 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_stream_cmd_in_output_clause733 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause755 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause769 = new BitSet(new long[]{0x0001000000000008L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause774 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOAD_in_load_clause802 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_filename_in_load_clause806 = new BitSet(new long[]{0x0000000000000048L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_load_clause821 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_as_clause_in_load_clause825 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_filename842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_as_clause859 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause863 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIELD_DEF_in_field_def880 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_field_def882 = new BitSet(new long[]{0x0800800404002A08L,0x0080000000000000L,0x0000000008001000L});
    public static final BitSet FOLLOW_type_in_field_def892 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIELD_DEF_in_field_def906 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_field_def908 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_field_def_in_field_def_list925 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_field_def_in_field_def_list931 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_field_def_in_field_def_list944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_type953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_in_type957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_in_type961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_simple_type979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_simple_type989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_simple_type999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_simple_type1009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_simple_type1019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_simple_type1029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_simple_type1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_TYPE_in_tuple_type1057 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_field_def_list_in_tuple_type1059 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BAG_TYPE_in_bag_type1078 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_bag_type1086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_tuple_type_in_bag_type1089 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAP_TYPE_in_map_type1108 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_map_type1112 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNC_REF_in_func_clause1133 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_clause1135 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNC_in_func_clause1147 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_clause1149 = new BitSet(new long[]{0x0000000000000008L,0x0000000000400000L});
    public static final BitSet FOLLOW_func_args_in_func_clause1153 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_eid_in_func_name1172 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_PERIOD_in_func_name1178 = new BitSet(new long[]{0x6E1EF9E7845A7FF0L,0x000FFFFA5181EC04L,0x00000000C7040040L});
    public static final BitSet FOLLOW_DOLLAR_in_func_name1184 = new BitSet(new long[]{0x6E1EF9E7845A7FF0L,0x000FFFFA5181EC04L,0x00000000C7040040L});
    public static final BitSet FOLLOW_eid_in_func_name1190 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_func_args1209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_func_args1224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_GROUP_in_group_clause1246 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_COGROUP_in_group_clause1252 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_group_item_in_group_clause1267 = new BitSet(new long[]{0x46080121004A4008L,0x000400C210410800L,0x0000000000000040L});
    public static final BitSet FOLLOW_group_item_in_group_clause1273 = new BitSet(new long[]{0x46080121004A4008L,0x000400C210410800L,0x0000000000000040L});
    public static final BitSet FOLLOW_group_type_in_group_clause1289 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause1301 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_type1317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_group_item1332 = new BitSet(new long[]{0x0000000000000410L,0x0040000000000000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item1336 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ALL_in_group_item1353 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ANY_in_group_item1359 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_INNER_in_group_item1380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_group_item1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_rel1405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_clause_in_rel1418 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_parallel_clause_in_rel1420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item1441 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_col_range_in_flatten_generated_item1445 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_expr_in_flatten_generated_item1449 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_STAR_in_flatten_generated_item1453 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause1481 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_flatten_clause1485 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STORE_in_store_clause1505 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_store_clause1509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_filename_in_store_clause1513 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_store_clause1519 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause1539 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_filter_clause1543 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_filter_clause1547 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OR_in_cond1567 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1571 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_cond1575 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AND_in_cond1589 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1593 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_cond1597 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_in_cond1611 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1615 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NULL_in_cond1629 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1631 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_NOT_in_cond1636 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_op_in_cond1656 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1658 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond1662 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_func_eval_in_cond1672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNC_EVAL_in_func_eval1687 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_eval1689 = new BitSet(new long[]{0x900101108A800000L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_real_arg_in_func_eval1693 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_real_arg_in_func_eval1699 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_FUNC_EVAL_in_func_eval1715 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_eval1717 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_real_arg1736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg1740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_real_arg1746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_expr1762 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1764 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1768 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_expr1780 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1782 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1786 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_expr1798 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1800 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1804 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIV_in_expr1816 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1818 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1822 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERCENT_in_expr1834 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1836 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1840 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_expr1852 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_expr1856 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1860 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_const_expr_in_expr1870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_expr_in_expr1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEG_in_expr1888 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1892 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_expr1904 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_expr1908 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1912 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPR_IN_PAREN_in_expr1924 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1928 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_simple_type_in_type_cast1946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type_cast1950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_cast_in_type_cast1954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_cast_in_type_cast1958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast1974 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast1978 = new BitSet(new long[]{0x0800800404002A08L,0x0100000000000000L,0x0000000010001000L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast1984 = new BitSet(new long[]{0x0800800404002A08L,0x0100000000000000L,0x0000000010001000L});
    public static final BitSet FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast2000 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast2004 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BAG_TYPE_CAST_in_bag_type_cast2025 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tuple_type_cast_in_bag_type_cast2029 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_projectable_expr_in_var_expr2048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_dot_proj_in_var_expr2052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_pound_proj_in_var_expr2056 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_func_eval_in_projectable_expr2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_projectable_expr2076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_projectable_expr2080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_dot_proj2096 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj2100 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj2106 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_alias_in_col_alias_or_index2122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_index_in_col_alias_or_index2126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_col_alias2140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_col_alias2150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_col_index2166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COL_RANGE_in_col_range2179 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_ref_in_col_range2181 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range2186 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_ref_in_col_range2188 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_POUND_in_pound_proj2206 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_pound_proj2220 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NULL_in_pound_proj2226 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BIN_EXPR_in_bin_expr2248 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_bin_expr2252 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_bin_expr2256 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_bin_expr2260 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause2285 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_limit_clause2289 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_INTEGER_in_limit_clause2302 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LONGINTEGER_in_limit_clause2308 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_limit_clause2314 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause2334 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_sample_clause2338 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_sample_clause2342 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_sample_clause2348 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ORDER_in_order_clause2372 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_order_clause2376 = new BitSet(new long[]{0x0000010002000000L,0x2000000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause2388 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_order_clause2402 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause2421 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_ASC_in_order_by_clause2427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_order_by_clause2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_col_in_order_by_clause2446 = new BitSet(new long[]{0x0000010002000002L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_order_col_in_order_by_clause2452 = new BitSet(new long[]{0x0000010002000002L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_range_in_order_col2469 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_col_ref_in_order_col2473 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_ASC_in_order_col2478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_order_col2484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause2509 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_distinct_clause2513 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause2515 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause2534 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_partition_clause2538 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause2560 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause2564 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause2566 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_in_rel_list2587 = new BitSet(new long[]{0x46080121004A4002L,0x000400C210000800L,0x0000000000000040L});
    public static final BitSet FOLLOW_rel_in_rel_list2593 = new BitSet(new long[]{0x46080121004A4002L,0x000400C210000800L,0x0000000000000040L});
    public static final BitSet FOLLOW_JOIN_in_join_clause2610 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause2614 = new BitSet(new long[]{0x0000000000000008L,0x0000000000410000L});
    public static final BitSet FOLLOW_join_type_in_join_clause2620 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause2632 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type2646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2661 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LEFT_in_join_sub_clause2665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RIGHT_in_join_sub_clause2684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_FULL_in_join_sub_clause2703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause2723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2740 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_JOIN_ITEM_in_join_item2764 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_join_item2766 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item2768 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause2785 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_clause2794 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_clause2800 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_col_range_in_join_group_by_expr2821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_join_group_by_expr2825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_join_group_by_expr2829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause2847 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause2852 = new BitSet(new long[]{0x46080121004A4000L,0x000400C210000800L,0x0000000000000040L});
    public static final BitSet FOLLOW_rel_list_in_union_clause2859 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause2881 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_foreach_clause2885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_foreach_plan_in_foreach_clause2887 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_PLAN_SIMPLE_in_foreach_plan2909 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_generate_clause_in_foreach_plan2911 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_PLAN_COMPLEX_in_foreach_plan2923 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan2925 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_command_in_nested_blk2943 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_blk2950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_generate_clause2968 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause2980 = new BitSet(new long[]{0x900101128A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause2986 = new BitSet(new long[]{0x900101128A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_NESTED_CMD_in_nested_command3009 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_nested_command3011 = new BitSet(new long[]{0x0200002100420000L,0x0000000000000800L,0x0000000000020000L});
    public static final BitSet FOLLOW_nested_op_in_nested_command3015 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NESTED_CMD_ASSI_in_nested_command3027 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_nested_command3029 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_nested_command3033 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op3058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op3072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op3086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op3100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op3128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NESTED_PROJ_in_nested_proj3144 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj3146 = new BitSet(new long[]{0x0000010002000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj3150 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj3156 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter3181 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter3185 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_nested_filter3189 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort3211 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort3215 = new BitSet(new long[]{0x0000010002000000L,0x2000000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort3227 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_nested_sort3233 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct3257 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct3262 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit3284 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit3289 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit3293 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_nested_limit3299 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross3318 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross3323 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach3337 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach3342 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_foreach3344 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input3355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input3359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list3373 = new BitSet(new long[]{0x0000010002000002L,0x0000000000000000L,0x0000000000020040L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list3379 = new BitSet(new long[]{0x0000010002000002L,0x0000000000000000L,0x0000000000020040L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause3397 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_stream_clause3401 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_stream_clause3415 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_IDENTIFIER_in_stream_clause3429 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause3435 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause3454 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause3456 = new BitSet(new long[]{0x0000000000000000L,0x0000004000400000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause3471 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause3478 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause3482 = new BitSet(new long[]{0x0000000040000008L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause3493 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause3516 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_split_clause3529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause3533 = new BitSet(new long[]{0x0000000000000008L,0x0000000000001000L,0x0000000000400000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause3539 = new BitSet(new long[]{0x0000000000000008L,0x0000000000001000L,0x0000000000400000L});
    public static final BitSet FOLLOW_split_otherwise_in_split_clause3544 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SPLIT_BRANCH_in_split_branch3562 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_split_branch3564 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_split_branch3568 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise3590 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_split_otherwise3594 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_alias_col_ref_in_col_ref3606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dollar_col_ref_in_col_ref3610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_alias_col_ref3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias_col_ref3634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_dollar_col_ref3650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_const_expr3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal3670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_in_literal3674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_in_literal3678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_in_literal3682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_scalar_in_scalar3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_scalar3702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_scalar3715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_scalar3729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_scalar3742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_num_scalar3758 = new BitSet(new long[]{0x1001001008000000L});
    public static final BitSet FOLLOW_INTEGER_in_num_scalar3780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_num_scalar3799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATNUMBER_in_num_scalar3818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_num_scalar3837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_VAL_in_map3870 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_keyvalue_in_map3874 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keyvalue_in_map3880 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_MAP_VAL_in_map3896 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_KEY_VAL_PAIR_in_keyvalue3916 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_map_key_in_keyvalue3918 = new BitSet(new long[]{0x9001001088000000L,0x0201000000400000L,0x0000000020042000L});
    public static final BitSet FOLLOW_const_expr_in_keyvalue3922 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_map_key3937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_VAL_in_bag3955 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tuple_in_bag3959 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_tuple_in_bag3965 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_BAG_VAL_in_bag3981 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_TUPLE_VAL_in_tuple4001 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_literal_in_tuple4005 = new BitSet(new long[]{0x9001001088000008L,0x0201000000400000L,0x0000000020042000L});
    public static final BitSet FOLLOW_literal_in_tuple4012 = new BitSet(new long[]{0x9001001088000008L,0x0201000000400000L,0x0000000020042000L});
    public static final BitSet FOLLOW_TUPLE_VAL_in_tuple4028 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_str_op_in_eid4042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid4050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid4063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid4075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid4088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid4116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_eid4128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid4140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid4154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid4165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid4177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid4192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid4206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid4220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid4234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid4249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid4266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid4282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid4299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid4316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid4330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid4344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid4358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid4369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid4379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid4393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid4409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid4442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid4453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVAL_in_eid4465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid4480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid4496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_eid4511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid4523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid4539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid4554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid4568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid4581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid4591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid4601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid4617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid4647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_eid4664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid4679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid4694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid4708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid4721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid4733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid4747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid4772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid4786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid4800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid4813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid4824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid4838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid4851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid4865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid4878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid4893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid4907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_eid4922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOBAG_in_eid4935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOMAP_in_eid4948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOTUPLE_in_eid4961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_eq_in_rel_op4983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_ne_in_rel_op4997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gt_in_rel_op5011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gte_in_rel_op5025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lt_in_rel_op5038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lte_in_rel_op5052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_rel_op5065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_EQ_in_rel_op_eq5084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_EQ_in_rel_op_eq5094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_NE_in_rel_op_ne5112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_NE_in_rel_op_ne5122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_GT_in_rel_op_gt5140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_GT_in_rel_op_gt5150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_GTE_in_rel_op_gte5168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_GTE_in_rel_op_gte5178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_LT_in_rel_op_lt5196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_LT_in_rel_op_lt5206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_LTE_in_rel_op_lte5224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_OP_LTE_in_rel_op_lte5234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_EQ_in_rel_str_op5249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_NE_in_rel_str_op5259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_GT_in_rel_str_op5269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_LT_in_rel_str_op5279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_GTE_in_rel_str_op5289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_LTE_in_rel_str_op5299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_rel_str_op5309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_synpred42_AstPrinter925 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_field_def_in_synpred42_AstPrinter931 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_MINUS_in_synpred87_AstPrinter1780 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_synpred87_AstPrinter1782 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_synpred87_AstPrinter1786 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_synpred91_AstPrinter1852 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_synpred91_AstPrinter1856 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_synpred91_AstPrinter1860 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_const_expr_in_synpred92_AstPrinter1870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_EXPR_in_synpred95_AstPrinter1904 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_synpred95_AstPrinter1908 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_synpred95_AstPrinter1912 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TUPLE_TYPE_CAST_in_synpred100_AstPrinter1974 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_synpred100_AstPrinter1978 = new BitSet(new long[]{0x0800800404002A08L,0x0100000000000000L,0x0000000010001000L});
    public static final BitSet FOLLOW_type_cast_in_synpred100_AstPrinter1984 = new BitSet(new long[]{0x0800800404002A08L,0x0100000000000000L,0x0000000010001000L});
    public static final BitSet FOLLOW_INTEGER_in_synpred113_AstPrinter2302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_synpred114_AstPrinter2308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_synpred115_AstPrinter2342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_synpred132_AstPrinter2661 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_synpred132_AstPrinter2663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_OUTER_in_synpred132_AstPrinter2723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_join_item_in_synpred132_AstPrinter2732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred150_AstPrinter3293 = new BitSet(new long[]{0x0000000000000002L});

}