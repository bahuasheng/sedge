// $ANTLR 3.4 /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g 2012-02-22 16:40:26

package org.apache.pig.parser;

import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.pig.parser.PigMacro;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
 * Parser file for Pig Parser
 *
 * NOTE: THIS FILE IS THE BASE FOR A FEW TREE PARSER FILES, such as AstValidator.g, 
 *       SO IF YOU CHANGE THIS FILE, YOU WILL PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO 
 *       THOSE FILES AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class QueryParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AND", "AS", "ASC", "BAG", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CHARARRAY", "COGROUP", "COLON", "COMMA", "CROSS", "DCOLON", "DEFINE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "EQUAL", "EXECCOMMAND", "FALSE", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER_L", "IF", "IMPORT", "INNER", "INPUT", "INT", "INTEGER", "INTO", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FIELD_DEF_WITHOUT_IDENTIFIER", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "IDENTIFIER", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "NULL", "PARAMS", "QUERY", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AND=5;
    public static final int AS=6;
    public static final int ASC=7;
    public static final int BAG=8;
    public static final int BOOLEAN=9;
    public static final int BY=10;
    public static final int BYTEARRAY=11;
    public static final int CACHE=12;
    public static final int CHARARRAY=13;
    public static final int COGROUP=14;
    public static final int COLON=15;
    public static final int COMMA=16;
    public static final int CROSS=17;
    public static final int DCOLON=18;
    public static final int DEFINE=19;
    public static final int DESC=20;
    public static final int DIGIT=21;
    public static final int DISTINCT=22;
    public static final int DIV=23;
    public static final int DOLLAR=24;
    public static final int DOLLARVAR=25;
    public static final int DOUBLE=26;
    public static final int DOUBLENUMBER=27;
    public static final int DOUBLE_PERIOD=28;
    public static final int EQUAL=29;
    public static final int EXECCOMMAND=30;
    public static final int FALSE=31;
    public static final int FILTER=32;
    public static final int FLATTEN=33;
    public static final int FLOAT=34;
    public static final int FLOATINGPOINT=35;
    public static final int FLOATNUMBER=36;
    public static final int FOREACH=37;
    public static final int FULL=38;
    public static final int GENERATE=39;
    public static final int GROUP=40;
    public static final int ID=41;
    public static final int IDENTIFIER_L=42;
    public static final int IF=43;
    public static final int IMPORT=44;
    public static final int INNER=45;
    public static final int INPUT=46;
    public static final int INT=47;
    public static final int INTEGER=48;
    public static final int INTO=49;
    public static final int IS=50;
    public static final int JOIN=51;
    public static final int LEFT=52;
    public static final int LEFT_BRACKET=53;
    public static final int LEFT_CURLY=54;
    public static final int LEFT_PAREN=55;
    public static final int LETTER=56;
    public static final int LIMIT=57;
    public static final int LOAD=58;
    public static final int LONG=59;
    public static final int LONGINTEGER=60;
    public static final int MAP=61;
    public static final int MAPREDUCE=62;
    public static final int MINUS=63;
    public static final int ML_COMMENT=64;
    public static final int MULTILINE_QUOTEDSTRING=65;
    public static final int NOT=66;
    public static final int NUM_OP_EQ=67;
    public static final int NUM_OP_GT=68;
    public static final int NUM_OP_GTE=69;
    public static final int NUM_OP_LT=70;
    public static final int NUM_OP_LTE=71;
    public static final int NUM_OP_NE=72;
    public static final int ONSCHEMA=73;
    public static final int OR=74;
    public static final int ORDER=75;
    public static final int OTHERWISE=76;
    public static final int OUTER=77;
    public static final int OUTPUT=78;
    public static final int PARALLEL=79;
    public static final int PARTITION=80;
    public static final int PERCENT=81;
    public static final int PERIOD=82;
    public static final int PLUS=83;
    public static final int POUND=84;
    public static final int QMARK=85;
    public static final int QUOTEDSTRING=86;
    public static final int RETURNS=87;
    public static final int RIGHT=88;
    public static final int RIGHT_BRACKET=89;
    public static final int RIGHT_CURLY=90;
    public static final int RIGHT_PAREN=91;
    public static final int SAMPLE=92;
    public static final int SEMI_COLON=93;
    public static final int SHIP=94;
    public static final int SL_COMMENT=95;
    public static final int SPECIALCHAR=96;
    public static final int SPLIT=97;
    public static final int STAR=98;
    public static final int STDERROR=99;
    public static final int STDIN=100;
    public static final int STDOUT=101;
    public static final int STORE=102;
    public static final int STREAM=103;
    public static final int STR_OP_EQ=104;
    public static final int STR_OP_GT=105;
    public static final int STR_OP_GTE=106;
    public static final int STR_OP_LT=107;
    public static final int STR_OP_LTE=108;
    public static final int STR_OP_MATCHES=109;
    public static final int STR_OP_NE=110;
    public static final int THROUGH=111;
    public static final int TRUE=112;
    public static final int TUPLE=113;
    public static final int UNION=114;
    public static final int USING=115;
    public static final int VOID=116;
    public static final int WS=117;
    public static final int ANY=118;
    public static final int BAG_TYPE=119;
    public static final int BAG_TYPE_CAST=120;
    public static final int BAG_VAL=121;
    public static final int BIN_EXPR=122;
    public static final int BOOL=123;
    public static final int CAST_EXPR=124;
    public static final int COL_RANGE=125;
    public static final int EXPR_IN_PAREN=126;
    public static final int FIELD_DEF=127;
    public static final int FIELD_DEF_WITHOUT_IDENTIFIER=128;
    public static final int FOREACH_PLAN_COMPLEX=129;
    public static final int FOREACH_PLAN_SIMPLE=130;
    public static final int FUNC=131;
    public static final int FUNC_EVAL=132;
    public static final int FUNC_REF=133;
    public static final int IDENTIFIER=134;
    public static final int JOIN_ITEM=135;
    public static final int KEY_VAL_PAIR=136;
    public static final int MACRO_BODY=137;
    public static final int MACRO_DEF=138;
    public static final int MACRO_INLINE=139;
    public static final int MAP_TYPE=140;
    public static final int MAP_VAL=141;
    public static final int NEG=142;
    public static final int NESTED_CMD=143;
    public static final int NESTED_CMD_ASSI=144;
    public static final int NESTED_PROJ=145;
    public static final int NULL=146;
    public static final int PARAMS=147;
    public static final int QUERY=148;
    public static final int RETURN_VAL=149;
    public static final int SPLIT_BRANCH=150;
    public static final int STATEMENT=151;
    public static final int TOBAG=152;
    public static final int TOMAP=153;
    public static final int TOTUPLE=154;
    public static final int TUPLE_TYPE=155;
    public static final int TUPLE_TYPE_CAST=156;
    public static final int TUPLE_VAL=157;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public QueryParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public QueryParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return QueryParser.tokenNames; }
    public String getGrammarFileName() { return "/nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g"; }


    private static Log log = LogFactory.getLog( QueryParser.class );

    private Set<String> memory = new HashSet<String>();

    @Override
    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) 
    throws RecognitionException {
        throw new MismatchedTokenException( ttype, input );
    }

    @Override
    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
    throws RecognitionException {
        throw e;
    }

    @Override
    public String getErrorMessage(RecognitionException e, String[] tokenNames ) {
        if( !log.isDebugEnabled() ) {
            if( e instanceof NoViableAltException ) {
                return "Syntax error, unexpected symbol at or near " + getTokenErrorDisplay( e.token );
            } else {
                return super.getErrorMessage( e, tokenNames );
            }
        }
        
        List stack =  getRuleInvocationStack( e, this.getClass().getName() );
        String msg = null;
        if( e instanceof NoViableAltException ) {
            NoViableAltException nvae = (NoViableAltException)e;
            msg = " no viable alt; token = " + e.token + " (decision=" + nvae.decisionNumber + " state " + nvae.stateNumber + ")" +
                " decision=<<" + nvae.grammarDecisionDescription + ">>";
        } else {
            msg =  super.getErrorMessage( e, tokenNames );
        }
        return stack + " " + msg;
    }

    @Override
    public String getTokenErrorDisplay(Token t) {
        return "'" + t.getText() + "'";
    }

    @Override
    public String getErrorHeader(RecognitionException ex) {
    	return QueryParserUtils.generateErrorHeader( ex, this.getSourceName() );
    }



    public static class query_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:148:1: query : ( statement )* EOF -> ^( QUERY ( statement )* ) ;
    public final QueryParser.query_return query() throws RecognitionException {
        QueryParser.query_return retval = new QueryParser.query_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF2=null;
        QueryParser.statement_return statement1 =null;


        Object EOF2_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:148:7: ( ( statement )* EOF -> ^( QUERY ( statement )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:148:9: ( statement )* EOF
            {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:148:9: ( statement )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==COGROUP||LA1_0==CROSS||LA1_0==DEFINE||LA1_0==DISTINCT||LA1_0==FILTER||LA1_0==FOREACH||LA1_0==GROUP||LA1_0==IDENTIFIER_L||LA1_0==IMPORT||LA1_0==JOIN||LA1_0==LEFT_PAREN||(LA1_0 >= LIMIT && LA1_0 <= LOAD)||LA1_0==MAPREDUCE||LA1_0==ORDER||(LA1_0 >= SAMPLE && LA1_0 <= SEMI_COLON)||LA1_0==SPLIT||(LA1_0 >= STORE && LA1_0 <= STREAM)||LA1_0==UNION) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:148:9: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_query363);
            	    statement1=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_query366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF2);


            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 149:6: -> ^( QUERY ( statement )* )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:149:9: ^( QUERY ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUERY, "QUERY")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:149:18: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:152:1: statement : ( SEMI_COLON !| general_statement | foreach_statement | split_statement | inline_statement | import_statement );
    public final QueryParser.statement_return statement() throws RecognitionException {
        QueryParser.statement_return retval = new QueryParser.statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON3=null;
        QueryParser.general_statement_return general_statement4 =null;

        QueryParser.foreach_statement_return foreach_statement5 =null;

        QueryParser.split_statement_return split_statement6 =null;

        QueryParser.inline_statement_return inline_statement7 =null;

        QueryParser.import_statement_return import_statement8 =null;


        Object SEMI_COLON3_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:152:11: ( SEMI_COLON !| general_statement | foreach_statement | split_statement | inline_statement | import_statement )
            int alt2=6;
            switch ( input.LA(1) ) {
            case SEMI_COLON:
                {
                alt2=1;
                }
                break;
            case IDENTIFIER_L:
                {
                int LA2_2 = input.LA(2);

                if ( (LA2_2==EQUAL) ) {
                    switch ( input.LA(3) ) {
                    case COGROUP:
                    case CROSS:
                    case DEFINE:
                    case DISTINCT:
                    case FILTER:
                    case GROUP:
                    case JOIN:
                    case LIMIT:
                    case LOAD:
                    case MAPREDUCE:
                    case ORDER:
                    case SAMPLE:
                    case STORE:
                    case STREAM:
                    case UNION:
                        {
                        alt2=2;
                        }
                        break;
                    case LEFT_PAREN:
                        {
                        int LA2_10 = input.LA(4);

                        if ( (LA2_10==COGROUP||LA2_10==CROSS||LA2_10==DEFINE||LA2_10==DISTINCT||LA2_10==FILTER||LA2_10==GROUP||LA2_10==JOIN||(LA2_10 >= LIMIT && LA2_10 <= LOAD)||LA2_10==MAPREDUCE||LA2_10==ORDER||LA2_10==SAMPLE||(LA2_10 >= STORE && LA2_10 <= STREAM)||LA2_10==UNION) ) {
                            alt2=2;
                        }
                        else if ( (LA2_10==FOREACH) ) {
                            alt2=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 10, input);

                            throw nvae;

                        }
                        }
                        break;
                    case FOREACH:
                        {
                        alt2=3;
                        }
                        break;
                    case IDENTIFIER_L:
                        {
                        alt2=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 8, input);

                        throw nvae;

                    }

                }
                else if ( (LA2_2==COMMA||LA2_2==LEFT_PAREN) ) {
                    alt2=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 2, input);

                    throw nvae;

                }
                }
                break;
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DISTINCT:
            case FILTER:
            case GROUP:
            case JOIN:
            case LIMIT:
            case LOAD:
            case MAPREDUCE:
            case ORDER:
            case SAMPLE:
            case STORE:
            case STREAM:
            case UNION:
                {
                alt2=2;
                }
                break;
            case LEFT_PAREN:
                {
                int LA2_4 = input.LA(2);

                if ( (LA2_4==COGROUP||LA2_4==CROSS||LA2_4==DEFINE||LA2_4==DISTINCT||LA2_4==FILTER||LA2_4==GROUP||LA2_4==JOIN||(LA2_4 >= LIMIT && LA2_4 <= LOAD)||LA2_4==MAPREDUCE||LA2_4==ORDER||LA2_4==SAMPLE||(LA2_4 >= STORE && LA2_4 <= STREAM)||LA2_4==UNION) ) {
                    alt2=2;
                }
                else if ( (LA2_4==FOREACH) ) {
                    alt2=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }
                }
                break;
            case FOREACH:
                {
                alt2=3;
                }
                break;
            case SPLIT:
                {
                alt2=4;
                }
                break;
            case IMPORT:
                {
                alt2=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:152:13: SEMI_COLON !
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMI_COLON3=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_statement391); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:153:13: general_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_general_statement_in_statement406);
                    general_statement4=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_statement4.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:154:13: foreach_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_statement_in_statement420);
                    foreach_statement5=foreach_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_statement5.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:155:13: split_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_split_statement_in_statement434);
                    split_statement6=split_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, split_statement6.getTree());

                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:156:13: inline_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_statement_in_statement450);
                    inline_statement7=inline_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_statement7.getTree());

                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:157:13: import_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_import_statement_in_statement472);
                    import_statement8=import_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_statement8.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class import_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:160:1: import_statement : import_clause SEMI_COLON !;
    public final QueryParser.import_statement_return import_statement() throws RecognitionException {
        QueryParser.import_statement_return retval = new QueryParser.import_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON10=null;
        QueryParser.import_clause_return import_clause9 =null;


        Object SEMI_COLON10_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:160:18: ( import_clause SEMI_COLON !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:160:20: import_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_import_clause_in_import_statement481);
            import_clause9=import_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, import_clause9.getTree());

            SEMI_COLON10=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_import_statement483); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_statement"


    public static class inline_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:163:1: inline_statement : inline_clause SEMI_COLON !;
    public final QueryParser.inline_statement_return inline_statement() throws RecognitionException {
        QueryParser.inline_statement_return retval = new QueryParser.inline_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON12=null;
        QueryParser.inline_clause_return inline_clause11 =null;


        Object SEMI_COLON12_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:163:18: ( inline_clause SEMI_COLON !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:163:20: inline_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_inline_clause_in_inline_statement493);
            inline_clause11=inline_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_clause11.getTree());

            SEMI_COLON12=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_inline_statement495); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_statement"


    public static class split_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:166:1: split_statement : split_clause SEMI_COLON !;
    public final QueryParser.split_statement_return split_statement() throws RecognitionException {
        QueryParser.split_statement_return retval = new QueryParser.split_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON14=null;
        QueryParser.split_clause_return split_clause13 =null;


        Object SEMI_COLON14_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:166:17: ( split_clause SEMI_COLON !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:166:19: split_clause SEMI_COLON !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_split_clause_in_split_statement505);
            split_clause13=split_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, split_clause13.getTree());

            SEMI_COLON14=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_split_statement507); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_statement"


    public static class general_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:1: general_statement : ( alias EQUAL )? ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) ;
    public final QueryParser.general_statement_return general_statement() throws RecognitionException {
        QueryParser.general_statement_return retval = new QueryParser.general_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL16=null;
        Token LEFT_PAREN19=null;
        Token RIGHT_PAREN22=null;
        Token SEMI_COLON23=null;
        QueryParser.alias_return alias15 =null;

        QueryParser.op_clause_return op_clause17 =null;

        QueryParser.parallel_clause_return parallel_clause18 =null;

        QueryParser.op_clause_return op_clause20 =null;

        QueryParser.parallel_clause_return parallel_clause21 =null;


        Object EQUAL16_tree=null;
        Object LEFT_PAREN19_tree=null;
        Object RIGHT_PAREN22_tree=null;
        Object SEMI_COLON23_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_op_clause=new RewriteRuleSubtreeStream(adaptor,"rule op_clause");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:19: ( ( alias EQUAL )? ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:21: ( alias EQUAL )? ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON
            {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:21: ( alias EQUAL )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IDENTIFIER_L) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:23: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_general_statement519);
                    alias15=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias15.getTree());

                    EQUAL16=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_general_statement521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL16);


                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:38: ( op_clause ( parallel_clause )? | LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==COGROUP||LA6_0==CROSS||LA6_0==DEFINE||LA6_0==DISTINCT||LA6_0==FILTER||LA6_0==GROUP||LA6_0==JOIN||(LA6_0 >= LIMIT && LA6_0 <= LOAD)||LA6_0==MAPREDUCE||LA6_0==ORDER||LA6_0==SAMPLE||(LA6_0 >= STORE && LA6_0 <= STREAM)||LA6_0==UNION) ) {
                alt6=1;
            }
            else if ( (LA6_0==LEFT_PAREN) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:39: op_clause ( parallel_clause )?
                    {
                    pushFollow(FOLLOW_op_clause_in_general_statement527);
                    op_clause17=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_op_clause.add(op_clause17.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:49: ( parallel_clause )?
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==PARALLEL) ) {
                        alt4=1;
                    }
                    switch (alt4) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:49: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_general_statement529);
                            parallel_clause18=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause18.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:68: LEFT_PAREN op_clause ( parallel_clause )? RIGHT_PAREN
                    {
                    LEFT_PAREN19=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_general_statement534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN19);


                    pushFollow(FOLLOW_op_clause_in_general_statement536);
                    op_clause20=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_op_clause.add(op_clause20.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:89: ( parallel_clause )?
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==PARALLEL) ) {
                        alt5=1;
                    }
                    switch (alt5) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:169:89: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_general_statement538);
                            parallel_clause21=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause21.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN22=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_general_statement541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN22);


                    }
                    break;

            }


            SEMI_COLON23=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_general_statement544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON23);


            // AST REWRITE
            // elements: op_clause, parallel_clause, alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 170:18: -> ^( STATEMENT ( alias )? op_clause ( parallel_clause )? )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:170:21: ^( STATEMENT ( alias )? op_clause ( parallel_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENT, "STATEMENT")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:170:34: ( alias )?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_1, stream_op_clause.nextTree());

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:170:51: ( parallel_clause )?
                if ( stream_parallel_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                }
                stream_parallel_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class parallel_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:173:1: parallel_clause : PARALLEL ^ INTEGER ;
    public final QueryParser.parallel_clause_return parallel_clause() throws RecognitionException {
        QueryParser.parallel_clause_return retval = new QueryParser.parallel_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARALLEL24=null;
        Token INTEGER25=null;

        Object PARALLEL24_tree=null;
        Object INTEGER25_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:173:17: ( PARALLEL ^ INTEGER )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:173:19: PARALLEL ^ INTEGER
            {
            root_0 = (Object)adaptor.nil();


            PARALLEL24=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL24_tree = 
            (Object)adaptor.create(PARALLEL24)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARALLEL24_tree, root_0);
            }

            INTEGER25=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER25_tree = 
            (Object)adaptor.create(INTEGER25)
            ;
            adaptor.addChild(root_0, INTEGER25_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class foreach_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:180:1: foreach_statement : ( ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )=> foreach_complex_statement | foreach_simple_statement );
    public final QueryParser.foreach_statement_return foreach_statement() throws RecognitionException {
        QueryParser.foreach_statement_return retval = new QueryParser.foreach_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.foreach_complex_statement_return foreach_complex_statement26 =null;

        QueryParser.foreach_simple_statement_return foreach_simple_statement27 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:180:19: ( ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )=> foreach_complex_statement | foreach_simple_statement )
            int alt7=2;
            switch ( input.LA(1) ) {
            case IDENTIFIER_L:
                {
                int LA7_1 = input.LA(2);

                if ( (((synpred12_QueryParser()&&synpred12_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {
                    alt7=1;
                }
                else if ( ((!input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                    alt7=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 1, input);

                    throw nvae;

                }
                }
                break;
            case FOREACH:
                {
                int LA7_2 = input.LA(2);

                if ( (synpred12_QueryParser()) ) {
                    alt7=1;
                }
                else if ( (true) ) {
                    alt7=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 7, 2, input);

                    throw nvae;

                }
                }
                break;
            case LEFT_PAREN:
                {
                alt7=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:180:21: ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )=> foreach_complex_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_complex_statement_in_foreach_statement625);
                    foreach_complex_statement26=foreach_complex_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_complex_statement26.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:181:21: foreach_simple_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_foreach_simple_statement_in_foreach_statement647);
                    foreach_simple_statement27=foreach_simple_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_simple_statement27.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_statement"


    public static class foreach_complex_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_complex_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:184:1: foreach_complex_statement : ( alias EQUAL )? foreach_clause_complex ( SEMI_COLON )? -> ^( STATEMENT ( alias )? foreach_clause_complex ) ;
    public final QueryParser.foreach_complex_statement_return foreach_complex_statement() throws RecognitionException {
        QueryParser.foreach_complex_statement_return retval = new QueryParser.foreach_complex_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL29=null;
        Token SEMI_COLON31=null;
        QueryParser.alias_return alias28 =null;

        QueryParser.foreach_clause_complex_return foreach_clause_complex30 =null;


        Object EQUAL29_tree=null;
        Object SEMI_COLON31_tree=null;
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_foreach_clause_complex=new RewriteRuleSubtreeStream(adaptor,"rule foreach_clause_complex");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:184:27: ( ( alias EQUAL )? foreach_clause_complex ( SEMI_COLON )? -> ^( STATEMENT ( alias )? foreach_clause_complex ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:184:29: ( alias EQUAL )? foreach_clause_complex ( SEMI_COLON )?
            {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:184:29: ( alias EQUAL )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==IDENTIFIER_L) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:184:31: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_foreach_complex_statement658);
                    alias28=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias28.getTree());

                    EQUAL29=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_foreach_complex_statement660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL29);


                    }
                    break;

            }


            pushFollow(FOLLOW_foreach_clause_complex_in_foreach_complex_statement665);
            foreach_clause_complex30=foreach_clause_complex();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_foreach_clause_complex.add(foreach_clause_complex30.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:184:69: ( SEMI_COLON )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SEMI_COLON) ) {
                int LA9_1 = input.LA(2);

                if ( (synpred14_QueryParser()) ) {
                    alt9=1;
                }
            }
            switch (alt9) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:184:69: SEMI_COLON
                    {
                    SEMI_COLON31=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_complex_statement667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON31);


                    }
                    break;

            }


            // AST REWRITE
            // elements: foreach_clause_complex, alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 185:26: -> ^( STATEMENT ( alias )? foreach_clause_complex )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:185:29: ^( STATEMENT ( alias )? foreach_clause_complex )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENT, "STATEMENT")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:185:42: ( alias )?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_1, stream_foreach_clause_complex.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_complex_statement"


    public static class foreach_simple_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_simple_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:188:1: foreach_simple_statement : ( alias EQUAL )? ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? ) ;
    public final QueryParser.foreach_simple_statement_return foreach_simple_statement() throws RecognitionException {
        QueryParser.foreach_simple_statement_return retval = new QueryParser.foreach_simple_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL33=null;
        Token LEFT_PAREN36=null;
        Token RIGHT_PAREN39=null;
        Token SEMI_COLON40=null;
        QueryParser.alias_return alias32 =null;

        QueryParser.foreach_clause_simple_return foreach_clause_simple34 =null;

        QueryParser.parallel_clause_return parallel_clause35 =null;

        QueryParser.foreach_clause_simple_return foreach_clause_simple37 =null;

        QueryParser.parallel_clause_return parallel_clause38 =null;


        Object EQUAL33_tree=null;
        Object LEFT_PAREN36_tree=null;
        Object RIGHT_PAREN39_tree=null;
        Object SEMI_COLON40_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_parallel_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_clause");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_foreach_clause_simple=new RewriteRuleSubtreeStream(adaptor,"rule foreach_clause_simple");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:188:26: ( ( alias EQUAL )? ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON -> ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:188:28: ( alias EQUAL )? ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN ) SEMI_COLON
            {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:188:28: ( alias EQUAL )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==IDENTIFIER_L) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:188:30: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_foreach_simple_statement717);
                    alias32=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias32.getTree());

                    EQUAL33=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_foreach_simple_statement719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL33);


                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:188:45: ( foreach_clause_simple ( parallel_clause )? | LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==FOREACH) ) {
                alt13=1;
            }
            else if ( (LA13_0==LEFT_PAREN) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:188:46: foreach_clause_simple ( parallel_clause )?
                    {
                    pushFollow(FOLLOW_foreach_clause_simple_in_foreach_simple_statement725);
                    foreach_clause_simple34=foreach_clause_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_foreach_clause_simple.add(foreach_clause_simple34.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:188:68: ( parallel_clause )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==PARALLEL) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:188:68: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_foreach_simple_statement727);
                            parallel_clause35=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause35.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:189:51: LEFT_PAREN foreach_clause_simple ( parallel_clause )? RIGHT_PAREN
                    {
                    LEFT_PAREN36=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_foreach_simple_statement781); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN36);


                    pushFollow(FOLLOW_foreach_clause_simple_in_foreach_simple_statement783);
                    foreach_clause_simple37=foreach_clause_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_foreach_clause_simple.add(foreach_clause_simple37.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:189:84: ( parallel_clause )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0==PARALLEL) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:189:84: parallel_clause
                            {
                            pushFollow(FOLLOW_parallel_clause_in_foreach_simple_statement785);
                            parallel_clause38=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parallel_clause.add(parallel_clause38.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN39=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_foreach_simple_statement788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN39);


                    }
                    break;

            }


            SEMI_COLON40=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_foreach_simple_statement791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON40);


            // AST REWRITE
            // elements: parallel_clause, alias, foreach_clause_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 190:25: -> ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:190:28: ^( STATEMENT ( alias )? foreach_clause_simple ( parallel_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENT, "STATEMENT")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:190:41: ( alias )?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_1, stream_foreach_clause_simple.nextTree());

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:190:70: ( parallel_clause )?
                if ( stream_parallel_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_parallel_clause.nextTree());

                }
                stream_parallel_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_simple_statement"


    public static class alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:193:1: alias : identifier ;
    public final QueryParser.alias_return alias() throws RecognitionException {
        QueryParser.alias_return retval = new QueryParser.alias_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.identifier_return identifier41 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:193:7: ( identifier )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:193:9: identifier
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_alias840);
            identifier41=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier41.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias"


    public static class parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:196:1: parameter : ( identifier | INTEGER | DOUBLENUMBER | QUOTEDSTRING | DOLLARVAR );
    public final QueryParser.parameter_return parameter() throws RecognitionException {
        QueryParser.parameter_return retval = new QueryParser.parameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INTEGER43=null;
        Token DOUBLENUMBER44=null;
        Token QUOTEDSTRING45=null;
        Token DOLLARVAR46=null;
        QueryParser.identifier_return identifier42 =null;


        Object INTEGER43_tree=null;
        Object DOUBLENUMBER44_tree=null;
        Object QUOTEDSTRING45_tree=null;
        Object DOLLARVAR46_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:197:5: ( identifier | INTEGER | DOUBLENUMBER | QUOTEDSTRING | DOLLARVAR )
            int alt14=5;
            switch ( input.LA(1) ) {
            case IDENTIFIER_L:
                {
                alt14=1;
                }
                break;
            case INTEGER:
                {
                alt14=2;
                }
                break;
            case DOUBLENUMBER:
                {
                alt14=3;
                }
                break;
            case QUOTEDSTRING:
                {
                alt14=4;
                }
                break;
            case DOLLARVAR:
                {
                alt14=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:197:7: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_parameter854);
                    identifier42=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier42.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:198:7: INTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    INTEGER43=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_parameter863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER43_tree = 
                    (Object)adaptor.create(INTEGER43)
                    ;
                    adaptor.addChild(root_0, INTEGER43_tree);
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:199:7: DOUBLENUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLENUMBER44=(Token)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_parameter872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER44_tree = 
                    (Object)adaptor.create(DOUBLENUMBER44)
                    ;
                    adaptor.addChild(root_0, DOUBLENUMBER44_tree);
                    }

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:200:7: QUOTEDSTRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTEDSTRING45=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_parameter880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING45_tree = 
                    (Object)adaptor.create(QUOTEDSTRING45)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING45_tree);
                    }

                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:201:7: DOLLARVAR
                    {
                    root_0 = (Object)adaptor.nil();


                    DOLLARVAR46=(Token)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_parameter888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLARVAR46_tree = 
                    (Object)adaptor.create(DOLLARVAR46)
                    ;
                    adaptor.addChild(root_0, DOLLARVAR46_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter"


    public static class content_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "content"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:204:1: content : LEFT_CURLY ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY ;
    public final QueryParser.content_return content() throws RecognitionException {
        QueryParser.content_return retval = new QueryParser.content_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY47=null;
        Token set49=null;
        Token RIGHT_CURLY50=null;
        QueryParser.content_return content48 =null;


        Object LEFT_CURLY47_tree=null;
        Object set49_tree=null;
        Object RIGHT_CURLY50_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:204:9: ( LEFT_CURLY ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:204:11: LEFT_CURLY ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )* RIGHT_CURLY
            {
            root_0 = (Object)adaptor.nil();


            LEFT_CURLY47=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_content897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_CURLY47_tree = 
            (Object)adaptor.create(LEFT_CURLY47)
            ;
            adaptor.addChild(root_0, LEFT_CURLY47_tree);
            }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:204:22: ( content |~ ( LEFT_CURLY | RIGHT_CURLY ) )*
            loop15:
            do {
                int alt15=3;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==LEFT_CURLY) ) {
                    alt15=1;
                }
                else if ( ((LA15_0 >= ALL && LA15_0 <= LEFT_BRACKET)||(LA15_0 >= LEFT_PAREN && LA15_0 <= RIGHT_BRACKET)||(LA15_0 >= RIGHT_PAREN && LA15_0 <= TUPLE_VAL)) ) {
                    alt15=2;
                }


                switch (alt15) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:204:24: content
            	    {
            	    pushFollow(FOLLOW_content_in_content901);
            	    content48=content();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, content48.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:204:34: ~ ( LEFT_CURLY | RIGHT_CURLY )
            	    {
            	    set49=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ALL && input.LA(1) <= LEFT_BRACKET)||(input.LA(1) >= LEFT_PAREN && input.LA(1) <= RIGHT_BRACKET)||(input.LA(1) >= RIGHT_PAREN && input.LA(1) <= TUPLE_VAL) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set49)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            RIGHT_CURLY50=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_content917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_CURLY50_tree = 
            (Object)adaptor.create(RIGHT_CURLY50)
            ;
            adaptor.addChild(root_0, RIGHT_CURLY50_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "content"


    public static class op_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:207:1: op_clause : ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause );
    public final QueryParser.op_clause_return op_clause() throws RecognitionException {
        QueryParser.op_clause_return retval = new QueryParser.op_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.define_clause_return define_clause51 =null;

        QueryParser.load_clause_return load_clause52 =null;

        QueryParser.group_clause_return group_clause53 =null;

        QueryParser.store_clause_return store_clause54 =null;

        QueryParser.filter_clause_return filter_clause55 =null;

        QueryParser.distinct_clause_return distinct_clause56 =null;

        QueryParser.limit_clause_return limit_clause57 =null;

        QueryParser.sample_clause_return sample_clause58 =null;

        QueryParser.order_clause_return order_clause59 =null;

        QueryParser.cross_clause_return cross_clause60 =null;

        QueryParser.join_clause_return join_clause61 =null;

        QueryParser.union_clause_return union_clause62 =null;

        QueryParser.stream_clause_return stream_clause63 =null;

        QueryParser.mr_clause_return mr_clause64 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:207:11: ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause )
            int alt16=14;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt16=1;
                }
                break;
            case LOAD:
                {
                alt16=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt16=3;
                }
                break;
            case STORE:
                {
                alt16=4;
                }
                break;
            case FILTER:
                {
                alt16=5;
                }
                break;
            case DISTINCT:
                {
                alt16=6;
                }
                break;
            case LIMIT:
                {
                alt16=7;
                }
                break;
            case SAMPLE:
                {
                alt16=8;
                }
                break;
            case ORDER:
                {
                alt16=9;
                }
                break;
            case CROSS:
                {
                alt16=10;
                }
                break;
            case JOIN:
                {
                alt16=11;
                }
                break;
            case UNION:
                {
                alt16=12;
                }
                break;
            case STREAM:
                {
                alt16=13;
                }
                break;
            case MAPREDUCE:
                {
                alt16=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:207:13: define_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_clause_in_op_clause926);
                    define_clause51=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_clause51.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:208:13: load_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_load_clause_in_op_clause941);
                    load_clause52=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause52.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:209:13: group_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_group_clause_in_op_clause955);
                    group_clause53=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_clause53.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:210:13: store_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_store_clause_in_op_clause969);
                    store_clause54=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause54.getTree());

                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:211:13: filter_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_filter_clause_in_op_clause983);
                    filter_clause55=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, filter_clause55.getTree());

                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:212:13: distinct_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_distinct_clause_in_op_clause997);
                    distinct_clause56=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_clause56.getTree());

                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:213:13: limit_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_limit_clause_in_op_clause1011);
                    limit_clause57=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause57.getTree());

                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:214:13: sample_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sample_clause_in_op_clause1025);
                    sample_clause58=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sample_clause58.getTree());

                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:215:13: order_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_clause_in_op_clause1039);
                    order_clause59=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_clause59.getTree());

                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:216:13: cross_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cross_clause_in_op_clause1053);
                    cross_clause60=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cross_clause60.getTree());

                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:217:13: join_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_clause_in_op_clause1067);
                    join_clause61=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause61.getTree());

                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:218:13: union_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_clause_in_op_clause1081);
                    union_clause62=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, union_clause62.getTree());

                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:219:13: stream_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stream_clause_in_op_clause1095);
                    stream_clause63=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_clause63.getTree());

                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:220:13: mr_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_mr_clause_in_op_clause1109);
                    mr_clause64=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mr_clause64.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class macro_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_param_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:223:1: macro_param_clause : LEFT_PAREN ( alias ( COMMA alias )* )? RIGHT_PAREN -> ^( PARAMS ( alias )* ) ;
    public final QueryParser.macro_param_clause_return macro_param_clause() throws RecognitionException {
        QueryParser.macro_param_clause_return retval = new QueryParser.macro_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN65=null;
        Token COMMA67=null;
        Token RIGHT_PAREN69=null;
        QueryParser.alias_return alias66 =null;

        QueryParser.alias_return alias68 =null;


        Object LEFT_PAREN65_tree=null;
        Object COMMA67_tree=null;
        Object RIGHT_PAREN69_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:223:20: ( LEFT_PAREN ( alias ( COMMA alias )* )? RIGHT_PAREN -> ^( PARAMS ( alias )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:223:22: LEFT_PAREN ( alias ( COMMA alias )* )? RIGHT_PAREN
            {
            LEFT_PAREN65=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_macro_param_clause1118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN65);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:223:33: ( alias ( COMMA alias )* )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==IDENTIFIER_L) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:223:35: alias ( COMMA alias )*
                    {
                    pushFollow(FOLLOW_alias_in_macro_param_clause1122);
                    alias66=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias66.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:223:41: ( COMMA alias )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==COMMA) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:223:42: COMMA alias
                    	    {
                    	    COMMA67=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_param_clause1125); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA67);


                    	    pushFollow(FOLLOW_alias_in_macro_param_clause1127);
                    	    alias68=alias();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_alias.add(alias68.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN69=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_macro_param_clause1134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN69);


            // AST REWRITE
            // elements: alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 224:5: -> ^( PARAMS ( alias )* )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:224:8: ^( PARAMS ( alias )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:224:17: ( alias )*
                while ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_param_clause"


    public static class macro_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_return_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:227:1: macro_return_clause : RETURNS ( ( alias ( COMMA alias )* ) | VOID ) -> ^( RETURN_VAL ( alias )* ) ;
    public final QueryParser.macro_return_clause_return macro_return_clause() throws RecognitionException {
        QueryParser.macro_return_clause_return retval = new QueryParser.macro_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token RETURNS70=null;
        Token COMMA72=null;
        Token VOID74=null;
        QueryParser.alias_return alias71 =null;

        QueryParser.alias_return alias73 =null;


        Object RETURNS70_tree=null;
        Object COMMA72_tree=null;
        Object VOID74_tree=null;
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RETURNS=new RewriteRuleTokenStream(adaptor,"token RETURNS");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:228:5: ( RETURNS ( ( alias ( COMMA alias )* ) | VOID ) -> ^( RETURN_VAL ( alias )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:228:7: RETURNS ( ( alias ( COMMA alias )* ) | VOID )
            {
            RETURNS70=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_macro_return_clause1161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RETURNS.add(RETURNS70);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:228:15: ( ( alias ( COMMA alias )* ) | VOID )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==IDENTIFIER_L) ) {
                alt20=1;
            }
            else if ( (LA20_0==VOID) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }
            switch (alt20) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:228:16: ( alias ( COMMA alias )* )
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:228:16: ( alias ( COMMA alias )* )
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:228:17: alias ( COMMA alias )*
                    {
                    pushFollow(FOLLOW_alias_in_macro_return_clause1165);
                    alias71=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias71.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:228:23: ( COMMA alias )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==COMMA) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:228:24: COMMA alias
                    	    {
                    	    COMMA72=(Token)match(input,COMMA,FOLLOW_COMMA_in_macro_return_clause1168); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA72);


                    	    pushFollow(FOLLOW_alias_in_macro_return_clause1170);
                    	    alias73=alias();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_alias.add(alias73.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:228:41: VOID
                    {
                    VOID74=(Token)match(input,VOID,FOLLOW_VOID_in_macro_return_clause1177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(VOID74);


                    }
                    break;

            }


            // AST REWRITE
            // elements: alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 229:9: -> ^( RETURN_VAL ( alias )* )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:229:12: ^( RETURN_VAL ( alias )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:229:25: ( alias )*
                while ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.nextTree());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_return_clause"


    public static class macro_body_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_body_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:232:1: macro_body_clause : content -> ^( MACRO_BODY ) ;
    public final QueryParser.macro_body_clause_return macro_body_clause() throws RecognitionException {
        QueryParser.macro_body_clause_return retval = new QueryParser.macro_body_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.content_return content75 =null;


        RewriteRuleSubtreeStream stream_content=new RewriteRuleSubtreeStream(adaptor,"rule content");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:232:19: ( content -> ^( MACRO_BODY ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:232:21: content
            {
            pushFollow(FOLLOW_content_in_macro_body_clause1204);
            content75=content();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_content.add(content75.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 233:5: -> ^( MACRO_BODY )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:233:8: ^( MACRO_BODY )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_BODY, "MACRO_BODY")
                , root_1);

                adaptor.addChild(root_1,  new PigParserNode(new CommonToken(1, (content75!=null?input.toString(content75.start,content75.stop):null)), this.getSourceName(), (content75!=null?((Token)content75.start):null)) );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_body_clause"


    public static class macro_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "macro_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:236:1: macro_clause : macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) ;
    public final QueryParser.macro_clause_return macro_clause() throws RecognitionException {
        QueryParser.macro_clause_return retval = new QueryParser.macro_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.macro_param_clause_return macro_param_clause76 =null;

        QueryParser.macro_return_clause_return macro_return_clause77 =null;

        QueryParser.macro_body_clause_return macro_body_clause78 =null;


        RewriteRuleSubtreeStream stream_macro_body_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_body_clause");
        RewriteRuleSubtreeStream stream_macro_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_param_clause");
        RewriteRuleSubtreeStream stream_macro_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule macro_return_clause");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:236:14: ( macro_param_clause macro_return_clause macro_body_clause -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:236:16: macro_param_clause macro_return_clause macro_body_clause
            {
            pushFollow(FOLLOW_macro_param_clause_in_macro_clause1226);
            macro_param_clause76=macro_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_param_clause.add(macro_param_clause76.getTree());

            pushFollow(FOLLOW_macro_return_clause_in_macro_clause1228);
            macro_return_clause77=macro_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_return_clause.add(macro_return_clause77.getTree());

            pushFollow(FOLLOW_macro_body_clause_in_macro_clause1230);
            macro_body_clause78=macro_body_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_macro_body_clause.add(macro_body_clause78.getTree());

            // AST REWRITE
            // elements: macro_body_clause, macro_return_clause, macro_param_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 237:5: -> ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:237:8: ^( MACRO_DEF macro_param_clause macro_return_clause macro_body_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_DEF, "MACRO_DEF")
                , root_1);

                adaptor.addChild(root_1, stream_macro_param_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_return_clause.nextTree());

                adaptor.addChild(root_1, stream_macro_body_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "macro_clause"


    public static class inline_return_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_return_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:240:1: inline_return_clause : ( alias EQUAL -> ^( RETURN_VAL alias ) | alias ( COMMA alias )+ EQUAL -> ^( RETURN_VAL ( alias )+ ) | -> ^( RETURN_VAL ) );
    public final QueryParser.inline_return_clause_return inline_return_clause() throws RecognitionException {
        QueryParser.inline_return_clause_return retval = new QueryParser.inline_return_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL80=null;
        Token COMMA82=null;
        Token EQUAL84=null;
        QueryParser.alias_return alias79 =null;

        QueryParser.alias_return alias81 =null;

        QueryParser.alias_return alias83 =null;


        Object EQUAL80_tree=null;
        Object COMMA82_tree=null;
        Object EQUAL84_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:241:5: ( alias EQUAL -> ^( RETURN_VAL alias ) | alias ( COMMA alias )+ EQUAL -> ^( RETURN_VAL ( alias )+ ) | -> ^( RETURN_VAL ) )
            int alt22=3;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==IDENTIFIER_L) ) {
                switch ( input.LA(2) ) {
                case EQUAL:
                    {
                    alt22=1;
                    }
                    break;
                case COMMA:
                    {
                    alt22=2;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt22=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 22, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:241:7: alias EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_inline_return_clause1260);
                    alias79=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias79.getTree());

                    EQUAL80=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL80);


                    // AST REWRITE
                    // elements: alias
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 241:19: -> ^( RETURN_VAL alias )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:241:22: ^( RETURN_VAL alias )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_alias.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:242:4: alias ( COMMA alias )+ EQUAL
                    {
                    pushFollow(FOLLOW_alias_in_inline_return_clause1275);
                    alias81=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alias.add(alias81.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:242:10: ( COMMA alias )+
                    int cnt21=0;
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==COMMA) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:242:11: COMMA alias
                    	    {
                    	    COMMA82=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_return_clause1278); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA82);


                    	    pushFollow(FOLLOW_alias_in_inline_return_clause1280);
                    	    alias83=alias();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_alias.add(alias83.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt21 >= 1 ) break loop21;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(21, input);
                                throw eee;
                        }
                        cnt21++;
                    } while (true);


                    EQUAL84=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_inline_return_clause1284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL84);


                    // AST REWRITE
                    // elements: alias
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 242:31: -> ^( RETURN_VAL ( alias )+ )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:242:34: ^( RETURN_VAL ( alias )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        if ( !(stream_alias.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_alias.hasNext() ) {
                            adaptor.addChild(root_1, stream_alias.nextTree());

                        }
                        stream_alias.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:243:4: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 243:4: -> ^( RETURN_VAL )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:243:7: ^( RETURN_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(RETURN_VAL, "RETURN_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_return_clause"


    public static class inline_param_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_param_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:246:1: inline_param_clause : LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) ;
    public final QueryParser.inline_param_clause_return inline_param_clause() throws RecognitionException {
        QueryParser.inline_param_clause_return retval = new QueryParser.inline_param_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN85=null;
        Token COMMA87=null;
        Token RIGHT_PAREN89=null;
        QueryParser.parameter_return parameter86 =null;

        QueryParser.parameter_return parameter88 =null;


        Object LEFT_PAREN85_tree=null;
        Object COMMA87_tree=null;
        Object RIGHT_PAREN89_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:246:21: ( LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN -> ^( PARAMS ( parameter )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:246:23: LEFT_PAREN ( parameter ( COMMA parameter )* )? RIGHT_PAREN
            {
            LEFT_PAREN85=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_inline_param_clause1313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN85);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:246:34: ( parameter ( COMMA parameter )* )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==DOLLARVAR||LA24_0==DOUBLENUMBER||LA24_0==IDENTIFIER_L||LA24_0==INTEGER||LA24_0==QUOTEDSTRING) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:246:36: parameter ( COMMA parameter )*
                    {
                    pushFollow(FOLLOW_parameter_in_inline_param_clause1317);
                    parameter86=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter86.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:246:46: ( COMMA parameter )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:246:47: COMMA parameter
                    	    {
                    	    COMMA87=(Token)match(input,COMMA,FOLLOW_COMMA_in_inline_param_clause1320); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA87);


                    	    pushFollow(FOLLOW_parameter_in_inline_param_clause1322);
                    	    parameter88=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter88.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN89=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_inline_param_clause1329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN89);


            // AST REWRITE
            // elements: parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 247:5: -> ^( PARAMS ( parameter )* )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:247:8: ^( PARAMS ( parameter )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:247:17: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_param_clause"


    public static class inline_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:250:1: inline_clause : inline_return_clause alias inline_param_clause -> ^( MACRO_INLINE alias inline_return_clause inline_param_clause ) ;
    public final QueryParser.inline_clause_return inline_clause() throws RecognitionException {
        QueryParser.inline_clause_return retval = new QueryParser.inline_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.inline_return_clause_return inline_return_clause90 =null;

        QueryParser.alias_return alias91 =null;

        QueryParser.inline_param_clause_return inline_param_clause92 =null;


        RewriteRuleSubtreeStream stream_inline_return_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_return_clause");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_inline_param_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_param_clause");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:250:15: ( inline_return_clause alias inline_param_clause -> ^( MACRO_INLINE alias inline_return_clause inline_param_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:250:17: inline_return_clause alias inline_param_clause
            {
            pushFollow(FOLLOW_inline_return_clause_in_inline_clause1351);
            inline_return_clause90=inline_return_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_return_clause.add(inline_return_clause90.getTree());

            pushFollow(FOLLOW_alias_in_inline_clause1353);
            alias91=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias91.getTree());

            pushFollow(FOLLOW_inline_param_clause_in_inline_clause1355);
            inline_param_clause92=inline_param_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inline_param_clause.add(inline_param_clause92.getTree());

            // AST REWRITE
            // elements: inline_return_clause, alias, inline_param_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 251:5: -> ^( MACRO_INLINE alias inline_return_clause inline_param_clause )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:251:8: ^( MACRO_INLINE alias inline_return_clause inline_param_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MACRO_INLINE, "MACRO_INLINE")
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_1, stream_inline_return_clause.nextTree());

                adaptor.addChild(root_1, stream_inline_param_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_clause"


    public static class import_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "import_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:254:1: import_clause : IMPORT ^ QUOTEDSTRING ;
    public final QueryParser.import_clause_return import_clause() throws RecognitionException {
        QueryParser.import_clause_return retval = new QueryParser.import_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT93=null;
        Token QUOTEDSTRING94=null;

        Object IMPORT93_tree=null;
        Object QUOTEDSTRING94_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:254:15: ( IMPORT ^ QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:254:17: IMPORT ^ QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            IMPORT93=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_import_clause1380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT93_tree = 
            (Object)adaptor.create(IMPORT93)
            ;
            root_0 = (Object)adaptor.becomeRoot(IMPORT93_tree, root_0);
            }

            QUOTEDSTRING94=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_import_clause1383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING94_tree = 
            (Object)adaptor.create(QUOTEDSTRING94)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING94_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "import_clause"


    public static class define_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:257:1: define_clause : DEFINE ^ alias ( cmd | func_clause | macro_clause ) ;
    public final QueryParser.define_clause_return define_clause() throws RecognitionException {
        QueryParser.define_clause_return retval = new QueryParser.define_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE95=null;
        QueryParser.alias_return alias96 =null;

        QueryParser.cmd_return cmd97 =null;

        QueryParser.func_clause_return func_clause98 =null;

        QueryParser.macro_clause_return macro_clause99 =null;


        Object DEFINE95_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:257:15: ( DEFINE ^ alias ( cmd | func_clause | macro_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:257:17: DEFINE ^ alias ( cmd | func_clause | macro_clause )
            {
            root_0 = (Object)adaptor.nil();


            DEFINE95=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause1392); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINE95_tree = 
            (Object)adaptor.create(DEFINE95)
            ;
            root_0 = (Object)adaptor.becomeRoot(DEFINE95_tree, root_0);
            }

            pushFollow(FOLLOW_alias_in_define_clause1395);
            alias96=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, alias96.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:257:31: ( cmd | func_clause | macro_clause )
            int alt25=3;
            switch ( input.LA(1) ) {
            case EXECCOMMAND:
                {
                alt25=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FOREACH:
            case FULL:
            case GENERATE:
            case GROUP:
            case IDENTIFIER_L:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LIMIT:
            case LOAD:
            case LONG:
            case MAP:
            case MAPREDUCE:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case RETURNS:
            case RIGHT:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
                {
                alt25=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt25=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }

            switch (alt25) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:257:33: cmd
                    {
                    pushFollow(FOLLOW_cmd_in_define_clause1399);
                    cmd97=cmd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cmd97.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:257:39: func_clause
                    {
                    pushFollow(FOLLOW_func_clause_in_define_clause1403);
                    func_clause98=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause98.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:257:53: macro_clause
                    {
                    pushFollow(FOLLOW_macro_clause_in_define_clause1407);
                    macro_clause99=macro_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, macro_clause99.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:260:1: cmd : EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ;
    public final QueryParser.cmd_return cmd() throws RecognitionException {
        QueryParser.cmd_return retval = new QueryParser.cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EXECCOMMAND100=null;
        QueryParser.ship_clause_return ship_clause101 =null;

        QueryParser.cache_clause_return cache_clause102 =null;

        QueryParser.input_clause_return input_clause103 =null;

        QueryParser.output_clause_return output_clause104 =null;

        QueryParser.error_clause_return error_clause105 =null;


        Object EXECCOMMAND100_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:260:5: ( EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:260:7: EXECCOMMAND ^ ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            {
            root_0 = (Object)adaptor.nil();


            EXECCOMMAND100=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd1417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND100_tree = 
            (Object)adaptor.create(EXECCOMMAND100)
            ;
            root_0 = (Object)adaptor.becomeRoot(EXECCOMMAND100_tree, root_0);
            }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:260:20: ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
            loop26:
            do {
                int alt26=6;
                switch ( input.LA(1) ) {
                case SHIP:
                    {
                    alt26=1;
                    }
                    break;
                case CACHE:
                    {
                    alt26=2;
                    }
                    break;
                case INPUT:
                    {
                    alt26=3;
                    }
                    break;
                case OUTPUT:
                    {
                    alt26=4;
                    }
                    break;
                case STDERROR:
                    {
                    alt26=5;
                    }
                    break;

                }

                switch (alt26) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:260:22: ship_clause
            	    {
            	    pushFollow(FOLLOW_ship_clause_in_cmd1422);
            	    ship_clause101=ship_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ship_clause101.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:260:36: cache_clause
            	    {
            	    pushFollow(FOLLOW_cache_clause_in_cmd1426);
            	    cache_clause102=cache_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cache_clause102.getTree());

            	    }
            	    break;
            	case 3 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:260:51: input_clause
            	    {
            	    pushFollow(FOLLOW_input_clause_in_cmd1430);
            	    input_clause103=input_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, input_clause103.getTree());

            	    }
            	    break;
            	case 4 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:260:66: output_clause
            	    {
            	    pushFollow(FOLLOW_output_clause_in_cmd1434);
            	    output_clause104=output_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, output_clause104.getTree());

            	    }
            	    break;
            	case 5 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:260:82: error_clause
            	    {
            	    pushFollow(FOLLOW_error_clause_in_cmd1438);
            	    error_clause105=error_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, error_clause105.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class ship_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:263:1: ship_clause : SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !;
    public final QueryParser.ship_clause_return ship_clause() throws RecognitionException {
        QueryParser.ship_clause_return retval = new QueryParser.ship_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SHIP106=null;
        Token LEFT_PAREN107=null;
        Token RIGHT_PAREN109=null;
        QueryParser.path_list_return path_list108 =null;


        Object SHIP106_tree=null;
        Object LEFT_PAREN107_tree=null;
        Object RIGHT_PAREN109_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:263:13: ( SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:263:15: SHIP ^ LEFT_PAREN ! ( path_list )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            SHIP106=(Token)match(input,SHIP,FOLLOW_SHIP_in_ship_clause1450); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP106_tree = 
            (Object)adaptor.create(SHIP106)
            ;
            root_0 = (Object)adaptor.becomeRoot(SHIP106_tree, root_0);
            }

            LEFT_PAREN107=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_ship_clause1453); if (state.failed) return retval;

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:263:33: ( path_list )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==QUOTEDSTRING) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:263:33: path_list
                    {
                    pushFollow(FOLLOW_path_list_in_ship_clause1456);
                    path_list108=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list108.getTree());

                    }
                    break;

            }


            RIGHT_PAREN109=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_ship_clause1459); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:266:1: path_list : QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ ;
    public final QueryParser.path_list_return path_list() throws RecognitionException {
        QueryParser.path_list_return retval = new QueryParser.path_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING110=null;
        Token COMMA111=null;
        Token QUOTEDSTRING112=null;

        Object QUOTEDSTRING110_tree=null;
        Object COMMA111_tree=null;
        Object QUOTEDSTRING112_tree=null;
        RewriteRuleTokenStream stream_QUOTEDSTRING=new RewriteRuleTokenStream(adaptor,"token QUOTEDSTRING");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:266:11: ( QUOTEDSTRING ( COMMA QUOTEDSTRING )* -> ( QUOTEDSTRING )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:266:13: QUOTEDSTRING ( COMMA QUOTEDSTRING )*
            {
            QUOTEDSTRING110=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list1469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING110);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:266:26: ( COMMA QUOTEDSTRING )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==COMMA) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:266:28: COMMA QUOTEDSTRING
            	    {
            	    COMMA111=(Token)match(input,COMMA,FOLLOW_COMMA_in_path_list1473); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA111);


            	    QUOTEDSTRING112=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list1475); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_QUOTEDSTRING.add(QUOTEDSTRING112);


            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            // AST REWRITE
            // elements: QUOTEDSTRING
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 267:10: -> ( QUOTEDSTRING )+
            {
                if ( !(stream_QUOTEDSTRING.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_QUOTEDSTRING.hasNext() ) {
                    adaptor.addChild(root_0, 
                    stream_QUOTEDSTRING.nextNode()
                    );

                }
                stream_QUOTEDSTRING.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:270:1: cache_clause : CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !;
    public final QueryParser.cache_clause_return cache_clause() throws RecognitionException {
        QueryParser.cache_clause_return retval = new QueryParser.cache_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CACHE113=null;
        Token LEFT_PAREN114=null;
        Token RIGHT_PAREN116=null;
        QueryParser.path_list_return path_list115 =null;


        Object CACHE113_tree=null;
        Object LEFT_PAREN114_tree=null;
        Object RIGHT_PAREN116_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:270:14: ( CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:270:16: CACHE ^ LEFT_PAREN ! path_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            CACHE113=(Token)match(input,CACHE,FOLLOW_CACHE_in_cache_clause1502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE113_tree = 
            (Object)adaptor.create(CACHE113)
            ;
            root_0 = (Object)adaptor.becomeRoot(CACHE113_tree, root_0);
            }

            LEFT_PAREN114=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cache_clause1505); if (state.failed) return retval;

            pushFollow(FOLLOW_path_list_in_cache_clause1508);
            path_list115=path_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list115.getTree());

            RIGHT_PAREN116=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cache_clause1510); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:273:1: input_clause : INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.input_clause_return input_clause() throws RecognitionException {
        QueryParser.input_clause_return retval = new QueryParser.input_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token INPUT117=null;
        Token LEFT_PAREN118=null;
        Token RIGHT_PAREN120=null;
        QueryParser.stream_cmd_list_return stream_cmd_list119 =null;


        Object INPUT117_tree=null;
        Object LEFT_PAREN118_tree=null;
        Object RIGHT_PAREN120_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:273:14: ( INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:273:16: INPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            INPUT117=(Token)match(input,INPUT,FOLLOW_INPUT_in_input_clause1520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT117_tree = 
            (Object)adaptor.create(INPUT117)
            ;
            root_0 = (Object)adaptor.becomeRoot(INPUT117_tree, root_0);
            }

            LEFT_PAREN118=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_input_clause1523); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_input_clause1526);
            stream_cmd_list119=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list119.getTree());

            RIGHT_PAREN120=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_input_clause1528); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class stream_cmd_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:276:1: stream_cmd_list : stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ ;
    public final QueryParser.stream_cmd_list_return stream_cmd_list() throws RecognitionException {
        QueryParser.stream_cmd_list_return retval = new QueryParser.stream_cmd_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA122=null;
        QueryParser.stream_cmd_return stream_cmd121 =null;

        QueryParser.stream_cmd_return stream_cmd123 =null;


        Object COMMA122_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_stream_cmd=new RewriteRuleSubtreeStream(adaptor,"rule stream_cmd");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:276:17: ( stream_cmd ( COMMA stream_cmd )* -> ( stream_cmd )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:276:19: stream_cmd ( COMMA stream_cmd )*
            {
            pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list1538);
            stream_cmd121=stream_cmd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd121.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:276:30: ( COMMA stream_cmd )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==COMMA) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:276:32: COMMA stream_cmd
            	    {
            	    COMMA122=(Token)match(input,COMMA,FOLLOW_COMMA_in_stream_cmd_list1542); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA122);


            	    pushFollow(FOLLOW_stream_cmd_in_stream_cmd_list1544);
            	    stream_cmd123=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_stream_cmd.add(stream_cmd123.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            // AST REWRITE
            // elements: stream_cmd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 277:16: -> ( stream_cmd )+
            {
                if ( !(stream_stream_cmd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_stream_cmd.hasNext() ) {
                    adaptor.addChild(root_0, stream_stream_cmd.nextTree());

                }
                stream_stream_cmd.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd_list"


    public static class stream_cmd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:280:1: stream_cmd : ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! ( func_clause ) )? ;
    public final QueryParser.stream_cmd_return stream_cmd() throws RecognitionException {
        QueryParser.stream_cmd_return retval = new QueryParser.stream_cmd_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set124=null;
        Token USING125=null;
        QueryParser.func_clause_return func_clause126 =null;


        Object set124_tree=null;
        Object USING125_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:280:12: ( ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! ( func_clause ) )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:280:14: ( STDIN | STDOUT | QUOTEDSTRING ) ^ ( USING ! ( func_clause ) )?
            {
            root_0 = (Object)adaptor.nil();


            set124=(Token)input.LT(1);

            set124=(Token)input.LT(1);

            if ( input.LA(1)==QUOTEDSTRING||(input.LA(1) >= STDIN && input.LA(1) <= STDOUT) ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set124)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:280:49: ( USING ! ( func_clause ) )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==USING) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:280:51: USING ! ( func_clause )
                    {
                    USING125=(Token)match(input,USING,FOLLOW_USING_in_stream_cmd1593); if (state.failed) return retval;

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:280:58: ( func_clause )
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:280:60: func_clause
                    {
                    pushFollow(FOLLOW_func_clause_in_stream_cmd1598);
                    func_clause126=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause126.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class output_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:283:1: output_clause : OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !;
    public final QueryParser.output_clause_return output_clause() throws RecognitionException {
        QueryParser.output_clause_return retval = new QueryParser.output_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OUTPUT127=null;
        Token LEFT_PAREN128=null;
        Token RIGHT_PAREN130=null;
        QueryParser.stream_cmd_list_return stream_cmd_list129 =null;


        Object OUTPUT127_tree=null;
        Object LEFT_PAREN128_tree=null;
        Object RIGHT_PAREN130_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:283:15: ( OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:283:17: OUTPUT ^ LEFT_PAREN ! stream_cmd_list RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            OUTPUT127=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause1612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT127_tree = 
            (Object)adaptor.create(OUTPUT127)
            ;
            root_0 = (Object)adaptor.becomeRoot(OUTPUT127_tree, root_0);
            }

            LEFT_PAREN128=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_output_clause1615); if (state.failed) return retval;

            pushFollow(FOLLOW_stream_cmd_list_in_output_clause1618);
            stream_cmd_list129=stream_cmd_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, stream_cmd_list129.getTree());

            RIGHT_PAREN130=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_output_clause1620); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:286:1: error_clause : STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !;
    public final QueryParser.error_clause_return error_clause() throws RecognitionException {
        QueryParser.error_clause_return retval = new QueryParser.error_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STDERROR131=null;
        Token LEFT_PAREN132=null;
        Token QUOTEDSTRING133=null;
        Token LIMIT134=null;
        Token INTEGER135=null;
        Token RIGHT_PAREN136=null;

        Object STDERROR131_tree=null;
        Object LEFT_PAREN132_tree=null;
        Object QUOTEDSTRING133_tree=null;
        Object LIMIT134_tree=null;
        Object INTEGER135_tree=null;
        Object RIGHT_PAREN136_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:286:14: ( STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:286:16: STDERROR ^ LEFT_PAREN ! ( QUOTEDSTRING ( LIMIT ! INTEGER )? )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            STDERROR131=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause1630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR131_tree = 
            (Object)adaptor.create(STDERROR131)
            ;
            root_0 = (Object)adaptor.becomeRoot(STDERROR131_tree, root_0);
            }

            LEFT_PAREN132=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_error_clause1633); if (state.failed) return retval;

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:286:38: ( QUOTEDSTRING ( LIMIT ! INTEGER )? )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==QUOTEDSTRING) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:286:40: QUOTEDSTRING ( LIMIT ! INTEGER )?
                    {
                    QUOTEDSTRING133=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause1638); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING133_tree = 
                    (Object)adaptor.create(QUOTEDSTRING133)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING133_tree);
                    }

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:286:53: ( LIMIT ! INTEGER )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==LIMIT) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:286:55: LIMIT ! INTEGER
                            {
                            LIMIT134=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_error_clause1642); if (state.failed) return retval;

                            INTEGER135=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause1645); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            INTEGER135_tree = 
                            (Object)adaptor.create(INTEGER135)
                            ;
                            adaptor.addChild(root_0, INTEGER135_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            RIGHT_PAREN136=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_error_clause1653); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:289:1: load_clause : LOAD ^ filename ( USING ! func_clause )? ( as_clause )? ;
    public final QueryParser.load_clause_return load_clause() throws RecognitionException {
        QueryParser.load_clause_return retval = new QueryParser.load_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LOAD137=null;
        Token USING139=null;
        QueryParser.filename_return filename138 =null;

        QueryParser.func_clause_return func_clause140 =null;

        QueryParser.as_clause_return as_clause141 =null;


        Object LOAD137_tree=null;
        Object USING139_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:289:13: ( LOAD ^ filename ( USING ! func_clause )? ( as_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:289:15: LOAD ^ filename ( USING ! func_clause )? ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            LOAD137=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_clause1663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD137_tree = 
            (Object)adaptor.create(LOAD137)
            ;
            root_0 = (Object)adaptor.becomeRoot(LOAD137_tree, root_0);
            }

            pushFollow(FOLLOW_filename_in_load_clause1666);
            filename138=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, filename138.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:289:30: ( USING ! func_clause )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==USING) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:289:32: USING ! func_clause
                    {
                    USING139=(Token)match(input,USING,FOLLOW_USING_in_load_clause1670); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_load_clause1673);
                    func_clause140=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause140.getTree());

                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:289:54: ( as_clause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==AS) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:289:54: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_load_clause1678);
                    as_clause141=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause141.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class filename_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filename"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:292:1: filename : QUOTEDSTRING ;
    public final QueryParser.filename_return filename() throws RecognitionException {
        QueryParser.filename_return retval = new QueryParser.filename_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING142=null;

        Object QUOTEDSTRING142_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:292:10: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:292:12: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING142=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_filename1688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING142_tree = 
            (Object)adaptor.create(QUOTEDSTRING142)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING142_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filename"


    public static class as_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:1: as_clause : AS ^ ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) ;
    public final QueryParser.as_clause_return as_clause() throws RecognitionException {
        QueryParser.as_clause_return retval = new QueryParser.as_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS143=null;
        Token LEFT_PAREN144=null;
        Token RIGHT_PAREN146=null;
        QueryParser.field_def_list_return field_def_list145 =null;

        QueryParser.field_def_return field_def147 =null;


        Object AS143_tree=null;
        Object LEFT_PAREN144_tree=null;
        Object RIGHT_PAREN146_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:10: ( AS ^ ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:12: AS ^ ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
            {
            root_0 = (Object)adaptor.nil();


            AS143=(Token)match(input,AS,FOLLOW_AS_in_as_clause1696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS143_tree = 
            (Object)adaptor.create(AS143)
            ;
            root_0 = (Object)adaptor.becomeRoot(AS143_tree, root_0);
            }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:16: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==LEFT_PAREN) ) {
                int LA35_1 = input.LA(2);

                if ( (synpred65_QueryParser()) ) {
                    alt35=1;
                }
                else if ( (true) ) {
                    alt35=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 35, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA35_0 >= BAG && LA35_0 <= BOOLEAN)||LA35_0==BYTEARRAY||LA35_0==CHARARRAY||LA35_0==DOUBLE||LA35_0==FLOAT||LA35_0==IDENTIFIER_L||LA35_0==INT||(LA35_0 >= LEFT_BRACKET && LA35_0 <= LEFT_CURLY)||LA35_0==LONG||LA35_0==MAP||LA35_0==TUPLE) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:18: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:18: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:20: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                    {
                    LEFT_PAREN144=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_as_clause1703); if (state.failed) return retval;

                    pushFollow(FOLLOW_field_def_list_in_as_clause1706);
                    field_def_list145=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list145.getTree());

                    RIGHT_PAREN146=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_as_clause1708); if (state.failed) return retval;

                    }


                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:64: field_def
                    {
                    pushFollow(FOLLOW_field_def_in_as_clause1715);
                    field_def147=field_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def147.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class field_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:298:1: field_def : ( identifier ( COLON type )? -> ^( FIELD_DEF identifier ( type )? ) | type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER type ) );
    public final QueryParser.field_def_return field_def() throws RecognitionException {
        QueryParser.field_def_return retval = new QueryParser.field_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON149=null;
        QueryParser.identifier_return identifier148 =null;

        QueryParser.type_return type150 =null;

        QueryParser.type_return type151 =null;


        Object COLON149_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:298:11: ( identifier ( COLON type )? -> ^( FIELD_DEF identifier ( type )? ) | type -> ^( FIELD_DEF_WITHOUT_IDENTIFIER type ) )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==IDENTIFIER_L) ) {
                alt37=1;
            }
            else if ( ((LA37_0 >= BAG && LA37_0 <= BOOLEAN)||LA37_0==BYTEARRAY||LA37_0==CHARARRAY||LA37_0==DOUBLE||LA37_0==FLOAT||LA37_0==INT||(LA37_0 >= LEFT_BRACKET && LA37_0 <= LEFT_PAREN)||LA37_0==LONG||LA37_0==MAP||LA37_0==TUPLE) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:298:13: identifier ( COLON type )?
                    {
                    pushFollow(FOLLOW_identifier_in_field_def1726);
                    identifier148=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier148.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:298:24: ( COLON type )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==COLON) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:298:26: COLON type
                            {
                            COLON149=(Token)match(input,COLON,FOLLOW_COLON_in_field_def1730); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON149);


                            pushFollow(FOLLOW_type_in_field_def1732);
                            type150=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type150.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: type, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 299:10: -> ^( FIELD_DEF identifier ( type )? )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:299:13: ^( FIELD_DEF identifier ( type )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF, "FIELD_DEF")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:299:37: ( type )?
                        if ( stream_type.hasNext() ) {
                            adaptor.addChild(root_1, stream_type.nextTree());

                        }
                        stream_type.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:300:13: type
                    {
                    pushFollow(FOLLOW_type_in_field_def1771);
                    type151=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type151.getTree());

                    // AST REWRITE
                    // elements: type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 301:10: -> ^( FIELD_DEF_WITHOUT_IDENTIFIER type )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:301:13: ^( FIELD_DEF_WITHOUT_IDENTIFIER type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_DEF_WITHOUT_IDENTIFIER, "FIELD_DEF_WITHOUT_IDENTIFIER")
                        , root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    public static class field_def_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:304:1: field_def_list : field_def ( COMMA field_def )* -> ( field_def )+ ;
    public final QueryParser.field_def_list_return field_def_list() throws RecognitionException {
        QueryParser.field_def_list_return retval = new QueryParser.field_def_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA153=null;
        QueryParser.field_def_return field_def152 =null;

        QueryParser.field_def_return field_def154 =null;


        Object COMMA153_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_field_def=new RewriteRuleSubtreeStream(adaptor,"rule field_def");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:304:16: ( field_def ( COMMA field_def )* -> ( field_def )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:304:18: field_def ( COMMA field_def )*
            {
            pushFollow(FOLLOW_field_def_in_field_def_list1799);
            field_def152=field_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_def.add(field_def152.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:304:28: ( COMMA field_def )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==COMMA) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:304:30: COMMA field_def
            	    {
            	    COMMA153=(Token)match(input,COMMA,FOLLOW_COMMA_in_field_def_list1803); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA153);


            	    pushFollow(FOLLOW_field_def_in_field_def_list1805);
            	    field_def154=field_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_def.add(field_def154.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            // AST REWRITE
            // elements: field_def
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 305:15: -> ( field_def )+
            {
                if ( !(stream_field_def.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_def.hasNext() ) {
                    adaptor.addChild(root_0, stream_field_def.nextTree());

                }
                stream_field_def.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:308:1: type : ( simple_type | tuple_type | bag_type | map_type );
    public final QueryParser.type_return type() throws RecognitionException {
        QueryParser.type_return retval = new QueryParser.type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type155 =null;

        QueryParser.tuple_type_return tuple_type156 =null;

        QueryParser.bag_type_return bag_type157 =null;

        QueryParser.map_type_return map_type158 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:308:6: ( simple_type | tuple_type | bag_type | map_type )
            int alt39=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt39=1;
                }
                break;
            case LEFT_PAREN:
            case TUPLE:
                {
                alt39=2;
                }
                break;
            case BAG:
            case LEFT_CURLY:
                {
                alt39=3;
                }
                break;
            case LEFT_BRACKET:
            case MAP:
                {
                alt39=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:308:8: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_type1836);
                    simple_type155=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type155.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:308:22: tuple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_tuple_type_in_type1840);
                    tuple_type156=tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple_type156.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:308:35: bag_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bag_type_in_type1844);
                    bag_type157=bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bag_type157.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:308:46: map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_type_in_type1848);
                    map_type158=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_type158.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class simple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:311:1: simple_type : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY );
    public final QueryParser.simple_type_return simple_type() throws RecognitionException {
        QueryParser.simple_type_return retval = new QueryParser.simple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set159=null;

        Object set159_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:311:13: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set159=(Token)input.LT(1);

            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTEARRAY||input.LA(1)==CHARARRAY||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set159)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class tuple_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:314:1: tuple_type : ( TUPLE )? LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final QueryParser.tuple_type_return tuple_type() throws RecognitionException {
        QueryParser.tuple_type_return retval = new QueryParser.tuple_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE160=null;
        Token LEFT_PAREN161=null;
        Token RIGHT_PAREN163=null;
        QueryParser.field_def_list_return field_def_list162 =null;


        Object TUPLE160_tree=null;
        Object LEFT_PAREN161_tree=null;
        Object RIGHT_PAREN163_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_TUPLE=new RewriteRuleTokenStream(adaptor,"token TUPLE");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_field_def_list=new RewriteRuleSubtreeStream(adaptor,"rule field_def_list");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:314:12: ( ( TUPLE )? LEFT_PAREN ( field_def_list )? RIGHT_PAREN -> ^( TUPLE_TYPE ( field_def_list )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:314:14: ( TUPLE )? LEFT_PAREN ( field_def_list )? RIGHT_PAREN
            {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:314:14: ( TUPLE )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==TUPLE) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:314:14: TUPLE
                    {
                    TUPLE160=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_tuple_type1890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TUPLE.add(TUPLE160);


                    }
                    break;

            }


            LEFT_PAREN161=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple_type1893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN161);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:314:32: ( field_def_list )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0 >= BAG && LA41_0 <= BOOLEAN)||LA41_0==BYTEARRAY||LA41_0==CHARARRAY||LA41_0==DOUBLE||LA41_0==FLOAT||LA41_0==IDENTIFIER_L||LA41_0==INT||(LA41_0 >= LEFT_BRACKET && LA41_0 <= LEFT_PAREN)||LA41_0==LONG||LA41_0==MAP||LA41_0==TUPLE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:314:32: field_def_list
                    {
                    pushFollow(FOLLOW_field_def_list_in_tuple_type1895);
                    field_def_list162=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_def_list.add(field_def_list162.getTree());

                    }
                    break;

            }


            RIGHT_PAREN163=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple_type1898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN163);


            // AST REWRITE
            // elements: field_def_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:11: -> ^( TUPLE_TYPE ( field_def_list )? )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:315:14: ^( TUPLE_TYPE ( field_def_list )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE, "TUPLE_TYPE")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:315:28: ( field_def_list )?
                if ( stream_field_def_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_field_def_list.nextTree());

                }
                stream_field_def_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class bag_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:318:1: bag_type : ( BAG )? LEFT_CURLY ( ( identifier COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier )? ( tuple_type )? ) ;
    public final QueryParser.bag_type_return bag_type() throws RecognitionException {
        QueryParser.bag_type_return retval = new QueryParser.bag_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG164=null;
        Token LEFT_CURLY165=null;
        Token COLON167=null;
        Token RIGHT_CURLY169=null;
        QueryParser.identifier_return identifier166 =null;

        QueryParser.tuple_type_return tuple_type168 =null;


        Object BAG164_tree=null;
        Object LEFT_CURLY165_tree=null;
        Object COLON167_tree=null;
        Object RIGHT_CURLY169_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_BAG=new RewriteRuleTokenStream(adaptor,"token BAG");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_tuple_type=new RewriteRuleSubtreeStream(adaptor,"rule tuple_type");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:318:10: ( ( BAG )? LEFT_CURLY ( ( identifier COLON )? tuple_type )? RIGHT_CURLY -> ^( BAG_TYPE ( identifier )? ( tuple_type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:318:12: ( BAG )? LEFT_CURLY ( ( identifier COLON )? tuple_type )? RIGHT_CURLY
            {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:318:12: ( BAG )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==BAG) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:318:12: BAG
                    {
                    BAG164=(Token)match(input,BAG,FOLLOW_BAG_in_bag_type1928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BAG.add(BAG164);


                    }
                    break;

            }


            LEFT_CURLY165=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag_type1931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY165);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:318:28: ( ( identifier COLON )? tuple_type )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==IDENTIFIER_L||LA44_0==LEFT_PAREN||LA44_0==TUPLE) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:318:30: ( identifier COLON )? tuple_type
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:318:30: ( identifier COLON )?
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==IDENTIFIER_L) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:318:32: identifier COLON
                            {
                            pushFollow(FOLLOW_identifier_in_bag_type1937);
                            identifier166=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(identifier166.getTree());

                            COLON167=(Token)match(input,COLON,FOLLOW_COLON_in_bag_type1939); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON167);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tuple_type_in_bag_type1944);
                    tuple_type168=tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tuple_type.add(tuple_type168.getTree());

                    }
                    break;

            }


            RIGHT_CURLY169=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag_type1949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY169);


            // AST REWRITE
            // elements: tuple_type, identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:9: -> ^( BAG_TYPE ( identifier )? ( tuple_type )? )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:319:12: ^( BAG_TYPE ( identifier )? ( tuple_type )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BAG_TYPE, "BAG_TYPE")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:319:24: ( identifier )?
                if ( stream_identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier.nextTree());

                }
                stream_identifier.reset();

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:319:36: ( tuple_type )?
                if ( stream_tuple_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_tuple_type.nextTree());

                }
                stream_tuple_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type"


    public static class map_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:322:1: map_type : ( MAP )? LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) ;
    public final QueryParser.map_type_return map_type() throws RecognitionException {
        QueryParser.map_type_return retval = new QueryParser.map_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAP170=null;
        Token LEFT_BRACKET171=null;
        Token RIGHT_BRACKET173=null;
        QueryParser.type_return type172 =null;


        Object MAP170_tree=null;
        Object LEFT_BRACKET171_tree=null;
        Object RIGHT_BRACKET173_tree=null;
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_MAP=new RewriteRuleTokenStream(adaptor,"token MAP");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:322:10: ( ( MAP )? LEFT_BRACKET ( type )? RIGHT_BRACKET -> ^( MAP_TYPE ( type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:322:12: ( MAP )? LEFT_BRACKET ( type )? RIGHT_BRACKET
            {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:322:12: ( MAP )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==MAP) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:322:12: MAP
                    {
                    MAP170=(Token)match(input,MAP,FOLLOW_MAP_in_map_type1980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAP.add(MAP170);


                    }
                    break;

            }


            LEFT_BRACKET171=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_map_type1983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET171);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:322:30: ( type )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ((LA46_0 >= BAG && LA46_0 <= BOOLEAN)||LA46_0==BYTEARRAY||LA46_0==CHARARRAY||LA46_0==DOUBLE||LA46_0==FLOAT||LA46_0==INT||(LA46_0 >= LEFT_BRACKET && LA46_0 <= LEFT_PAREN)||LA46_0==LONG||LA46_0==MAP||LA46_0==TUPLE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:322:30: type
                    {
                    pushFollow(FOLLOW_type_in_map_type1985);
                    type172=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type172.getTree());

                    }
                    break;

            }


            RIGHT_BRACKET173=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_map_type1988); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET173);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:9: -> ^( MAP_TYPE ( type )? )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:323:12: ^( MAP_TYPE ( type )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MAP_TYPE, "MAP_TYPE")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:323:24: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class func_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:326:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );
    public final QueryParser.func_clause_return func_clause() throws RecognitionException {
        QueryParser.func_clause_return retval = new QueryParser.func_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN176=null;
        Token RIGHT_PAREN178=null;
        QueryParser.func_name_return func_name174 =null;

        QueryParser.func_name_return func_name175 =null;

        QueryParser.func_args_return func_args177 =null;


        Object LEFT_PAREN176_tree=null;
        Object RIGHT_PAREN178_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
        RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:326:13: ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) )
            int alt48=2;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:326:15: func_name
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2016);
                    func_name174=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name174.getTree());

                    // AST REWRITE
                    // elements: func_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 327:12: -> ^( FUNC_REF func_name )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:327:15: ^( FUNC_REF func_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_REF, "FUNC_REF")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:328:15: func_name LEFT_PAREN ( func_args )? RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_func_name_in_func_clause2053);
                    func_name175=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_func_name.add(func_name175.getTree());

                    LEFT_PAREN176=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_clause2055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN176);


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:328:36: ( func_args )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==MULTILINE_QUOTEDSTRING||LA47_0==QUOTEDSTRING) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:328:36: func_args
                            {
                            pushFollow(FOLLOW_func_args_in_func_clause2057);
                            func_args177=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_func_args.add(func_args177.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN178=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_clause2060); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN178);


                    // AST REWRITE
                    // elements: func_name, func_args
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 329:12: -> ^( FUNC func_name ( func_args )? )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:329:15: ^( FUNC func_name ( func_args )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC, "FUNC")
                        , root_1);

                        adaptor.addChild(root_1, stream_func_name.nextTree());

                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:329:33: ( func_args )?
                        if ( stream_func_args.hasNext() ) {
                            adaptor.addChild(root_1, stream_func_args.nextTree());

                        }
                        stream_func_args.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:332:1: func_name : eid ( ( PERIOD | DOLLAR ) eid )* ;
    public final QueryParser.func_name_return func_name() throws RecognitionException {
        QueryParser.func_name_return retval = new QueryParser.func_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set180=null;
        QueryParser.eid_return eid179 =null;

        QueryParser.eid_return eid181 =null;


        Object set180_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:332:11: ( eid ( ( PERIOD | DOLLAR ) eid )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:332:13: eid ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_eid_in_func_name2093);
            eid179=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eid179.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:332:17: ( ( PERIOD | DOLLAR ) eid )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==DOLLAR||LA49_0==PERIOD) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:332:19: ( PERIOD | DOLLAR ) eid
            	    {
            	    set180=(Token)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set180)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_eid_in_func_name2107);
            	    eid181=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eid181.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args_string"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:335:1: func_args_string : ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING );
    public final QueryParser.func_args_string_return func_args_string() throws RecognitionException {
        QueryParser.func_args_string_return retval = new QueryParser.func_args_string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set182=null;

        Object set182_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:335:18: ( QUOTEDSTRING | MULTILINE_QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set182=(Token)input.LT(1);

            if ( input.LA(1)==MULTILINE_QUOTEDSTRING||input.LA(1)==QUOTEDSTRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set182)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args_string"


    public static class func_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:338:1: func_args : func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ ;
    public final QueryParser.func_args_return func_args() throws RecognitionException {
        QueryParser.func_args_return retval = new QueryParser.func_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA184=null;
        QueryParser.func_args_string_return func_args_string183 =null;

        QueryParser.func_args_string_return func_args_string185 =null;


        Object COMMA184_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_func_args_string=new RewriteRuleSubtreeStream(adaptor,"rule func_args_string");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:338:11: ( func_args_string ( COMMA func_args_string )* -> ( func_args_string )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:338:13: func_args_string ( COMMA func_args_string )*
            {
            pushFollow(FOLLOW_func_args_string_in_func_args2132);
            func_args_string183=func_args_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string183.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:338:30: ( COMMA func_args_string )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:338:32: COMMA func_args_string
            	    {
            	    COMMA184=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_args2136); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA184);


            	    pushFollow(FOLLOW_func_args_string_in_func_args2138);
            	    func_args_string185=func_args_string();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_func_args_string.add(func_args_string185.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            // AST REWRITE
            // elements: func_args_string
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:10: -> ( func_args_string )+
            {
                if ( !(stream_func_args_string.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_func_args_string.hasNext() ) {
                    adaptor.addChild(root_0, stream_func_args_string.nextTree());

                }
                stream_func_args_string.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    public static class group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:342:1: group_clause : ( GROUP | COGROUP ) ^ group_item_list ( USING ! group_type )? ( partition_clause )? ;
    public final QueryParser.group_clause_return group_clause() throws RecognitionException {
        QueryParser.group_clause_return retval = new QueryParser.group_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set186=null;
        Token USING188=null;
        QueryParser.group_item_list_return group_item_list187 =null;

        QueryParser.group_type_return group_type189 =null;

        QueryParser.partition_clause_return partition_clause190 =null;


        Object set186_tree=null;
        Object USING188_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:342:14: ( ( GROUP | COGROUP ) ^ group_item_list ( USING ! group_type )? ( partition_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:342:16: ( GROUP | COGROUP ) ^ group_item_list ( USING ! group_type )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            set186=(Token)input.LT(1);

            set186=(Token)input.LT(1);

            if ( input.LA(1)==COGROUP||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(set186)
                , root_0);
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_group_item_list_in_group_clause2175);
            group_item_list187=group_item_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_item_list187.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:342:53: ( USING ! group_type )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==USING) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:342:55: USING ! group_type
                    {
                    USING188=(Token)match(input,USING,FOLLOW_USING_in_group_clause2179); if (state.failed) return retval;

                    pushFollow(FOLLOW_group_type_in_group_clause2182);
                    group_type189=group_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_type189.getTree());

                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:342:76: ( partition_clause )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==PARTITION) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:342:76: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_group_clause2187);
                    partition_clause190=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause190.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:345:1: group_type : QUOTEDSTRING ;
    public final QueryParser.group_type_return group_type() throws RecognitionException {
        QueryParser.group_type_return retval = new QueryParser.group_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING191=null;

        Object QUOTEDSTRING191_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:345:12: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:345:14: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING191=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_type2197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING191_tree = 
            (Object)adaptor.create(QUOTEDSTRING191)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING191_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_type"


    public static class group_item_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:348:1: group_item_list : group_item ( COMMA group_item )* -> ( group_item )+ ;
    public final QueryParser.group_item_list_return group_item_list() throws RecognitionException {
        QueryParser.group_item_list_return retval = new QueryParser.group_item_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA193=null;
        QueryParser.group_item_return group_item192 =null;

        QueryParser.group_item_return group_item194 =null;


        Object COMMA193_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_group_item=new RewriteRuleSubtreeStream(adaptor,"rule group_item");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:348:17: ( group_item ( COMMA group_item )* -> ( group_item )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:348:19: group_item ( COMMA group_item )*
            {
            pushFollow(FOLLOW_group_item_in_group_item_list2206);
            group_item192=group_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_item.add(group_item192.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:348:30: ( COMMA group_item )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==COMMA) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:348:32: COMMA group_item
            	    {
            	    COMMA193=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_item_list2210); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA193);


            	    pushFollow(FOLLOW_group_item_in_group_item_list2212);
            	    group_item194=group_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_group_item.add(group_item194.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            // AST REWRITE
            // elements: group_item
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:16: -> ( group_item )+
            {
                if ( !(stream_group_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_group_item.hasNext() ) {
                    adaptor.addChild(root_0, stream_group_item.nextTree());

                }
                stream_group_item.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item_list"


    public static class group_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:352:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final QueryParser.group_item_return group_item() throws RecognitionException {
        QueryParser.group_item_return retval = new QueryParser.group_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ALL197=null;
        Token ANY198=null;
        Token set199=null;
        QueryParser.rel_return rel195 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause196 =null;


        Object ALL197_tree=null;
        Object ANY198_tree=null;
        Object set199_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:352:12: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:352:14: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_rel_in_group_item2244);
            rel195=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel195.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:352:18: ( join_group_by_clause | ALL | ANY )
            int alt54=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt54=1;
                }
                break;
            case ALL:
                {
                alt54=2;
                }
                break;
            case ANY:
                {
                alt54=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }

            switch (alt54) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:352:20: join_group_by_clause
                    {
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item2248);
                    join_group_by_clause196=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_clause196.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:352:43: ALL
                    {
                    ALL197=(Token)match(input,ALL,FOLLOW_ALL_in_group_item2252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL197_tree = 
                    (Object)adaptor.create(ALL197)
                    ;
                    adaptor.addChild(root_0, ALL197_tree);
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:352:49: ANY
                    {
                    ANY198=(Token)match(input,ANY,FOLLOW_ANY_in_group_item2256); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY198_tree = 
                    (Object)adaptor.create(ANY198)
                    ;
                    adaptor.addChild(root_0, ANY198_tree);
                    }

                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:352:55: ( INNER | OUTER )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==INNER||LA55_0==OUTER) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
                    {
                    set199=(Token)input.LT(1);

                    if ( input.LA(1)==INNER||input.LA(1)==OUTER ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set199)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class rel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:355:1: rel : ( alias | LEFT_PAREN ! ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) ) RIGHT_PAREN !);
    public final QueryParser.rel_return rel() throws RecognitionException {
        QueryParser.rel_return retval = new QueryParser.rel_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN201=null;
        Token RIGHT_PAREN206=null;
        QueryParser.alias_return alias200 =null;

        QueryParser.foreach_clause_complex_return foreach_clause_complex202 =null;

        QueryParser.op_clause_return op_clause203 =null;

        QueryParser.foreach_clause_simple_return foreach_clause_simple204 =null;

        QueryParser.parallel_clause_return parallel_clause205 =null;


        Object LEFT_PAREN201_tree=null;
        Object RIGHT_PAREN206_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:355:5: ( alias | LEFT_PAREN ! ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) ) RIGHT_PAREN !)
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==IDENTIFIER_L) ) {
                alt59=1;
            }
            else if ( (LA59_0==LEFT_PAREN) ) {
                alt59=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:355:7: alias
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alias_in_rel2278);
                    alias200=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias200.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:7: LEFT_PAREN ! ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) ) RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN201=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rel2287); if (state.failed) return retval;

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:19: ( foreach_clause_complex | ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? ) )
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==FOREACH) ) {
                        int LA58_1 = input.LA(2);

                        if ( (synpred100_QueryParser()) ) {
                            alt58=1;
                        }
                        else if ( (true) ) {
                            alt58=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 58, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA58_0==COGROUP||LA58_0==CROSS||LA58_0==DEFINE||LA58_0==DISTINCT||LA58_0==FILTER||LA58_0==GROUP||LA58_0==JOIN||(LA58_0 >= LIMIT && LA58_0 <= LOAD)||LA58_0==MAPREDUCE||LA58_0==ORDER||LA58_0==SAMPLE||(LA58_0 >= STORE && LA58_0 <= STREAM)||LA58_0==UNION) ) {
                        alt58=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 58, 0, input);

                        throw nvae;

                    }
                    switch (alt58) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:21: foreach_clause_complex
                            {
                            pushFollow(FOLLOW_foreach_clause_complex_in_rel2292);
                            foreach_clause_complex202=foreach_clause_complex();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_clause_complex202.getTree());

                            }
                            break;
                        case 2 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:46: ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? )
                            {
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:46: ( ( op_clause | foreach_clause_simple ) ( parallel_clause )? )
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:48: ( op_clause | foreach_clause_simple ) ( parallel_clause )?
                            {
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:48: ( op_clause | foreach_clause_simple )
                            int alt56=2;
                            int LA56_0 = input.LA(1);

                            if ( (LA56_0==COGROUP||LA56_0==CROSS||LA56_0==DEFINE||LA56_0==DISTINCT||LA56_0==FILTER||LA56_0==GROUP||LA56_0==JOIN||(LA56_0 >= LIMIT && LA56_0 <= LOAD)||LA56_0==MAPREDUCE||LA56_0==ORDER||LA56_0==SAMPLE||(LA56_0 >= STORE && LA56_0 <= STREAM)||LA56_0==UNION) ) {
                                alt56=1;
                            }
                            else if ( (LA56_0==FOREACH) ) {
                                alt56=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 56, 0, input);

                                throw nvae;

                            }
                            switch (alt56) {
                                case 1 :
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:50: op_clause
                                    {
                                    pushFollow(FOLLOW_op_clause_in_rel2300);
                                    op_clause203=op_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_clause203.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:62: foreach_clause_simple
                                    {
                                    pushFollow(FOLLOW_foreach_clause_simple_in_rel2304);
                                    foreach_clause_simple204=foreach_clause_simple();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_clause_simple204.getTree());

                                    }
                                    break;

                            }


                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:86: ( parallel_clause )?
                            int alt57=2;
                            int LA57_0 = input.LA(1);

                            if ( (LA57_0==PARALLEL) ) {
                                alt57=1;
                            }
                            switch (alt57) {
                                case 1 :
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:86: parallel_clause
                                    {
                                    pushFollow(FOLLOW_parallel_clause_in_rel2308);
                                    parallel_clause205=parallel_clause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parallel_clause205.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    RIGHT_PAREN206=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rel2315); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class flatten_generated_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:1: flatten_generated_item : ( flatten_clause ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | col_range ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | expr ( AS ! field_def )? | STAR ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? );
    public final QueryParser.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        QueryParser.flatten_generated_item_return retval = new QueryParser.flatten_generated_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AS208=null;
        Token LEFT_PAREN209=null;
        Token RIGHT_PAREN211=null;
        Token AS214=null;
        Token LEFT_PAREN215=null;
        Token RIGHT_PAREN217=null;
        Token AS220=null;
        Token STAR222=null;
        Token AS223=null;
        Token LEFT_PAREN224=null;
        Token RIGHT_PAREN226=null;
        QueryParser.flatten_clause_return flatten_clause207 =null;

        QueryParser.field_def_list_return field_def_list210 =null;

        QueryParser.field_def_return field_def212 =null;

        QueryParser.col_range_return col_range213 =null;

        QueryParser.field_def_list_return field_def_list216 =null;

        QueryParser.field_def_return field_def218 =null;

        QueryParser.expr_return expr219 =null;

        QueryParser.field_def_return field_def221 =null;

        QueryParser.field_def_list_return field_def_list225 =null;

        QueryParser.field_def_return field_def227 =null;


        Object AS208_tree=null;
        Object LEFT_PAREN209_tree=null;
        Object RIGHT_PAREN211_tree=null;
        Object AS214_tree=null;
        Object LEFT_PAREN215_tree=null;
        Object RIGHT_PAREN217_tree=null;
        Object AS220_tree=null;
        Object STAR222_tree=null;
        Object AS223_tree=null;
        Object LEFT_PAREN224_tree=null;
        Object RIGHT_PAREN226_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:24: ( flatten_clause ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | col_range ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | expr ( AS ! field_def )? | STAR ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? )
            int alt67=4;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:26: flatten_clause ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item2325);
                    flatten_clause207=flatten_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, flatten_clause207.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:41: ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==AS) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:43: AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            {
                            AS208=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2329); if (state.failed) return retval;

                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:47: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            int alt60=2;
                            int LA60_0 = input.LA(1);

                            if ( (LA60_0==LEFT_PAREN) ) {
                                int LA60_1 = input.LA(2);

                                if ( (synpred103_QueryParser()) ) {
                                    alt60=1;
                                }
                                else if ( (true) ) {
                                    alt60=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 60, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( ((LA60_0 >= BAG && LA60_0 <= BOOLEAN)||LA60_0==BYTEARRAY||LA60_0==CHARARRAY||LA60_0==DOUBLE||LA60_0==FLOAT||LA60_0==IDENTIFIER_L||LA60_0==INT||(LA60_0 >= LEFT_BRACKET && LA60_0 <= LEFT_CURLY)||LA60_0==LONG||LA60_0==MAP||LA60_0==TUPLE) ) {
                                alt60=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 60, 0, input);

                                throw nvae;

                            }
                            switch (alt60) {
                                case 1 :
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:49: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    {
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:49: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:51: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                                    {
                                    LEFT_PAREN209=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_generated_item2336); if (state.failed) return retval;

                                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item2339);
                                    field_def_list210=field_def_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list210.getTree());

                                    RIGHT_PAREN211=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_generated_item2341); if (state.failed) return retval;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:95: field_def
                                    {
                                    pushFollow(FOLLOW_field_def_in_flatten_generated_item2348);
                                    field_def212=field_def();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def212.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:26: col_range ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_flatten_generated_item2380);
                    col_range213=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range213.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:36: ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==AS) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:38: AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            {
                            AS214=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2384); if (state.failed) return retval;

                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:42: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            int alt62=2;
                            int LA62_0 = input.LA(1);

                            if ( (LA62_0==LEFT_PAREN) ) {
                                int LA62_1 = input.LA(2);

                                if ( (synpred106_QueryParser()) ) {
                                    alt62=1;
                                }
                                else if ( (true) ) {
                                    alt62=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 62, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( ((LA62_0 >= BAG && LA62_0 <= BOOLEAN)||LA62_0==BYTEARRAY||LA62_0==CHARARRAY||LA62_0==DOUBLE||LA62_0==FLOAT||LA62_0==IDENTIFIER_L||LA62_0==INT||(LA62_0 >= LEFT_BRACKET && LA62_0 <= LEFT_CURLY)||LA62_0==LONG||LA62_0==MAP||LA62_0==TUPLE) ) {
                                alt62=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 62, 0, input);

                                throw nvae;

                            }
                            switch (alt62) {
                                case 1 :
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:44: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    {
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:44: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:46: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                                    {
                                    LEFT_PAREN215=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_generated_item2391); if (state.failed) return retval;

                                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item2394);
                                    field_def_list216=field_def_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list216.getTree());

                                    RIGHT_PAREN217=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_generated_item2396); if (state.failed) return retval;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:90: field_def
                                    {
                                    pushFollow(FOLLOW_field_def_in_flatten_generated_item2403);
                                    field_def218=field_def();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def218.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:361:26: expr ( AS ! field_def )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_flatten_generated_item2435);
                    expr219=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr219.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:361:31: ( AS ! field_def )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==AS) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:361:33: AS ! field_def
                            {
                            AS220=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2439); if (state.failed) return retval;

                            pushFollow(FOLLOW_field_def_in_flatten_generated_item2442);
                            field_def221=field_def();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def221.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:26: STAR ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR222=(Token)match(input,STAR,FOLLOW_STAR_in_flatten_generated_item2472); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR222_tree = 
                    (Object)adaptor.create(STAR222)
                    ;
                    adaptor.addChild(root_0, STAR222_tree);
                    }

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:31: ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==AS) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:33: AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            {
                            AS223=(Token)match(input,AS,FOLLOW_AS_in_flatten_generated_item2476); if (state.failed) return retval;

                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:37: ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def )
                            int alt65=2;
                            int LA65_0 = input.LA(1);

                            if ( (LA65_0==LEFT_PAREN) ) {
                                int LA65_1 = input.LA(2);

                                if ( (synpred111_QueryParser()) ) {
                                    alt65=1;
                                }
                                else if ( (true) ) {
                                    alt65=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 65, 1, input);

                                    throw nvae;

                                }
                            }
                            else if ( ((LA65_0 >= BAG && LA65_0 <= BOOLEAN)||LA65_0==BYTEARRAY||LA65_0==CHARARRAY||LA65_0==DOUBLE||LA65_0==FLOAT||LA65_0==IDENTIFIER_L||LA65_0==INT||(LA65_0 >= LEFT_BRACKET && LA65_0 <= LEFT_CURLY)||LA65_0==LONG||LA65_0==MAP||LA65_0==TUPLE) ) {
                                alt65=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 65, 0, input);

                                throw nvae;

                            }
                            switch (alt65) {
                                case 1 :
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:39: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    {
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:39: ( LEFT_PAREN ! field_def_list RIGHT_PAREN !)
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:41: LEFT_PAREN ! field_def_list RIGHT_PAREN !
                                    {
                                    LEFT_PAREN224=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_generated_item2483); if (state.failed) return retval;

                                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item2486);
                                    field_def_list225=field_def_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def_list225.getTree());

                                    RIGHT_PAREN226=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_generated_item2488); if (state.failed) return retval;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:85: field_def
                                    {
                                    pushFollow(FOLLOW_field_def_in_flatten_generated_item2495);
                                    field_def227=field_def();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_def227.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class flatten_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:365:1: flatten_clause : FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !;
    public final QueryParser.flatten_clause_return flatten_clause() throws RecognitionException {
        QueryParser.flatten_clause_return retval = new QueryParser.flatten_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FLATTEN228=null;
        Token LEFT_PAREN229=null;
        Token RIGHT_PAREN231=null;
        QueryParser.expr_return expr230 =null;


        Object FLATTEN228_tree=null;
        Object LEFT_PAREN229_tree=null;
        Object RIGHT_PAREN231_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:365:16: ( FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:365:18: FLATTEN ^ LEFT_PAREN ! expr RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            FLATTEN228=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause2510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN228_tree = 
            (Object)adaptor.create(FLATTEN228)
            ;
            root_0 = (Object)adaptor.becomeRoot(FLATTEN228_tree, root_0);
            }

            LEFT_PAREN229=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_flatten_clause2513); if (state.failed) return retval;

            pushFollow(FOLLOW_expr_in_flatten_clause2516);
            expr230=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr230.getTree());

            RIGHT_PAREN231=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_flatten_clause2518); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class store_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:368:1: store_clause : STORE ^ rel INTO ! filename ( USING ! func_clause )? ;
    public final QueryParser.store_clause_return store_clause() throws RecognitionException {
        QueryParser.store_clause_return retval = new QueryParser.store_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STORE232=null;
        Token INTO234=null;
        Token USING236=null;
        QueryParser.rel_return rel233 =null;

        QueryParser.filename_return filename235 =null;

        QueryParser.func_clause_return func_clause237 =null;


        Object STORE232_tree=null;
        Object INTO234_tree=null;
        Object USING236_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:368:14: ( STORE ^ rel INTO ! filename ( USING ! func_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:368:16: STORE ^ rel INTO ! filename ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STORE232=(Token)match(input,STORE,FOLLOW_STORE_in_store_clause2528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE232_tree = 
            (Object)adaptor.create(STORE232)
            ;
            root_0 = (Object)adaptor.becomeRoot(STORE232_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_store_clause2531);
            rel233=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel233.getTree());

            INTO234=(Token)match(input,INTO,FOLLOW_INTO_in_store_clause2533); if (state.failed) return retval;

            pushFollow(FOLLOW_filename_in_store_clause2536);
            filename235=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, filename235.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:368:42: ( USING ! func_clause )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==USING) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:368:44: USING ! func_clause
                    {
                    USING236=(Token)match(input,USING,FOLLOW_USING_in_store_clause2540); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_store_clause2543);
                    func_clause237=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause237.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class filter_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:371:1: filter_clause : FILTER ^ rel BY ! cond ;
    public final QueryParser.filter_clause_return filter_clause() throws RecognitionException {
        QueryParser.filter_clause_return retval = new QueryParser.filter_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER238=null;
        Token BY240=null;
        QueryParser.rel_return rel239 =null;

        QueryParser.cond_return cond241 =null;


        Object FILTER238_tree=null;
        Object BY240_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:371:15: ( FILTER ^ rel BY ! cond )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:371:17: FILTER ^ rel BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER238=(Token)match(input,FILTER,FOLLOW_FILTER_in_filter_clause2555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER238_tree = 
            (Object)adaptor.create(FILTER238)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER238_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_filter_clause2558);
            rel239=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel239.getTree());

            BY240=(Token)match(input,BY,FOLLOW_BY_in_filter_clause2560); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_filter_clause2563);
            cond241=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond241.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:374:1: cond : or_cond ;
    public final QueryParser.cond_return cond() throws RecognitionException {
        QueryParser.cond_return retval = new QueryParser.cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.or_cond_return or_cond242 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:374:6: ( or_cond )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:374:8: or_cond
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_or_cond_in_cond2572);
            or_cond242=or_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, or_cond242.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class or_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "or_cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:377:1: or_cond : and_cond ( OR ^ and_cond )* ;
    public final QueryParser.or_cond_return or_cond() throws RecognitionException {
        QueryParser.or_cond_return retval = new QueryParser.or_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OR244=null;
        QueryParser.and_cond_return and_cond243 =null;

        QueryParser.and_cond_return and_cond245 =null;


        Object OR244_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:377:9: ( and_cond ( OR ^ and_cond )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:377:11: and_cond ( OR ^ and_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_and_cond_in_or_cond2581);
            and_cond243=and_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond243.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:377:21: ( OR ^ and_cond )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==OR) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:377:23: OR ^ and_cond
            	    {
            	    OR244=(Token)match(input,OR,FOLLOW_OR_in_or_cond2586); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    OR244_tree = 
            	    (Object)adaptor.create(OR244)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(OR244_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_and_cond_in_or_cond2589);
            	    and_cond245=and_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, and_cond245.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "or_cond"


    public static class and_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:380:1: and_cond : unary_cond ( AND ^ unary_cond )* ;
    public final QueryParser.and_cond_return and_cond() throws RecognitionException {
        QueryParser.and_cond_return retval = new QueryParser.and_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token AND247=null;
        QueryParser.unary_cond_return unary_cond246 =null;

        QueryParser.unary_cond_return unary_cond248 =null;


        Object AND247_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:380:10: ( unary_cond ( AND ^ unary_cond )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:380:12: unary_cond ( AND ^ unary_cond )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_unary_cond_in_and_cond2601);
            unary_cond246=unary_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond246.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:380:23: ( AND ^ unary_cond )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==AND) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:380:25: AND ^ unary_cond
            	    {
            	    AND247=(Token)match(input,AND,FOLLOW_AND_in_and_cond2605); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AND247_tree = 
            	    (Object)adaptor.create(AND247)
            	    ;
            	    root_0 = (Object)adaptor.becomeRoot(AND247_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_unary_cond_in_and_cond2608);
            	    unary_cond248=unary_cond();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond248.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_cond"


    public static class unary_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:383:1: unary_cond : ( LEFT_PAREN ! cond RIGHT_PAREN !| not_cond | expr rel_op ^ expr | func_eval | null_check_cond );
    public final QueryParser.unary_cond_return unary_cond() throws RecognitionException {
        QueryParser.unary_cond_return retval = new QueryParser.unary_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN249=null;
        Token RIGHT_PAREN251=null;
        QueryParser.cond_return cond250 =null;

        QueryParser.not_cond_return not_cond252 =null;

        QueryParser.expr_return expr253 =null;

        QueryParser.rel_op_return rel_op254 =null;

        QueryParser.expr_return expr255 =null;

        QueryParser.func_eval_return func_eval256 =null;

        QueryParser.null_check_cond_return null_check_cond257 =null;


        Object LEFT_PAREN249_tree=null;
        Object RIGHT_PAREN251_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:383:12: ( LEFT_PAREN ! cond RIGHT_PAREN !| not_cond | expr rel_op ^ expr | func_eval | null_check_cond )
            int alt71=5;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:383:14: LEFT_PAREN ! cond RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN249=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_cond2620); if (state.failed) return retval;

                    pushFollow(FOLLOW_cond_in_unary_cond2623);
                    cond250=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cond250.getTree());

                    RIGHT_PAREN251=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_cond2625); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:384:14: not_cond
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_not_cond_in_unary_cond2641);
                    not_cond252=not_cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, not_cond252.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:385:14: expr rel_op ^ expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_unary_cond2656);
                    expr253=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr253.getTree());

                    pushFollow(FOLLOW_rel_op_in_unary_cond2658);
                    rel_op254=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(rel_op254.getTree(), root_0);

                    pushFollow(FOLLOW_expr_in_unary_cond2661);
                    expr255=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr255.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:386:14: func_eval
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_eval_in_unary_cond2676);
                    func_eval256=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_eval256.getTree());

                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:387:14: null_check_cond
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_check_cond_in_unary_cond2691);
                    null_check_cond257=null_check_cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_check_cond257.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_cond"


    public static class not_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "not_cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:390:1: not_cond : NOT ^ unary_cond ;
    public final QueryParser.not_cond_return not_cond() throws RecognitionException {
        QueryParser.not_cond_return retval = new QueryParser.not_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NOT258=null;
        QueryParser.unary_cond_return unary_cond259 =null;


        Object NOT258_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:390:10: ( NOT ^ unary_cond )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:390:12: NOT ^ unary_cond
            {
            root_0 = (Object)adaptor.nil();


            NOT258=(Token)match(input,NOT,FOLLOW_NOT_in_not_cond2700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NOT258_tree = 
            (Object)adaptor.create(NOT258)
            ;
            root_0 = (Object)adaptor.becomeRoot(NOT258_tree, root_0);
            }

            pushFollow(FOLLOW_unary_cond_in_not_cond2703);
            unary_cond259=unary_cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_cond259.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_cond"


    public static class func_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_eval"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:393:1: func_eval : func_name LEFT_PAREN ( real_arg_list )? RIGHT_PAREN -> ^( FUNC_EVAL func_name ( real_arg_list )? ) ;
    public final QueryParser.func_eval_return func_eval() throws RecognitionException {
        QueryParser.func_eval_return retval = new QueryParser.func_eval_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN261=null;
        Token RIGHT_PAREN263=null;
        QueryParser.func_name_return func_name260 =null;

        QueryParser.real_arg_list_return real_arg_list262 =null;


        Object LEFT_PAREN261_tree=null;
        Object RIGHT_PAREN263_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_real_arg_list=new RewriteRuleSubtreeStream(adaptor,"rule real_arg_list");
        RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:393:11: ( func_name LEFT_PAREN ( real_arg_list )? RIGHT_PAREN -> ^( FUNC_EVAL func_name ( real_arg_list )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:393:13: func_name LEFT_PAREN ( real_arg_list )? RIGHT_PAREN
            {
            pushFollow(FOLLOW_func_name_in_func_eval2712);
            func_name260=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_func_name.add(func_name260.getTree());

            LEFT_PAREN261=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_eval2714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN261);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:393:34: ( real_arg_list )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( ((LA72_0 >= ALL && LA72_0 <= BAG)||(LA72_0 >= BY && LA72_0 <= COGROUP)||LA72_0==CROSS||(LA72_0 >= DEFINE && LA72_0 <= DESC)||LA72_0==DISTINCT||(LA72_0 >= DOLLARVAR && LA72_0 <= DOUBLE_PERIOD)||(LA72_0 >= FALSE && LA72_0 <= FLOAT)||(LA72_0 >= FLOATNUMBER && LA72_0 <= GROUP)||(LA72_0 >= IDENTIFIER_L && LA72_0 <= LEFT_PAREN)||(LA72_0 >= LIMIT && LA72_0 <= MINUS)||LA72_0==NOT||(LA72_0 >= OR && LA72_0 <= ORDER)||(LA72_0 >= OUTER && LA72_0 <= PARTITION)||(LA72_0 >= QUOTEDSTRING && LA72_0 <= RIGHT)||LA72_0==SAMPLE||LA72_0==SHIP||(LA72_0 >= SPLIT && LA72_0 <= USING)||LA72_0==BOOL) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:393:34: real_arg_list
                    {
                    pushFollow(FOLLOW_real_arg_list_in_func_eval2716);
                    real_arg_list262=real_arg_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg_list.add(real_arg_list262.getTree());

                    }
                    break;

            }


            RIGHT_PAREN263=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_eval2719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN263);


            // AST REWRITE
            // elements: func_name, real_arg_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 394:11: -> ^( FUNC_EVAL func_name ( real_arg_list )? )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:394:14: ^( FUNC_EVAL func_name ( real_arg_list )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                , root_1);

                adaptor.addChild(root_1, stream_func_name.nextTree());

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:394:37: ( real_arg_list )?
                if ( stream_real_arg_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_real_arg_list.nextTree());

                }
                stream_real_arg_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_eval"


    public static class real_arg_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:397:1: real_arg_list : real_arg ( COMMA real_arg )* -> ( real_arg )+ ;
    public final QueryParser.real_arg_list_return real_arg_list() throws RecognitionException {
        QueryParser.real_arg_list_return retval = new QueryParser.real_arg_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA265=null;
        QueryParser.real_arg_return real_arg264 =null;

        QueryParser.real_arg_return real_arg266 =null;


        Object COMMA265_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:397:15: ( real_arg ( COMMA real_arg )* -> ( real_arg )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:397:17: real_arg ( COMMA real_arg )*
            {
            pushFollow(FOLLOW_real_arg_in_real_arg_list2751);
            real_arg264=real_arg();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_real_arg.add(real_arg264.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:397:26: ( COMMA real_arg )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:397:28: COMMA real_arg
            	    {
            	    COMMA265=(Token)match(input,COMMA,FOLLOW_COMMA_in_real_arg_list2755); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA265);


            	    pushFollow(FOLLOW_real_arg_in_real_arg_list2757);
            	    real_arg266=real_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg266.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            // AST REWRITE
            // elements: real_arg
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:14: -> ( real_arg )+
            {
                if ( !(stream_real_arg.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_real_arg.hasNext() ) {
                    adaptor.addChild(root_0, stream_real_arg.nextTree());

                }
                stream_real_arg.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg_list"


    public static class real_arg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:401:1: real_arg : ( expr | STAR | col_range );
    public final QueryParser.real_arg_return real_arg() throws RecognitionException {
        QueryParser.real_arg_return retval = new QueryParser.real_arg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR268=null;
        QueryParser.expr_return expr267 =null;

        QueryParser.col_range_return col_range269 =null;


        Object STAR268_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:401:10: ( expr | STAR | col_range )
            int alt74=3;
            switch ( input.LA(1) ) {
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTEGER:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case LONGINTEGER:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
                {
                alt74=1;
                }
                break;
            case IDENTIFIER_L:
                {
                int LA74_2 = input.LA(2);

                if ( (LA74_2==EOF||LA74_2==COMMA||(LA74_2 >= DIV && LA74_2 <= DOLLAR)||LA74_2==LEFT_PAREN||LA74_2==MINUS||(LA74_2 >= PERCENT && LA74_2 <= POUND)||(LA74_2 >= RIGHT_BRACKET && LA74_2 <= RIGHT_PAREN)||LA74_2==STAR) ) {
                    alt74=1;
                }
                else if ( (LA74_2==DOUBLE_PERIOD) ) {
                    alt74=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 2, input);

                    throw nvae;

                }
                }
                break;
            case GROUP:
                {
                int LA74_3 = input.LA(2);

                if ( (LA74_3==EOF||LA74_3==COMMA||(LA74_3 >= DIV && LA74_3 <= DOLLAR)||LA74_3==LEFT_PAREN||LA74_3==MINUS||(LA74_3 >= PERCENT && LA74_3 <= POUND)||(LA74_3 >= RIGHT_BRACKET && LA74_3 <= RIGHT_PAREN)||LA74_3==STAR) ) {
                    alt74=1;
                }
                else if ( (LA74_3==DOUBLE_PERIOD) ) {
                    alt74=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA74_4 = input.LA(2);

                if ( (LA74_4==EOF||LA74_4==COMMA||LA74_4==DIV||LA74_4==MINUS||(LA74_4 >= PERCENT && LA74_4 <= POUND)||(LA74_4 >= RIGHT_BRACKET && LA74_4 <= RIGHT_PAREN)||LA74_4==STAR) ) {
                    alt74=1;
                }
                else if ( (LA74_4==DOUBLE_PERIOD) ) {
                    alt74=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 4, input);

                    throw nvae;

                }
                }
                break;
            case STAR:
                {
                alt74=2;
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt74=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }

            switch (alt74) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:401:12: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_real_arg2787);
                    expr267=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr267.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:401:19: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR268=(Token)match(input,STAR,FOLLOW_STAR_in_real_arg2791); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR268_tree = 
                    (Object)adaptor.create(STAR268)
                    ;
                    adaptor.addChild(root_0, STAR268_tree);
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:401:26: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_real_arg2795);
                    col_range269=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range269.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class null_check_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_check_cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:404:1: null_check_cond : expr IS ! ( NOT )? null_keyword ^;
    public final QueryParser.null_check_cond_return null_check_cond() throws RecognitionException {
        QueryParser.null_check_cond_return retval = new QueryParser.null_check_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IS271=null;
        Token NOT272=null;
        QueryParser.expr_return expr270 =null;

        QueryParser.null_keyword_return null_keyword273 =null;


        Object IS271_tree=null;
        Object NOT272_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:404:17: ( expr IS ! ( NOT )? null_keyword ^)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:404:19: expr IS ! ( NOT )? null_keyword ^
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_in_null_check_cond2804);
            expr270=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr270.getTree());

            IS271=(Token)match(input,IS,FOLLOW_IS_in_null_check_cond2806); if (state.failed) return retval;

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:404:28: ( NOT )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==NOT) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:404:28: NOT
                    {
                    NOT272=(Token)match(input,NOT,FOLLOW_NOT_in_null_check_cond2809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT272_tree = 
                    (Object)adaptor.create(NOT272)
                    ;
                    adaptor.addChild(root_0, NOT272_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_null_keyword_in_null_check_cond2812);
            null_keyword273=null_keyword();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(null_keyword273.getTree(), root_0);

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_check_cond"


    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:407:1: expr : add_expr ;
    public final QueryParser.expr_return expr() throws RecognitionException {
        QueryParser.expr_return retval = new QueryParser.expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.add_expr_return add_expr274 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:407:6: ( add_expr )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:407:8: add_expr
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_add_expr_in_expr2822);
            add_expr274=add_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, add_expr274.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class add_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "add_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:410:1: add_expr : multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* ;
    public final QueryParser.add_expr_return add_expr() throws RecognitionException {
        QueryParser.add_expr_return retval = new QueryParser.add_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set276=null;
        QueryParser.multi_expr_return multi_expr275 =null;

        QueryParser.multi_expr_return multi_expr277 =null;


        Object set276_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:410:10: ( multi_expr ( ( PLUS | MINUS ) ^ multi_expr )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:410:12: multi_expr ( ( PLUS | MINUS ) ^ multi_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_multi_expr_in_add_expr2831);
            multi_expr275=multi_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr275.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:410:23: ( ( PLUS | MINUS ) ^ multi_expr )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==MINUS||LA76_0==PLUS) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:410:25: ( PLUS | MINUS ) ^ multi_expr
            	    {
            	    set276=(Token)input.LT(1);

            	    set276=(Token)input.LT(1);

            	    if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set276)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multi_expr_in_add_expr2846);
            	    multi_expr277=multi_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_expr277.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add_expr"


    public static class multi_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:413:1: multi_expr : cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* ;
    public final QueryParser.multi_expr_return multi_expr() throws RecognitionException {
        QueryParser.multi_expr_return retval = new QueryParser.multi_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set279=null;
        QueryParser.cast_expr_return cast_expr278 =null;

        QueryParser.cast_expr_return cast_expr280 =null;


        Object set279_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:413:12: ( cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:413:14: cast_expr ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_expr_in_multi_expr2858);
            cast_expr278=cast_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr278.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:413:24: ( ( STAR | DIV | PERCENT ) ^ cast_expr )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==DIV||LA77_0==PERCENT||LA77_0==STAR) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:413:26: ( STAR | DIV | PERCENT ) ^ cast_expr
            	    {
            	    set279=(Token)input.LT(1);

            	    set279=(Token)input.LT(1);

            	    if ( input.LA(1)==DIV||input.LA(1)==PERCENT||input.LA(1)==STAR ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(
            	        (Object)adaptor.create(set279)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_cast_expr_in_multi_expr2877);
            	    cast_expr280=cast_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expr280.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_expr"


    public static class cast_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:416:1: cast_expr : ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr -> ^( CAST_EXPR type_cast unary_expr ) | unary_expr );
    public final QueryParser.cast_expr_return cast_expr() throws RecognitionException {
        QueryParser.cast_expr_return retval = new QueryParser.cast_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN281=null;
        Token RIGHT_PAREN283=null;
        QueryParser.type_cast_return type_cast282 =null;

        QueryParser.unary_expr_return unary_expr284 =null;

        QueryParser.unary_expr_return unary_expr285 =null;


        Object LEFT_PAREN281_tree=null;
        Object RIGHT_PAREN283_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_unary_expr=new RewriteRuleSubtreeStream(adaptor,"rule unary_expr");
        RewriteRuleSubtreeStream stream_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule type_cast");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:416:11: ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr -> ^( CAST_EXPR type_cast unary_expr ) | unary_expr )
            int alt78=2;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:416:13: LEFT_PAREN type_cast RIGHT_PAREN unary_expr
                    {
                    LEFT_PAREN281=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cast_expr2889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN281);


                    pushFollow(FOLLOW_type_cast_in_cast_expr2891);
                    type_cast282=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_cast.add(type_cast282.getTree());

                    RIGHT_PAREN283=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cast_expr2893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN283);


                    pushFollow(FOLLOW_unary_expr_in_cast_expr2895);
                    unary_expr284=unary_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary_expr.add(unary_expr284.getTree());

                    // AST REWRITE
                    // elements: unary_expr, type_cast
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 417:10: -> ^( CAST_EXPR type_cast unary_expr )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:417:13: ^( CAST_EXPR type_cast unary_expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CAST_EXPR, "CAST_EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_cast.nextTree());

                        adaptor.addChild(root_1, stream_unary_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:418:13: unary_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_unary_expr_in_cast_expr2930);
                    unary_expr285=unary_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expr285.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expr"


    public static class type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:421:1: type_cast : ( simple_type | map_type | tuple_type_cast | bag_type_cast );
    public final QueryParser.type_cast_return type_cast() throws RecognitionException {
        QueryParser.type_cast_return retval = new QueryParser.type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.simple_type_return simple_type286 =null;

        QueryParser.map_type_return map_type287 =null;

        QueryParser.tuple_type_cast_return tuple_type_cast288 =null;

        QueryParser.bag_type_cast_return bag_type_cast289 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:421:11: ( simple_type | map_type | tuple_type_cast | bag_type_cast )
            int alt79=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt79=1;
                }
                break;
            case LEFT_BRACKET:
            case MAP:
                {
                alt79=2;
                }
                break;
            case TUPLE:
                {
                alt79=3;
                }
                break;
            case BAG:
                {
                alt79=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }

            switch (alt79) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:421:13: simple_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_type_in_type_cast2939);
                    simple_type286=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_type286.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:421:27: map_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_type_in_type_cast2943);
                    map_type287=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_type287.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:421:38: tuple_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_tuple_type_cast_in_type_cast2947);
                    tuple_type_cast288=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple_type_cast288.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:421:56: bag_type_cast
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bag_type_cast_in_type_cast2951);
                    bag_type_cast289=bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bag_type_cast289.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast"


    public static class tuple_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:424:1: tuple_type_cast : TUPLE LEFT_PAREN ( type_cast ( COMMA type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( type_cast )* ) ;
    public final QueryParser.tuple_type_cast_return tuple_type_cast() throws RecognitionException {
        QueryParser.tuple_type_cast_return retval = new QueryParser.tuple_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token TUPLE290=null;
        Token LEFT_PAREN291=null;
        Token COMMA293=null;
        Token RIGHT_PAREN295=null;
        QueryParser.type_cast_return type_cast292 =null;

        QueryParser.type_cast_return type_cast294 =null;


        Object TUPLE290_tree=null;
        Object LEFT_PAREN291_tree=null;
        Object COMMA293_tree=null;
        Object RIGHT_PAREN295_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_TUPLE=new RewriteRuleTokenStream(adaptor,"token TUPLE");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule type_cast");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:424:17: ( TUPLE LEFT_PAREN ( type_cast ( COMMA type_cast )* )? RIGHT_PAREN -> ^( TUPLE_TYPE_CAST ( type_cast )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:424:19: TUPLE LEFT_PAREN ( type_cast ( COMMA type_cast )* )? RIGHT_PAREN
            {
            TUPLE290=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_tuple_type_cast2960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TUPLE.add(TUPLE290);


            LEFT_PAREN291=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple_type_cast2962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN291);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:424:36: ( type_cast ( COMMA type_cast )* )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( ((LA81_0 >= BAG && LA81_0 <= BOOLEAN)||LA81_0==BYTEARRAY||LA81_0==CHARARRAY||LA81_0==DOUBLE||LA81_0==FLOAT||LA81_0==INT||LA81_0==LEFT_BRACKET||LA81_0==LONG||LA81_0==MAP||LA81_0==TUPLE) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:424:38: type_cast ( COMMA type_cast )*
                    {
                    pushFollow(FOLLOW_type_cast_in_tuple_type_cast2966);
                    type_cast292=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_cast.add(type_cast292.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:424:48: ( COMMA type_cast )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==COMMA) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:424:50: COMMA type_cast
                    	    {
                    	    COMMA293=(Token)match(input,COMMA,FOLLOW_COMMA_in_tuple_type_cast2970); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA293);


                    	    pushFollow(FOLLOW_type_cast_in_tuple_type_cast2972);
                    	    type_cast294=type_cast();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_cast.add(type_cast294.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN295=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple_type_cast2980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN295);


            // AST REWRITE
            // elements: type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:16: -> ^( TUPLE_TYPE_CAST ( type_cast )* )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:425:19: ^( TUPLE_TYPE_CAST ( type_cast )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TUPLE_TYPE_CAST, "TUPLE_TYPE_CAST")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:425:38: ( type_cast )*
                while ( stream_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_cast.nextTree());

                }
                stream_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type_cast"


    public static class bag_type_cast_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:428:1: bag_type_cast : BAG LEFT_CURLY ( tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( tuple_type_cast )? ) ;
    public final QueryParser.bag_type_cast_return bag_type_cast() throws RecognitionException {
        QueryParser.bag_type_cast_return retval = new QueryParser.bag_type_cast_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BAG296=null;
        Token LEFT_CURLY297=null;
        Token RIGHT_CURLY299=null;
        QueryParser.tuple_type_cast_return tuple_type_cast298 =null;


        Object BAG296_tree=null;
        Object LEFT_CURLY297_tree=null;
        Object RIGHT_CURLY299_tree=null;
        RewriteRuleTokenStream stream_BAG=new RewriteRuleTokenStream(adaptor,"token BAG");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_tuple_type_cast=new RewriteRuleSubtreeStream(adaptor,"rule tuple_type_cast");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:428:15: ( BAG LEFT_CURLY ( tuple_type_cast )? RIGHT_CURLY -> ^( BAG_TYPE_CAST ( tuple_type_cast )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:428:17: BAG LEFT_CURLY ( tuple_type_cast )? RIGHT_CURLY
            {
            BAG296=(Token)match(input,BAG,FOLLOW_BAG_in_bag_type_cast3015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BAG.add(BAG296);


            LEFT_CURLY297=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag_type_cast3017); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY297);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:428:32: ( tuple_type_cast )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==TUPLE) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:428:32: tuple_type_cast
                    {
                    pushFollow(FOLLOW_tuple_type_cast_in_bag_type_cast3019);
                    tuple_type_cast298=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tuple_type_cast.add(tuple_type_cast298.getTree());

                    }
                    break;

            }


            RIGHT_CURLY299=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag_type_cast3022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY299);


            // AST REWRITE
            // elements: tuple_type_cast
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:14: -> ^( BAG_TYPE_CAST ( tuple_type_cast )? )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:429:17: ^( BAG_TYPE_CAST ( tuple_type_cast )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BAG_TYPE_CAST, "BAG_TYPE_CAST")
                , root_1);

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:429:34: ( tuple_type_cast )?
                if ( stream_tuple_type_cast.hasNext() ) {
                    adaptor.addChild(root_1, stream_tuple_type_cast.nextTree());

                }
                stream_tuple_type_cast.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type_cast"


    public static class unary_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:432:1: unary_expr : ( expr_eval | LEFT_PAREN expr RIGHT_PAREN -> ^( EXPR_IN_PAREN expr ) | neg_expr );
    public final QueryParser.unary_expr_return unary_expr() throws RecognitionException {
        QueryParser.unary_expr_return retval = new QueryParser.unary_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN301=null;
        Token RIGHT_PAREN303=null;
        QueryParser.expr_eval_return expr_eval300 =null;

        QueryParser.expr_return expr302 =null;

        QueryParser.neg_expr_return neg_expr304 =null;


        Object LEFT_PAREN301_tree=null;
        Object RIGHT_PAREN303_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:432:12: ( expr_eval | LEFT_PAREN expr RIGHT_PAREN -> ^( EXPR_IN_PAREN expr ) | neg_expr )
            int alt83=3;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:432:14: expr_eval
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_eval_in_unary_expr3055);
                    expr_eval300=expr_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_eval300.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:433:14: LEFT_PAREN expr RIGHT_PAREN
                    {
                    LEFT_PAREN301=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unary_expr3071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN301);


                    pushFollow(FOLLOW_expr_in_unary_expr3073);
                    expr302=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr302.getTree());

                    RIGHT_PAREN303=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unary_expr3075); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN303);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 434:11: -> ^( EXPR_IN_PAREN expr )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:434:14: ^( EXPR_IN_PAREN expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_IN_PAREN, "EXPR_IN_PAREN")
                        , root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:435:14: neg_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_neg_expr_in_unary_expr3110);
                    neg_expr304=neg_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg_expr304.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_expr"


    public static class expr_eval_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eval"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:438:1: expr_eval : ( const_expr | var_expr );
    public final QueryParser.expr_eval_return expr_eval() throws RecognitionException {
        QueryParser.expr_eval_return retval = new QueryParser.expr_eval_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.const_expr_return const_expr305 =null;

        QueryParser.var_expr_return var_expr306 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:438:11: ( const_expr | var_expr )
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:438:13: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_expr_eval3119);
                    const_expr305=const_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, const_expr305.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:438:26: var_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_var_expr_in_expr_eval3123);
                    var_expr306=var_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, var_expr306.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eval"


    public static class var_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "var_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:441:1: var_expr : projectable_expr ( dot_proj | pound_proj )* ;
    public final QueryParser.var_expr_return var_expr() throws RecognitionException {
        QueryParser.var_expr_return retval = new QueryParser.var_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.projectable_expr_return projectable_expr307 =null;

        QueryParser.dot_proj_return dot_proj308 =null;

        QueryParser.pound_proj_return pound_proj309 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:441:10: ( projectable_expr ( dot_proj | pound_proj )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:441:12: projectable_expr ( dot_proj | pound_proj )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_projectable_expr_in_var_expr3132);
            projectable_expr307=projectable_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, projectable_expr307.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:441:29: ( dot_proj | pound_proj )*
            loop85:
            do {
                int alt85=3;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==PERIOD) ) {
                    alt85=1;
                }
                else if ( (LA85_0==POUND) ) {
                    alt85=2;
                }


                switch (alt85) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:441:31: dot_proj
            	    {
            	    pushFollow(FOLLOW_dot_proj_in_var_expr3136);
            	    dot_proj308=dot_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dot_proj308.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:441:42: pound_proj
            	    {
            	    pushFollow(FOLLOW_pound_proj_in_var_expr3140);
            	    pound_proj309=pound_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pound_proj309.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "var_expr"


    public static class projectable_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projectable_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:1: projectable_expr : ( func_eval | col_ref | bin_expr | type_conversion );
    public final QueryParser.projectable_expr_return projectable_expr() throws RecognitionException {
        QueryParser.projectable_expr_return retval = new QueryParser.projectable_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.func_eval_return func_eval310 =null;

        QueryParser.col_ref_return col_ref311 =null;

        QueryParser.bin_expr_return bin_expr312 =null;

        QueryParser.type_conversion_return type_conversion313 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:17: ( func_eval | col_ref | bin_expr | type_conversion )
            int alt86=4;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:19: func_eval
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_eval_in_projectable_expr3151);
                    func_eval310=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_eval310.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:31: col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_projectable_expr3155);
                    col_ref311=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref311.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:41: bin_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bin_expr_in_projectable_expr3159);
                    bin_expr312=bin_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bin_expr312.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:52: type_conversion
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_conversion_in_projectable_expr3163);
                    type_conversion313=type_conversion();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_conversion313.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projectable_expr"


    public static class type_conversion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_conversion"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:447:1: type_conversion : ( LEFT_CURLY real_arg_list RIGHT_CURLY -> ^( FUNC_EVAL TOBAG real_arg_list ) | LEFT_BRACKET real_arg_list RIGHT_BRACKET -> ^( FUNC_EVAL TOMAP real_arg_list ) | LEFT_PAREN real_arg ( COMMA real_arg )+ RIGHT_PAREN -> ^( FUNC_EVAL TOTUPLE ( real_arg )+ ) );
    public final QueryParser.type_conversion_return type_conversion() throws RecognitionException {
        QueryParser.type_conversion_return retval = new QueryParser.type_conversion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY314=null;
        Token RIGHT_CURLY316=null;
        Token LEFT_BRACKET317=null;
        Token RIGHT_BRACKET319=null;
        Token LEFT_PAREN320=null;
        Token COMMA322=null;
        Token RIGHT_PAREN324=null;
        QueryParser.real_arg_list_return real_arg_list315 =null;

        QueryParser.real_arg_list_return real_arg_list318 =null;

        QueryParser.real_arg_return real_arg321 =null;

        QueryParser.real_arg_return real_arg323 =null;


        Object LEFT_CURLY314_tree=null;
        Object RIGHT_CURLY316_tree=null;
        Object LEFT_BRACKET317_tree=null;
        Object RIGHT_BRACKET319_tree=null;
        Object LEFT_PAREN320_tree=null;
        Object COMMA322_tree=null;
        Object RIGHT_PAREN324_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_real_arg_list=new RewriteRuleSubtreeStream(adaptor,"rule real_arg_list");
        RewriteRuleSubtreeStream stream_real_arg=new RewriteRuleSubtreeStream(adaptor,"rule real_arg");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:447:17: ( LEFT_CURLY real_arg_list RIGHT_CURLY -> ^( FUNC_EVAL TOBAG real_arg_list ) | LEFT_BRACKET real_arg_list RIGHT_BRACKET -> ^( FUNC_EVAL TOMAP real_arg_list ) | LEFT_PAREN real_arg ( COMMA real_arg )+ RIGHT_PAREN -> ^( FUNC_EVAL TOTUPLE ( real_arg )+ ) )
            int alt88=3;
            switch ( input.LA(1) ) {
            case LEFT_CURLY:
                {
                alt88=1;
                }
                break;
            case LEFT_BRACKET:
                {
                alt88=2;
                }
                break;
            case LEFT_PAREN:
                {
                alt88=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }

            switch (alt88) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:447:19: LEFT_CURLY real_arg_list RIGHT_CURLY
                    {
                    LEFT_CURLY314=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_type_conversion3172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY314);


                    pushFollow(FOLLOW_real_arg_list_in_type_conversion3174);
                    real_arg_list315=real_arg_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg_list.add(real_arg_list315.getTree());

                    RIGHT_CURLY316=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_type_conversion3176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY316);


                    // AST REWRITE
                    // elements: real_arg_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 448:16: -> ^( FUNC_EVAL TOBAG real_arg_list )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:448:19: ^( FUNC_EVAL TOBAG real_arg_list )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOBAG, "TOBAG")
                        );

                        adaptor.addChild(root_1, stream_real_arg_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:449:18: LEFT_BRACKET real_arg_list RIGHT_BRACKET
                    {
                    LEFT_BRACKET317=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_type_conversion3223); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET317);


                    pushFollow(FOLLOW_real_arg_list_in_type_conversion3225);
                    real_arg_list318=real_arg_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg_list.add(real_arg_list318.getTree());

                    RIGHT_BRACKET319=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_type_conversion3227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET319);


                    // AST REWRITE
                    // elements: real_arg_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 450:16: -> ^( FUNC_EVAL TOMAP real_arg_list )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:450:19: ^( FUNC_EVAL TOMAP real_arg_list )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOMAP, "TOMAP")
                        );

                        adaptor.addChild(root_1, stream_real_arg_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:451:18: LEFT_PAREN real_arg ( COMMA real_arg )+ RIGHT_PAREN
                    {
                    LEFT_PAREN320=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_type_conversion3274); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN320);


                    pushFollow(FOLLOW_real_arg_in_type_conversion3276);
                    real_arg321=real_arg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_real_arg.add(real_arg321.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:451:38: ( COMMA real_arg )+
                    int cnt87=0;
                    loop87:
                    do {
                        int alt87=2;
                        int LA87_0 = input.LA(1);

                        if ( (LA87_0==COMMA) ) {
                            alt87=1;
                        }


                        switch (alt87) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:451:40: COMMA real_arg
                    	    {
                    	    COMMA322=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_conversion3280); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA322);


                    	    pushFollow(FOLLOW_real_arg_in_type_conversion3282);
                    	    real_arg323=real_arg();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_real_arg.add(real_arg323.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt87 >= 1 ) break loop87;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(87, input);
                                throw eee;
                        }
                        cnt87++;
                    } while (true);


                    RIGHT_PAREN324=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_type_conversion3287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN324);


                    // AST REWRITE
                    // elements: real_arg
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 452:16: -> ^( FUNC_EVAL TOTUPLE ( real_arg )+ )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:452:19: ^( FUNC_EVAL TOTUPLE ( real_arg )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FUNC_EVAL, "FUNC_EVAL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (Object)adaptor.create(TOTUPLE, "TOTUPLE")
                        );

                        if ( !(stream_real_arg.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_real_arg.hasNext() ) {
                            adaptor.addChild(root_1, stream_real_arg.nextTree());

                        }
                        stream_real_arg.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_conversion"


    public static class dot_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dot_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:455:1: dot_proj : PERIOD ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) ) -> ^( PERIOD ( col_alias_or_index )+ ) ;
    public final QueryParser.dot_proj_return dot_proj() throws RecognitionException {
        QueryParser.dot_proj_return retval = new QueryParser.dot_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD325=null;
        Token LEFT_PAREN327=null;
        Token COMMA329=null;
        Token RIGHT_PAREN331=null;
        QueryParser.col_alias_or_index_return col_alias_or_index326 =null;

        QueryParser.col_alias_or_index_return col_alias_or_index328 =null;

        QueryParser.col_alias_or_index_return col_alias_or_index330 =null;


        Object PERIOD325_tree=null;
        Object LEFT_PAREN327_tree=null;
        Object COMMA329_tree=null;
        Object RIGHT_PAREN331_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_alias_or_index=new RewriteRuleSubtreeStream(adaptor,"rule col_alias_or_index");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:455:10: ( PERIOD ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) ) -> ^( PERIOD ( col_alias_or_index )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:455:12: PERIOD ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) )
            {
            PERIOD325=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_dot_proj3325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD325);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:455:19: ( col_alias_or_index | ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN ) )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==DOLLARVAR||LA90_0==GROUP||LA90_0==IDENTIFIER_L) ) {
                alt90=1;
            }
            else if ( (LA90_0==LEFT_PAREN) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }
            switch (alt90) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:455:21: col_alias_or_index
                    {
                    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj3329);
                    col_alias_or_index326=col_alias_or_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_alias_or_index.add(col_alias_or_index326.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:456:21: ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN )
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:456:21: ( LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN )
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:456:23: LEFT_PAREN col_alias_or_index ( COMMA col_alias_or_index )* RIGHT_PAREN
                    {
                    LEFT_PAREN327=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_dot_proj3354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN327);


                    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj3356);
                    col_alias_or_index328=col_alias_or_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_alias_or_index.add(col_alias_or_index328.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:456:53: ( COMMA col_alias_or_index )*
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==COMMA) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:456:55: COMMA col_alias_or_index
                    	    {
                    	    COMMA329=(Token)match(input,COMMA,FOLLOW_COMMA_in_dot_proj3360); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA329);


                    	    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj3362);
                    	    col_alias_or_index330=col_alias_or_index();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_col_alias_or_index.add(col_alias_or_index330.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop89;
                        }
                    } while (true);


                    RIGHT_PAREN331=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_dot_proj3367); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN331);


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: col_alias_or_index, PERIOD
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:9: -> ^( PERIOD ( col_alias_or_index )+ )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:457:12: ^( PERIOD ( col_alias_or_index )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_PERIOD.nextNode()
                , root_1);

                if ( !(stream_col_alias_or_index.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_col_alias_or_index.hasNext() ) {
                    adaptor.addChild(root_1, stream_col_alias_or_index.nextTree());

                }
                stream_col_alias_or_index.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dot_proj"


    public static class col_alias_or_index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias_or_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:460:1: col_alias_or_index : ( col_alias | col_index );
    public final QueryParser.col_alias_or_index_return col_alias_or_index() throws RecognitionException {
        QueryParser.col_alias_or_index_return retval = new QueryParser.col_alias_or_index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_alias_return col_alias332 =null;

        QueryParser.col_index_return col_index333 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:460:20: ( col_alias | col_index )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==GROUP||LA91_0==IDENTIFIER_L) ) {
                alt91=1;
            }
            else if ( (LA91_0==DOLLARVAR) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }
            switch (alt91) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:460:22: col_alias
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_alias_in_col_alias_or_index3399);
                    col_alias332=col_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_alias332.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:460:34: col_index
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_index_in_col_alias_or_index3403);
                    col_index333=col_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_index333.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias_or_index"


    public static class col_alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:463:1: col_alias : ( GROUP | identifier );
    public final QueryParser.col_alias_return col_alias() throws RecognitionException {
        QueryParser.col_alias_return retval = new QueryParser.col_alias_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GROUP334=null;
        QueryParser.identifier_return identifier335 =null;


        Object GROUP334_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:463:11: ( GROUP | identifier )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==GROUP) ) {
                alt92=1;
            }
            else if ( (LA92_0==IDENTIFIER_L) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:463:13: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP334=(Token)match(input,GROUP,FOLLOW_GROUP_in_col_alias3412); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP334_tree = 
                    (Object)adaptor.create(GROUP334)
                    ;
                    adaptor.addChild(root_0, GROUP334_tree);
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:463:21: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_col_alias3416);
                    identifier335=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier335.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias"


    public static class col_index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:466:1: col_index : DOLLARVAR ;
    public final QueryParser.col_index_return col_index() throws RecognitionException {
        QueryParser.col_index_return retval = new QueryParser.col_index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOLLARVAR336=null;

        Object DOLLARVAR336_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:466:11: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:466:13: DOLLARVAR
            {
            root_0 = (Object)adaptor.nil();


            DOLLARVAR336=(Token)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_col_index3425); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR336_tree = 
            (Object)adaptor.create(DOLLARVAR336)
            ;
            adaptor.addChild(root_0, DOLLARVAR336_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_index"


    public static class col_range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:469:1: col_range : (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) );
    public final QueryParser.col_range_return col_range() throws RecognitionException {
        QueryParser.col_range_return retval = new QueryParser.col_range_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOUBLE_PERIOD337=null;
        Token DOUBLE_PERIOD338=null;
        QueryParser.col_ref_return c1 =null;

        QueryParser.col_ref_return c2 =null;

        QueryParser.col_ref_return col_ref339 =null;


        Object DOUBLE_PERIOD337_tree=null;
        Object DOUBLE_PERIOD338_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:469:11: (c1= col_ref DOUBLE_PERIOD (c2= col_ref )? -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? ) | DOUBLE_PERIOD col_ref -> ^( COL_RANGE DOUBLE_PERIOD col_ref ) )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==DOLLARVAR||LA94_0==GROUP||LA94_0==IDENTIFIER_L) ) {
                alt94=1;
            }
            else if ( (LA94_0==DOUBLE_PERIOD) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:469:13: c1= col_ref DOUBLE_PERIOD (c2= col_ref )?
                    {
                    pushFollow(FOLLOW_col_ref_in_col_range3438);
                    c1=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(c1.getTree());

                    DOUBLE_PERIOD337=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range3440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD337);


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:469:43: (c2= col_ref )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==DOLLARVAR||LA93_0==GROUP||LA93_0==IDENTIFIER_L) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:469:43: c2= col_ref
                            {
                            pushFollow(FOLLOW_col_ref_in_col_range3446);
                            c2=col_ref();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_col_ref.add(c2.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: c1, DOUBLE_PERIOD, c2
                    // token labels: 
                    // rule labels: retval, c1, c2
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.tree:null);
                    RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"rule c2",c2!=null?c2.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 470:11: -> ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:470:14: ^( COL_RANGE $c1 DOUBLE_PERIOD ( $c2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, stream_c1.nextTree());

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:470:45: ( $c2)?
                        if ( stream_c2.hasNext() ) {
                            adaptor.addChild(root_1, stream_c2.nextTree());

                        }
                        stream_c2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:471:14: DOUBLE_PERIOD col_ref
                    {
                    DOUBLE_PERIOD338=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range3487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD338);


                    pushFollow(FOLLOW_col_ref_in_col_range3489);
                    col_ref339=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref339.getTree());

                    // AST REWRITE
                    // elements: DOUBLE_PERIOD, col_ref
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 472:11: -> ^( COL_RANGE DOUBLE_PERIOD col_ref )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:472:14: ^( COL_RANGE DOUBLE_PERIOD col_ref )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COL_RANGE, "COL_RANGE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_DOUBLE_PERIOD.nextNode()
                        );

                        adaptor.addChild(root_1, stream_col_ref.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class pound_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pound_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:476:1: pound_proj : POUND ^ ( QUOTEDSTRING | null_keyword ) ;
    public final QueryParser.pound_proj_return pound_proj() throws RecognitionException {
        QueryParser.pound_proj_return retval = new QueryParser.pound_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token POUND340=null;
        Token QUOTEDSTRING341=null;
        QueryParser.null_keyword_return null_keyword342 =null;


        Object POUND340_tree=null;
        Object QUOTEDSTRING341_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:476:12: ( POUND ^ ( QUOTEDSTRING | null_keyword ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:476:14: POUND ^ ( QUOTEDSTRING | null_keyword )
            {
            root_0 = (Object)adaptor.nil();


            POUND340=(Token)match(input,POUND,FOLLOW_POUND_in_pound_proj3520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            POUND340_tree = 
            (Object)adaptor.create(POUND340)
            ;
            root_0 = (Object)adaptor.becomeRoot(POUND340_tree, root_0);
            }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:476:21: ( QUOTEDSTRING | null_keyword )
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==QUOTEDSTRING) ) {
                alt95=1;
            }
            else if ( (LA95_0==IDENTIFIER_L) ) {
                alt95=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }
            switch (alt95) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:476:23: QUOTEDSTRING
                    {
                    QUOTEDSTRING341=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_pound_proj3525); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING341_tree = 
                    (Object)adaptor.create(QUOTEDSTRING341)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING341_tree);
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:476:38: null_keyword
                    {
                    pushFollow(FOLLOW_null_keyword_in_pound_proj3529);
                    null_keyword342=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_keyword342.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pound_proj"


    public static class bin_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bin_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:479:1: bin_expr : LEFT_PAREN cond QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) ;
    public final QueryParser.bin_expr_return bin_expr() throws RecognitionException {
        QueryParser.bin_expr_return retval = new QueryParser.bin_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN343=null;
        Token QMARK345=null;
        Token COLON346=null;
        Token RIGHT_PAREN347=null;
        QueryParser.expr_return exp1 =null;

        QueryParser.expr_return exp2 =null;

        QueryParser.cond_return cond344 =null;


        Object LEFT_PAREN343_tree=null;
        Object QMARK345_tree=null;
        Object COLON346_tree=null;
        Object RIGHT_PAREN347_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:479:10: ( LEFT_PAREN cond QMARK exp1= expr COLON exp2= expr RIGHT_PAREN -> ^( BIN_EXPR cond $exp1 $exp2) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:479:12: LEFT_PAREN cond QMARK exp1= expr COLON exp2= expr RIGHT_PAREN
            {
            LEFT_PAREN343=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_bin_expr3540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN343);


            pushFollow(FOLLOW_cond_in_bin_expr3542);
            cond344=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cond.add(cond344.getTree());

            QMARK345=(Token)match(input,QMARK,FOLLOW_QMARK_in_bin_expr3544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QMARK.add(QMARK345);


            pushFollow(FOLLOW_expr_in_bin_expr3550);
            exp1=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(exp1.getTree());

            COLON346=(Token)match(input,COLON,FOLLOW_COLON_in_bin_expr3552); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON346);


            pushFollow(FOLLOW_expr_in_bin_expr3558);
            exp2=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(exp2.getTree());

            RIGHT_PAREN347=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_bin_expr3560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN347);


            // AST REWRITE
            // elements: exp2, exp1, cond
            // token labels: 
            // rule labels: retval, exp2, exp1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_exp2=new RewriteRuleSubtreeStream(adaptor,"rule exp2",exp2!=null?exp2.tree:null);
            RewriteRuleSubtreeStream stream_exp1=new RewriteRuleSubtreeStream(adaptor,"rule exp1",exp1!=null?exp1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:9: -> ^( BIN_EXPR cond $exp1 $exp2)
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:480:12: ^( BIN_EXPR cond $exp1 $exp2)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BIN_EXPR, "BIN_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_cond.nextTree());

                adaptor.addChild(root_1, stream_exp1.nextTree());

                adaptor.addChild(root_1, stream_exp2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bin_expr"


    public static class neg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "neg_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:483:1: neg_expr : MINUS cast_expr -> ^( NEG cast_expr ) ;
    public final QueryParser.neg_expr_return neg_expr() throws RecognitionException {
        QueryParser.neg_expr_return retval = new QueryParser.neg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS348=null;
        QueryParser.cast_expr_return cast_expr349 =null;


        Object MINUS348_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:483:10: ( MINUS cast_expr -> ^( NEG cast_expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:483:12: MINUS cast_expr
            {
            MINUS348=(Token)match(input,MINUS,FOLLOW_MINUS_in_neg_expr3593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(MINUS348);


            pushFollow(FOLLOW_cast_expr_in_neg_expr3595);
            cast_expr349=cast_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cast_expr.add(cast_expr349.getTree());

            // AST REWRITE
            // elements: cast_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:9: -> ^( NEG cast_expr )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:484:12: ^( NEG cast_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NEG, "NEG")
                , root_1);

                adaptor.addChild(root_1, stream_cast_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "neg_expr"


    public static class limit_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:1: limit_clause : LIMIT ^ rel ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr ) ;
    public final QueryParser.limit_clause_return limit_clause() throws RecognitionException {
        QueryParser.limit_clause_return retval = new QueryParser.limit_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT350=null;
        Token INTEGER352=null;
        Token LONGINTEGER353=null;
        QueryParser.rel_return rel351 =null;

        QueryParser.expr_return expr354 =null;


        Object LIMIT350_tree=null;
        Object INTEGER352_tree=null;
        Object LONGINTEGER353_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:14: ( LIMIT ^ rel ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:16: LIMIT ^ rel ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr )
            {
            root_0 = (Object)adaptor.nil();


            LIMIT350=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause3622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT350_tree = 
            (Object)adaptor.create(LIMIT350)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT350_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_limit_clause3625);
            rel351=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel351.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:27: ( ( INTEGER SEMI_COLON )=> INTEGER | ( LONGINTEGER SEMI_COLON )=> LONGINTEGER | expr )
            int alt96=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                int LA96_1 = input.LA(2);

                if ( (synpred155_QueryParser()) ) {
                    alt96=1;
                }
                else if ( (true) ) {
                    alt96=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 1, input);

                    throw nvae;

                }
                }
                break;
            case LONGINTEGER:
                {
                int LA96_2 = input.LA(2);

                if ( (synpred156_QueryParser()) ) {
                    alt96=2;
                }
                else if ( (true) ) {
                    alt96=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 2, input);

                    throw nvae;

                }
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOLLARVAR:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case GROUP:
            case IDENTIFIER_L:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
                {
                alt96=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }

            switch (alt96) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:29: ( INTEGER SEMI_COLON )=> INTEGER
                    {
                    INTEGER352=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_limit_clause3637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER352_tree = 
                    (Object)adaptor.create(INTEGER352)
                    ;
                    adaptor.addChild(root_0, INTEGER352_tree);
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:63: ( LONGINTEGER SEMI_COLON )=> LONGINTEGER
                    {
                    LONGINTEGER353=(Token)match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_limit_clause3649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINTEGER353_tree = 
                    (Object)adaptor.create(LONGINTEGER353)
                    ;
                    adaptor.addChild(root_0, LONGINTEGER353_tree);
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:105: expr
                    {
                    pushFollow(FOLLOW_expr_in_limit_clause3653);
                    expr354=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr354.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:490:1: sample_clause : SAMPLE ^ rel ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr ) ;
    public final QueryParser.sample_clause_return sample_clause() throws RecognitionException {
        QueryParser.sample_clause_return retval = new QueryParser.sample_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SAMPLE355=null;
        Token DOUBLENUMBER357=null;
        QueryParser.rel_return rel356 =null;

        QueryParser.expr_return expr358 =null;


        Object SAMPLE355_tree=null;
        Object DOUBLENUMBER357_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:490:15: ( SAMPLE ^ rel ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:490:17: SAMPLE ^ rel ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr )
            {
            root_0 = (Object)adaptor.nil();


            SAMPLE355=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause3664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE355_tree = 
            (Object)adaptor.create(SAMPLE355)
            ;
            root_0 = (Object)adaptor.becomeRoot(SAMPLE355_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_sample_clause3667);
            rel356=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel356.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:490:29: ( ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER | expr )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==DOUBLENUMBER) ) {
                int LA97_1 = input.LA(2);

                if ( (synpred157_QueryParser()) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA97_0 >= ALL && LA97_0 <= BAG)||(LA97_0 >= BY && LA97_0 <= COGROUP)||LA97_0==CROSS||(LA97_0 >= DEFINE && LA97_0 <= DESC)||LA97_0==DISTINCT||(LA97_0 >= DOLLARVAR && LA97_0 <= DOUBLE)||(LA97_0 >= FALSE && LA97_0 <= FLOAT)||(LA97_0 >= FLOATNUMBER && LA97_0 <= GROUP)||(LA97_0 >= IDENTIFIER_L && LA97_0 <= LEFT_PAREN)||(LA97_0 >= LIMIT && LA97_0 <= MINUS)||LA97_0==NOT||(LA97_0 >= OR && LA97_0 <= ORDER)||(LA97_0 >= OUTER && LA97_0 <= PARTITION)||(LA97_0 >= QUOTEDSTRING && LA97_0 <= RIGHT)||LA97_0==SAMPLE||LA97_0==SHIP||LA97_0==SPLIT||(LA97_0 >= STDERROR && LA97_0 <= USING)||LA97_0==BOOL) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:490:31: ( DOUBLENUMBER SEMI_COLON )=> DOUBLENUMBER
                    {
                    DOUBLENUMBER357=(Token)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_sample_clause3679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER357_tree = 
                    (Object)adaptor.create(DOUBLENUMBER357)
                    ;
                    adaptor.addChild(root_0, DOUBLENUMBER357_tree);
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:490:75: expr
                    {
                    pushFollow(FOLLOW_expr_in_sample_clause3683);
                    expr358=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr358.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class order_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:493:1: order_clause : ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.order_clause_return order_clause() throws RecognitionException {
        QueryParser.order_clause_return retval = new QueryParser.order_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER359=null;
        Token BY361=null;
        Token USING363=null;
        QueryParser.rel_return rel360 =null;

        QueryParser.order_by_clause_return order_by_clause362 =null;

        QueryParser.func_clause_return func_clause364 =null;


        Object ORDER359_tree=null;
        Object BY361_tree=null;
        Object USING363_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:493:14: ( ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:493:16: ORDER ^ rel BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER359=(Token)match(input,ORDER,FOLLOW_ORDER_in_order_clause3694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER359_tree = 
            (Object)adaptor.create(ORDER359)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER359_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_order_clause3697);
            rel360=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel360.getTree());

            BY361=(Token)match(input,BY,FOLLOW_BY_in_order_clause3699); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_order_clause3702);
            order_by_clause362=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause362.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:493:47: ( USING ! func_clause )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==USING) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:493:49: USING ! func_clause
                    {
                    USING363=(Token)match(input,USING,FOLLOW_USING_in_order_clause3706); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_order_clause3709);
                    func_clause364=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause364.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:496:1: order_by_clause : ( STAR ( ASC | DESC )? | order_col_list );
    public final QueryParser.order_by_clause_return order_by_clause() throws RecognitionException {
        QueryParser.order_by_clause_return retval = new QueryParser.order_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR365=null;
        Token set366=null;
        QueryParser.order_col_list_return order_col_list367 =null;


        Object STAR365_tree=null;
        Object set366_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:496:17: ( STAR ( ASC | DESC )? | order_col_list )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==STAR) ) {
                alt100=1;
            }
            else if ( (LA100_0==DOLLARVAR||LA100_0==DOUBLE_PERIOD||LA100_0==GROUP||LA100_0==IDENTIFIER_L||LA100_0==LEFT_PAREN) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:496:19: STAR ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR365=(Token)match(input,STAR,FOLLOW_STAR_in_order_by_clause3721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR365_tree = 
                    (Object)adaptor.create(STAR365)
                    ;
                    adaptor.addChild(root_0, STAR365_tree);
                    }

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:496:24: ( ASC | DESC )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==ASC||LA99_0==DESC) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set366=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set366)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:497:19: order_col_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_col_list_in_order_by_clause3752);
                    order_col_list367=order_col_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_col_list367.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:500:1: order_col_list : order_col ( COMMA order_col )* -> ( order_col )+ ;
    public final QueryParser.order_col_list_return order_col_list() throws RecognitionException {
        QueryParser.order_col_list_return retval = new QueryParser.order_col_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA369=null;
        QueryParser.order_col_return order_col368 =null;

        QueryParser.order_col_return order_col370 =null;


        Object COMMA369_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_col=new RewriteRuleSubtreeStream(adaptor,"rule order_col");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:500:16: ( order_col ( COMMA order_col )* -> ( order_col )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:500:18: order_col ( COMMA order_col )*
            {
            pushFollow(FOLLOW_order_col_in_order_col_list3761);
            order_col368=order_col();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_col.add(order_col368.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:500:28: ( COMMA order_col )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==COMMA) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:500:30: COMMA order_col
            	    {
            	    COMMA369=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_col_list3765); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA369);


            	    pushFollow(FOLLOW_order_col_in_order_col_list3767);
            	    order_col370=order_col();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_col.add(order_col370.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);


            // AST REWRITE
            // elements: order_col
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 501:15: -> ( order_col )+
            {
                if ( !(stream_order_col.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_order_col.hasNext() ) {
                    adaptor.addChild(root_0, stream_order_col.nextTree());

                }
                stream_order_col.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col_list"


    public static class order_col_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:504:1: order_col : ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !);
    public final QueryParser.order_col_return order_col() throws RecognitionException {
        QueryParser.order_col_return retval = new QueryParser.order_col_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set372=null;
        Token set374=null;
        Token LEFT_PAREN375=null;
        Token set377=null;
        Token RIGHT_PAREN378=null;
        QueryParser.col_range_return col_range371 =null;

        QueryParser.col_ref_return col_ref373 =null;

        QueryParser.col_ref_return col_ref376 =null;


        Object set372_tree=null;
        Object set374_tree=null;
        Object LEFT_PAREN375_tree=null;
        Object set377_tree=null;
        Object RIGHT_PAREN378_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:504:11: ( col_range ( ASC | DESC )? | col_ref ( ASC | DESC )? | LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !)
            int alt105=3;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA105_1 = input.LA(2);

                if ( (LA105_1==DOUBLE_PERIOD) ) {
                    alt105=1;
                }
                else if ( (LA105_1==EOF||LA105_1==ASC||LA105_1==COMMA||LA105_1==DESC||LA105_1==PARALLEL||LA105_1==RIGHT_PAREN||LA105_1==SEMI_COLON||LA105_1==USING) ) {
                    alt105=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA105_2 = input.LA(2);

                if ( (LA105_2==DOUBLE_PERIOD) ) {
                    alt105=1;
                }
                else if ( (LA105_2==EOF||LA105_2==ASC||LA105_2==COMMA||LA105_2==DESC||LA105_2==PARALLEL||LA105_2==RIGHT_PAREN||LA105_2==SEMI_COLON||LA105_2==USING) ) {
                    alt105=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 2, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA105_3 = input.LA(2);

                if ( (LA105_3==DOUBLE_PERIOD) ) {
                    alt105=1;
                }
                else if ( (LA105_3==EOF||LA105_3==ASC||LA105_3==COMMA||LA105_3==DESC||LA105_3==PARALLEL||LA105_3==RIGHT_PAREN||LA105_3==SEMI_COLON||LA105_3==USING) ) {
                    alt105=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt105=1;
                }
                break;
            case LEFT_PAREN:
                {
                alt105=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }

            switch (alt105) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:504:13: col_range ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_order_col3798);
                    col_range371=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range371.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:504:23: ( ASC | DESC )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==ASC||LA102_0==DESC) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set372=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set372)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:505:13: col_ref ( ASC | DESC )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_order_col3821);
                    col_ref373=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref373.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:505:21: ( ASC | DESC )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==ASC||LA103_0==DESC) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set374=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set374)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:506:13: LEFT_PAREN ! col_ref ( ASC | DESC )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN375=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_order_col3848); if (state.failed) return retval;

                    pushFollow(FOLLOW_col_ref_in_order_col3851);
                    col_ref376=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref376.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:506:33: ( ASC | DESC )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==ASC||LA104_0==DESC) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
                            {
                            set377=(Token)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set377)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    RIGHT_PAREN378=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_order_col3864); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:509:1: distinct_clause : DISTINCT ^ rel ( partition_clause )? ;
    public final QueryParser.distinct_clause_return distinct_clause() throws RecognitionException {
        QueryParser.distinct_clause_return retval = new QueryParser.distinct_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT379=null;
        QueryParser.rel_return rel380 =null;

        QueryParser.partition_clause_return partition_clause381 =null;


        Object DISTINCT379_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:509:17: ( DISTINCT ^ rel ( partition_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:509:19: DISTINCT ^ rel ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT379=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause3874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT379_tree = 
            (Object)adaptor.create(DISTINCT379)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT379_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_distinct_clause3877);
            rel380=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel380.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:509:33: ( partition_clause )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==PARTITION) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:509:33: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause3879);
                    partition_clause381=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause381.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:512:1: partition_clause : PARTITION ^ BY ! func_name ;
    public final QueryParser.partition_clause_return partition_clause() throws RecognitionException {
        QueryParser.partition_clause_return retval = new QueryParser.partition_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PARTITION382=null;
        Token BY383=null;
        QueryParser.func_name_return func_name384 =null;


        Object PARTITION382_tree=null;
        Object BY383_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:512:18: ( PARTITION ^ BY ! func_name )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:512:20: PARTITION ^ BY ! func_name
            {
            root_0 = (Object)adaptor.nil();


            PARTITION382=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause3889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION382_tree = 
            (Object)adaptor.create(PARTITION382)
            ;
            root_0 = (Object)adaptor.becomeRoot(PARTITION382_tree, root_0);
            }

            BY383=(Token)match(input,BY,FOLLOW_BY_in_partition_clause3892); if (state.failed) return retval;

            pushFollow(FOLLOW_func_name_in_partition_clause3895);
            func_name384=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, func_name384.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class cross_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:515:1: cross_clause : CROSS ^ rel_list ( partition_clause )? ;
    public final QueryParser.cross_clause_return cross_clause() throws RecognitionException {
        QueryParser.cross_clause_return retval = new QueryParser.cross_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS385=null;
        QueryParser.rel_list_return rel_list386 =null;

        QueryParser.partition_clause_return partition_clause387 =null;


        Object CROSS385_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:515:14: ( CROSS ^ rel_list ( partition_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:515:16: CROSS ^ rel_list ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            CROSS385=(Token)match(input,CROSS,FOLLOW_CROSS_in_cross_clause3904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS385_tree = 
            (Object)adaptor.create(CROSS385)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS385_tree, root_0);
            }

            pushFollow(FOLLOW_rel_list_in_cross_clause3907);
            rel_list386=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list386.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:515:32: ( partition_clause )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==PARTITION) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:515:32: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_cross_clause3909);
                    partition_clause387=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause387.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class rel_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:518:1: rel_list : rel ( COMMA rel )* -> ( rel )+ ;
    public final QueryParser.rel_list_return rel_list() throws RecognitionException {
        QueryParser.rel_list_return retval = new QueryParser.rel_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA389=null;
        QueryParser.rel_return rel388 =null;

        QueryParser.rel_return rel390 =null;


        Object COMMA389_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:518:10: ( rel ( COMMA rel )* -> ( rel )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:518:12: rel ( COMMA rel )*
            {
            pushFollow(FOLLOW_rel_in_rel_list3919);
            rel388=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel388.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:518:16: ( COMMA rel )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==COMMA) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:518:18: COMMA rel
            	    {
            	    COMMA389=(Token)match(input,COMMA,FOLLOW_COMMA_in_rel_list3923); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA389);


            	    pushFollow(FOLLOW_rel_in_rel_list3925);
            	    rel390=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_rel.add(rel390.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);


            // AST REWRITE
            // elements: rel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 519:9: -> ( rel )+
            {
                if ( !(stream_rel.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_rel.hasNext() ) {
                    adaptor.addChild(root_0, stream_rel.nextTree());

                }
                stream_rel.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:522:1: join_clause : JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? ;
    public final QueryParser.join_clause_return join_clause() throws RecognitionException {
        QueryParser.join_clause_return retval = new QueryParser.join_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token JOIN391=null;
        Token USING393=null;
        QueryParser.join_sub_clause_return join_sub_clause392 =null;

        QueryParser.join_type_return join_type394 =null;

        QueryParser.partition_clause_return partition_clause395 =null;


        Object JOIN391_tree=null;
        Object USING393_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:522:13: ( JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:522:15: JOIN ^ join_sub_clause ( USING ! join_type )? ( partition_clause )?
            {
            root_0 = (Object)adaptor.nil();


            JOIN391=(Token)match(input,JOIN,FOLLOW_JOIN_in_join_clause3950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN391_tree = 
            (Object)adaptor.create(JOIN391)
            ;
            root_0 = (Object)adaptor.becomeRoot(JOIN391_tree, root_0);
            }

            pushFollow(FOLLOW_join_sub_clause_in_join_clause3953);
            join_sub_clause392=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_sub_clause392.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:522:37: ( USING ! join_type )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==USING) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:522:39: USING ! join_type
                    {
                    USING393=(Token)match(input,USING,FOLLOW_USING_in_join_clause3957); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_type_in_join_clause3960);
                    join_type394=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_type394.getTree());

                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:522:59: ( partition_clause )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==PARTITION) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:522:59: partition_clause
                    {
                    pushFollow(FOLLOW_partition_clause_in_join_clause3965);
                    partition_clause395=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause395.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:525:1: join_type : QUOTEDSTRING ;
    public final QueryParser.join_type_return join_type() throws RecognitionException {
        QueryParser.join_type_return retval = new QueryParser.join_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING396=null;

        Object QUOTEDSTRING396_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:525:11: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:525:13: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING396=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type3975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING396_tree = 
            (Object)adaptor.create(QUOTEDSTRING396)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING396_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:528:1: join_sub_clause : ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item | join_item_list );
    public final QueryParser.join_sub_clause_return join_sub_clause() throws RecognitionException {
        QueryParser.join_sub_clause_return retval = new QueryParser.join_sub_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set398=null;
        Token OUTER399=null;
        Token COMMA400=null;
        QueryParser.join_item_return join_item397 =null;

        QueryParser.join_item_return join_item401 =null;

        QueryParser.join_item_list_return join_item_list402 =null;


        Object set398_tree=null;
        Object OUTER399_tree=null;
        Object COMMA400_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:528:17: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item | join_item_list )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==IDENTIFIER_L) ) {
                int LA112_1 = input.LA(2);

                if ( (((synpred179_QueryParser()&&synpred179_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {
                    alt112=1;
                }
                else if ( ((!input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA112_0==LEFT_PAREN) ) {
                int LA112_2 = input.LA(2);

                if ( (synpred179_QueryParser()) ) {
                    alt112=1;
                }
                else if ( (true) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;

            }
            switch (alt112) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:528:19: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA ! join_item
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_item_in_join_sub_clause3984);
                    join_item397=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item397.getTree());

                    set398=(Token)input.LT(1);

                    if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set398)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:528:53: ( OUTER )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==OUTER) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:528:53: OUTER
                            {
                            OUTER399=(Token)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause4000); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER399_tree = 
                            (Object)adaptor.create(OUTER399)
                            ;
                            adaptor.addChild(root_0, OUTER399_tree);
                            }

                            }
                            break;

                    }


                    COMMA400=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_sub_clause4003); if (state.failed) return retval;

                    pushFollow(FOLLOW_join_item_in_join_sub_clause4006);
                    join_item401=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item401.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:529:19: join_item_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_item_list_in_join_sub_clause4026);
                    join_item_list402=join_item_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item_list402.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:532:1: join_item_list : join_item ( COMMA ! join_item )+ ;
    public final QueryParser.join_item_list_return join_item_list() throws RecognitionException {
        QueryParser.join_item_list_return retval = new QueryParser.join_item_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA404=null;
        QueryParser.join_item_return join_item403 =null;

        QueryParser.join_item_return join_item405 =null;


        Object COMMA404_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:532:16: ( join_item ( COMMA ! join_item )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:532:18: join_item ( COMMA ! join_item )+
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_join_item_in_join_item_list4035);
            join_item403=join_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item403.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:532:28: ( COMMA ! join_item )+
            int cnt113=0;
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:532:30: COMMA ! join_item
            	    {
            	    COMMA404=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_item_list4039); if (state.failed) return retval;

            	    pushFollow(FOLLOW_join_item_in_join_item_list4042);
            	    join_item405=join_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_item405.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt113 >= 1 ) break loop113;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(113, input);
                        throw eee;
                }
                cnt113++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item_list"


    public static class join_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:535:1: join_item : rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final QueryParser.join_item_return join_item() throws RecognitionException {
        QueryParser.join_item_return retval = new QueryParser.join_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.rel_return rel406 =null;

        QueryParser.join_group_by_clause_return join_group_by_clause407 =null;


        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_join_group_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule join_group_by_clause");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:535:11: ( rel join_group_by_clause -> ^( JOIN_ITEM rel join_group_by_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:535:13: rel join_group_by_clause
            {
            pushFollow(FOLLOW_rel_in_join_item4054);
            rel406=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel406.getTree());

            pushFollow(FOLLOW_join_group_by_clause_in_join_item4056);
            join_group_by_clause407=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_join_group_by_clause.add(join_group_by_clause407.getTree());

            // AST REWRITE
            // elements: join_group_by_clause, rel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:10: -> ^( JOIN_ITEM rel join_group_by_clause )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:536:13: ^( JOIN_ITEM rel join_group_by_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(JOIN_ITEM, "JOIN_ITEM")
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                adaptor.addChild(root_1, stream_join_group_by_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:539:1: join_group_by_clause : BY ^ join_group_by_expr_list ;
    public final QueryParser.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        QueryParser.join_group_by_clause_return retval = new QueryParser.join_group_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BY408=null;
        QueryParser.join_group_by_expr_list_return join_group_by_expr_list409 =null;


        Object BY408_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:539:22: ( BY ^ join_group_by_expr_list )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:539:24: BY ^ join_group_by_expr_list
            {
            root_0 = (Object)adaptor.nil();


            BY408=(Token)match(input,BY,FOLLOW_BY_in_join_group_by_clause4087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY408_tree = 
            (Object)adaptor.create(BY408)
            ;
            root_0 = (Object)adaptor.becomeRoot(BY408_tree, root_0);
            }

            pushFollow(FOLLOW_join_group_by_expr_list_in_join_group_by_clause4090);
            join_group_by_expr_list409=join_group_by_expr_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_expr_list409.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class join_group_by_expr_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:542:1: join_group_by_expr_list : ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN -> ( join_group_by_expr )+ | join_group_by_expr );
    public final QueryParser.join_group_by_expr_list_return join_group_by_expr_list() throws RecognitionException {
        QueryParser.join_group_by_expr_list_return retval = new QueryParser.join_group_by_expr_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN410=null;
        Token COMMA412=null;
        Token RIGHT_PAREN414=null;
        QueryParser.join_group_by_expr_return join_group_by_expr411 =null;

        QueryParser.join_group_by_expr_return join_group_by_expr413 =null;

        QueryParser.join_group_by_expr_return join_group_by_expr415 =null;


        Object LEFT_PAREN410_tree=null;
        Object COMMA412_tree=null;
        Object RIGHT_PAREN414_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_join_group_by_expr=new RewriteRuleSubtreeStream(adaptor,"rule join_group_by_expr");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:542:25: ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN -> ( join_group_by_expr )+ | join_group_by_expr )
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:542:27: LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN
                    {
                    LEFT_PAREN410=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_join_group_by_expr_list4099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN410);


                    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_expr_list4101);
                    join_group_by_expr411=join_group_by_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_join_group_by_expr.add(join_group_by_expr411.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:542:57: ( COMMA join_group_by_expr )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==COMMA) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:542:59: COMMA join_group_by_expr
                    	    {
                    	    COMMA412=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_group_by_expr_list4105); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA412);


                    	    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_expr_list4107);
                    	    join_group_by_expr413=join_group_by_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_join_group_by_expr.add(join_group_by_expr413.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);


                    RIGHT_PAREN414=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_join_group_by_expr_list4112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN414);


                    // AST REWRITE
                    // elements: join_group_by_expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 543:24: -> ( join_group_by_expr )+
                    {
                        if ( !(stream_join_group_by_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_join_group_by_expr.hasNext() ) {
                            adaptor.addChild(root_0, stream_join_group_by_expr.nextTree());

                        }
                        stream_join_group_by_expr.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:544:27: join_group_by_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_expr_list4168);
                    join_group_by_expr415=join_group_by_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_group_by_expr415.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr_list"


    public static class join_group_by_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:547:1: join_group_by_expr : ( col_range | expr | STAR );
    public final QueryParser.join_group_by_expr_return join_group_by_expr() throws RecognitionException {
        QueryParser.join_group_by_expr_return retval = new QueryParser.join_group_by_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STAR418=null;
        QueryParser.col_range_return col_range416 =null;

        QueryParser.expr_return expr417 =null;


        Object STAR418_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:547:20: ( col_range | expr | STAR )
            int alt116=3;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==DOUBLE_PERIOD) ) {
                    alt116=1;
                }
                else if ( (LA116_1==EOF||LA116_1==COMMA||(LA116_1 >= DIV && LA116_1 <= DOLLAR)||LA116_1==FULL||LA116_1==INNER||LA116_1==LEFT||LA116_1==LEFT_PAREN||LA116_1==MINUS||LA116_1==OUTER||(LA116_1 >= PARALLEL && LA116_1 <= POUND)||LA116_1==RIGHT||LA116_1==RIGHT_PAREN||LA116_1==SEMI_COLON||LA116_1==STAR||LA116_1==USING) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA116_2 = input.LA(2);

                if ( (LA116_2==DOUBLE_PERIOD) ) {
                    alt116=1;
                }
                else if ( (LA116_2==EOF||LA116_2==COMMA||(LA116_2 >= DIV && LA116_2 <= DOLLAR)||LA116_2==FULL||LA116_2==INNER||LA116_2==LEFT||LA116_2==LEFT_PAREN||LA116_2==MINUS||LA116_2==OUTER||(LA116_2 >= PARALLEL && LA116_2 <= POUND)||LA116_2==RIGHT||LA116_2==RIGHT_PAREN||LA116_2==SEMI_COLON||LA116_2==STAR||LA116_2==USING) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 2, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA116_3 = input.LA(2);

                if ( (LA116_3==DOUBLE_PERIOD) ) {
                    alt116=1;
                }
                else if ( (LA116_3==EOF||LA116_3==COMMA||LA116_3==DIV||LA116_3==FULL||LA116_3==INNER||LA116_3==LEFT||LA116_3==MINUS||LA116_3==OUTER||(LA116_3 >= PARALLEL && LA116_3 <= POUND)||LA116_3==RIGHT||LA116_3==RIGHT_PAREN||LA116_3==SEMI_COLON||LA116_3==STAR||LA116_3==USING) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 3, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLE_PERIOD:
                {
                alt116=1;
                }
                break;
            case ALL:
            case AND:
            case AS:
            case ASC:
            case BAG:
            case BY:
            case BYTEARRAY:
            case CACHE:
            case CHARARRAY:
            case COGROUP:
            case CROSS:
            case DEFINE:
            case DESC:
            case DISTINCT:
            case DOUBLE:
            case DOUBLENUMBER:
            case FALSE:
            case FILTER:
            case FLATTEN:
            case FLOAT:
            case FLOATNUMBER:
            case FOREACH:
            case FULL:
            case GENERATE:
            case IF:
            case IMPORT:
            case INNER:
            case INPUT:
            case INT:
            case INTEGER:
            case INTO:
            case IS:
            case JOIN:
            case LEFT:
            case LEFT_BRACKET:
            case LEFT_CURLY:
            case LEFT_PAREN:
            case LIMIT:
            case LOAD:
            case LONG:
            case LONGINTEGER:
            case MAP:
            case MAPREDUCE:
            case MINUS:
            case NOT:
            case OR:
            case ORDER:
            case OUTER:
            case OUTPUT:
            case PARALLEL:
            case PARTITION:
            case QUOTEDSTRING:
            case RETURNS:
            case RIGHT:
            case SAMPLE:
            case SHIP:
            case SPLIT:
            case STDERROR:
            case STDIN:
            case STDOUT:
            case STORE:
            case STREAM:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
            case THROUGH:
            case TRUE:
            case TUPLE:
            case UNION:
            case USING:
            case BOOL:
                {
                alt116=2;
                }
                break;
            case STAR:
                {
                alt116=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }

            switch (alt116) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:547:22: col_range
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_range_in_join_group_by_expr4177);
                    col_range416=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_range416.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:547:35: expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expr_in_join_group_by_expr4182);
                    expr417=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr417.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:547:42: STAR
                    {
                    root_0 = (Object)adaptor.nil();


                    STAR418=(Token)match(input,STAR,FOLLOW_STAR_in_join_group_by_expr4186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR418_tree = 
                    (Object)adaptor.create(STAR418)
                    ;
                    adaptor.addChild(root_0, STAR418_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr"


    public static class union_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:550:1: union_clause : UNION ^ ( ONSCHEMA )? rel_list ;
    public final QueryParser.union_clause_return union_clause() throws RecognitionException {
        QueryParser.union_clause_return retval = new QueryParser.union_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token UNION419=null;
        Token ONSCHEMA420=null;
        QueryParser.rel_list_return rel_list421 =null;


        Object UNION419_tree=null;
        Object ONSCHEMA420_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:550:14: ( UNION ^ ( ONSCHEMA )? rel_list )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:550:16: UNION ^ ( ONSCHEMA )? rel_list
            {
            root_0 = (Object)adaptor.nil();


            UNION419=(Token)match(input,UNION,FOLLOW_UNION_in_union_clause4195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION419_tree = 
            (Object)adaptor.create(UNION419)
            ;
            root_0 = (Object)adaptor.becomeRoot(UNION419_tree, root_0);
            }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:550:23: ( ONSCHEMA )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==ONSCHEMA) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:550:23: ONSCHEMA
                    {
                    ONSCHEMA420=(Token)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause4198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA420_tree = 
                    (Object)adaptor.create(ONSCHEMA420)
                    ;
                    adaptor.addChild(root_0, ONSCHEMA420_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_rel_list_in_union_clause4201);
            rel_list421=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_list421.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    public static class foreach_clause_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause_simple"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:553:1: foreach_clause_simple : FOREACH ^ rel foreach_plan_simple ;
    public final QueryParser.foreach_clause_simple_return foreach_clause_simple() throws RecognitionException {
        QueryParser.foreach_clause_simple_return retval = new QueryParser.foreach_clause_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH422=null;
        QueryParser.rel_return rel423 =null;

        QueryParser.foreach_plan_simple_return foreach_plan_simple424 =null;


        Object FOREACH422_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:553:23: ( FOREACH ^ rel foreach_plan_simple )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:553:25: FOREACH ^ rel foreach_plan_simple
            {
            root_0 = (Object)adaptor.nil();


            FOREACH422=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause_simple4210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH422_tree = 
            (Object)adaptor.create(FOREACH422)
            ;
            root_0 = (Object)adaptor.becomeRoot(FOREACH422_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_foreach_clause_simple4213);
            rel423=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel423.getTree());

            pushFollow(FOLLOW_foreach_plan_simple_in_foreach_clause_simple4215);
            foreach_plan_simple424=foreach_plan_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_plan_simple424.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_clause_simple"


    public static class foreach_plan_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_simple"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:556:1: foreach_plan_simple : generate_clause -> ^( FOREACH_PLAN_SIMPLE generate_clause ) ;
    public final QueryParser.foreach_plan_simple_return foreach_plan_simple() throws RecognitionException {
        QueryParser.foreach_plan_simple_return retval = new QueryParser.foreach_plan_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.generate_clause_return generate_clause425 =null;


        RewriteRuleSubtreeStream stream_generate_clause=new RewriteRuleSubtreeStream(adaptor,"rule generate_clause");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:556:21: ( generate_clause -> ^( FOREACH_PLAN_SIMPLE generate_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:556:23: generate_clause
            {
            pushFollow(FOLLOW_generate_clause_in_foreach_plan_simple4224);
            generate_clause425=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_generate_clause.add(generate_clause425.getTree());

            // AST REWRITE
            // elements: generate_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 557:20: -> ^( FOREACH_PLAN_SIMPLE generate_clause )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:557:23: ^( FOREACH_PLAN_SIMPLE generate_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_SIMPLE, "FOREACH_PLAN_SIMPLE")
                , root_1);

                adaptor.addChild(root_1, stream_generate_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_simple"


    public static class foreach_clause_complex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause_complex"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:560:1: foreach_clause_complex : FOREACH ^ rel foreach_plan_complex ;
    public final QueryParser.foreach_clause_complex_return foreach_clause_complex() throws RecognitionException {
        QueryParser.foreach_clause_complex_return retval = new QueryParser.foreach_clause_complex_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH426=null;
        QueryParser.rel_return rel427 =null;

        QueryParser.foreach_plan_complex_return foreach_plan_complex428 =null;


        Object FOREACH426_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:560:24: ( FOREACH ^ rel foreach_plan_complex )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:560:26: FOREACH ^ rel foreach_plan_complex
            {
            root_0 = (Object)adaptor.nil();


            FOREACH426=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause_complex4262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH426_tree = 
            (Object)adaptor.create(FOREACH426)
            ;
            root_0 = (Object)adaptor.becomeRoot(FOREACH426_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_foreach_clause_complex4265);
            rel427=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel427.getTree());

            pushFollow(FOLLOW_foreach_plan_complex_in_foreach_clause_complex4267);
            foreach_plan_complex428=foreach_plan_complex();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, foreach_plan_complex428.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_clause_complex"


    public static class foreach_plan_complex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan_complex"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:563:1: foreach_plan_complex : nested_blk -> ^( FOREACH_PLAN_COMPLEX nested_blk ) ;
    public final QueryParser.foreach_plan_complex_return foreach_plan_complex() throws RecognitionException {
        QueryParser.foreach_plan_complex_return retval = new QueryParser.foreach_plan_complex_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.nested_blk_return nested_blk429 =null;


        RewriteRuleSubtreeStream stream_nested_blk=new RewriteRuleSubtreeStream(adaptor,"rule nested_blk");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:563:22: ( nested_blk -> ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:563:24: nested_blk
            {
            pushFollow(FOLLOW_nested_blk_in_foreach_plan_complex4276);
            nested_blk429=nested_blk();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_blk.add(nested_blk429.getTree());

            // AST REWRITE
            // elements: nested_blk
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:21: -> ^( FOREACH_PLAN_COMPLEX nested_blk )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:564:24: ^( FOREACH_PLAN_COMPLEX nested_blk )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOREACH_PLAN_COMPLEX, "FOREACH_PLAN_COMPLEX")
                , root_1);

                adaptor.addChild(root_1, stream_nested_blk.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan_complex"


    public static class nested_blk_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:567:1: nested_blk : LEFT_CURLY ! nested_command_list ( generate_clause SEMI_COLON !) RIGHT_CURLY !;
    public final QueryParser.nested_blk_return nested_blk() throws RecognitionException {
        QueryParser.nested_blk_return retval = new QueryParser.nested_blk_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY430=null;
        Token SEMI_COLON433=null;
        Token RIGHT_CURLY434=null;
        QueryParser.nested_command_list_return nested_command_list431 =null;

        QueryParser.generate_clause_return generate_clause432 =null;


        Object LEFT_CURLY430_tree=null;
        Object SEMI_COLON433_tree=null;
        Object RIGHT_CURLY434_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:567:12: ( LEFT_CURLY ! nested_command_list ( generate_clause SEMI_COLON !) RIGHT_CURLY !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:567:14: LEFT_CURLY ! nested_command_list ( generate_clause SEMI_COLON !) RIGHT_CURLY !
            {
            root_0 = (Object)adaptor.nil();


            LEFT_CURLY430=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_nested_blk4315); if (state.failed) return retval;

            pushFollow(FOLLOW_nested_command_list_in_nested_blk4318);
            nested_command_list431=nested_command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_command_list431.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:567:46: ( generate_clause SEMI_COLON !)
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:567:48: generate_clause SEMI_COLON !
            {
            pushFollow(FOLLOW_generate_clause_in_nested_blk4322);
            generate_clause432=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_clause432.getTree());

            SEMI_COLON433=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_blk4324); if (state.failed) return retval;

            }


            RIGHT_CURLY434=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_nested_blk4329); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class generate_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:570:1: generate_clause : GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( GENERATE ( flatten_generated_item )+ ) ;
    public final QueryParser.generate_clause_return generate_clause() throws RecognitionException {
        QueryParser.generate_clause_return retval = new QueryParser.generate_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GENERATE435=null;
        Token COMMA437=null;
        QueryParser.flatten_generated_item_return flatten_generated_item436 =null;

        QueryParser.flatten_generated_item_return flatten_generated_item438 =null;


        Object GENERATE435_tree=null;
        Object COMMA437_tree=null;
        RewriteRuleTokenStream stream_GENERATE=new RewriteRuleTokenStream(adaptor,"token GENERATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_flatten_generated_item=new RewriteRuleSubtreeStream(adaptor,"rule flatten_generated_item");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:570:17: ( GENERATE flatten_generated_item ( COMMA flatten_generated_item )* -> ^( GENERATE ( flatten_generated_item )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:570:19: GENERATE flatten_generated_item ( COMMA flatten_generated_item )*
            {
            GENERATE435=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_generate_clause4339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GENERATE.add(GENERATE435);


            pushFollow(FOLLOW_flatten_generated_item_in_generate_clause4341);
            flatten_generated_item436=flatten_generated_item();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item436.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:570:51: ( COMMA flatten_generated_item )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==COMMA) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:570:53: COMMA flatten_generated_item
            	    {
            	    COMMA437=(Token)match(input,COMMA,FOLLOW_COMMA_in_generate_clause4345); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA437);


            	    pushFollow(FOLLOW_flatten_generated_item_in_generate_clause4347);
            	    flatten_generated_item438=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flatten_generated_item.add(flatten_generated_item438.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            // AST REWRITE
            // elements: flatten_generated_item, GENERATE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:19: -> ^( GENERATE ( flatten_generated_item )+ )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:571:22: ^( GENERATE ( flatten_generated_item )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_GENERATE.nextNode()
                , root_1);

                if ( !(stream_flatten_generated_item.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_flatten_generated_item.hasNext() ) {
                    adaptor.addChild(root_1, stream_flatten_generated_item.nextTree());

                }
                stream_flatten_generated_item.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generate_clause"


    public static class nested_command_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:574:1: nested_command_list : ( ( nested_command SEMI_COLON )* -> ( nested_command )* |);
    public final QueryParser.nested_command_list_return nested_command_list() throws RecognitionException {
        QueryParser.nested_command_list_return retval = new QueryParser.nested_command_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMI_COLON440=null;
        QueryParser.nested_command_return nested_command439 =null;


        Object SEMI_COLON440_tree=null;
        RewriteRuleTokenStream stream_SEMI_COLON=new RewriteRuleTokenStream(adaptor,"token SEMI_COLON");
        RewriteRuleSubtreeStream stream_nested_command=new RewriteRuleSubtreeStream(adaptor,"rule nested_command");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:574:21: ( ( nested_command SEMI_COLON )* -> ( nested_command )* |)
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==IDENTIFIER_L) ) {
                alt120=1;
            }
            else if ( (LA120_0==GENERATE) ) {
                int LA120_2 = input.LA(2);

                if ( (synpred188_QueryParser()) ) {
                    alt120=1;
                }
                else if ( (true) ) {
                    alt120=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:574:23: ( nested_command SEMI_COLON )*
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:574:23: ( nested_command SEMI_COLON )*
                    loop119:
                    do {
                        int alt119=2;
                        int LA119_0 = input.LA(1);

                        if ( (LA119_0==IDENTIFIER_L) ) {
                            alt119=1;
                        }


                        switch (alt119) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:574:25: nested_command SEMI_COLON
                    	    {
                    	    pushFollow(FOLLOW_nested_command_in_nested_command_list4390);
                    	    nested_command439=nested_command();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_nested_command.add(nested_command439.getTree());

                    	    SEMI_COLON440=(Token)match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_nested_command_list4392); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_SEMI_COLON.add(SEMI_COLON440);


                    	    }
                    	    break;

                    	default :
                    	    break loop119;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: nested_command
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 575:20: -> ( nested_command )*
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:575:23: ( nested_command )*
                        while ( stream_nested_command.hasNext() ) {
                            adaptor.addChild(root_0, stream_nested_command.nextTree());

                        }
                        stream_nested_command.reset();

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:577:21: 
                    {
                    root_0 = (Object)adaptor.nil();


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command_list"


    public static class nested_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:579:1: nested_command : ( ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj ) -> ^( NESTED_CMD identifier nested_proj ) | identifier EQUAL expr -> ^( NESTED_CMD_ASSI identifier expr ) | identifier EQUAL nested_op -> ^( NESTED_CMD identifier nested_op ) );
    public final QueryParser.nested_command_return nested_command() throws RecognitionException {
        QueryParser.nested_command_return retval = new QueryParser.nested_command_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUAL442=null;
        Token EQUAL445=null;
        Token EQUAL448=null;
        QueryParser.identifier_return identifier441 =null;

        QueryParser.nested_proj_return nested_proj443 =null;

        QueryParser.identifier_return identifier444 =null;

        QueryParser.expr_return expr446 =null;

        QueryParser.identifier_return identifier447 =null;

        QueryParser.nested_op_return nested_op449 =null;


        Object EQUAL442_tree=null;
        Object EQUAL445_tree=null;
        Object EQUAL448_tree=null;
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_nested_proj=new RewriteRuleSubtreeStream(adaptor,"rule nested_proj");
        RewriteRuleSubtreeStream stream_nested_op=new RewriteRuleSubtreeStream(adaptor,"rule nested_op");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:579:16: ( ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj ) -> ^( NESTED_CMD identifier nested_proj ) | identifier EQUAL expr -> ^( NESTED_CMD_ASSI identifier expr ) | identifier EQUAL nested_op -> ^( NESTED_CMD identifier nested_op ) )
            int alt121=3;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:579:18: ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj )
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:579:103: ( identifier EQUAL nested_proj )
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:579:105: identifier EQUAL nested_proj
                    {
                    pushFollow(FOLLOW_identifier_in_nested_command4470);
                    identifier441=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier441.getTree());

                    EQUAL442=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command4472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL442);


                    pushFollow(FOLLOW_nested_proj_in_nested_command4474);
                    nested_proj443=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_proj.add(nested_proj443.getTree());

                    }


                    // AST REWRITE
                    // elements: identifier, nested_proj
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 580:15: -> ^( NESTED_CMD identifier nested_proj )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:580:18: ^( NESTED_CMD identifier nested_proj )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, stream_nested_proj.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:581:18: identifier EQUAL expr
                    {
                    pushFollow(FOLLOW_identifier_in_nested_command4521);
                    identifier444=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier444.getTree());

                    EQUAL445=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command4523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL445);


                    pushFollow(FOLLOW_expr_in_nested_command4525);
                    expr446=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr446.getTree());

                    // AST REWRITE
                    // elements: expr, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 582:15: -> ^( NESTED_CMD_ASSI identifier expr )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:582:18: ^( NESTED_CMD_ASSI identifier expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD_ASSI, "NESTED_CMD_ASSI")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:583:18: identifier EQUAL nested_op
                    {
                    pushFollow(FOLLOW_identifier_in_nested_command4570);
                    identifier447=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier447.getTree());

                    EQUAL448=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_nested_command4572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL448);


                    pushFollow(FOLLOW_nested_op_in_nested_command4574);
                    nested_op449=nested_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_op.add(nested_op449.getTree());

                    // AST REWRITE
                    // elements: nested_op, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 584:15: -> ^( NESTED_CMD identifier nested_op )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:584:18: ^( NESTED_CMD identifier nested_op )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NESTED_CMD, "NESTED_CMD")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, stream_nested_op.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:587:1: nested_op : ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach );
    public final QueryParser.nested_op_return nested_op() throws RecognitionException {
        QueryParser.nested_op_return retval = new QueryParser.nested_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.nested_filter_return nested_filter450 =null;

        QueryParser.nested_sort_return nested_sort451 =null;

        QueryParser.nested_distinct_return nested_distinct452 =null;

        QueryParser.nested_limit_return nested_limit453 =null;

        QueryParser.nested_cross_return nested_cross454 =null;

        QueryParser.nested_foreach_return nested_foreach455 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:587:11: ( nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach )
            int alt122=6;
            switch ( input.LA(1) ) {
            case FILTER:
                {
                alt122=1;
                }
                break;
            case ORDER:
                {
                alt122=2;
                }
                break;
            case DISTINCT:
                {
                alt122=3;
                }
                break;
            case LIMIT:
                {
                alt122=4;
                }
                break;
            case CROSS:
                {
                alt122=5;
                }
                break;
            case FOREACH:
                {
                alt122=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }

            switch (alt122) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:587:13: nested_filter
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_filter_in_nested_op4609);
                    nested_filter450=nested_filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_filter450.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:588:13: nested_sort
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_sort_in_nested_op4623);
                    nested_sort451=nested_sort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_sort451.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:589:13: nested_distinct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_distinct_in_nested_op4637);
                    nested_distinct452=nested_distinct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_distinct452.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:590:13: nested_limit
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_limit_in_nested_op4651);
                    nested_limit453=nested_limit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_limit453.getTree());

                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:591:13: nested_cross
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_cross_in_nested_op4665);
                    nested_cross454=nested_cross();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_cross454.getTree());

                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:592:13: nested_foreach
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_foreach_in_nested_op4679);
                    nested_foreach455=nested_foreach();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_foreach455.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:595:1: nested_proj : col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) ;
    public final QueryParser.nested_proj_return nested_proj() throws RecognitionException {
        QueryParser.nested_proj_return retval = new QueryParser.nested_proj_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD457=null;
        QueryParser.col_ref_return col_ref456 =null;

        QueryParser.col_ref_list_return col_ref_list458 =null;


        Object PERIOD457_tree=null;
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_col_ref_list=new RewriteRuleSubtreeStream(adaptor,"rule col_ref_list");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:595:13: ( col_ref PERIOD col_ref_list -> ^( NESTED_PROJ col_ref col_ref_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:595:15: col_ref PERIOD col_ref_list
            {
            pushFollow(FOLLOW_col_ref_in_nested_proj4688);
            col_ref456=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref.add(col_ref456.getTree());

            PERIOD457=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_nested_proj4690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD457);


            pushFollow(FOLLOW_col_ref_list_in_nested_proj4692);
            col_ref_list458=col_ref_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_col_ref_list.add(col_ref_list458.getTree());

            // AST REWRITE
            // elements: col_ref_list, col_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 596:12: -> ^( NESTED_PROJ col_ref col_ref_list )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:596:15: ^( NESTED_PROJ col_ref col_ref_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NESTED_PROJ, "NESTED_PROJ")
                , root_1);

                adaptor.addChild(root_1, stream_col_ref.nextTree());

                adaptor.addChild(root_1, stream_col_ref_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class col_ref_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:1: col_ref_list : ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ ;
    public final QueryParser.col_ref_list_return col_ref_list() throws RecognitionException {
        QueryParser.col_ref_list_return retval = new QueryParser.col_ref_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN460=null;
        Token COMMA462=null;
        Token RIGHT_PAREN464=null;
        QueryParser.col_ref_return col_ref459 =null;

        QueryParser.col_ref_return col_ref461 =null;

        QueryParser.col_ref_return col_ref463 =null;


        Object LEFT_PAREN460_tree=null;
        Object COMMA462_tree=null;
        Object RIGHT_PAREN464_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_col_ref=new RewriteRuleSubtreeStream(adaptor,"rule col_ref");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:14: ( ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) ) -> ( col_ref )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:16: ( col_ref | ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN ) )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==DOLLARVAR||LA124_0==GROUP||LA124_0==IDENTIFIER_L) ) {
                alt124=1;
            }
            else if ( (LA124_0==LEFT_PAREN) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:18: col_ref
                    {
                    pushFollow(FOLLOW_col_ref_in_col_ref_list4726);
                    col_ref459=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref459.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:28: ( LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN )
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:30: LEFT_PAREN col_ref ( COMMA col_ref )* RIGHT_PAREN
                    {
                    LEFT_PAREN460=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_col_ref_list4732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN460);


                    pushFollow(FOLLOW_col_ref_in_col_ref_list4734);
                    col_ref461=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_col_ref.add(col_ref461.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:49: ( COMMA col_ref )*
                    loop123:
                    do {
                        int alt123=2;
                        int LA123_0 = input.LA(1);

                        if ( (LA123_0==COMMA) ) {
                            alt123=1;
                        }


                        switch (alt123) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:599:51: COMMA col_ref
                    	    {
                    	    COMMA462=(Token)match(input,COMMA,FOLLOW_COMMA_in_col_ref_list4738); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA462);


                    	    pushFollow(FOLLOW_col_ref_in_col_ref_list4740);
                    	    col_ref463=col_ref();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_col_ref.add(col_ref463.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop123;
                        }
                    } while (true);


                    RIGHT_PAREN464=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_col_ref_list4745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN464);


                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: col_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:13: -> ( col_ref )+
            {
                if ( !(stream_col_ref.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_col_ref.hasNext() ) {
                    adaptor.addChild(root_0, stream_col_ref.nextTree());

                }
                stream_col_ref.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref_list"


    public static class nested_filter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:603:1: nested_filter : FILTER ^ nested_op_input BY ! cond ;
    public final QueryParser.nested_filter_return nested_filter() throws RecognitionException {
        QueryParser.nested_filter_return retval = new QueryParser.nested_filter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FILTER465=null;
        Token BY467=null;
        QueryParser.nested_op_input_return nested_op_input466 =null;

        QueryParser.cond_return cond468 =null;


        Object FILTER465_tree=null;
        Object BY467_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:603:15: ( FILTER ^ nested_op_input BY ! cond )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:603:17: FILTER ^ nested_op_input BY ! cond
            {
            root_0 = (Object)adaptor.nil();


            FILTER465=(Token)match(input,FILTER,FOLLOW_FILTER_in_nested_filter4775); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER465_tree = 
            (Object)adaptor.create(FILTER465)
            ;
            root_0 = (Object)adaptor.becomeRoot(FILTER465_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_filter4778);
            nested_op_input466=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input466.getTree());

            BY467=(Token)match(input,BY,FOLLOW_BY_in_nested_filter4780); if (state.failed) return retval;

            pushFollow(FOLLOW_cond_in_nested_filter4783);
            cond468=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cond468.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:606:1: nested_sort : ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? ;
    public final QueryParser.nested_sort_return nested_sort() throws RecognitionException {
        QueryParser.nested_sort_return retval = new QueryParser.nested_sort_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ORDER469=null;
        Token BY471=null;
        Token USING473=null;
        QueryParser.nested_op_input_return nested_op_input470 =null;

        QueryParser.order_by_clause_return order_by_clause472 =null;

        QueryParser.func_clause_return func_clause474 =null;


        Object ORDER469_tree=null;
        Object BY471_tree=null;
        Object USING473_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:606:13: ( ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:606:15: ORDER ^ nested_op_input BY ! order_by_clause ( USING ! func_clause )?
            {
            root_0 = (Object)adaptor.nil();


            ORDER469=(Token)match(input,ORDER,FOLLOW_ORDER_in_nested_sort4792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER469_tree = 
            (Object)adaptor.create(ORDER469)
            ;
            root_0 = (Object)adaptor.becomeRoot(ORDER469_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_sort4795);
            nested_op_input470=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input470.getTree());

            BY471=(Token)match(input,BY,FOLLOW_BY_in_nested_sort4797); if (state.failed) return retval;

            pushFollow(FOLLOW_order_by_clause_in_nested_sort4801);
            order_by_clause472=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause472.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:606:59: ( USING ! func_clause )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==USING) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:606:61: USING ! func_clause
                    {
                    USING473=(Token)match(input,USING,FOLLOW_USING_in_nested_sort4805); if (state.failed) return retval;

                    pushFollow(FOLLOW_func_clause_in_nested_sort4808);
                    func_clause474=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_clause474.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:609:1: nested_distinct : DISTINCT ^ nested_op_input ;
    public final QueryParser.nested_distinct_return nested_distinct() throws RecognitionException {
        QueryParser.nested_distinct_return retval = new QueryParser.nested_distinct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DISTINCT475=null;
        QueryParser.nested_op_input_return nested_op_input476 =null;


        Object DISTINCT475_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:609:17: ( DISTINCT ^ nested_op_input )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:609:19: DISTINCT ^ nested_op_input
            {
            root_0 = (Object)adaptor.nil();


            DISTINCT475=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct4820); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT475_tree = 
            (Object)adaptor.create(DISTINCT475)
            ;
            root_0 = (Object)adaptor.becomeRoot(DISTINCT475_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_distinct4823);
            nested_op_input476=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input476.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:612:1: nested_limit : LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) ;
    public final QueryParser.nested_limit_return nested_limit() throws RecognitionException {
        QueryParser.nested_limit_return retval = new QueryParser.nested_limit_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LIMIT477=null;
        Token INTEGER479=null;
        QueryParser.nested_op_input_return nested_op_input478 =null;

        QueryParser.expr_return expr480 =null;


        Object LIMIT477_tree=null;
        Object INTEGER479_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:612:14: ( LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:612:16: LIMIT ^ nested_op_input ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            {
            root_0 = (Object)adaptor.nil();


            LIMIT477=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit4832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT477_tree = 
            (Object)adaptor.create(LIMIT477)
            ;
            root_0 = (Object)adaptor.becomeRoot(LIMIT477_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_limit4835);
            nested_op_input478=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input478.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:612:39: ( ( INTEGER SEMI_COLON )=> INTEGER | expr )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==INTEGER) ) {
                int LA126_1 = input.LA(2);

                if ( (synpred199_QueryParser()) ) {
                    alt126=1;
                }
                else if ( (true) ) {
                    alt126=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 126, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA126_0 >= ALL && LA126_0 <= BAG)||(LA126_0 >= BY && LA126_0 <= COGROUP)||LA126_0==CROSS||(LA126_0 >= DEFINE && LA126_0 <= DESC)||LA126_0==DISTINCT||(LA126_0 >= DOLLARVAR && LA126_0 <= DOUBLENUMBER)||(LA126_0 >= FALSE && LA126_0 <= FLOAT)||(LA126_0 >= FLOATNUMBER && LA126_0 <= GROUP)||(LA126_0 >= IDENTIFIER_L && LA126_0 <= INT)||(LA126_0 >= INTO && LA126_0 <= LEFT_PAREN)||(LA126_0 >= LIMIT && LA126_0 <= MINUS)||LA126_0==NOT||(LA126_0 >= OR && LA126_0 <= ORDER)||(LA126_0 >= OUTER && LA126_0 <= PARTITION)||(LA126_0 >= QUOTEDSTRING && LA126_0 <= RIGHT)||LA126_0==SAMPLE||LA126_0==SHIP||LA126_0==SPLIT||(LA126_0 >= STDERROR && LA126_0 <= USING)||LA126_0==BOOL) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }
            switch (alt126) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:612:41: ( INTEGER SEMI_COLON )=> INTEGER
                    {
                    INTEGER479=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit4847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER479_tree = 
                    (Object)adaptor.create(INTEGER479)
                    ;
                    adaptor.addChild(root_0, INTEGER479_tree);
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:612:75: expr
                    {
                    pushFollow(FOLLOW_expr_in_nested_limit4851);
                    expr480=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr480.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:615:1: nested_cross : CROSS ^ nested_op_input_list ;
    public final QueryParser.nested_cross_return nested_cross() throws RecognitionException {
        QueryParser.nested_cross_return retval = new QueryParser.nested_cross_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CROSS481=null;
        QueryParser.nested_op_input_list_return nested_op_input_list482 =null;


        Object CROSS481_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:615:14: ( CROSS ^ nested_op_input_list )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:615:16: CROSS ^ nested_op_input_list
            {
            root_0 = (Object)adaptor.nil();


            CROSS481=(Token)match(input,CROSS,FOLLOW_CROSS_in_nested_cross4862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS481_tree = 
            (Object)adaptor.create(CROSS481)
            ;
            root_0 = (Object)adaptor.becomeRoot(CROSS481_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross4865);
            nested_op_input_list482=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input_list482.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    public static class nested_foreach_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:618:1: nested_foreach : FOREACH ^ nested_op_input generate_clause ;
    public final QueryParser.nested_foreach_return nested_foreach() throws RecognitionException {
        QueryParser.nested_foreach_return retval = new QueryParser.nested_foreach_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token FOREACH483=null;
        QueryParser.nested_op_input_return nested_op_input484 =null;

        QueryParser.generate_clause_return generate_clause485 =null;


        Object FOREACH483_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:618:15: ( FOREACH ^ nested_op_input generate_clause )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:618:17: FOREACH ^ nested_op_input generate_clause
            {
            root_0 = (Object)adaptor.nil();


            FOREACH483=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach4873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH483_tree = 
            (Object)adaptor.create(FOREACH483)
            ;
            root_0 = (Object)adaptor.becomeRoot(FOREACH483_tree, root_0);
            }

            pushFollow(FOLLOW_nested_op_input_in_nested_foreach4876);
            nested_op_input484=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_op_input484.getTree());

            pushFollow(FOLLOW_generate_clause_in_nested_foreach4878);
            generate_clause485=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, generate_clause485.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class nested_op_input_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:621:1: nested_op_input : ( col_ref | nested_proj );
    public final QueryParser.nested_op_input_return nested_op_input() throws RecognitionException {
        QueryParser.nested_op_input_return retval = new QueryParser.nested_op_input_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.col_ref_return col_ref486 =null;

        QueryParser.nested_proj_return nested_proj487 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:621:17: ( col_ref | nested_proj )
            int alt127=2;
            switch ( input.LA(1) ) {
            case GROUP:
                {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==EOF||(LA127_1 >= ALL && LA127_1 <= BAG)||(LA127_1 >= BY && LA127_1 <= COGROUP)||(LA127_1 >= COMMA && LA127_1 <= CROSS)||(LA127_1 >= DEFINE && LA127_1 <= DESC)||LA127_1==DISTINCT||(LA127_1 >= DOLLARVAR && LA127_1 <= DOUBLENUMBER)||(LA127_1 >= FALSE && LA127_1 <= FLOAT)||(LA127_1 >= FLOATNUMBER && LA127_1 <= GROUP)||(LA127_1 >= IDENTIFIER_L && LA127_1 <= LEFT_PAREN)||(LA127_1 >= LIMIT && LA127_1 <= MINUS)||LA127_1==NOT||(LA127_1 >= OR && LA127_1 <= ORDER)||(LA127_1 >= OUTER && LA127_1 <= PARTITION)||(LA127_1 >= QUOTEDSTRING && LA127_1 <= RIGHT)||(LA127_1 >= SAMPLE && LA127_1 <= SHIP)||LA127_1==SPLIT||(LA127_1 >= STDERROR && LA127_1 <= USING)||LA127_1==BOOL) ) {
                    alt127=1;
                }
                else if ( (LA127_1==PERIOD) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENTIFIER_L:
                {
                int LA127_2 = input.LA(2);

                if ( (LA127_2==EOF||(LA127_2 >= ALL && LA127_2 <= BAG)||(LA127_2 >= BY && LA127_2 <= COGROUP)||(LA127_2 >= COMMA && LA127_2 <= CROSS)||(LA127_2 >= DEFINE && LA127_2 <= DESC)||LA127_2==DISTINCT||(LA127_2 >= DOLLARVAR && LA127_2 <= DOUBLENUMBER)||(LA127_2 >= FALSE && LA127_2 <= FLOAT)||(LA127_2 >= FLOATNUMBER && LA127_2 <= GROUP)||(LA127_2 >= IDENTIFIER_L && LA127_2 <= LEFT_PAREN)||(LA127_2 >= LIMIT && LA127_2 <= MINUS)||LA127_2==NOT||(LA127_2 >= OR && LA127_2 <= ORDER)||(LA127_2 >= OUTER && LA127_2 <= PARTITION)||(LA127_2 >= QUOTEDSTRING && LA127_2 <= RIGHT)||(LA127_2 >= SAMPLE && LA127_2 <= SHIP)||LA127_2==SPLIT||(LA127_2 >= STDERROR && LA127_2 <= USING)||LA127_2==BOOL) ) {
                    alt127=1;
                }
                else if ( (LA127_2==PERIOD) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 2, input);

                    throw nvae;

                }
                }
                break;
            case DOLLARVAR:
                {
                int LA127_3 = input.LA(2);

                if ( (LA127_3==EOF||(LA127_3 >= ALL && LA127_3 <= BAG)||(LA127_3 >= BY && LA127_3 <= COGROUP)||(LA127_3 >= COMMA && LA127_3 <= CROSS)||(LA127_3 >= DEFINE && LA127_3 <= DESC)||LA127_3==DISTINCT||(LA127_3 >= DOLLARVAR && LA127_3 <= DOUBLENUMBER)||(LA127_3 >= FALSE && LA127_3 <= FLOAT)||(LA127_3 >= FLOATNUMBER && LA127_3 <= GROUP)||(LA127_3 >= IDENTIFIER_L && LA127_3 <= LEFT_PAREN)||(LA127_3 >= LIMIT && LA127_3 <= MINUS)||LA127_3==NOT||(LA127_3 >= OR && LA127_3 <= ORDER)||(LA127_3 >= OUTER && LA127_3 <= PARTITION)||(LA127_3 >= QUOTEDSTRING && LA127_3 <= RIGHT)||(LA127_3 >= SAMPLE && LA127_3 <= SHIP)||LA127_3==SPLIT||(LA127_3 >= STDERROR && LA127_3 <= USING)||LA127_3==BOOL) ) {
                    alt127=1;
                }
                else if ( (LA127_3==PERIOD) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }

            switch (alt127) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:621:19: col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_col_ref_in_nested_op_input4887);
                    col_ref486=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, col_ref486.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:621:29: nested_proj
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nested_proj_in_nested_op_input4891);
                    nested_proj487=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_proj487.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class nested_op_input_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:624:1: nested_op_input_list : nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ ;
    public final QueryParser.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        QueryParser.nested_op_input_list_return retval = new QueryParser.nested_op_input_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA489=null;
        QueryParser.nested_op_input_return nested_op_input488 =null;

        QueryParser.nested_op_input_return nested_op_input490 =null;


        Object COMMA489_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_nested_op_input=new RewriteRuleSubtreeStream(adaptor,"rule nested_op_input");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:624:22: ( nested_op_input ( COMMA nested_op_input )* -> ( nested_op_input )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:624:24: nested_op_input ( COMMA nested_op_input )*
            {
            pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list4900);
            nested_op_input488=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input488.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:624:40: ( COMMA nested_op_input )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==COMMA) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:624:42: COMMA nested_op_input
            	    {
            	    COMMA489=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_op_input_list4904); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA489);


            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list4906);
            	    nested_op_input490=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nested_op_input.add(nested_op_input490.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            // AST REWRITE
            // elements: nested_op_input
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 625:9: -> ( nested_op_input )+
            {
                if ( !(stream_nested_op_input.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nested_op_input.hasNext() ) {
                    adaptor.addChild(root_0, stream_nested_op_input.nextTree());

                }
                stream_nested_op_input.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class stream_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:628:1: stream_clause : STREAM ^ rel THROUGH ! ( EXECCOMMAND | alias ) ( as_clause )? ;
    public final QueryParser.stream_clause_return stream_clause() throws RecognitionException {
        QueryParser.stream_clause_return retval = new QueryParser.stream_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STREAM491=null;
        Token THROUGH493=null;
        Token EXECCOMMAND494=null;
        QueryParser.rel_return rel492 =null;

        QueryParser.alias_return alias495 =null;

        QueryParser.as_clause_return as_clause496 =null;


        Object STREAM491_tree=null;
        Object THROUGH493_tree=null;
        Object EXECCOMMAND494_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:628:15: ( STREAM ^ rel THROUGH ! ( EXECCOMMAND | alias ) ( as_clause )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:628:17: STREAM ^ rel THROUGH ! ( EXECCOMMAND | alias ) ( as_clause )?
            {
            root_0 = (Object)adaptor.nil();


            STREAM491=(Token)match(input,STREAM,FOLLOW_STREAM_in_stream_clause4931); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM491_tree = 
            (Object)adaptor.create(STREAM491)
            ;
            root_0 = (Object)adaptor.becomeRoot(STREAM491_tree, root_0);
            }

            pushFollow(FOLLOW_rel_in_stream_clause4934);
            rel492=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rel492.getTree());

            THROUGH493=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_stream_clause4936); if (state.failed) return retval;

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:628:38: ( EXECCOMMAND | alias )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==EXECCOMMAND) ) {
                alt129=1;
            }
            else if ( (LA129_0==IDENTIFIER_L) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;

            }
            switch (alt129) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:628:40: EXECCOMMAND
                    {
                    EXECCOMMAND494=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_stream_clause4941); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND494_tree = 
                    (Object)adaptor.create(EXECCOMMAND494)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND494_tree);
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:628:54: alias
                    {
                    pushFollow(FOLLOW_alias_in_stream_clause4945);
                    alias495=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias495.getTree());

                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:628:62: ( as_clause )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==AS) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:628:62: as_clause
                    {
                    pushFollow(FOLLOW_as_clause_in_stream_clause4949);
                    as_clause496=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, as_clause496.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:631:1: mr_clause : MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? ;
    public final QueryParser.mr_clause_return mr_clause() throws RecognitionException {
        QueryParser.mr_clause_return retval = new QueryParser.mr_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MAPREDUCE497=null;
        Token QUOTEDSTRING498=null;
        Token LEFT_PAREN499=null;
        Token RIGHT_PAREN501=null;
        Token EXECCOMMAND504=null;
        QueryParser.path_list_return path_list500 =null;

        QueryParser.store_clause_return store_clause502 =null;

        QueryParser.load_clause_return load_clause503 =null;


        Object MAPREDUCE497_tree=null;
        Object QUOTEDSTRING498_tree=null;
        Object LEFT_PAREN499_tree=null;
        Object RIGHT_PAREN501_tree=null;
        Object EXECCOMMAND504_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:631:11: ( MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:631:13: MAPREDUCE ^ QUOTEDSTRING ( LEFT_PAREN ! path_list RIGHT_PAREN !)? store_clause load_clause ( EXECCOMMAND )?
            {
            root_0 = (Object)adaptor.nil();


            MAPREDUCE497=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause4959); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE497_tree = 
            (Object)adaptor.create(MAPREDUCE497)
            ;
            root_0 = (Object)adaptor.becomeRoot(MAPREDUCE497_tree, root_0);
            }

            QUOTEDSTRING498=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause4962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING498_tree = 
            (Object)adaptor.create(QUOTEDSTRING498)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING498_tree);
            }

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:631:37: ( LEFT_PAREN ! path_list RIGHT_PAREN !)?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==LEFT_PAREN) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:631:39: LEFT_PAREN ! path_list RIGHT_PAREN !
                    {
                    LEFT_PAREN499=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_mr_clause4966); if (state.failed) return retval;

                    pushFollow(FOLLOW_path_list_in_mr_clause4969);
                    path_list500=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, path_list500.getTree());

                    RIGHT_PAREN501=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_mr_clause4971); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_store_clause_in_mr_clause4977);
            store_clause502=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, store_clause502.getTree());

            pushFollow(FOLLOW_load_clause_in_mr_clause4979);
            load_clause503=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, load_clause503.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:631:102: ( EXECCOMMAND )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==EXECCOMMAND) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:631:102: EXECCOMMAND
                    {
                    EXECCOMMAND504=(Token)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause4981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND504_tree = 
                    (Object)adaptor.create(EXECCOMMAND504)
                    ;
                    adaptor.addChild(root_0, EXECCOMMAND504_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:1: split_clause : SPLIT rel INTO split_branch ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) ) -> ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) ;
    public final QueryParser.split_clause_return split_clause() throws RecognitionException {
        QueryParser.split_clause_return retval = new QueryParser.split_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SPLIT505=null;
        Token INTO507=null;
        Token COMMA509=null;
        Token COMMA511=null;
        Token COMMA513=null;
        QueryParser.rel_return rel506 =null;

        QueryParser.split_branch_return split_branch508 =null;

        QueryParser.split_branch_return split_branch510 =null;

        QueryParser.split_branch_return split_branch512 =null;

        QueryParser.split_otherwise_return split_otherwise514 =null;


        Object SPLIT505_tree=null;
        Object INTO507_tree=null;
        Object COMMA509_tree=null;
        Object COMMA511_tree=null;
        Object COMMA513_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_SPLIT=new RewriteRuleTokenStream(adaptor,"token SPLIT");
        RewriteRuleSubtreeStream stream_rel=new RewriteRuleSubtreeStream(adaptor,"rule rel");
        RewriteRuleSubtreeStream stream_split_otherwise=new RewriteRuleSubtreeStream(adaptor,"rule split_otherwise");
        RewriteRuleSubtreeStream stream_split_branch=new RewriteRuleSubtreeStream(adaptor,"rule split_branch");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:14: ( SPLIT rel INTO split_branch ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) ) -> ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:16: SPLIT rel INTO split_branch ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) )
            {
            SPLIT505=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause4991); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SPLIT.add(SPLIT505);


            pushFollow(FOLLOW_rel_in_split_clause4993);
            rel506=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rel.add(rel506.getTree());

            INTO507=(Token)match(input,INTO,FOLLOW_INTO_in_split_clause4995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO507);


            pushFollow(FOLLOW_split_branch_in_split_clause4997);
            split_branch508=split_branch();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_split_branch.add(split_branch508.getTree());

            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:44: ( ( COMMA split_branch )+ | ( ( COMMA split_branch )* COMMA split_otherwise ) )
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==COMMA) ) {
                int LA135_1 = input.LA(2);

                if ( (synpred207_QueryParser()) ) {
                    alt135=1;
                }
                else if ( (true) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }
            switch (alt135) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:46: ( COMMA split_branch )+
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:46: ( COMMA split_branch )+
                    int cnt133=0;
                    loop133:
                    do {
                        int alt133=2;
                        int LA133_0 = input.LA(1);

                        if ( (LA133_0==COMMA) ) {
                            alt133=1;
                        }


                        switch (alt133) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:48: COMMA split_branch
                    	    {
                    	    COMMA509=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_clause5003); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA509);


                    	    pushFollow(FOLLOW_split_branch_in_split_clause5005);
                    	    split_branch510=split_branch();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_split_branch.add(split_branch510.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt133 >= 1 ) break loop133;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(133, input);
                                throw eee;
                        }
                        cnt133++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:72: ( ( COMMA split_branch )* COMMA split_otherwise )
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:72: ( ( COMMA split_branch )* COMMA split_otherwise )
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:74: ( COMMA split_branch )* COMMA split_otherwise
                    {
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:74: ( COMMA split_branch )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==COMMA) ) {
                            int LA134_1 = input.LA(2);

                            if ( (LA134_1==IDENTIFIER_L) ) {
                                int LA134_2 = input.LA(3);

                                if ( (LA134_2==IF) ) {
                                    alt134=1;
                                }


                            }


                        }


                        switch (alt134) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:76: COMMA split_branch
                    	    {
                    	    COMMA511=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_clause5016); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA511);


                    	    pushFollow(FOLLOW_split_branch_in_split_clause5018);
                    	    split_branch512=split_branch();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_split_branch.add(split_branch512.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);


                    COMMA513=(Token)match(input,COMMA,FOLLOW_COMMA_in_split_clause5023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA513);


                    pushFollow(FOLLOW_split_otherwise_in_split_clause5025);
                    split_otherwise514=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_split_otherwise.add(split_otherwise514.getTree());

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: SPLIT, rel, split_otherwise, split_branch
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 635:13: -> ^( SPLIT rel ( split_branch )+ ( split_otherwise )? )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:635:16: ^( SPLIT rel ( split_branch )+ ( split_otherwise )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_SPLIT.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_rel.nextTree());

                if ( !(stream_split_branch.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_split_branch.hasNext() ) {
                    adaptor.addChild(root_1, stream_split_branch.nextTree());

                }
                stream_split_branch.reset();

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:635:43: ( split_otherwise )?
                if ( stream_split_otherwise.hasNext() ) {
                    adaptor.addChild(root_1, stream_split_otherwise.nextTree());

                }
                stream_split_otherwise.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:638:1: split_branch : alias IF cond -> ^( SPLIT_BRANCH alias cond ) ;
    public final QueryParser.split_branch_return split_branch() throws RecognitionException {
        QueryParser.split_branch_return retval = new QueryParser.split_branch_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IF516=null;
        QueryParser.alias_return alias515 =null;

        QueryParser.cond_return cond517 =null;


        Object IF516_tree=null;
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:638:14: ( alias IF cond -> ^( SPLIT_BRANCH alias cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:638:16: alias IF cond
            {
            pushFollow(FOLLOW_alias_in_split_branch5065);
            alias515=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias515.getTree());

            IF516=(Token)match(input,IF,FOLLOW_IF_in_split_branch5067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF516);


            pushFollow(FOLLOW_cond_in_split_branch5069);
            cond517=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cond.add(cond517.getTree());

            // AST REWRITE
            // elements: cond, alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 639:13: -> ^( SPLIT_BRANCH alias cond )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:639:16: ^( SPLIT_BRANCH alias cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SPLIT_BRANCH, "SPLIT_BRANCH")
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_1, stream_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:642:1: split_otherwise : alias OTHERWISE -> ^( OTHERWISE alias ) ;
    public final QueryParser.split_otherwise_return split_otherwise() throws RecognitionException {
        QueryParser.split_otherwise_return retval = new QueryParser.split_otherwise_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token OTHERWISE519=null;
        QueryParser.alias_return alias518 =null;


        Object OTHERWISE519_tree=null;
        RewriteRuleTokenStream stream_OTHERWISE=new RewriteRuleTokenStream(adaptor,"token OTHERWISE");
        RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"rule alias");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:642:17: ( alias OTHERWISE -> ^( OTHERWISE alias ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:642:19: alias OTHERWISE
            {
            pushFollow(FOLLOW_alias_in_split_otherwise5102);
            alias518=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alias.add(alias518.getTree());

            OTHERWISE519=(Token)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise5104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OTHERWISE.add(OTHERWISE519);


            // AST REWRITE
            // elements: alias, OTHERWISE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 643:13: -> ^( OTHERWISE alias )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:643:16: ^( OTHERWISE alias )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                stream_OTHERWISE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_alias.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:646:1: col_ref : ( alias_col_ref | dollar_col_ref );
    public final QueryParser.col_ref_return col_ref() throws RecognitionException {
        QueryParser.col_ref_return retval = new QueryParser.col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.alias_col_ref_return alias_col_ref520 =null;

        QueryParser.dollar_col_ref_return dollar_col_ref521 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:646:9: ( alias_col_ref | dollar_col_ref )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==GROUP||LA136_0==IDENTIFIER_L) ) {
                alt136=1;
            }
            else if ( (LA136_0==DOLLARVAR) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }
            switch (alt136) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:646:11: alias_col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alias_col_ref_in_col_ref5135);
                    alias_col_ref520=alias_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias_col_ref520.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:646:27: dollar_col_ref
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_dollar_col_ref_in_col_ref5139);
                    dollar_col_ref521=dollar_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dollar_col_ref521.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class alias_col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:649:1: alias_col_ref : ( GROUP | identifier );
    public final QueryParser.alias_col_ref_return alias_col_ref() throws RecognitionException {
        QueryParser.alias_col_ref_return retval = new QueryParser.alias_col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token GROUP522=null;
        QueryParser.identifier_return identifier523 =null;


        Object GROUP522_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:649:15: ( GROUP | identifier )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==GROUP) ) {
                alt137=1;
            }
            else if ( (LA137_0==IDENTIFIER_L) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:649:17: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP522=(Token)match(input,GROUP,FOLLOW_GROUP_in_alias_col_ref5148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP522_tree = 
                    (Object)adaptor.create(GROUP522)
                    ;
                    adaptor.addChild(root_0, GROUP522_tree);
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:649:25: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_alias_col_ref5152);
                    identifier523=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier523.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias_col_ref"


    public static class dollar_col_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dollar_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:652:1: dollar_col_ref : DOLLARVAR ;
    public final QueryParser.dollar_col_ref_return dollar_col_ref() throws RecognitionException {
        QueryParser.dollar_col_ref_return retval = new QueryParser.dollar_col_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOLLARVAR524=null;

        Object DOLLARVAR524_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:652:16: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:652:18: DOLLARVAR
            {
            root_0 = (Object)adaptor.nil();


            DOLLARVAR524=(Token)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_dollar_col_ref5161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR524_tree = 
            (Object)adaptor.create(DOLLARVAR524)
            ;
            adaptor.addChild(root_0, DOLLARVAR524_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dollar_col_ref"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:655:1: const_expr : literal ;
    public final QueryParser.const_expr_return const_expr() throws RecognitionException {
        QueryParser.const_expr_return retval = new QueryParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.literal_return literal525 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:655:12: ( literal )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:655:14: literal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_literal_in_const_expr5170);
            literal525=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literal525.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:658:1: literal : ( scalar | map | bag | tuple );
    public final QueryParser.literal_return literal() throws RecognitionException {
        QueryParser.literal_return retval = new QueryParser.literal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        QueryParser.scalar_return scalar526 =null;

        QueryParser.map_return map527 =null;

        QueryParser.bag_return bag528 =null;

        QueryParser.tuple_return tuple529 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:658:9: ( scalar | map | bag | tuple )
            int alt138=4;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case IDENTIFIER_L:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case QUOTEDSTRING:
            case TRUE:
                {
                alt138=1;
                }
                break;
            case LEFT_BRACKET:
                {
                alt138=2;
                }
                break;
            case LEFT_CURLY:
                {
                alt138=3;
                }
                break;
            case LEFT_PAREN:
                {
                alt138=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }

            switch (alt138) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:658:11: scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_scalar_in_literal5179);
                    scalar526=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scalar526.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:658:20: map
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_in_literal5183);
                    map527=map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map527.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:658:26: bag
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bag_in_literal5187);
                    bag528=bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bag528.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:658:32: tuple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_tuple_in_literal5191);
                    tuple529=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tuple529.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class scalar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:662:1: scalar : ( num_scalar | QUOTEDSTRING | null_keyword | TRUE | FALSE );
    public final QueryParser.scalar_return scalar() throws RecognitionException {
        QueryParser.scalar_return retval = new QueryParser.scalar_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING531=null;
        Token TRUE533=null;
        Token FALSE534=null;
        QueryParser.num_scalar_return num_scalar530 =null;

        QueryParser.null_keyword_return null_keyword532 =null;


        Object QUOTEDSTRING531_tree=null;
        Object TRUE533_tree=null;
        Object FALSE534_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:662:8: ( num_scalar | QUOTEDSTRING | null_keyword | TRUE | FALSE )
            int alt139=5;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
                {
                alt139=1;
                }
                break;
            case QUOTEDSTRING:
                {
                alt139=2;
                }
                break;
            case IDENTIFIER_L:
                {
                alt139=3;
                }
                break;
            case TRUE:
                {
                alt139=4;
                }
                break;
            case FALSE:
                {
                alt139=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }

            switch (alt139) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:662:10: num_scalar
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_num_scalar_in_scalar5201);
                    num_scalar530=num_scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, num_scalar530.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:662:23: QUOTEDSTRING
                    {
                    root_0 = (Object)adaptor.nil();


                    QUOTEDSTRING531=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_scalar5205); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING531_tree = 
                    (Object)adaptor.create(QUOTEDSTRING531)
                    ;
                    adaptor.addChild(root_0, QUOTEDSTRING531_tree);
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:662:38: null_keyword
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_keyword_in_scalar5209);
                    null_keyword532=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_keyword532.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:662:53: TRUE
                    {
                    root_0 = (Object)adaptor.nil();


                    TRUE533=(Token)match(input,TRUE,FOLLOW_TRUE_in_scalar5213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE533_tree = 
                    (Object)adaptor.create(TRUE533)
                    ;
                    adaptor.addChild(root_0, TRUE533_tree);
                    }

                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:662:60: FALSE
                    {
                    root_0 = (Object)adaptor.nil();


                    FALSE534=(Token)match(input,FALSE,FOLLOW_FALSE_in_scalar5217); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE534_tree = 
                    (Object)adaptor.create(FALSE534)
                    ;
                    adaptor.addChild(root_0, FALSE534_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class num_scalar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "num_scalar"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:665:1: num_scalar : ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) ;
    public final QueryParser.num_scalar_return num_scalar() throws RecognitionException {
        QueryParser.num_scalar_return retval = new QueryParser.num_scalar_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS535=null;
        Token set536=null;

        Object MINUS535_tree=null;
        Object set536_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:665:12: ( ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:665:14: ( MINUS )? ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER )
            {
            root_0 = (Object)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:665:14: ( MINUS )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==MINUS) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:665:14: MINUS
                    {
                    MINUS535=(Token)match(input,MINUS,FOLLOW_MINUS_in_num_scalar5226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS535_tree = 
                    (Object)adaptor.create(MINUS535)
                    ;
                    adaptor.addChild(root_0, MINUS535_tree);
                    }

                    }
                    break;

            }


            set536=(Token)input.LT(1);

            if ( input.LA(1)==DOUBLENUMBER||input.LA(1)==FLOATNUMBER||input.LA(1)==INTEGER||input.LA(1)==LONGINTEGER ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set536)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "num_scalar"


    public static class map_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:668:1: map : ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) );
    public final QueryParser.map_return map() throws RecognitionException {
        QueryParser.map_return retval = new QueryParser.map_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET537=null;
        Token COMMA539=null;
        Token RIGHT_BRACKET541=null;
        Token LEFT_BRACKET542=null;
        Token RIGHT_BRACKET543=null;
        QueryParser.keyvalue_return keyvalue538 =null;

        QueryParser.keyvalue_return keyvalue540 =null;


        Object LEFT_BRACKET537_tree=null;
        Object COMMA539_tree=null;
        Object RIGHT_BRACKET541_tree=null;
        Object LEFT_BRACKET542_tree=null;
        Object RIGHT_BRACKET543_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_keyvalue=new RewriteRuleSubtreeStream(adaptor,"rule keyvalue");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:668:5: ( LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET -> ^( MAP_VAL ( keyvalue )+ ) | LEFT_BRACKET RIGHT_BRACKET -> ^( MAP_VAL ) )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==LEFT_BRACKET) ) {
                int LA142_1 = input.LA(2);

                if ( (LA142_1==RIGHT_BRACKET) ) {
                    alt142=2;
                }
                else if ( (LA142_1==QUOTEDSTRING) ) {
                    alt142=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:668:7: LEFT_BRACKET keyvalue ( COMMA keyvalue )* RIGHT_BRACKET
                    {
                    LEFT_BRACKET537=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_map5254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET537);


                    pushFollow(FOLLOW_keyvalue_in_map5256);
                    keyvalue538=keyvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue538.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:668:29: ( COMMA keyvalue )*
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==COMMA) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:668:31: COMMA keyvalue
                    	    {
                    	    COMMA539=(Token)match(input,COMMA,FOLLOW_COMMA_in_map5260); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA539);


                    	    pushFollow(FOLLOW_keyvalue_in_map5262);
                    	    keyvalue540=keyvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyvalue.add(keyvalue540.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);


                    RIGHT_BRACKET541=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_map5267); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET541);


                    // AST REWRITE
                    // elements: keyvalue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 669:4: -> ^( MAP_VAL ( keyvalue )+ )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:669:7: ^( MAP_VAL ( keyvalue )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        if ( !(stream_keyvalue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyvalue.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyvalue.nextTree());

                        }
                        stream_keyvalue.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:670:7: LEFT_BRACKET RIGHT_BRACKET
                    {
                    LEFT_BRACKET542=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_map5289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET542);


                    RIGHT_BRACKET543=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_map5291); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET543);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 671:4: -> ^( MAP_VAL )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:671:7: ^( MAP_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MAP_VAL, "MAP_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map"


    public static class keyvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:674:1: keyvalue : map_key POUND const_expr -> ^( KEY_VAL_PAIR map_key const_expr ) ;
    public final QueryParser.keyvalue_return keyvalue() throws RecognitionException {
        QueryParser.keyvalue_return retval = new QueryParser.keyvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token POUND545=null;
        QueryParser.map_key_return map_key544 =null;

        QueryParser.const_expr_return const_expr546 =null;


        Object POUND545_tree=null;
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
        RewriteRuleSubtreeStream stream_const_expr=new RewriteRuleSubtreeStream(adaptor,"rule const_expr");
        RewriteRuleSubtreeStream stream_map_key=new RewriteRuleSubtreeStream(adaptor,"rule map_key");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:674:10: ( map_key POUND const_expr -> ^( KEY_VAL_PAIR map_key const_expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:674:12: map_key POUND const_expr
            {
            pushFollow(FOLLOW_map_key_in_keyvalue5311);
            map_key544=map_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_map_key.add(map_key544.getTree());

            POUND545=(Token)match(input,POUND,FOLLOW_POUND_in_keyvalue5313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_POUND.add(POUND545);


            pushFollow(FOLLOW_const_expr_in_keyvalue5315);
            const_expr546=const_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_const_expr.add(const_expr546.getTree());

            // AST REWRITE
            // elements: map_key, const_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 675:9: -> ^( KEY_VAL_PAIR map_key const_expr )
            {
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:675:12: ^( KEY_VAL_PAIR map_key const_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(KEY_VAL_PAIR, "KEY_VAL_PAIR")
                , root_1);

                adaptor.addChild(root_1, stream_map_key.nextTree());

                adaptor.addChild(root_1, stream_const_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class map_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_key"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:678:1: map_key : QUOTEDSTRING ;
    public final QueryParser.map_key_return map_key() throws RecognitionException {
        QueryParser.map_key_return retval = new QueryParser.map_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token QUOTEDSTRING547=null;

        Object QUOTEDSTRING547_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:678:9: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:678:11: QUOTEDSTRING
            {
            root_0 = (Object)adaptor.nil();


            QUOTEDSTRING547=(Token)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_map_key5344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING547_tree = 
            (Object)adaptor.create(QUOTEDSTRING547)
            ;
            adaptor.addChild(root_0, QUOTEDSTRING547_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_key"


    public static class bag_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:681:1: bag : ( LEFT_CURLY tuple ( COMMA tuple )* RIGHT_CURLY -> ^( BAG_VAL ( tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) );
    public final QueryParser.bag_return bag() throws RecognitionException {
        QueryParser.bag_return retval = new QueryParser.bag_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_CURLY548=null;
        Token COMMA550=null;
        Token RIGHT_CURLY552=null;
        Token LEFT_CURLY553=null;
        Token RIGHT_CURLY554=null;
        QueryParser.tuple_return tuple549 =null;

        QueryParser.tuple_return tuple551 =null;


        Object LEFT_CURLY548_tree=null;
        Object COMMA550_tree=null;
        Object RIGHT_CURLY552_tree=null;
        Object LEFT_CURLY553_tree=null;
        Object RIGHT_CURLY554_tree=null;
        RewriteRuleTokenStream stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY");
        RewriteRuleSubtreeStream stream_tuple=new RewriteRuleSubtreeStream(adaptor,"rule tuple");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:681:5: ( LEFT_CURLY tuple ( COMMA tuple )* RIGHT_CURLY -> ^( BAG_VAL ( tuple )+ ) | LEFT_CURLY RIGHT_CURLY -> ^( BAG_VAL ) )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==LEFT_CURLY) ) {
                int LA144_1 = input.LA(2);

                if ( (LA144_1==RIGHT_CURLY) ) {
                    alt144=2;
                }
                else if ( (LA144_1==LEFT_PAREN) ) {
                    alt144=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:681:7: LEFT_CURLY tuple ( COMMA tuple )* RIGHT_CURLY
                    {
                    LEFT_CURLY548=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag5353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY548);


                    pushFollow(FOLLOW_tuple_in_bag5355);
                    tuple549=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tuple.add(tuple549.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:681:24: ( COMMA tuple )*
                    loop143:
                    do {
                        int alt143=2;
                        int LA143_0 = input.LA(1);

                        if ( (LA143_0==COMMA) ) {
                            alt143=1;
                        }


                        switch (alt143) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:681:26: COMMA tuple
                    	    {
                    	    COMMA550=(Token)match(input,COMMA,FOLLOW_COMMA_in_bag5359); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA550);


                    	    pushFollow(FOLLOW_tuple_in_bag5361);
                    	    tuple551=tuple();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_tuple.add(tuple551.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop143;
                        }
                    } while (true);


                    RIGHT_CURLY552=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag5366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY552);


                    // AST REWRITE
                    // elements: tuple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 682:4: -> ^( BAG_VAL ( tuple )+ )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:682:7: ^( BAG_VAL ( tuple )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        if ( !(stream_tuple.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_tuple.hasNext() ) {
                            adaptor.addChild(root_1, stream_tuple.nextTree());

                        }
                        stream_tuple.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:683:7: LEFT_CURLY RIGHT_CURLY
                    {
                    LEFT_CURLY553=(Token)match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_bag5388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_CURLY.add(LEFT_CURLY553);


                    RIGHT_CURLY554=(Token)match(input,RIGHT_CURLY,FOLLOW_RIGHT_CURLY_in_bag5390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_CURLY.add(RIGHT_CURLY554);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 684:4: -> ^( BAG_VAL )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:684:7: ^( BAG_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BAG_VAL, "BAG_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag"


    public static class tuple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:687:1: tuple : ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) );
    public final QueryParser.tuple_return tuple() throws RecognitionException {
        QueryParser.tuple_return retval = new QueryParser.tuple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN555=null;
        Token COMMA557=null;
        Token RIGHT_PAREN559=null;
        Token LEFT_PAREN560=null;
        Token RIGHT_PAREN561=null;
        QueryParser.literal_return literal556 =null;

        QueryParser.literal_return literal558 =null;


        Object LEFT_PAREN555_tree=null;
        Object COMMA557_tree=null;
        Object RIGHT_PAREN559_tree=null;
        Object LEFT_PAREN560_tree=null;
        Object RIGHT_PAREN561_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:687:7: ( LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN -> ^( TUPLE_VAL ( literal )+ ) | LEFT_PAREN RIGHT_PAREN -> ^( TUPLE_VAL ) )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==LEFT_PAREN) ) {
                int LA146_1 = input.LA(2);

                if ( (LA146_1==RIGHT_PAREN) ) {
                    alt146=2;
                }
                else if ( (LA146_1==DOUBLENUMBER||LA146_1==FALSE||LA146_1==FLOATNUMBER||LA146_1==IDENTIFIER_L||LA146_1==INTEGER||(LA146_1 >= LEFT_BRACKET && LA146_1 <= LEFT_PAREN)||LA146_1==LONGINTEGER||LA146_1==MINUS||LA146_1==QUOTEDSTRING||LA146_1==TRUE) ) {
                    alt146=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;

            }
            switch (alt146) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:687:9: LEFT_PAREN literal ( COMMA literal )* RIGHT_PAREN
                    {
                    LEFT_PAREN555=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple5410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN555);


                    pushFollow(FOLLOW_literal_in_tuple5412);
                    literal556=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_literal.add(literal556.getTree());

                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:687:28: ( COMMA literal )*
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==COMMA) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:687:30: COMMA literal
                    	    {
                    	    COMMA557=(Token)match(input,COMMA,FOLLOW_COMMA_in_tuple5416); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA557);


                    	    pushFollow(FOLLOW_literal_in_tuple5418);
                    	    literal558=literal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_literal.add(literal558.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop145;
                        }
                    } while (true);


                    RIGHT_PAREN559=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple5423); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN559);


                    // AST REWRITE
                    // elements: literal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 688:6: -> ^( TUPLE_VAL ( literal )+ )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:688:9: ^( TUPLE_VAL ( literal )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        if ( !(stream_literal.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_literal.hasNext() ) {
                            adaptor.addChild(root_1, stream_literal.nextTree());

                        }
                        stream_literal.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:689:9: LEFT_PAREN RIGHT_PAREN
                    {
                    LEFT_PAREN560=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_tuple5449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN560);


                    RIGHT_PAREN561=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_tuple5451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN561);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 690:6: -> ^( TUPLE_VAL )
                    {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:690:9: ^( TUPLE_VAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TUPLE_VAL, "TUPLE_VAL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple"


    public static class eid_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:694:1: eid : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | ASC | DESC | BOOL | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | identifier | null_keyword | TRUE | FALSE );
    public final QueryParser.eid_return eid() throws RecognitionException {
        QueryParser.eid_return retval = new QueryParser.eid_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IMPORT563=null;
        Token RETURNS564=null;
        Token DEFINE565=null;
        Token LOAD566=null;
        Token FILTER567=null;
        Token FOREACH568=null;
        Token ORDER569=null;
        Token DISTINCT570=null;
        Token COGROUP571=null;
        Token JOIN572=null;
        Token CROSS573=null;
        Token UNION574=null;
        Token SPLIT575=null;
        Token INTO576=null;
        Token IF577=null;
        Token ALL578=null;
        Token AS579=null;
        Token BY580=null;
        Token USING581=null;
        Token INNER582=null;
        Token OUTER583=null;
        Token PARALLEL584=null;
        Token PARTITION585=null;
        Token GROUP586=null;
        Token AND587=null;
        Token OR588=null;
        Token NOT589=null;
        Token GENERATE590=null;
        Token FLATTEN591=null;
        Token ASC592=null;
        Token DESC593=null;
        Token BOOL594=null;
        Token INT595=null;
        Token LONG596=null;
        Token FLOAT597=null;
        Token DOUBLE598=null;
        Token CHARARRAY599=null;
        Token BYTEARRAY600=null;
        Token BAG601=null;
        Token TUPLE602=null;
        Token MAP603=null;
        Token IS604=null;
        Token STREAM605=null;
        Token THROUGH606=null;
        Token STORE607=null;
        Token MAPREDUCE608=null;
        Token SHIP609=null;
        Token CACHE610=null;
        Token INPUT611=null;
        Token OUTPUT612=null;
        Token STDERROR613=null;
        Token STDIN614=null;
        Token STDOUT615=null;
        Token LIMIT616=null;
        Token SAMPLE617=null;
        Token LEFT618=null;
        Token RIGHT619=null;
        Token FULL620=null;
        Token TRUE623=null;
        Token FALSE624=null;
        QueryParser.rel_str_op_return rel_str_op562 =null;

        QueryParser.identifier_return identifier621 =null;

        QueryParser.null_keyword_return null_keyword622 =null;


        Object IMPORT563_tree=null;
        Object RETURNS564_tree=null;
        Object DEFINE565_tree=null;
        Object LOAD566_tree=null;
        Object FILTER567_tree=null;
        Object FOREACH568_tree=null;
        Object ORDER569_tree=null;
        Object DISTINCT570_tree=null;
        Object COGROUP571_tree=null;
        Object JOIN572_tree=null;
        Object CROSS573_tree=null;
        Object UNION574_tree=null;
        Object SPLIT575_tree=null;
        Object INTO576_tree=null;
        Object IF577_tree=null;
        Object ALL578_tree=null;
        Object AS579_tree=null;
        Object BY580_tree=null;
        Object USING581_tree=null;
        Object INNER582_tree=null;
        Object OUTER583_tree=null;
        Object PARALLEL584_tree=null;
        Object PARTITION585_tree=null;
        Object GROUP586_tree=null;
        Object AND587_tree=null;
        Object OR588_tree=null;
        Object NOT589_tree=null;
        Object GENERATE590_tree=null;
        Object FLATTEN591_tree=null;
        Object ASC592_tree=null;
        Object DESC593_tree=null;
        Object BOOL594_tree=null;
        Object INT595_tree=null;
        Object LONG596_tree=null;
        Object FLOAT597_tree=null;
        Object DOUBLE598_tree=null;
        Object CHARARRAY599_tree=null;
        Object BYTEARRAY600_tree=null;
        Object BAG601_tree=null;
        Object TUPLE602_tree=null;
        Object MAP603_tree=null;
        Object IS604_tree=null;
        Object STREAM605_tree=null;
        Object THROUGH606_tree=null;
        Object STORE607_tree=null;
        Object MAPREDUCE608_tree=null;
        Object SHIP609_tree=null;
        Object CACHE610_tree=null;
        Object INPUT611_tree=null;
        Object OUTPUT612_tree=null;
        Object STDERROR613_tree=null;
        Object STDIN614_tree=null;
        Object STDOUT615_tree=null;
        Object LIMIT616_tree=null;
        Object SAMPLE617_tree=null;
        Object LEFT618_tree=null;
        Object RIGHT619_tree=null;
        Object FULL620_tree=null;
        Object TRUE623_tree=null;
        Object FALSE624_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:694:5: ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | ASC | DESC | BOOL | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | identifier | null_keyword | TRUE | FALSE )
            int alt147=63;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:694:7: rel_str_op
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_str_op_in_eid5474);
                    rel_str_op562=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_str_op562.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:695:7: IMPORT
                    {
                    root_0 = (Object)adaptor.nil();


                    IMPORT563=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_eid5482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT563_tree = 
                    (Object)adaptor.create(IMPORT563)
                    ;
                    adaptor.addChild(root_0, IMPORT563_tree);
                    }

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:696:7: RETURNS
                    {
                    root_0 = (Object)adaptor.nil();


                    RETURNS564=(Token)match(input,RETURNS,FOLLOW_RETURNS_in_eid5490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS564_tree = 
                    (Object)adaptor.create(RETURNS564)
                    ;
                    adaptor.addChild(root_0, RETURNS564_tree);
                    }

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:697:7: DEFINE
                    {
                    root_0 = (Object)adaptor.nil();


                    DEFINE565=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_eid5498); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE565_tree = 
                    (Object)adaptor.create(DEFINE565)
                    ;
                    adaptor.addChild(root_0, DEFINE565_tree);
                    }

                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:698:7: LOAD
                    {
                    root_0 = (Object)adaptor.nil();


                    LOAD566=(Token)match(input,LOAD,FOLLOW_LOAD_in_eid5506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD566_tree = 
                    (Object)adaptor.create(LOAD566)
                    ;
                    adaptor.addChild(root_0, LOAD566_tree);
                    }

                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:699:7: FILTER
                    {
                    root_0 = (Object)adaptor.nil();


                    FILTER567=(Token)match(input,FILTER,FOLLOW_FILTER_in_eid5514); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER567_tree = 
                    (Object)adaptor.create(FILTER567)
                    ;
                    adaptor.addChild(root_0, FILTER567_tree);
                    }

                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:700:7: FOREACH
                    {
                    root_0 = (Object)adaptor.nil();


                    FOREACH568=(Token)match(input,FOREACH,FOLLOW_FOREACH_in_eid5522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH568_tree = 
                    (Object)adaptor.create(FOREACH568)
                    ;
                    adaptor.addChild(root_0, FOREACH568_tree);
                    }

                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:701:7: ORDER
                    {
                    root_0 = (Object)adaptor.nil();


                    ORDER569=(Token)match(input,ORDER,FOLLOW_ORDER_in_eid5530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER569_tree = 
                    (Object)adaptor.create(ORDER569)
                    ;
                    adaptor.addChild(root_0, ORDER569_tree);
                    }

                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:702:7: DISTINCT
                    {
                    root_0 = (Object)adaptor.nil();


                    DISTINCT570=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid5538); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT570_tree = 
                    (Object)adaptor.create(DISTINCT570)
                    ;
                    adaptor.addChild(root_0, DISTINCT570_tree);
                    }

                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:703:7: COGROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    COGROUP571=(Token)match(input,COGROUP,FOLLOW_COGROUP_in_eid5546); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP571_tree = 
                    (Object)adaptor.create(COGROUP571)
                    ;
                    adaptor.addChild(root_0, COGROUP571_tree);
                    }

                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:704:7: JOIN
                    {
                    root_0 = (Object)adaptor.nil();


                    JOIN572=(Token)match(input,JOIN,FOLLOW_JOIN_in_eid5554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN572_tree = 
                    (Object)adaptor.create(JOIN572)
                    ;
                    adaptor.addChild(root_0, JOIN572_tree);
                    }

                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:705:7: CROSS
                    {
                    root_0 = (Object)adaptor.nil();


                    CROSS573=(Token)match(input,CROSS,FOLLOW_CROSS_in_eid5562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS573_tree = 
                    (Object)adaptor.create(CROSS573)
                    ;
                    adaptor.addChild(root_0, CROSS573_tree);
                    }

                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:706:7: UNION
                    {
                    root_0 = (Object)adaptor.nil();


                    UNION574=(Token)match(input,UNION,FOLLOW_UNION_in_eid5570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION574_tree = 
                    (Object)adaptor.create(UNION574)
                    ;
                    adaptor.addChild(root_0, UNION574_tree);
                    }

                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:707:7: SPLIT
                    {
                    root_0 = (Object)adaptor.nil();


                    SPLIT575=(Token)match(input,SPLIT,FOLLOW_SPLIT_in_eid5578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT575_tree = 
                    (Object)adaptor.create(SPLIT575)
                    ;
                    adaptor.addChild(root_0, SPLIT575_tree);
                    }

                    }
                    break;
                case 15 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:708:7: INTO
                    {
                    root_0 = (Object)adaptor.nil();


                    INTO576=(Token)match(input,INTO,FOLLOW_INTO_in_eid5586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO576_tree = 
                    (Object)adaptor.create(INTO576)
                    ;
                    adaptor.addChild(root_0, INTO576_tree);
                    }

                    }
                    break;
                case 16 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:709:7: IF
                    {
                    root_0 = (Object)adaptor.nil();


                    IF577=(Token)match(input,IF,FOLLOW_IF_in_eid5594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF577_tree = 
                    (Object)adaptor.create(IF577)
                    ;
                    adaptor.addChild(root_0, IF577_tree);
                    }

                    }
                    break;
                case 17 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:710:7: ALL
                    {
                    root_0 = (Object)adaptor.nil();


                    ALL578=(Token)match(input,ALL,FOLLOW_ALL_in_eid5602); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL578_tree = 
                    (Object)adaptor.create(ALL578)
                    ;
                    adaptor.addChild(root_0, ALL578_tree);
                    }

                    }
                    break;
                case 18 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:711:7: AS
                    {
                    root_0 = (Object)adaptor.nil();


                    AS579=(Token)match(input,AS,FOLLOW_AS_in_eid5610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS579_tree = 
                    (Object)adaptor.create(AS579)
                    ;
                    adaptor.addChild(root_0, AS579_tree);
                    }

                    }
                    break;
                case 19 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:712:7: BY
                    {
                    root_0 = (Object)adaptor.nil();


                    BY580=(Token)match(input,BY,FOLLOW_BY_in_eid5618); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY580_tree = 
                    (Object)adaptor.create(BY580)
                    ;
                    adaptor.addChild(root_0, BY580_tree);
                    }

                    }
                    break;
                case 20 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:713:7: USING
                    {
                    root_0 = (Object)adaptor.nil();


                    USING581=(Token)match(input,USING,FOLLOW_USING_in_eid5626); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING581_tree = 
                    (Object)adaptor.create(USING581)
                    ;
                    adaptor.addChild(root_0, USING581_tree);
                    }

                    }
                    break;
                case 21 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:714:7: INNER
                    {
                    root_0 = (Object)adaptor.nil();


                    INNER582=(Token)match(input,INNER,FOLLOW_INNER_in_eid5634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER582_tree = 
                    (Object)adaptor.create(INNER582)
                    ;
                    adaptor.addChild(root_0, INNER582_tree);
                    }

                    }
                    break;
                case 22 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:715:7: OUTER
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTER583=(Token)match(input,OUTER,FOLLOW_OUTER_in_eid5642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER583_tree = 
                    (Object)adaptor.create(OUTER583)
                    ;
                    adaptor.addChild(root_0, OUTER583_tree);
                    }

                    }
                    break;
                case 23 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:716:7: PARALLEL
                    {
                    root_0 = (Object)adaptor.nil();


                    PARALLEL584=(Token)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid5650); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL584_tree = 
                    (Object)adaptor.create(PARALLEL584)
                    ;
                    adaptor.addChild(root_0, PARALLEL584_tree);
                    }

                    }
                    break;
                case 24 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:717:7: PARTITION
                    {
                    root_0 = (Object)adaptor.nil();


                    PARTITION585=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_eid5658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION585_tree = 
                    (Object)adaptor.create(PARTITION585)
                    ;
                    adaptor.addChild(root_0, PARTITION585_tree);
                    }

                    }
                    break;
                case 25 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:718:7: GROUP
                    {
                    root_0 = (Object)adaptor.nil();


                    GROUP586=(Token)match(input,GROUP,FOLLOW_GROUP_in_eid5666); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP586_tree = 
                    (Object)adaptor.create(GROUP586)
                    ;
                    adaptor.addChild(root_0, GROUP586_tree);
                    }

                    }
                    break;
                case 26 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:719:7: AND
                    {
                    root_0 = (Object)adaptor.nil();


                    AND587=(Token)match(input,AND,FOLLOW_AND_in_eid5674); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND587_tree = 
                    (Object)adaptor.create(AND587)
                    ;
                    adaptor.addChild(root_0, AND587_tree);
                    }

                    }
                    break;
                case 27 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:720:7: OR
                    {
                    root_0 = (Object)adaptor.nil();


                    OR588=(Token)match(input,OR,FOLLOW_OR_in_eid5682); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR588_tree = 
                    (Object)adaptor.create(OR588)
                    ;
                    adaptor.addChild(root_0, OR588_tree);
                    }

                    }
                    break;
                case 28 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:721:7: NOT
                    {
                    root_0 = (Object)adaptor.nil();


                    NOT589=(Token)match(input,NOT,FOLLOW_NOT_in_eid5690); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT589_tree = 
                    (Object)adaptor.create(NOT589)
                    ;
                    adaptor.addChild(root_0, NOT589_tree);
                    }

                    }
                    break;
                case 29 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:722:7: GENERATE
                    {
                    root_0 = (Object)adaptor.nil();


                    GENERATE590=(Token)match(input,GENERATE,FOLLOW_GENERATE_in_eid5698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE590_tree = 
                    (Object)adaptor.create(GENERATE590)
                    ;
                    adaptor.addChild(root_0, GENERATE590_tree);
                    }

                    }
                    break;
                case 30 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:723:7: FLATTEN
                    {
                    root_0 = (Object)adaptor.nil();


                    FLATTEN591=(Token)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid5706); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN591_tree = 
                    (Object)adaptor.create(FLATTEN591)
                    ;
                    adaptor.addChild(root_0, FLATTEN591_tree);
                    }

                    }
                    break;
                case 31 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:724:7: ASC
                    {
                    root_0 = (Object)adaptor.nil();


                    ASC592=(Token)match(input,ASC,FOLLOW_ASC_in_eid5714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC592_tree = 
                    (Object)adaptor.create(ASC592)
                    ;
                    adaptor.addChild(root_0, ASC592_tree);
                    }

                    }
                    break;
                case 32 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:725:7: DESC
                    {
                    root_0 = (Object)adaptor.nil();


                    DESC593=(Token)match(input,DESC,FOLLOW_DESC_in_eid5722); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC593_tree = 
                    (Object)adaptor.create(DESC593)
                    ;
                    adaptor.addChild(root_0, DESC593_tree);
                    }

                    }
                    break;
                case 33 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:726:7: BOOL
                    {
                    root_0 = (Object)adaptor.nil();


                    BOOL594=(Token)match(input,BOOL,FOLLOW_BOOL_in_eid5730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOL594_tree = 
                    (Object)adaptor.create(BOOL594)
                    ;
                    adaptor.addChild(root_0, BOOL594_tree);
                    }

                    }
                    break;
                case 34 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:727:7: INT
                    {
                    root_0 = (Object)adaptor.nil();


                    INT595=(Token)match(input,INT,FOLLOW_INT_in_eid5738); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT595_tree = 
                    (Object)adaptor.create(INT595)
                    ;
                    adaptor.addChild(root_0, INT595_tree);
                    }

                    }
                    break;
                case 35 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:728:7: LONG
                    {
                    root_0 = (Object)adaptor.nil();


                    LONG596=(Token)match(input,LONG,FOLLOW_LONG_in_eid5746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG596_tree = 
                    (Object)adaptor.create(LONG596)
                    ;
                    adaptor.addChild(root_0, LONG596_tree);
                    }

                    }
                    break;
                case 36 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:729:7: FLOAT
                    {
                    root_0 = (Object)adaptor.nil();


                    FLOAT597=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_eid5754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT597_tree = 
                    (Object)adaptor.create(FLOAT597)
                    ;
                    adaptor.addChild(root_0, FLOAT597_tree);
                    }

                    }
                    break;
                case 37 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:730:7: DOUBLE
                    {
                    root_0 = (Object)adaptor.nil();


                    DOUBLE598=(Token)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid5762); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE598_tree = 
                    (Object)adaptor.create(DOUBLE598)
                    ;
                    adaptor.addChild(root_0, DOUBLE598_tree);
                    }

                    }
                    break;
                case 38 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:731:7: CHARARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    CHARARRAY599=(Token)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid5770); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY599_tree = 
                    (Object)adaptor.create(CHARARRAY599)
                    ;
                    adaptor.addChild(root_0, CHARARRAY599_tree);
                    }

                    }
                    break;
                case 39 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:732:7: BYTEARRAY
                    {
                    root_0 = (Object)adaptor.nil();


                    BYTEARRAY600=(Token)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid5778); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY600_tree = 
                    (Object)adaptor.create(BYTEARRAY600)
                    ;
                    adaptor.addChild(root_0, BYTEARRAY600_tree);
                    }

                    }
                    break;
                case 40 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:733:7: BAG
                    {
                    root_0 = (Object)adaptor.nil();


                    BAG601=(Token)match(input,BAG,FOLLOW_BAG_in_eid5786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG601_tree = 
                    (Object)adaptor.create(BAG601)
                    ;
                    adaptor.addChild(root_0, BAG601_tree);
                    }

                    }
                    break;
                case 41 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:734:7: TUPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    TUPLE602=(Token)match(input,TUPLE,FOLLOW_TUPLE_in_eid5794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE602_tree = 
                    (Object)adaptor.create(TUPLE602)
                    ;
                    adaptor.addChild(root_0, TUPLE602_tree);
                    }

                    }
                    break;
                case 42 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:735:7: MAP
                    {
                    root_0 = (Object)adaptor.nil();


                    MAP603=(Token)match(input,MAP,FOLLOW_MAP_in_eid5802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP603_tree = 
                    (Object)adaptor.create(MAP603)
                    ;
                    adaptor.addChild(root_0, MAP603_tree);
                    }

                    }
                    break;
                case 43 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:736:7: IS
                    {
                    root_0 = (Object)adaptor.nil();


                    IS604=(Token)match(input,IS,FOLLOW_IS_in_eid5810); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS604_tree = 
                    (Object)adaptor.create(IS604)
                    ;
                    adaptor.addChild(root_0, IS604_tree);
                    }

                    }
                    break;
                case 44 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:737:7: STREAM
                    {
                    root_0 = (Object)adaptor.nil();


                    STREAM605=(Token)match(input,STREAM,FOLLOW_STREAM_in_eid5818); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM605_tree = 
                    (Object)adaptor.create(STREAM605)
                    ;
                    adaptor.addChild(root_0, STREAM605_tree);
                    }

                    }
                    break;
                case 45 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:738:7: THROUGH
                    {
                    root_0 = (Object)adaptor.nil();


                    THROUGH606=(Token)match(input,THROUGH,FOLLOW_THROUGH_in_eid5826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH606_tree = 
                    (Object)adaptor.create(THROUGH606)
                    ;
                    adaptor.addChild(root_0, THROUGH606_tree);
                    }

                    }
                    break;
                case 46 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:739:7: STORE
                    {
                    root_0 = (Object)adaptor.nil();


                    STORE607=(Token)match(input,STORE,FOLLOW_STORE_in_eid5834); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE607_tree = 
                    (Object)adaptor.create(STORE607)
                    ;
                    adaptor.addChild(root_0, STORE607_tree);
                    }

                    }
                    break;
                case 47 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:740:7: MAPREDUCE
                    {
                    root_0 = (Object)adaptor.nil();


                    MAPREDUCE608=(Token)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid5842); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE608_tree = 
                    (Object)adaptor.create(MAPREDUCE608)
                    ;
                    adaptor.addChild(root_0, MAPREDUCE608_tree);
                    }

                    }
                    break;
                case 48 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:741:7: SHIP
                    {
                    root_0 = (Object)adaptor.nil();


                    SHIP609=(Token)match(input,SHIP,FOLLOW_SHIP_in_eid5850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP609_tree = 
                    (Object)adaptor.create(SHIP609)
                    ;
                    adaptor.addChild(root_0, SHIP609_tree);
                    }

                    }
                    break;
                case 49 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:742:7: CACHE
                    {
                    root_0 = (Object)adaptor.nil();


                    CACHE610=(Token)match(input,CACHE,FOLLOW_CACHE_in_eid5858); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE610_tree = 
                    (Object)adaptor.create(CACHE610)
                    ;
                    adaptor.addChild(root_0, CACHE610_tree);
                    }

                    }
                    break;
                case 50 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:743:7: INPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    INPUT611=(Token)match(input,INPUT,FOLLOW_INPUT_in_eid5866); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT611_tree = 
                    (Object)adaptor.create(INPUT611)
                    ;
                    adaptor.addChild(root_0, INPUT611_tree);
                    }

                    }
                    break;
                case 51 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:744:7: OUTPUT
                    {
                    root_0 = (Object)adaptor.nil();


                    OUTPUT612=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid5874); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT612_tree = 
                    (Object)adaptor.create(OUTPUT612)
                    ;
                    adaptor.addChild(root_0, OUTPUT612_tree);
                    }

                    }
                    break;
                case 52 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:745:7: STDERROR
                    {
                    root_0 = (Object)adaptor.nil();


                    STDERROR613=(Token)match(input,STDERROR,FOLLOW_STDERROR_in_eid5882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR613_tree = 
                    (Object)adaptor.create(STDERROR613)
                    ;
                    adaptor.addChild(root_0, STDERROR613_tree);
                    }

                    }
                    break;
                case 53 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:746:7: STDIN
                    {
                    root_0 = (Object)adaptor.nil();


                    STDIN614=(Token)match(input,STDIN,FOLLOW_STDIN_in_eid5890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN614_tree = 
                    (Object)adaptor.create(STDIN614)
                    ;
                    adaptor.addChild(root_0, STDIN614_tree);
                    }

                    }
                    break;
                case 54 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:747:7: STDOUT
                    {
                    root_0 = (Object)adaptor.nil();


                    STDOUT615=(Token)match(input,STDOUT,FOLLOW_STDOUT_in_eid5898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT615_tree = 
                    (Object)adaptor.create(STDOUT615)
                    ;
                    adaptor.addChild(root_0, STDOUT615_tree);
                    }

                    }
                    break;
                case 55 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:748:7: LIMIT
                    {
                    root_0 = (Object)adaptor.nil();


                    LIMIT616=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_eid5906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT616_tree = 
                    (Object)adaptor.create(LIMIT616)
                    ;
                    adaptor.addChild(root_0, LIMIT616_tree);
                    }

                    }
                    break;
                case 56 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:749:7: SAMPLE
                    {
                    root_0 = (Object)adaptor.nil();


                    SAMPLE617=(Token)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid5914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE617_tree = 
                    (Object)adaptor.create(SAMPLE617)
                    ;
                    adaptor.addChild(root_0, SAMPLE617_tree);
                    }

                    }
                    break;
                case 57 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:750:7: LEFT
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT618=(Token)match(input,LEFT,FOLLOW_LEFT_in_eid5922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT618_tree = 
                    (Object)adaptor.create(LEFT618)
                    ;
                    adaptor.addChild(root_0, LEFT618_tree);
                    }

                    }
                    break;
                case 58 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:751:7: RIGHT
                    {
                    root_0 = (Object)adaptor.nil();


                    RIGHT619=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_eid5930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT619_tree = 
                    (Object)adaptor.create(RIGHT619)
                    ;
                    adaptor.addChild(root_0, RIGHT619_tree);
                    }

                    }
                    break;
                case 59 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:752:7: FULL
                    {
                    root_0 = (Object)adaptor.nil();


                    FULL620=(Token)match(input,FULL,FOLLOW_FULL_in_eid5938); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL620_tree = 
                    (Object)adaptor.create(FULL620)
                    ;
                    adaptor.addChild(root_0, FULL620_tree);
                    }

                    }
                    break;
                case 60 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:753:7: identifier
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_eid5946);
                    identifier621=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier621.getTree());

                    }
                    break;
                case 61 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:754:7: null_keyword
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_keyword_in_eid5954);
                    null_keyword622=null_keyword();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_keyword622.getTree());

                    }
                    break;
                case 62 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:755:7: TRUE
                    {
                    root_0 = (Object)adaptor.nil();


                    TRUE623=(Token)match(input,TRUE,FOLLOW_TRUE_in_eid5962); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE623_tree = 
                    (Object)adaptor.create(TRUE623)
                    ;
                    adaptor.addChild(root_0, TRUE623_tree);
                    }

                    }
                    break;
                case 63 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:756:7: FALSE
                    {
                    root_0 = (Object)adaptor.nil();


                    FALSE624=(Token)match(input,FALSE,FOLLOW_FALSE_in_eid5970); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE624_tree = 
                    (Object)adaptor.create(FALSE624)
                    ;
                    adaptor.addChild(root_0, FALSE624_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:760:1: rel_op : ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES );
    public final QueryParser.rel_op_return rel_op() throws RecognitionException {
        QueryParser.rel_op_return retval = new QueryParser.rel_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STR_OP_MATCHES631=null;
        QueryParser.rel_op_eq_return rel_op_eq625 =null;

        QueryParser.rel_op_ne_return rel_op_ne626 =null;

        QueryParser.rel_op_gt_return rel_op_gt627 =null;

        QueryParser.rel_op_gte_return rel_op_gte628 =null;

        QueryParser.rel_op_lt_return rel_op_lt629 =null;

        QueryParser.rel_op_lte_return rel_op_lte630 =null;


        Object STR_OP_MATCHES631_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:760:8: ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES )
            int alt148=7;
            switch ( input.LA(1) ) {
            case NUM_OP_EQ:
            case STR_OP_EQ:
                {
                alt148=1;
                }
                break;
            case NUM_OP_NE:
            case STR_OP_NE:
                {
                alt148=2;
                }
                break;
            case NUM_OP_GT:
            case STR_OP_GT:
                {
                alt148=3;
                }
                break;
            case NUM_OP_GTE:
            case STR_OP_GTE:
                {
                alt148=4;
                }
                break;
            case NUM_OP_LT:
            case STR_OP_LT:
                {
                alt148=5;
                }
                break;
            case NUM_OP_LTE:
            case STR_OP_LTE:
                {
                alt148=6;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt148=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;

            }

            switch (alt148) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:760:10: rel_op_eq
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_eq_in_rel_op5980);
                    rel_op_eq625=rel_op_eq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_eq625.getTree());

                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:761:10: rel_op_ne
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_ne_in_rel_op5991);
                    rel_op_ne626=rel_op_ne();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_ne626.getTree());

                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:762:10: rel_op_gt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_gt_in_rel_op6002);
                    rel_op_gt627=rel_op_gt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_gt627.getTree());

                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:763:10: rel_op_gte
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_gte_in_rel_op6013);
                    rel_op_gte628=rel_op_gte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_gte628.getTree());

                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:764:10: rel_op_lt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_lt_in_rel_op6024);
                    rel_op_lt629=rel_op_lt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_lt629.getTree());

                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:765:10: rel_op_lte
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rel_op_lte_in_rel_op6035);
                    rel_op_lte630=rel_op_lte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel_op_lte630.getTree());

                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:766:10: STR_OP_MATCHES
                    {
                    root_0 = (Object)adaptor.nil();


                    STR_OP_MATCHES631=(Token)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_rel_op6046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES631_tree = 
                    (Object)adaptor.create(STR_OP_MATCHES631)
                    ;
                    adaptor.addChild(root_0, STR_OP_MATCHES631_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_op_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_eq"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:769:1: rel_op_eq : ( STR_OP_EQ | NUM_OP_EQ );
    public final QueryParser.rel_op_eq_return rel_op_eq() throws RecognitionException {
        QueryParser.rel_op_eq_return retval = new QueryParser.rel_op_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set632=null;

        Object set632_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:769:11: ( STR_OP_EQ | NUM_OP_EQ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set632=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_EQ||input.LA(1)==STR_OP_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set632)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_eq"


    public static class rel_op_ne_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_ne"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:772:1: rel_op_ne : ( STR_OP_NE | NUM_OP_NE );
    public final QueryParser.rel_op_ne_return rel_op_ne() throws RecognitionException {
        QueryParser.rel_op_ne_return retval = new QueryParser.rel_op_ne_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set633=null;

        Object set633_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:772:11: ( STR_OP_NE | NUM_OP_NE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set633=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_NE||input.LA(1)==STR_OP_NE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set633)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_ne"


    public static class rel_op_gt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:775:1: rel_op_gt : ( STR_OP_GT | NUM_OP_GT );
    public final QueryParser.rel_op_gt_return rel_op_gt() throws RecognitionException {
        QueryParser.rel_op_gt_return retval = new QueryParser.rel_op_gt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set634=null;

        Object set634_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:775:11: ( STR_OP_GT | NUM_OP_GT )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set634=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_GT||input.LA(1)==STR_OP_GT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set634)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gt"


    public static class rel_op_gte_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:778:1: rel_op_gte : ( STR_OP_GTE | NUM_OP_GTE );
    public final QueryParser.rel_op_gte_return rel_op_gte() throws RecognitionException {
        QueryParser.rel_op_gte_return retval = new QueryParser.rel_op_gte_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set635=null;

        Object set635_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:778:12: ( STR_OP_GTE | NUM_OP_GTE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set635=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_GTE||input.LA(1)==STR_OP_GTE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set635)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gte"


    public static class rel_op_lt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:781:1: rel_op_lt : ( STR_OP_LT | NUM_OP_LT );
    public final QueryParser.rel_op_lt_return rel_op_lt() throws RecognitionException {
        QueryParser.rel_op_lt_return retval = new QueryParser.rel_op_lt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set636=null;

        Object set636_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:781:11: ( STR_OP_LT | NUM_OP_LT )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set636=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_LT||input.LA(1)==STR_OP_LT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set636)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lt"


    public static class rel_op_lte_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:784:1: rel_op_lte : ( STR_OP_LTE | NUM_OP_LTE );
    public final QueryParser.rel_op_lte_return rel_op_lte() throws RecognitionException {
        QueryParser.rel_op_lte_return retval = new QueryParser.rel_op_lte_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set637=null;

        Object set637_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:784:12: ( STR_OP_LTE | NUM_OP_LTE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set637=(Token)input.LT(1);

            if ( input.LA(1)==NUM_OP_LTE||input.LA(1)==STR_OP_LTE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set637)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lte"


    public static class rel_str_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:787:1: rel_str_op : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final QueryParser.rel_str_op_return rel_str_op() throws RecognitionException {
        QueryParser.rel_str_op_return retval = new QueryParser.rel_str_op_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set638=null;

        Object set638_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:787:12: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:
            {
            root_0 = (Object)adaptor.nil();


            set638=(Token)input.LT(1);

            if ( (input.LA(1) >= STR_OP_EQ && input.LA(1) <= STR_OP_NE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set638)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"


    public static class null_keyword_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_keyword"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:796:1: null_keyword :{...}? IDENTIFIER_L -> NULL[$IDENTIFIER_L] ;
    public final QueryParser.null_keyword_return null_keyword() throws RecognitionException {
        QueryParser.null_keyword_return retval = new QueryParser.null_keyword_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER_L639=null;

        Object IDENTIFIER_L639_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER_L=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER_L");

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:796:14: ({...}? IDENTIFIER_L -> NULL[$IDENTIFIER_L] )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:796:16: {...}? IDENTIFIER_L
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "null_keyword", "input.LT(1).getText().equalsIgnoreCase(\"NULL\")");
            }

            IDENTIFIER_L639=(Token)match(input,IDENTIFIER_L,FOLLOW_IDENTIFIER_L_in_null_keyword6234); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER_L.add(IDENTIFIER_L639);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 797:6: -> NULL[$IDENTIFIER_L]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NULL, IDENTIFIER_L639)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_keyword"


    public static class identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identifier"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:800:1: identifier :{...}? IDENTIFIER_L -> IDENTIFIER[$IDENTIFIER_L] ;
    public final QueryParser.identifier_return identifier() throws RecognitionException {
        QueryParser.identifier_return retval = new QueryParser.identifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token IDENTIFIER_L640=null;

        Object IDENTIFIER_L640_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER_L=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER_L");

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:800:12: ({...}? IDENTIFIER_L -> IDENTIFIER[$IDENTIFIER_L] )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:800:14: {...}? IDENTIFIER_L
            {
            if ( !((!input.LT(1).getText().equalsIgnoreCase("NULL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "identifier", "!input.LT(1).getText().equalsIgnoreCase(\"NULL\")");
            }

            IDENTIFIER_L640=(Token)match(input,IDENTIFIER_L,FOLLOW_IDENTIFIER_L_in_identifier6255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER_L.add(IDENTIFIER_L640);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 801:5: -> IDENTIFIER[$IDENTIFIER_L]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(IDENTIFIER, IDENTIFIER_L640)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "identifier"

    // $ANTLR start synpred12_QueryParser
    public final void synpred12_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:180:21: ( ( alias EQUAL )? FOREACH rel LEFT_CURLY )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:180:23: ( alias EQUAL )? FOREACH rel LEFT_CURLY
        {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:180:23: ( alias EQUAL )?
        int alt150=2;
        int LA150_0 = input.LA(1);

        if ( (LA150_0==IDENTIFIER_L) ) {
            alt150=1;
        }
        switch (alt150) {
            case 1 :
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:180:25: alias EQUAL
                {
                pushFollow(FOLLOW_alias_in_synpred12_QueryParser607);
                alias();

                state._fsp--;
                if (state.failed) return ;

                match(input,EQUAL,FOLLOW_EQUAL_in_synpred12_QueryParser609); if (state.failed) return ;

                }
                break;

        }


        match(input,FOREACH,FOLLOW_FOREACH_in_synpred12_QueryParser615); if (state.failed) return ;

        pushFollow(FOLLOW_rel_in_synpred12_QueryParser617);
        rel();

        state._fsp--;
        if (state.failed) return ;

        match(input,LEFT_CURLY,FOLLOW_LEFT_CURLY_in_synpred12_QueryParser619); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_QueryParser

    // $ANTLR start synpred14_QueryParser
    public final void synpred14_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:184:69: ( SEMI_COLON )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:184:69: SEMI_COLON
        {
        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred14_QueryParser667); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_QueryParser

    // $ANTLR start synpred65_QueryParser
    public final void synpred65_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:18: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:18: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:18: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:295:20: LEFT_PAREN field_def_list RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred65_QueryParser1703); if (state.failed) return ;

        pushFollow(FOLLOW_field_def_list_in_synpred65_QueryParser1706);
        field_def_list();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred65_QueryParser1708); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred65_QueryParser

    // $ANTLR start synpred100_QueryParser
    public final void synpred100_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:21: ( foreach_clause_complex )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:356:21: foreach_clause_complex
        {
        pushFollow(FOLLOW_foreach_clause_complex_in_synpred100_QueryParser2292);
        foreach_clause_complex();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred100_QueryParser

    // $ANTLR start synpred103_QueryParser
    public final void synpred103_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:49: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:49: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:49: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:51: LEFT_PAREN field_def_list RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred103_QueryParser2336); if (state.failed) return ;

        pushFollow(FOLLOW_field_def_list_in_synpred103_QueryParser2339);
        field_def_list();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred103_QueryParser2341); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred103_QueryParser

    // $ANTLR start synpred105_QueryParser
    public final void synpred105_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:26: ( flatten_clause ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )? )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:26: flatten_clause ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )?
        {
        pushFollow(FOLLOW_flatten_clause_in_synpred105_QueryParser2325);
        flatten_clause();

        state._fsp--;
        if (state.failed) return ;

        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:41: ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )?
        int alt161=2;
        int LA161_0 = input.LA(1);

        if ( (LA161_0==AS) ) {
            alt161=1;
        }
        switch (alt161) {
            case 1 :
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:43: AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def )
                {
                match(input,AS,FOLLOW_AS_in_synpred105_QueryParser2329); if (state.failed) return ;

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:47: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def )
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==LEFT_PAREN) ) {
                    int LA160_1 = input.LA(2);

                    if ( (synpred103_QueryParser()) ) {
                        alt160=1;
                    }
                    else if ( (true) ) {
                        alt160=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 160, 1, input);

                        throw nvae;

                    }
                }
                else if ( ((LA160_0 >= BAG && LA160_0 <= BOOLEAN)||LA160_0==BYTEARRAY||LA160_0==CHARARRAY||LA160_0==DOUBLE||LA160_0==FLOAT||LA160_0==IDENTIFIER_L||LA160_0==INT||(LA160_0 >= LEFT_BRACKET && LA160_0 <= LEFT_CURLY)||LA160_0==LONG||LA160_0==MAP||LA160_0==TUPLE) ) {
                    alt160=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 0, input);

                    throw nvae;

                }
                switch (alt160) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:49: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:49: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:51: LEFT_PAREN field_def_list RIGHT_PAREN
                        {
                        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred105_QueryParser2336); if (state.failed) return ;

                        pushFollow(FOLLOW_field_def_list_in_synpred105_QueryParser2339);
                        field_def_list();

                        state._fsp--;
                        if (state.failed) return ;

                        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred105_QueryParser2341); if (state.failed) return ;

                        }


                        }
                        break;
                    case 2 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:359:95: field_def
                        {
                        pushFollow(FOLLOW_field_def_in_synpred105_QueryParser2348);
                        field_def();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }

    }
    // $ANTLR end synpred105_QueryParser

    // $ANTLR start synpred106_QueryParser
    public final void synpred106_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:44: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:44: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:44: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:46: LEFT_PAREN field_def_list RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred106_QueryParser2391); if (state.failed) return ;

        pushFollow(FOLLOW_field_def_list_in_synpred106_QueryParser2394);
        field_def_list();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred106_QueryParser2396); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred106_QueryParser

    // $ANTLR start synpred108_QueryParser
    public final void synpred108_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:26: ( col_range ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )? )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:26: col_range ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )?
        {
        pushFollow(FOLLOW_col_range_in_synpred108_QueryParser2380);
        col_range();

        state._fsp--;
        if (state.failed) return ;

        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:36: ( AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def ) )?
        int alt164=2;
        int LA164_0 = input.LA(1);

        if ( (LA164_0==AS) ) {
            alt164=1;
        }
        switch (alt164) {
            case 1 :
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:38: AS ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def )
                {
                match(input,AS,FOLLOW_AS_in_synpred108_QueryParser2384); if (state.failed) return ;

                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:42: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) | field_def )
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==LEFT_PAREN) ) {
                    int LA163_1 = input.LA(2);

                    if ( (synpred106_QueryParser()) ) {
                        alt163=1;
                    }
                    else if ( (true) ) {
                        alt163=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 163, 1, input);

                        throw nvae;

                    }
                }
                else if ( ((LA163_0 >= BAG && LA163_0 <= BOOLEAN)||LA163_0==BYTEARRAY||LA163_0==CHARARRAY||LA163_0==DOUBLE||LA163_0==FLOAT||LA163_0==IDENTIFIER_L||LA163_0==INT||(LA163_0 >= LEFT_BRACKET && LA163_0 <= LEFT_CURLY)||LA163_0==LONG||LA163_0==MAP||LA163_0==TUPLE) ) {
                    alt163=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 163, 0, input);

                    throw nvae;

                }
                switch (alt163) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:44: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        {
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:44: ( LEFT_PAREN field_def_list RIGHT_PAREN )
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:46: LEFT_PAREN field_def_list RIGHT_PAREN
                        {
                        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred108_QueryParser2391); if (state.failed) return ;

                        pushFollow(FOLLOW_field_def_list_in_synpred108_QueryParser2394);
                        field_def_list();

                        state._fsp--;
                        if (state.failed) return ;

                        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred108_QueryParser2396); if (state.failed) return ;

                        }


                        }
                        break;
                    case 2 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:360:90: field_def
                        {
                        pushFollow(FOLLOW_field_def_in_synpred108_QueryParser2403);
                        field_def();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }

    }
    // $ANTLR end synpred108_QueryParser

    // $ANTLR start synpred110_QueryParser
    public final void synpred110_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:361:26: ( expr ( AS field_def )? )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:361:26: expr ( AS field_def )?
        {
        pushFollow(FOLLOW_expr_in_synpred110_QueryParser2435);
        expr();

        state._fsp--;
        if (state.failed) return ;

        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:361:31: ( AS field_def )?
        int alt165=2;
        int LA165_0 = input.LA(1);

        if ( (LA165_0==AS) ) {
            alt165=1;
        }
        switch (alt165) {
            case 1 :
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:361:33: AS field_def
                {
                match(input,AS,FOLLOW_AS_in_synpred110_QueryParser2439); if (state.failed) return ;

                pushFollow(FOLLOW_field_def_in_synpred110_QueryParser2442);
                field_def();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred110_QueryParser

    // $ANTLR start synpred111_QueryParser
    public final void synpred111_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:39: ( ( LEFT_PAREN field_def_list RIGHT_PAREN ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:39: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:39: ( LEFT_PAREN field_def_list RIGHT_PAREN )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:362:41: LEFT_PAREN field_def_list RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred111_QueryParser2483); if (state.failed) return ;

        pushFollow(FOLLOW_field_def_list_in_synpred111_QueryParser2486);
        field_def_list();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred111_QueryParser2488); if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred111_QueryParser

    // $ANTLR start synpred116_QueryParser
    public final void synpred116_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:383:14: ( LEFT_PAREN cond RIGHT_PAREN )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:383:14: LEFT_PAREN cond RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred116_QueryParser2620); if (state.failed) return ;

        pushFollow(FOLLOW_cond_in_synpred116_QueryParser2623);
        cond();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred116_QueryParser2625); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred116_QueryParser

    // $ANTLR start synpred117_QueryParser
    public final void synpred117_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:384:14: ( not_cond )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:384:14: not_cond
        {
        pushFollow(FOLLOW_not_cond_in_synpred117_QueryParser2641);
        not_cond();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred117_QueryParser

    // $ANTLR start synpred118_QueryParser
    public final void synpred118_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:385:14: ( expr rel_op expr )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:385:14: expr rel_op expr
        {
        pushFollow(FOLLOW_expr_in_synpred118_QueryParser2656);
        expr();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_rel_op_in_synpred118_QueryParser2658);
        rel_op();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred118_QueryParser2661);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred118_QueryParser

    // $ANTLR start synpred119_QueryParser
    public final void synpred119_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:386:14: ( func_eval )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:386:14: func_eval
        {
        pushFollow(FOLLOW_func_eval_in_synpred119_QueryParser2676);
        func_eval();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred119_QueryParser

    // $ANTLR start synpred130_QueryParser
    public final void synpred130_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:416:13: ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:416:13: LEFT_PAREN type_cast RIGHT_PAREN unary_expr
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred130_QueryParser2889); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_in_synpred130_QueryParser2891);
        type_cast();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred130_QueryParser2893); if (state.failed) return ;

        pushFollow(FOLLOW_unary_expr_in_synpred130_QueryParser2895);
        unary_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred130_QueryParser

    // $ANTLR start synpred137_QueryParser
    public final void synpred137_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:432:14: ( expr_eval )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:432:14: expr_eval
        {
        pushFollow(FOLLOW_expr_eval_in_synpred137_QueryParser3055);
        expr_eval();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred137_QueryParser

    // $ANTLR start synpred138_QueryParser
    public final void synpred138_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:433:14: ( LEFT_PAREN expr RIGHT_PAREN )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:433:14: LEFT_PAREN expr RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred138_QueryParser3071); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred138_QueryParser3073);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred138_QueryParser3075); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred138_QueryParser

    // $ANTLR start synpred139_QueryParser
    public final void synpred139_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:438:13: ( const_expr )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:438:13: const_expr
        {
        pushFollow(FOLLOW_const_expr_in_synpred139_QueryParser3119);
        const_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred139_QueryParser

    // $ANTLR start synpred142_QueryParser
    public final void synpred142_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:19: ( func_eval )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:19: func_eval
        {
        pushFollow(FOLLOW_func_eval_in_synpred142_QueryParser3151);
        func_eval();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred142_QueryParser

    // $ANTLR start synpred143_QueryParser
    public final void synpred143_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:31: ( col_ref )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:31: col_ref
        {
        pushFollow(FOLLOW_col_ref_in_synpred143_QueryParser3155);
        col_ref();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred143_QueryParser

    // $ANTLR start synpred144_QueryParser
    public final void synpred144_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:41: ( bin_expr )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:444:41: bin_expr
        {
        pushFollow(FOLLOW_bin_expr_in_synpred144_QueryParser3159);
        bin_expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred144_QueryParser

    // $ANTLR start synpred155_QueryParser
    public final void synpred155_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:29: ( INTEGER SEMI_COLON )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:30: INTEGER SEMI_COLON
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred155_QueryParser3630); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred155_QueryParser3632); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred155_QueryParser

    // $ANTLR start synpred156_QueryParser
    public final void synpred156_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:63: ( LONGINTEGER SEMI_COLON )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:487:64: LONGINTEGER SEMI_COLON
        {
        match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_synpred156_QueryParser3642); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred156_QueryParser3644); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred156_QueryParser

    // $ANTLR start synpred157_QueryParser
    public final void synpred157_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:490:31: ( DOUBLENUMBER SEMI_COLON )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:490:32: DOUBLENUMBER SEMI_COLON
        {
        match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_synpred157_QueryParser3672); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred157_QueryParser3674); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred157_QueryParser

    // $ANTLR start synpred179_QueryParser
    public final void synpred179_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:528:19: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA join_item )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:528:19: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? COMMA join_item
        {
        pushFollow(FOLLOW_join_item_in_synpred179_QueryParser3984);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:528:53: ( OUTER )?
        int alt172=2;
        int LA172_0 = input.LA(1);

        if ( (LA172_0==OUTER) ) {
            alt172=1;
        }
        switch (alt172) {
            case 1 :
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:528:53: OUTER
                {
                match(input,OUTER,FOLLOW_OUTER_in_synpred179_QueryParser4000); if (state.failed) return ;

                }
                break;

        }


        match(input,COMMA,FOLLOW_COMMA_in_synpred179_QueryParser4003); if (state.failed) return ;

        pushFollow(FOLLOW_join_item_in_synpred179_QueryParser4006);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred179_QueryParser

    // $ANTLR start synpred182_QueryParser
    public final void synpred182_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:542:27: ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:542:27: LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred182_QueryParser4099); if (state.failed) return ;

        pushFollow(FOLLOW_join_group_by_expr_in_synpred182_QueryParser4101);
        join_group_by_expr();

        state._fsp--;
        if (state.failed) return ;

        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:542:57: ( COMMA join_group_by_expr )*
        loop173:
        do {
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==COMMA) ) {
                alt173=1;
            }


            switch (alt173) {
        	case 1 :
        	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:542:59: COMMA join_group_by_expr
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred182_QueryParser4105); if (state.failed) return ;

        	    pushFollow(FOLLOW_join_group_by_expr_in_synpred182_QueryParser4107);
        	    join_group_by_expr();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop173;
            }
        } while (true);


        match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_synpred182_QueryParser4112); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred182_QueryParser

    // $ANTLR start synpred188_QueryParser
    public final void synpred188_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:574:23: ( ( nested_command SEMI_COLON )* )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:574:23: ( nested_command SEMI_COLON )*
        {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:574:23: ( nested_command SEMI_COLON )*
        loop174:
        do {
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==IDENTIFIER_L) ) {
                alt174=1;
            }


            switch (alt174) {
        	case 1 :
        	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:574:25: nested_command SEMI_COLON
        	    {
        	    pushFollow(FOLLOW_nested_command_in_synpred188_QueryParser4390);
        	    nested_command();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred188_QueryParser4392); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop174;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred188_QueryParser

    // $ANTLR start synpred189_QueryParser
    public final void synpred189_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:579:18: ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:579:20: identifier EQUAL col_ref PERIOD col_ref_list {...}?
        {
        pushFollow(FOLLOW_identifier_in_synpred189_QueryParser4452);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred189_QueryParser4454); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_in_synpred189_QueryParser4456);
        col_ref();

        state._fsp--;
        if (state.failed) return ;

        match(input,PERIOD,FOLLOW_PERIOD_in_synpred189_QueryParser4458); if (state.failed) return ;

        pushFollow(FOLLOW_col_ref_list_in_synpred189_QueryParser4460);
        col_ref_list();

        state._fsp--;
        if (state.failed) return ;

        if ( !(( input.LA( 1 ) == SEMI_COLON )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred189_QueryParser", " input.LA( 1 ) == SEMI_COLON ");
        }

        }

    }
    // $ANTLR end synpred189_QueryParser

    // $ANTLR start synpred190_QueryParser
    public final void synpred190_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:581:18: ( identifier EQUAL expr )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:581:18: identifier EQUAL expr
        {
        pushFollow(FOLLOW_identifier_in_synpred190_QueryParser4521);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred190_QueryParser4523); if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred190_QueryParser4525);
        expr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred190_QueryParser

    // $ANTLR start synpred199_QueryParser
    public final void synpred199_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:612:41: ( INTEGER SEMI_COLON )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:612:42: INTEGER SEMI_COLON
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred199_QueryParser4840); if (state.failed) return ;

        match(input,SEMI_COLON,FOLLOW_SEMI_COLON_in_synpred199_QueryParser4842); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred199_QueryParser

    // $ANTLR start synpred207_QueryParser
    public final void synpred207_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:46: ( ( COMMA split_branch )+ )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:46: ( COMMA split_branch )+
        {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:46: ( COMMA split_branch )+
        int cnt175=0;
        loop175:
        do {
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==COMMA) ) {
                alt175=1;
            }


            switch (alt175) {
        	case 1 :
        	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:634:48: COMMA split_branch
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred207_QueryParser5003); if (state.failed) return ;

        	    pushFollow(FOLLOW_split_branch_in_synpred207_QueryParser5005);
        	    split_branch();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt175 >= 1 ) break loop175;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(175, input);
                    throw eee;
            }
            cnt175++;
        } while (true);


        }

    }
    // $ANTLR end synpred207_QueryParser

    // $ANTLR start synpred287_QueryParser
    public final void synpred287_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:753:7: ( identifier )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:753:7: identifier
        {
        pushFollow(FOLLOW_identifier_in_synpred287_QueryParser5946);
        identifier();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred287_QueryParser

    // $ANTLR start synpred288_QueryParser
    public final void synpred288_QueryParser_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:754:7: ( null_keyword )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/QueryParser.g:754:7: null_keyword
        {
        pushFollow(FOLLOW_null_keyword_in_synpred288_QueryParser5954);
        null_keyword();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred288_QueryParser

    // Delegated rules

    public final boolean synpred138_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_QueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_QueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA48 dfa48 = new DFA48(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA147 dfa147 = new DFA147(this);
    static final String DFA48_eotS =
        "\u00bf\uffff";
    static final String DFA48_eofS =
        "\1\uffff\76\100\4\uffff\174\100";
    static final String DFA48_minS =
        "\1\4\76\6\1\4\2\uffff\1\4\174\6";
    static final String DFA48_maxS =
        "\1\173\76\135\1\173\2\uffff\1\173\174\135";
    static final String DFA48_acceptS =
        "\100\uffff\1\1\1\2\175\uffff";
    static final String DFA48_specialS =
        "\u00bf\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\21\1\32\1\22\1\37\1\50\1\uffff\1\23\1\47\1\61\1\46\1\12\2"+
            "\uffff\1\14\1\uffff\1\4\1\40\1\uffff\1\11\3\uffff\1\45\4\uffff"+
            "\1\76\1\6\1\36\1\44\2\uffff\1\7\1\73\1\35\1\31\1\uffff\1\74"+
            "\1\20\1\2\1\25\1\62\1\42\1\uffff\1\17\1\53\1\13\1\71\4\uffff"+
            "\1\67\1\5\1\43\1\uffff\1\52\1\57\3\uffff\1\34\7\uffff\1\33\1"+
            "\10\1\uffff\1\26\1\63\1\27\1\30\6\uffff\1\3\1\72\3\uffff\1\70"+
            "\1\uffff\1\60\2\uffff\1\16\1\uffff\1\64\1\65\1\66\1\56\1\54"+
            "\7\1\1\55\1\75\1\51\1\15\1\24\7\uffff\1\41",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\123\1\134\1\124\1\141\1\152\1\uffff\1\125\1\151\1\163\1"+
            "\150\1\114\2\uffff\1\116\1\uffff\1\106\1\142\1\uffff\1\113\3"+
            "\uffff\1\147\4\uffff\1\u0080\1\110\1\140\1\146\2\uffff\1\111"+
            "\1\175\1\137\1\133\1\uffff\1\176\1\122\1\104\1\127\1\164\1\144"+
            "\1\uffff\1\121\1\155\1\115\1\173\4\uffff\1\171\1\107\1\145\1"+
            "\uffff\1\154\1\161\3\uffff\1\136\7\uffff\1\135\1\112\1\uffff"+
            "\1\130\1\165\1\131\1\132\6\uffff\1\105\1\174\3\uffff\1\172\1"+
            "\uffff\1\162\2\uffff\1\120\1\uffff\1\166\1\167\1\170\1\160\1"+
            "\156\7\103\1\157\1\177\1\153\1\117\1\126\7\uffff\1\143",
            "",
            "",
            "\1\u0091\1\u009a\1\u0092\1\u009f\1\u00a8\1\uffff\1\u0093\1"+
            "\u00a7\1\u00b1\1\u00a6\1\u008a\2\uffff\1\u008c\1\uffff\1\u0084"+
            "\1\u00a0\1\uffff\1\u0089\3\uffff\1\u00a5\4\uffff\1\u00be\1\u0086"+
            "\1\u009e\1\u00a4\2\uffff\1\u0087\1\u00bb\1\u009d\1\u0099\1\uffff"+
            "\1\u00bc\1\u0090\1\u0082\1\u0095\1\u00b2\1\u00a2\1\uffff\1\u008f"+
            "\1\u00ab\1\u008b\1\u00b9\4\uffff\1\u00b7\1\u0085\1\u00a3\1\uffff"+
            "\1\u00aa\1\u00af\3\uffff\1\u009c\7\uffff\1\u009b\1\u0088\1\uffff"+
            "\1\u0096\1\u00b3\1\u0097\1\u0098\6\uffff\1\u0083\1\u00ba\3\uffff"+
            "\1\u00b8\1\uffff\1\u00b0\2\uffff\1\u008e\1\uffff\1\u00b4\1\u00b5"+
            "\1\u00b6\1\u00ae\1\u00ac\7\u0081\1\u00ad\1\u00bd\1\u00a9\1\u008d"+
            "\1\u0094\7\uffff\1\u00a1",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\77\5\uffff\1\100\30\uffff\1"+
            "\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\77\10\uffff\1\100"+
            "\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100",
            "\1\100\11\uffff\1\100\7\uffff\1\102\5\uffff\1\100\30\uffff"+
            "\1\101\2\uffff\1\100\24\uffff\1\100\2\uffff\1\102\10\uffff\1"+
            "\100\1\uffff\1\100"
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "326:1: func_clause : ( func_name -> ^( FUNC_REF func_name ) | func_name LEFT_PAREN ( func_args )? RIGHT_PAREN -> ^( FUNC func_name ( func_args )? ) );";
        }
    }
    static final String DFA67_eotS =
        "\111\uffff";
    static final String DFA67_eofS =
        "\111\uffff";
    static final String DFA67_minS =
        "\1\4\4\0\104\uffff";
    static final String DFA67_maxS =
        "\1\173\4\0\104\uffff";
    static final String DFA67_acceptS =
        "\5\uffff\1\2\1\3\100\uffff\1\4\1\1";
    static final String DFA67_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\104\uffff}>";
    static final String[] DFA67_transitionS = {
            "\5\6\1\uffff\5\6\2\uffff\1\6\1\uffff\2\6\1\uffff\1\6\2\uffff"+
            "\1\4\2\6\1\5\2\uffff\2\6\1\1\1\6\1\uffff\4\6\1\2\1\uffff\1\3"+
            "\15\6\1\uffff\7\6\2\uffff\1\6\7\uffff\2\6\1\uffff\4\6\5\uffff"+
            "\3\6\3\uffff\1\6\1\uffff\1\6\2\uffff\1\6\1\107\21\6\7\uffff"+
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "359:1: flatten_generated_item : ( flatten_clause ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | col_range ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? | expr ( AS ! field_def )? | STAR ( AS ! ( ( LEFT_PAREN ! field_def_list RIGHT_PAREN !) | field_def ) )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA67_1 = input.LA(1);

                         
                        int index67_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred105_QueryParser()) ) {s = 72;}

                        else if ( (synpred110_QueryParser()) ) {s = 6;}

                         
                        input.seek(index67_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA67_2 = input.LA(1);

                         
                        int index67_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred108_QueryParser()) ) {s = 5;}

                        else if ( (synpred110_QueryParser()) ) {s = 6;}

                         
                        input.seek(index67_2);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA67_3 = input.LA(1);

                         
                        int index67_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred108_QueryParser()&&synpred108_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 5;}

                        else if ( (((synpred110_QueryParser()&&synpred110_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 6;}

                         
                        input.seek(index67_3);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA67_4 = input.LA(1);

                         
                        int index67_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred108_QueryParser()) ) {s = 5;}

                        else if ( (synpred110_QueryParser()) ) {s = 6;}

                         
                        input.seek(index67_4);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 67, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA71_eotS =
        "\113\uffff";
    static final String DFA71_eofS =
        "\113\uffff";
    static final String DFA71_minS =
        "\1\4\105\0\5\uffff";
    static final String DFA71_maxS =
        "\1\173\105\0\5\uffff";
    static final String DFA71_acceptS =
        "\106\uffff\1\1\1\3\1\5\1\2\1\4";
    static final String DFA71_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\5\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\33\1\44\1\34\1\50\1\61\1\uffff\1\35\1\60\1\72\1\57\1\24\2"+
            "\uffff\1\26\1\uffff\1\16\1\51\1\uffff\1\23\2\uffff\1\105\1\56"+
            "\1\4\3\uffff\1\10\1\20\1\47\1\55\1\uffff\1\4\1\21\1\104\1\46"+
            "\1\43\1\uffff\1\6\1\32\1\14\1\37\1\73\1\53\1\4\1\31\1\64\1\25"+
            "\1\102\1\11\1\12\1\1\1\uffff\1\100\1\17\1\54\1\4\1\63\1\70\1"+
            "\3\2\uffff\1\2\7\uffff\1\45\1\22\1\uffff\1\40\1\74\1\41\1\42"+
            "\5\uffff\1\5\1\15\1\103\3\uffff\1\101\1\uffff\1\71\2\uffff\1"+
            "\30\1\uffff\1\75\1\76\1\77\1\67\1\65\7\13\1\66\1\7\1\62\1\27"+
            "\1\36\7\uffff\1\52",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "383:1: unary_cond : ( LEFT_PAREN ! cond RIGHT_PAREN !| not_cond | expr rel_op ^ expr | func_eval | null_check_cond );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_1 = input.LA(1);

                         
                        int index71_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred116_QueryParser()) ) {s = 70;}

                        else if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA71_2 = input.LA(1);

                         
                        int index71_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred117_QueryParser()) ) {s = 73;}

                        else if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_2);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA71_3 = input.LA(1);

                         
                        int index71_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_3);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA71_4 = input.LA(1);

                         
                        int index71_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_4);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA71_5 = input.LA(1);

                         
                        int index71_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_5);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA71_6 = input.LA(1);

                         
                        int index71_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred118_QueryParser()&&synpred118_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 71;}

                        else if ( (((synpred119_QueryParser()&&synpred119_QueryParser())&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))) ) {s = 74;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 72;}

                         
                        input.seek(index71_6);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA71_7 = input.LA(1);

                         
                        int index71_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_7);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA71_8 = input.LA(1);

                         
                        int index71_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_8);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA71_9 = input.LA(1);

                         
                        int index71_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_9);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA71_10 = input.LA(1);

                         
                        int index71_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_10);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA71_11 = input.LA(1);

                         
                        int index71_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_11);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA71_12 = input.LA(1);

                         
                        int index71_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_12);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA71_13 = input.LA(1);

                         
                        int index71_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_13);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA71_14 = input.LA(1);

                         
                        int index71_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_14);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA71_15 = input.LA(1);

                         
                        int index71_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_15);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA71_16 = input.LA(1);

                         
                        int index71_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_16);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA71_17 = input.LA(1);

                         
                        int index71_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_17);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA71_18 = input.LA(1);

                         
                        int index71_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_18);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA71_19 = input.LA(1);

                         
                        int index71_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_19);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA71_20 = input.LA(1);

                         
                        int index71_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_20);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA71_21 = input.LA(1);

                         
                        int index71_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_21);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA71_22 = input.LA(1);

                         
                        int index71_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_22);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA71_23 = input.LA(1);

                         
                        int index71_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_23);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA71_24 = input.LA(1);

                         
                        int index71_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_24);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA71_25 = input.LA(1);

                         
                        int index71_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_25);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA71_26 = input.LA(1);

                         
                        int index71_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_26);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA71_27 = input.LA(1);

                         
                        int index71_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_27);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA71_28 = input.LA(1);

                         
                        int index71_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_28);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA71_29 = input.LA(1);

                         
                        int index71_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_29);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA71_30 = input.LA(1);

                         
                        int index71_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_30);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA71_31 = input.LA(1);

                         
                        int index71_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_31);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA71_32 = input.LA(1);

                         
                        int index71_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_32);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA71_33 = input.LA(1);

                         
                        int index71_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_33);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA71_34 = input.LA(1);

                         
                        int index71_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_34);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA71_35 = input.LA(1);

                         
                        int index71_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_35);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA71_36 = input.LA(1);

                         
                        int index71_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_36);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA71_37 = input.LA(1);

                         
                        int index71_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_37);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA71_38 = input.LA(1);

                         
                        int index71_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_38);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA71_39 = input.LA(1);

                         
                        int index71_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_39);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA71_40 = input.LA(1);

                         
                        int index71_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_40);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA71_41 = input.LA(1);

                         
                        int index71_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_41);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA71_42 = input.LA(1);

                         
                        int index71_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_42);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA71_43 = input.LA(1);

                         
                        int index71_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_43);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA71_44 = input.LA(1);

                         
                        int index71_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_44);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA71_45 = input.LA(1);

                         
                        int index71_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_45);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA71_46 = input.LA(1);

                         
                        int index71_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_46);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA71_47 = input.LA(1);

                         
                        int index71_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_47);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA71_48 = input.LA(1);

                         
                        int index71_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_48);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA71_49 = input.LA(1);

                         
                        int index71_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_49);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA71_50 = input.LA(1);

                         
                        int index71_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_50);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA71_51 = input.LA(1);

                         
                        int index71_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_51);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA71_52 = input.LA(1);

                         
                        int index71_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_52);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA71_53 = input.LA(1);

                         
                        int index71_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_53);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA71_54 = input.LA(1);

                         
                        int index71_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_54);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA71_55 = input.LA(1);

                         
                        int index71_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_55);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA71_56 = input.LA(1);

                         
                        int index71_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_56);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA71_57 = input.LA(1);

                         
                        int index71_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_57);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA71_58 = input.LA(1);

                         
                        int index71_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_58);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA71_59 = input.LA(1);

                         
                        int index71_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_59);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA71_60 = input.LA(1);

                         
                        int index71_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_60);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA71_61 = input.LA(1);

                         
                        int index71_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_61);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA71_62 = input.LA(1);

                         
                        int index71_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_62);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA71_63 = input.LA(1);

                         
                        int index71_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_63);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA71_64 = input.LA(1);

                         
                        int index71_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_64);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA71_65 = input.LA(1);

                         
                        int index71_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_65);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA71_66 = input.LA(1);

                         
                        int index71_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_66);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA71_67 = input.LA(1);

                         
                        int index71_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_67);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA71_68 = input.LA(1);

                         
                        int index71_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (synpred119_QueryParser()) ) {s = 74;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_68);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA71_69 = input.LA(1);

                         
                        int index71_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred118_QueryParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index71_69);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA78_eotS =
        "\107\uffff";
    static final String DFA78_eofS =
        "\107\uffff";
    static final String DFA78_minS =
        "\1\4\1\0\105\uffff";
    static final String DFA78_maxS =
        "\1\173\1\0\105\uffff";
    static final String DFA78_acceptS =
        "\2\uffff\1\2\103\uffff\1\1";
    static final String DFA78_specialS =
        "\1\uffff\1\0\105\uffff}>";
    static final String[] DFA78_transitionS = {
            "\5\2\1\uffff\5\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff"+
            "\3\2\3\uffff\4\2\1\uffff\5\2\1\uffff\15\2\1\1\1\uffff\7\2\2"+
            "\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\3\2\3\uffff\1\2\1"+
            "\uffff\1\2\2\uffff\1\2\1\uffff\21\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "416:1: cast_expr : ( LEFT_PAREN type_cast RIGHT_PAREN unary_expr -> ^( CAST_EXPR type_cast unary_expr ) | unary_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA78_1 = input.LA(1);

                         
                        int index78_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred130_QueryParser()) ) {s = 70;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index78_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 78, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA83_eotS =
        "\110\uffff";
    static final String DFA83_eofS =
        "\110\uffff";
    static final String DFA83_minS =
        "\1\4\1\0\7\uffff\1\0\76\uffff";
    static final String DFA83_maxS =
        "\1\173\1\0\7\uffff\1\0\76\uffff";
    static final String DFA83_acceptS =
        "\2\uffff\1\1\103\uffff\1\3\1\2";
    static final String DFA83_specialS =
        "\1\uffff\1\0\7\uffff\1\1\76\uffff}>";
    static final String[] DFA83_transitionS = {
            "\5\2\1\uffff\5\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff"+
            "\3\2\3\uffff\4\2\1\uffff\5\2\1\uffff\15\2\1\11\1\uffff\6\2\1"+
            "\1\2\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\3\2\3\uffff\1"+
            "\2\1\uffff\1\2\2\uffff\1\2\1\uffff\21\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "432:1: unary_expr : ( expr_eval | LEFT_PAREN expr RIGHT_PAREN -> ^( EXPR_IN_PAREN expr ) | neg_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_1 = input.LA(1);

                         
                        int index83_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred137_QueryParser()) ) {s = 2;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index83_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA83_9 = input.LA(1);

                         
                        int index83_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred137_QueryParser()) ) {s = 2;}

                        else if ( (synpred138_QueryParser()) ) {s = 71;}

                         
                        input.seek(index83_9);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA84_eotS =
        "\106\uffff";
    static final String DFA84_eofS =
        "\106\uffff";
    static final String DFA84_minS =
        "\1\4\3\uffff\6\0\74\uffff";
    static final String DFA84_maxS =
        "\1\173\3\uffff\6\0\74\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\73\uffff";
    static final String DFA84_specialS =
        "\4\uffff\1\0\1\1\1\2\1\3\1\4\1\5\74\uffff}>";
    static final String[] DFA84_transitionS = {
            "\5\12\1\uffff\5\12\2\uffff\1\12\1\uffff\2\12\1\uffff\1\12\2"+
            "\uffff\2\12\1\1\3\uffff\1\6\3\12\1\uffff\1\1\4\12\1\uffff\1"+
            "\4\5\12\1\1\4\12\1\7\1\10\1\11\1\uffff\3\12\1\1\2\12\1\1\2\uffff"+
            "\1\12\7\uffff\2\12\1\uffff\4\12\5\uffff\1\1\2\12\3\uffff\1\12"+
            "\1\uffff\1\12\2\uffff\1\12\1\uffff\15\12\1\5\3\12\7\uffff\1"+
            "\12",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "438:1: expr_eval : ( const_expr | var_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_4 = input.LA(1);

                         
                        int index84_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((((input.LT(1).getText().equalsIgnoreCase("NULL"))&&(input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred139_QueryParser())) ) {s = 1;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 10;}

                         
                        input.seek(index84_4);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA84_5 = input.LA(1);

                         
                        int index84_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred139_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index84_5);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA84_6 = input.LA(1);

                         
                        int index84_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred139_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index84_6);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA84_7 = input.LA(1);

                         
                        int index84_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred139_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index84_7);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA84_8 = input.LA(1);

                         
                        int index84_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred139_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index84_8);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA84_9 = input.LA(1);

                         
                        int index84_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred139_QueryParser()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index84_9);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA86_eotS =
        "\104\uffff";
    static final String DFA86_eofS =
        "\104\uffff";
    static final String DFA86_minS =
        "\1\4\30\uffff\1\0\42\uffff\1\0\3\uffff\1\0\3\uffff";
    static final String DFA86_maxS =
        "\1\173\30\uffff\1\0\42\uffff\1\0\3\uffff\1\0\3\uffff";
    static final String DFA86_acceptS =
        "\1\uffff\1\1\75\uffff\1\2\1\uffff\1\4\1\uffff\1\3";
    static final String DFA86_specialS =
        "\31\uffff\1\0\42\uffff\1\1\3\uffff\1\2\3\uffff}>";
    static final String[] DFA86_transitionS = {
            "\5\1\1\uffff\5\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff"+
            "\1\77\1\1\4\uffff\4\1\2\uffff\3\1\1\31\1\uffff\1\74\5\1\1\uffff"+
            "\4\1\2\101\1\100\1\uffff\3\1\1\uffff\2\1\3\uffff\1\1\7\uffff"+
            "\2\1\1\uffff\4\1\6\uffff\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\21\1\7\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "444:1: projectable_expr : ( func_eval | col_ref | bin_expr | type_conversion );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_25 = input.LA(1);

                         
                        int index86_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred142_QueryParser()) ) {s = 1;}

                        else if ( (synpred143_QueryParser()) ) {s = 63;}

                         
                        input.seek(index86_25);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA86_60 = input.LA(1);

                         
                        int index86_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&((input.LT(1).getText().equalsIgnoreCase("NULL"))||(!input.LT(1).getText().equalsIgnoreCase("NULL"))))&&synpred142_QueryParser())) ) {s = 1;}

                        else if ( (((synpred143_QueryParser()&&synpred143_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 63;}

                         
                        input.seek(index86_60);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA86_64 = input.LA(1);

                         
                        int index86_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred144_QueryParser()) ) {s = 67;}

                        else if ( (true) ) {s = 65;}

                         
                        input.seek(index86_64);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA115_eotS =
        "\111\uffff";
    static final String DFA115_eofS =
        "\111\uffff";
    static final String DFA115_minS =
        "\1\4\1\0\107\uffff";
    static final String DFA115_maxS =
        "\1\173\1\0\107\uffff";
    static final String DFA115_acceptS =
        "\2\uffff\1\2\105\uffff\1\1";
    static final String DFA115_specialS =
        "\1\uffff\1\0\107\uffff}>";
    static final String[] DFA115_transitionS = {
            "\5\2\1\uffff\5\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff"+
            "\4\2\2\uffff\4\2\1\uffff\5\2\1\uffff\15\2\1\1\1\uffff\7\2\2"+
            "\uffff\1\2\7\uffff\2\2\1\uffff\4\2\5\uffff\3\2\3\uffff\1\2\1"+
            "\uffff\1\2\2\uffff\23\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "542:1: join_group_by_expr_list : ( LEFT_PAREN join_group_by_expr ( COMMA join_group_by_expr )* RIGHT_PAREN -> ( join_group_by_expr )+ | join_group_by_expr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA115_1 = input.LA(1);

                         
                        int index115_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred182_QueryParser()) ) {s = 72;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index115_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA121_eotS =
        "\37\uffff";
    static final String DFA121_eofS =
        "\37\uffff";
    static final String DFA121_minS =
        "\1\52\1\35\1\4\3\27\1\uffff\6\30\1\4\1\31\1\uffff\3\0\1\31\2\0\1"+
        "\uffff\3\20\1\31\1\0\3\20";
    static final String DFA121_maxS =
        "\1\52\1\35\1\173\3\142\1\uffff\6\122\1\173\1\67\1\uffff\3\0\1\52"+
        "\2\0\1\uffff\3\133\1\52\1\0\3\133";
    static final String DFA121_acceptS =
        "\6\uffff\1\2\10\uffff\1\3\6\uffff\1\1\10\uffff";
    static final String DFA121_specialS =
        "\20\uffff\1\4\1\1\1\3\1\uffff\1\0\1\2\5\uffff\1\5\3\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\1",
            "\1\2",
            "\5\6\1\uffff\5\6\2\uffff\1\13\1\uffff\2\6\1\uffff\1\12\2\uffff"+
            "\1\5\2\6\3\uffff\1\6\1\7\2\6\1\uffff\1\6\1\10\2\6\1\3\1\uffff"+
            "\1\4\15\6\1\uffff\1\14\6\6\2\uffff\1\6\7\uffff\1\6\1\11\1\uffff"+
            "\4\6\5\uffff\3\6\3\uffff\1\6\1\uffff\1\6\2\uffff\1\6\1\uffff"+
            "\21\6\7\uffff\1\6",
            "\2\6\36\uffff\1\6\7\uffff\1\6\21\uffff\1\6\1\15\2\6\10\uffff"+
            "\1\6\4\uffff\1\6",
            "\2\6\36\uffff\1\6\7\uffff\1\6\21\uffff\1\6\1\15\2\6\10\uffff"+
            "\1\6\4\uffff\1\6",
            "\1\6\47\uffff\1\6\21\uffff\1\6\1\16\2\6\10\uffff\1\6\4\uffff"+
            "\1\6",
            "",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\1\6\1\17\16\uffff\1\17\1\uffff\1\17\14\uffff\1\6\32\uffff"+
            "\1\6",
            "\5\6\1\uffff\5\6\2\uffff\1\6\1\uffff\2\6\1\uffff\1\6\2\uffff"+
            "\1\22\1\6\4\uffff\4\6\2\uffff\3\6\1\20\1\uffff\1\21\5\6\1\uffff"+
            "\4\6\2\uffff\1\23\1\uffff\3\6\1\uffff\2\6\3\uffff\1\6\7\uffff"+
            "\2\6\1\uffff\4\6\6\uffff\2\6\3\uffff\1\6\1\uffff\1\6\2\uffff"+
            "\1\6\1\uffff\21\6\7\uffff\1\6",
            "\1\22\16\uffff\1\24\1\uffff\1\25\14\uffff\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\31\16\uffff\1\27\1\uffff\1\30",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\32\112\uffff\1\33",
            "\1\32\112\uffff\1\33",
            "\1\32\112\uffff\1\33",
            "\1\36\16\uffff\1\34\1\uffff\1\35",
            "\1\uffff",
            "\1\32\112\uffff\1\33",
            "\1\32\112\uffff\1\33",
            "\1\32\112\uffff\1\33"
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "579:1: nested_command : ( ( identifier EQUAL col_ref PERIOD col_ref_list {...}?)=> ( identifier EQUAL nested_proj ) -> ^( NESTED_CMD identifier nested_proj ) | identifier EQUAL expr -> ^( NESTED_CMD_ASSI identifier expr ) | identifier EQUAL nested_op -> ^( NESTED_CMD identifier nested_op ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_20 = input.LA(1);

                         
                        int index121_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred189_QueryParser()&&synpred189_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred190_QueryParser())) ) {s = 6;}

                         
                        input.seek(index121_20);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_17 = input.LA(1);

                         
                        int index121_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred189_QueryParser()&&synpred189_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred190_QueryParser())) ) {s = 6;}

                         
                        input.seek(index121_17);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_21 = input.LA(1);

                         
                        int index121_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred189_QueryParser()&&synpred189_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred190_QueryParser())) ) {s = 6;}

                         
                        input.seek(index121_21);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_18 = input.LA(1);

                         
                        int index121_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred189_QueryParser()&&synpred189_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred190_QueryParser())) ) {s = 6;}

                         
                        input.seek(index121_18);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA121_16 = input.LA(1);

                         
                        int index121_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred189_QueryParser()&&synpred189_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred190_QueryParser())) ) {s = 6;}

                         
                        input.seek(index121_16);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA121_27 = input.LA(1);

                         
                        int index121_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred189_QueryParser()&&synpred189_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 22;}

                        else if ( ((((!input.LT(1).getText().equalsIgnoreCase("NULL"))&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))&&synpred190_QueryParser())) ) {s = 6;}

                         
                        input.seek(index121_27);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA147_eotS =
        "\101\uffff";
    static final String DFA147_eofS =
        "\101\uffff";
    static final String DFA147_minS =
        "\1\4\73\uffff\1\0\4\uffff";
    static final String DFA147_maxS =
        "\1\173\73\uffff\1\0\4\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\uffff\1\76\1\77\1\74"+
        "\1\75";
    static final String DFA147_specialS =
        "\74\uffff\1\0\4\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\21\1\32\1\22\1\37\1\50\1\uffff\1\23\1\47\1\61\1\46\1\12\2"+
            "\uffff\1\14\1\uffff\1\4\1\40\1\uffff\1\11\3\uffff\1\45\4\uffff"+
            "\1\76\1\6\1\36\1\44\2\uffff\1\7\1\73\1\35\1\31\1\uffff\1\74"+
            "\1\20\1\2\1\25\1\62\1\42\1\uffff\1\17\1\53\1\13\1\71\4\uffff"+
            "\1\67\1\5\1\43\1\uffff\1\52\1\57\3\uffff\1\34\7\uffff\1\33\1"+
            "\10\1\uffff\1\26\1\63\1\27\1\30\6\uffff\1\3\1\72\3\uffff\1\70"+
            "\1\uffff\1\60\2\uffff\1\16\1\uffff\1\64\1\65\1\66\1\56\1\54"+
            "\7\1\1\55\1\75\1\51\1\15\1\24\7\uffff\1\41",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "694:1: eid : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | ASC | DESC | BOOL | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | identifier | null_keyword | TRUE | FALSE );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_60 = input.LA(1);

                         
                        int index147_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((synpred287_QueryParser()&&synpred287_QueryParser())&&(!input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 63;}

                        else if ( (((synpred288_QueryParser()&&synpred288_QueryParser())&&(input.LT(1).getText().equalsIgnoreCase("NULL")))) ) {s = 64;}

                         
                        input.seek(index147_60);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_statement_in_query363 = new BitSet(new long[]{0x46881521004A4000L,0x000400C230000800L});
    public static final BitSet FOLLOW_EOF_in_query366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_COLON_in_statement391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_statement_in_statement406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_statement_in_statement420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_statement_in_statement434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_statement_in_statement450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_statement_in_statement472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_clause_in_import_statement481 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_import_statement483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_clause_in_inline_statement493 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_inline_statement495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_split_statement505 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_split_statement507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_general_statement519 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_general_statement521 = new BitSet(new long[]{0x46880101004A4000L,0x000400C010000800L});
    public static final BitSet FOLLOW_op_clause_in_general_statement527 = new BitSet(new long[]{0x0000000000000000L,0x0000000020008000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement529 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_general_statement534 = new BitSet(new long[]{0x46080101004A4000L,0x000400C010000800L});
    public static final BitSet FOLLOW_op_clause_in_general_statement536 = new BitSet(new long[]{0x0000000000000000L,0x0000000008008000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement538 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_general_statement541 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_general_statement544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause587 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_complex_statement_in_foreach_statement625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_simple_statement_in_foreach_statement647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_foreach_complex_statement658 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_foreach_complex_statement660 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_foreach_clause_complex_in_foreach_complex_statement665 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_complex_statement667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_foreach_simple_statement717 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_foreach_simple_statement719 = new BitSet(new long[]{0x0080002000000000L});
    public static final BitSet FOLLOW_foreach_clause_simple_in_foreach_simple_statement725 = new BitSet(new long[]{0x0000000000000000L,0x0000000020008000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_simple_statement727 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_foreach_simple_statement781 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_foreach_clause_simple_in_foreach_simple_statement783 = new BitSet(new long[]{0x0000000000000000L,0x0000000008008000L});
    public static final BitSet FOLLOW_parallel_clause_in_foreach_simple_statement785 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_foreach_simple_statement788 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_foreach_simple_statement791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_alias840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_parameter854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_parameter863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_parameter872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_parameter880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_parameter888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_content897 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000003FFFFFFFL});
    public static final BitSet FOLLOW_content_in_content901 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000003FFFFFFFL});
    public static final BitSet FOLLOW_set_in_content905 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x000000003FFFFFFFL});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_content917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause1025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause1053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause1081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause1095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_macro_param_clause1118 = new BitSet(new long[]{0x0000040000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_alias_in_macro_param_clause1122 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_macro_param_clause1125 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_macro_param_clause1127 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_macro_param_clause1134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_macro_return_clause1161 = new BitSet(new long[]{0x0000040000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_alias_in_macro_return_clause1165 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_macro_return_clause1168 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_macro_return_clause1170 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_VOID_in_macro_return_clause1177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_content_in_macro_body_clause1204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_param_clause_in_macro_clause1226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_macro_return_clause_in_macro_clause1228 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_macro_body_clause_in_macro_clause1230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_inline_return_clause1260 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_inline_return_clause1275 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_inline_return_clause1278 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_inline_return_clause1280 = new BitSet(new long[]{0x0000000020010000L});
    public static final BitSet FOLLOW_EQUAL_in_inline_return_clause1284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_inline_param_clause1313 = new BitSet(new long[]{0x000104000A000000L,0x0000000008400000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1317 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_inline_param_clause1320 = new BitSet(new long[]{0x000104000A000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_parameter_in_inline_param_clause1322 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_inline_param_clause1329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_return_clause_in_inline_clause1351 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_inline_clause1353 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_inline_param_clause_in_inline_clause1355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_import_clause1380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_import_clause1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause1392 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_alias_in_define_clause1395 = new BitSet(new long[]{0x6E9EFDE7C45A7DF0L,0x080FFFFA5181EC04L});
    public static final BitSet FOLLOW_cmd_in_define_clause1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_clause_in_define_clause1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_macro_clause_in_define_clause1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd1417 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_ship_clause_in_cmd1422 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd1426 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_input_clause_in_cmd1430 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_output_clause_in_cmd1434 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_error_clause_in_cmd1438 = new BitSet(new long[]{0x0000400000001002L,0x0000000840004000L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause1450 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_ship_clause1453 = new BitSet(new long[]{0x0000000000000000L,0x0000000008400000L});
    public static final BitSet FOLLOW_path_list_in_ship_clause1456 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_ship_clause1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list1469 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_path_list1473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list1475 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause1502 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cache_clause1505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_path_list_in_cache_clause1508 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cache_clause1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_input_clause1520 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_input_clause1523 = new BitSet(new long[]{0x0000000000000000L,0x0000003000400000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_input_clause1526 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_input_clause1528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list1538 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_stream_cmd_list1542 = new BitSet(new long[]{0x0000000000000000L,0x0000003000400000L});
    public static final BitSet FOLLOW_stream_cmd_in_stream_cmd_list1544 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_set_in_stream_cmd1576 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_stream_cmd1593 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd1598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause1612 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_output_clause1615 = new BitSet(new long[]{0x0000000000000000L,0x0000003000400000L});
    public static final BitSet FOLLOW_stream_cmd_list_in_output_clause1618 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_output_clause1620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause1630 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_error_clause1633 = new BitSet(new long[]{0x0000000000000000L,0x0000000008400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause1638 = new BitSet(new long[]{0x0200000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LIMIT_in_error_clause1642 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause1645 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_error_clause1653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_load_clause1663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_filename_in_load_clause1666 = new BitSet(new long[]{0x0000000000000042L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_load_clause1670 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L});
    public static final BitSet FOLLOW_func_clause_in_load_clause1673 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_as_clause_in_load_clause1678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_filename1688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_as_clause1696 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_as_clause1703 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause1706 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_as_clause1708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_as_clause1715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_field_def1726 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COLON_in_field_def1730 = new BitSet(new long[]{0x28E0800404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_type_in_field_def1732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_field_def1771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_field_def_list1799 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_field_def_list1803 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_in_field_def_list1805 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_simple_type_in_type1836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_in_type1840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_in_type1844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type1848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_tuple_type1890 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple_type1893 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000008000000L});
    public static final BitSet FOLLOW_field_def_list_in_tuple_type1895 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple_type1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_bag_type1928 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag_type1931 = new BitSet(new long[]{0x0080040000000000L,0x0002000004000000L});
    public static final BitSet FOLLOW_identifier_in_bag_type1937 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_bag_type1939 = new BitSet(new long[]{0x0080000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_tuple_type_in_bag_type1944 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag_type1949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_map_type1980 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_map_type1983 = new BitSet(new long[]{0x28E0800404002B00L,0x0002000002000000L});
    public static final BitSet FOLLOW_type_in_map_type1985 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_map_type1988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_clause2053 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_clause2055 = new BitSet(new long[]{0x0000000000000000L,0x0000000008400002L});
    public static final BitSet FOLLOW_func_args_in_func_clause2057 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_clause2060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eid_in_func_name2093 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_set_in_func_name2097 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L});
    public static final BitSet FOLLOW_eid_in_func_name2107 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2132 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_func_args2136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400002L});
    public static final BitSet FOLLOW_func_args_string_in_func_args2138 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_set_in_group_clause2164 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_group_item_list_in_group_clause2175 = new BitSet(new long[]{0x0000000000000002L,0x0008000000010000L});
    public static final BitSet FOLLOW_USING_in_group_clause2179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_group_type_in_group_clause2182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_type2197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2206 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_group_item_list2210 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_group_item_in_group_item_list2212 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_rel_in_group_item2244 = new BitSet(new long[]{0x0000000000000410L,0x0040000000000000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item2248 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ALL_in_group_item2252 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ANY_in_group_item2256 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_alias_in_rel2278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_rel2287 = new BitSet(new long[]{0x46080121004A4000L,0x000400C010000800L});
    public static final BitSet FOLLOW_foreach_clause_complex_in_rel2292 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_op_clause_in_rel2300 = new BitSet(new long[]{0x0000000000000000L,0x0000000008008000L});
    public static final BitSet FOLLOW_foreach_clause_simple_in_rel2304 = new BitSet(new long[]{0x0000000000000000L,0x0000000008008000L});
    public static final BitSet FOLLOW_parallel_clause_in_rel2308 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_rel2315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item2325 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2329 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_generated_item2336 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item2339 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_generated_item2341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_flatten_generated_item2380 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2384 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_generated_item2391 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item2394 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_generated_item2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_flatten_generated_item2435 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2439 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_flatten_generated_item2472 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_flatten_generated_item2476 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_generated_item2483 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item2486 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_generated_item2488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_flatten_generated_item2495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause2510 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_flatten_clause2513 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_expr_in_flatten_clause2516 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_flatten_clause2518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_store_clause2528 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_store_clause2531 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_INTO_in_store_clause2533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_filename_in_store_clause2536 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_store_clause2540 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L});
    public static final BitSet FOLLOW_func_clause_in_store_clause2543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause2555 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_filter_clause2558 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_filter_clause2560 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_cond_in_filter_clause2563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_cond_in_cond2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_cond_in_or_cond2581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_OR_in_or_cond2586 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_and_cond_in_or_cond2589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_unary_cond_in_and_cond2601 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AND_in_and_cond2605 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_unary_cond_in_and_cond2608 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_cond2620 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_cond_in_unary_cond2623 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_cond2625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_cond_in_unary_cond2641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_unary_cond2656 = new BitSet(new long[]{0x0000000000000000L,0x00007F00000001F8L});
    public static final BitSet FOLLOW_rel_op_in_unary_cond2658 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_expr_in_unary_cond2661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_eval_in_unary_cond2676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_check_cond_in_unary_cond2691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_not_cond2700 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_unary_cond_in_not_cond2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_name_in_func_eval2712 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_eval2714 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE59C1EC04L});
    public static final BitSet FOLLOW_real_arg_list_in_func_eval2716 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_eval2719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_real_arg_in_real_arg_list2751 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_real_arg_list2755 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_real_arg_in_real_arg_list2757 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_expr_in_real_arg2787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_real_arg2795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_null_check_cond2804 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_IS_in_null_check_cond2806 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NOT_in_null_check_cond2809 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_null_keyword_in_null_check_cond2812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_expr_in_expr2822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_expr_in_add_expr2831 = new BitSet(new long[]{0x8000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_set_in_add_expr2835 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_multi_expr_in_add_expr2846 = new BitSet(new long[]{0x8000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr2858 = new BitSet(new long[]{0x0000000000800002L,0x0000000400020000L});
    public static final BitSet FOLLOW_set_in_multi_expr2862 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_cast_expr_in_multi_expr2877 = new BitSet(new long[]{0x0000000000800002L,0x0000000400020000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cast_expr2889 = new BitSet(new long[]{0x2820800404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_type_cast_in_cast_expr2891 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cast_expr2893 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_unary_expr_in_cast_expr2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expr_in_cast_expr2930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_in_type_cast2939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type_cast2943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_cast_in_type_cast2947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_cast_in_type_cast2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_tuple_type_cast2960 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple_type_cast2962 = new BitSet(new long[]{0x2820800404002B00L,0x0002000008000000L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast2966 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_tuple_type_cast2970 = new BitSet(new long[]{0x2820800404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast2972 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple_type_cast2980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_bag_type_cast3015 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag_type_cast3017 = new BitSet(new long[]{0x0000000000000000L,0x0002000004000000L});
    public static final BitSet FOLLOW_tuple_type_cast_in_bag_type_cast3019 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag_type_cast3022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eval_in_unary_expr3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unary_expr3071 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_expr_in_unary_expr3073 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unary_expr3075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_expr_in_unary_expr3110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_expr_eval3119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_expr_in_expr_eval3123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_projectable_expr_in_var_expr3132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_dot_proj_in_var_expr3136 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_pound_proj_in_var_expr3140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_func_eval_in_projectable_expr3151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_projectable_expr3155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_projectable_expr3159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_conversion_in_projectable_expr3163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_type_conversion3172 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_real_arg_list_in_type_conversion3174 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_type_conversion3176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_type_conversion3223 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_real_arg_list_in_type_conversion3225 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_type_conversion3227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_type_conversion3274 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_real_arg_in_type_conversion3276 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_type_conversion3280 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_real_arg_in_type_conversion3282 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_type_conversion3287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_dot_proj3325 = new BitSet(new long[]{0x0080050002000000L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_dot_proj3354 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj3356 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_dot_proj3360 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj3362 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_dot_proj3367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_alias_in_col_alias_or_index3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_index_in_col_alias_or_index3403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_col_alias3412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_col_alias3416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_col_index3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_range3438 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range3440 = new BitSet(new long[]{0x0000050002000002L});
    public static final BitSet FOLLOW_col_ref_in_col_range3446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range3487 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_col_range3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_pound_proj3520 = new BitSet(new long[]{0x0000040000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_pound_proj3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_pound_proj3529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_bin_expr3540 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_cond_in_bin_expr3542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_QMARK_in_bin_expr3544 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_expr_in_bin_expr3550 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_bin_expr3552 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_expr_in_bin_expr3558 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_bin_expr3560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_neg_expr3593 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_cast_expr_in_neg_expr3595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause3622 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_limit_clause3625 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_INTEGER_in_limit_clause3637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_limit_clause3649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_limit_clause3653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause3664 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_sample_clause3667 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_sample_clause3679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_sample_clause3683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_order_clause3694 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_order_clause3697 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_order_clause3699 = new BitSet(new long[]{0x0080050012000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause3702 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_order_clause3706 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L});
    public static final BitSet FOLLOW_func_clause_in_order_clause3709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause3721 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_order_col_list_in_order_by_clause3752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3761 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_order_col_list3765 = new BitSet(new long[]{0x0080050012000000L});
    public static final BitSet FOLLOW_order_col_in_order_col_list3767 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_col_range_in_order_col3798 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_col_ref_in_order_col3821 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_order_col3848 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_order_col3851 = new BitSet(new long[]{0x0000000000100080L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_order_col3864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause3874 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_distinct_clause3877 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause3879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause3889 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_partition_clause3892 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L});
    public static final BitSet FOLLOW_func_name_in_partition_clause3895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause3904 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause3907 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause3909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_rel_list3919 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_rel_list3923 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_rel_list3925 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_JOIN_in_join_clause3950 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause3953 = new BitSet(new long[]{0x0000000000000002L,0x0008000000010000L});
    public static final BitSet FOLLOW_USING_in_join_clause3957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_join_type_in_join_clause3960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause3965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type3975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause3984 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_join_sub_clause3986 = new BitSet(new long[]{0x0000000000010000L,0x0000000000002000L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause4000 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_join_sub_clause4003 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause4006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_list_in_join_sub_clause4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_item_list4035 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_join_item_list4039 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_join_item_in_join_item_list4042 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_rel_in_join_item4054 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item4056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause4087 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_join_group_by_expr_list_in_join_group_by_clause4090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_join_group_by_expr_list4099 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_expr_list4101 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_join_group_by_expr_list4105 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_expr_list4107 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_join_group_by_expr_list4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_expr_list4168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_join_group_by_expr4177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_join_group_by_expr4182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_join_group_by_expr4186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause4195 = new BitSet(new long[]{0x0080040000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause4198 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_list_in_union_clause4201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause_simple4210 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_foreach_clause_simple4213 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_foreach_plan_simple_in_foreach_clause_simple4215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generate_clause_in_foreach_plan_simple4224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause_complex4262 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_foreach_clause_complex4265 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_foreach_plan_complex_in_foreach_clause_complex4267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan_complex4276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_nested_blk4315 = new BitSet(new long[]{0x0000048000000000L});
    public static final BitSet FOLLOW_nested_command_list_in_nested_blk4318 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_blk4322 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_blk4324 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_nested_blk4329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_generate_clause4339 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause4341 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_generate_clause4345 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause4347 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_nested_command_in_nested_command_list4390 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_nested_command_list4392 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_identifier_in_nested_command4470 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command4472 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_proj_in_nested_command4474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_nested_command4521 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command4523 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_expr_in_nested_command4525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_nested_command4570 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_nested_command4572 = new BitSet(new long[]{0x0200002100420000L,0x0000000000000800L});
    public static final BitSet FOLLOW_nested_op_in_nested_command4574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op4609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op4623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op4637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op4651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op4665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op4679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj4688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_PERIOD_in_nested_proj4690 = new BitSet(new long[]{0x0080050002000000L});
    public static final BitSet FOLLOW_col_ref_list_in_nested_proj4692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list4726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_col_ref_list4732 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list4734 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_col_ref_list4738 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_col_ref_list4740 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_col_ref_list4745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter4775 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter4778 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_nested_filter4780 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_cond_in_nested_filter4783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort4792 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort4795 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_BY_in_nested_sort4797 = new BitSet(new long[]{0x0080050012000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort4801 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_USING_in_nested_sort4805 = new BitSet(new long[]{0x6E1EFDE7845A7DF0L,0x080FFFFA5181EC04L});
    public static final BitSet FOLLOW_func_clause_in_nested_sort4808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct4820 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct4823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit4832 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit4835 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit4847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_nested_limit4851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross4862 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross4865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach4873 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach4876 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_foreach4878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input4887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input4891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list4900 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_nested_op_input_list4904 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list4906 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause4931 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_stream_clause4934 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_THROUGH_in_stream_clause4936 = new BitSet(new long[]{0x0000040040000000L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_stream_clause4941 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_alias_in_stream_clause4945 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause4949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause4959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause4962 = new BitSet(new long[]{0x0080000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_mr_clause4966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause4969 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_mr_clause4971 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause4977 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause4979 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause4981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause4991 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_split_clause4993 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_INTO_in_split_clause4995 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause4997 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_split_clause5003 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause5005 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_split_clause5016 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause5018 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_split_clause5023 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_otherwise_in_split_clause5025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_split_branch5065 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_IF_in_split_branch5067 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_cond_in_split_branch5069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_split_otherwise5102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise5104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_col_ref_in_col_ref5135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dollar_col_ref_in_col_ref5139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_alias_col_ref5148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_alias_col_ref5152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_dollar_col_ref5161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_const_expr5170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal5179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_in_literal5183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_in_literal5187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_in_literal5191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_scalar_in_scalar5201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_scalar5205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_scalar5209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_scalar5213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_scalar5217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_num_scalar5226 = new BitSet(new long[]{0x1001001008000000L});
    public static final BitSet FOLLOW_set_in_num_scalar5229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_map5254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keyvalue_in_map5256 = new BitSet(new long[]{0x0000000000010000L,0x0000000002000000L});
    public static final BitSet FOLLOW_COMMA_in_map5260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_keyvalue_in_map5262 = new BitSet(new long[]{0x0000000000010000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_map5267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_map5289 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_map5291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_key_in_keyvalue5311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_POUND_in_keyvalue5313 = new BitSet(new long[]{0x90E1041088000000L,0x0001000000400000L});
    public static final BitSet FOLLOW_const_expr_in_keyvalue5315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_map_key5344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag5353 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_tuple_in_bag5355 = new BitSet(new long[]{0x0000000000010000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_bag5359 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_tuple_in_bag5361 = new BitSet(new long[]{0x0000000000010000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag5366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_bag5388 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RIGHT_CURLY_in_bag5390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple5410 = new BitSet(new long[]{0x90E1041088000000L,0x0001000000400000L});
    public static final BitSet FOLLOW_literal_in_tuple5412 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_tuple5416 = new BitSet(new long[]{0x90E1041088000000L,0x0001000000400000L});
    public static final BitSet FOLLOW_literal_in_tuple5418 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple5423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_tuple5449 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_tuple5451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_str_op_in_eid5474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid5482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid5490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid5498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid5506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid5514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid5522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid5530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid5538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid5546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid5554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid5562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid5570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid5578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid5586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid5594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid5602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid5610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid5618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid5626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid5634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid5642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid5650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid5658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid5666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid5674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid5682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid5690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid5698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid5706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid5714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid5722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_in_eid5730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid5738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid5746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid5754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid5762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid5770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid5778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid5786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid5794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid5802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid5810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid5818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid5826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid5834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid5842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid5850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid5858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid5866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid5874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid5882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid5890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid5898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid5906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid5914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid5930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid5938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_eid5946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_eid5954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid5962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid5970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_eq_in_rel_op5980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_ne_in_rel_op5991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gt_in_rel_op6002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gte_in_rel_op6013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lt_in_rel_op6024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lte_in_rel_op6035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_rel_op6046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_L_in_null_keyword6234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_L_in_identifier6255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_synpred12_QueryParser607 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred12_QueryParser609 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_FOREACH_in_synpred12_QueryParser615 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_rel_in_synpred12_QueryParser617 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_LEFT_CURLY_in_synpred12_QueryParser619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred14_QueryParser667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred65_QueryParser1703 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_synpred65_QueryParser1706 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred65_QueryParser1708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_clause_complex_in_synpred100_QueryParser2292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred103_QueryParser2336 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_synpred103_QueryParser2339 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred103_QueryParser2341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_synpred105_QueryParser2325 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_synpred105_QueryParser2329 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred105_QueryParser2336 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_synpred105_QueryParser2339 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred105_QueryParser2341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_synpred105_QueryParser2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred106_QueryParser2391 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_synpred106_QueryParser2394 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred106_QueryParser2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_range_in_synpred108_QueryParser2380 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_synpred108_QueryParser2384 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred108_QueryParser2391 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_synpred108_QueryParser2394 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred108_QueryParser2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_def_in_synpred108_QueryParser2403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred110_QueryParser2435 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_AS_in_synpred110_QueryParser2439 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_in_synpred110_QueryParser2442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred111_QueryParser2483 = new BitSet(new long[]{0x28E0840404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_field_def_list_in_synpred111_QueryParser2486 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred111_QueryParser2488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred116_QueryParser2620 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_cond_in_synpred116_QueryParser2623 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred116_QueryParser2625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_cond_in_synpred117_QueryParser2641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred118_QueryParser2656 = new BitSet(new long[]{0x0000000000000000L,0x00007F00000001F8L});
    public static final BitSet FOLLOW_rel_op_in_synpred118_QueryParser2658 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_expr_in_synpred118_QueryParser2661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_eval_in_synpred119_QueryParser2676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred130_QueryParser2889 = new BitSet(new long[]{0x2820800404002B00L,0x0002000000000000L});
    public static final BitSet FOLLOW_type_cast_in_synpred130_QueryParser2891 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred130_QueryParser2893 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_unary_expr_in_synpred130_QueryParser2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eval_in_synpred137_QueryParser3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred138_QueryParser3071 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_expr_in_synpred138_QueryParser3073 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred138_QueryParser3075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_synpred139_QueryParser3119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_eval_in_synpred142_QueryParser3151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_synpred143_QueryParser3155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_synpred144_QueryParser3159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred155_QueryParser3630 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred155_QueryParser3632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_synpred156_QueryParser3642 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred156_QueryParser3644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_synpred157_QueryParser3672 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred157_QueryParser3674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_synpred179_QueryParser3984 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_synpred179_QueryParser3986 = new BitSet(new long[]{0x0000000000010000L,0x0000000000002000L});
    public static final BitSet FOLLOW_OUTER_in_synpred179_QueryParser4000 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_synpred179_QueryParser4003 = new BitSet(new long[]{0x0080040000000000L});
    public static final BitSet FOLLOW_join_item_in_synpred179_QueryParser4006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred182_QueryParser4099 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_join_group_by_expr_in_synpred182_QueryParser4101 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred182_QueryParser4105 = new BitSet(new long[]{0xFEFFFDF79E5A7DF0L,0x080FFFFE51C1EC04L});
    public static final BitSet FOLLOW_join_group_by_expr_in_synpred182_QueryParser4107 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_synpred182_QueryParser4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_command_in_synpred188_QueryParser4390 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred188_QueryParser4392 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred189_QueryParser4452 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred189_QueryParser4454 = new BitSet(new long[]{0x0000050002000000L});
    public static final BitSet FOLLOW_col_ref_in_synpred189_QueryParser4456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_PERIOD_in_synpred189_QueryParser4458 = new BitSet(new long[]{0x0080050002000000L});
    public static final BitSet FOLLOW_col_ref_list_in_synpred189_QueryParser4460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_synpred190_QueryParser4521 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred190_QueryParser4523 = new BitSet(new long[]{0xFEFFFDF78E5A7DF0L,0x080FFFFA51C1EC04L});
    public static final BitSet FOLLOW_expr_in_synpred190_QueryParser4525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred199_QueryParser4840 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_SEMI_COLON_in_synpred199_QueryParser4842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred207_QueryParser5003 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_split_branch_in_synpred207_QueryParser5005 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_identifier_in_synpred287_QueryParser5946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_keyword_in_synpred288_QueryParser5954 = new BitSet(new long[]{0x0000000000000002L});

}