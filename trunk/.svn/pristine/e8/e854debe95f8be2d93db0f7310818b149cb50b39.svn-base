// $ANTLR 3.4 /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g 2012-02-22 16:40:36

package org.apache.pig.parser;

import java.util.HashSet;
import java.util.Set;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;


/**
 * Grammar file for Pig tree parser (visitor for default data type insertion).
 *
 * NOTE: THIS FILE IS BASED ON QueryParser.g, SO IF YOU CHANGE THAT FILE, YOU WILL 
 *       PROBABLY NEED TO MAKE CORRESPONDING CHANGES TO THIS FILE AS WELL.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class AliasMasker extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "AND", "AS", "ASC", "BAG", "BOOLEAN", "BY", "BYTEARRAY", "CACHE", "CHARARRAY", "COGROUP", "COLON", "COMMA", "CROSS", "DCOLON", "DEFINE", "DESC", "DIGIT", "DISTINCT", "DIV", "DOLLAR", "DOLLARVAR", "DOUBLE", "DOUBLENUMBER", "DOUBLE_PERIOD", "EQUAL", "EXECCOMMAND", "FALSE", "FILTER", "FLATTEN", "FLOAT", "FLOATINGPOINT", "FLOATNUMBER", "FOREACH", "FULL", "GENERATE", "GROUP", "ID", "IDENTIFIER_L", "IF", "IMPORT", "INNER", "INPUT", "INT", "INTEGER", "INTO", "IS", "JOIN", "LEFT", "LEFT_BRACKET", "LEFT_CURLY", "LEFT_PAREN", "LETTER", "LIMIT", "LOAD", "LONG", "LONGINTEGER", "MAP", "MAPREDUCE", "MINUS", "ML_COMMENT", "MULTILINE_QUOTEDSTRING", "NOT", "NUM_OP_EQ", "NUM_OP_GT", "NUM_OP_GTE", "NUM_OP_LT", "NUM_OP_LTE", "NUM_OP_NE", "ONSCHEMA", "OR", "ORDER", "OTHERWISE", "OUTER", "OUTPUT", "PARALLEL", "PARTITION", "PERCENT", "PERIOD", "PLUS", "POUND", "QMARK", "QUOTEDSTRING", "RETURNS", "RIGHT", "RIGHT_BRACKET", "RIGHT_CURLY", "RIGHT_PAREN", "SAMPLE", "SEMI_COLON", "SHIP", "SL_COMMENT", "SPECIALCHAR", "SPLIT", "STAR", "STDERROR", "STDIN", "STDOUT", "STORE", "STREAM", "STR_OP_EQ", "STR_OP_GT", "STR_OP_GTE", "STR_OP_LT", "STR_OP_LTE", "STR_OP_MATCHES", "STR_OP_NE", "THROUGH", "TRUE", "TUPLE", "UNION", "USING", "VOID", "WS", "ANY", "BAG_TYPE", "BAG_TYPE_CAST", "BAG_VAL", "BIN_EXPR", "BOOL", "CAST_EXPR", "COL_RANGE", "EXPR_IN_PAREN", "FIELD_DEF", "FIELD_DEF_WITHOUT_IDENTIFIER", "FOREACH_PLAN_COMPLEX", "FOREACH_PLAN_SIMPLE", "FUNC", "FUNC_EVAL", "FUNC_REF", "IDENTIFIER", "JOIN_ITEM", "KEY_VAL_PAIR", "MACRO_BODY", "MACRO_DEF", "MACRO_INLINE", "MAP_TYPE", "MAP_VAL", "NEG", "NESTED_CMD", "NESTED_CMD_ASSI", "NESTED_PROJ", "NULL", "PARAMS", "QUERY", "RETURN_VAL", "SPLIT_BRANCH", "STATEMENT", "TOBAG", "TOMAP", "TOTUPLE", "TUPLE_TYPE", "TUPLE_TYPE_CAST", "TUPLE_VAL", "EVAL", "MATCHES"
    };

    public static final int EOF=-1;
    public static final int ALL=4;
    public static final int AND=5;
    public static final int AS=6;
    public static final int ASC=7;
    public static final int BAG=8;
    public static final int BOOLEAN=9;
    public static final int BY=10;
    public static final int BYTEARRAY=11;
    public static final int CACHE=12;
    public static final int CHARARRAY=13;
    public static final int COGROUP=14;
    public static final int COLON=15;
    public static final int COMMA=16;
    public static final int CROSS=17;
    public static final int DCOLON=18;
    public static final int DEFINE=19;
    public static final int DESC=20;
    public static final int DIGIT=21;
    public static final int DISTINCT=22;
    public static final int DIV=23;
    public static final int DOLLAR=24;
    public static final int DOLLARVAR=25;
    public static final int DOUBLE=26;
    public static final int DOUBLENUMBER=27;
    public static final int DOUBLE_PERIOD=28;
    public static final int EQUAL=29;
    public static final int EXECCOMMAND=30;
    public static final int FALSE=31;
    public static final int FILTER=32;
    public static final int FLATTEN=33;
    public static final int FLOAT=34;
    public static final int FLOATINGPOINT=35;
    public static final int FLOATNUMBER=36;
    public static final int FOREACH=37;
    public static final int FULL=38;
    public static final int GENERATE=39;
    public static final int GROUP=40;
    public static final int ID=41;
    public static final int IDENTIFIER_L=42;
    public static final int IF=43;
    public static final int IMPORT=44;
    public static final int INNER=45;
    public static final int INPUT=46;
    public static final int INT=47;
    public static final int INTEGER=48;
    public static final int INTO=49;
    public static final int IS=50;
    public static final int JOIN=51;
    public static final int LEFT=52;
    public static final int LEFT_BRACKET=53;
    public static final int LEFT_CURLY=54;
    public static final int LEFT_PAREN=55;
    public static final int LETTER=56;
    public static final int LIMIT=57;
    public static final int LOAD=58;
    public static final int LONG=59;
    public static final int LONGINTEGER=60;
    public static final int MAP=61;
    public static final int MAPREDUCE=62;
    public static final int MINUS=63;
    public static final int ML_COMMENT=64;
    public static final int MULTILINE_QUOTEDSTRING=65;
    public static final int NOT=66;
    public static final int NUM_OP_EQ=67;
    public static final int NUM_OP_GT=68;
    public static final int NUM_OP_GTE=69;
    public static final int NUM_OP_LT=70;
    public static final int NUM_OP_LTE=71;
    public static final int NUM_OP_NE=72;
    public static final int ONSCHEMA=73;
    public static final int OR=74;
    public static final int ORDER=75;
    public static final int OTHERWISE=76;
    public static final int OUTER=77;
    public static final int OUTPUT=78;
    public static final int PARALLEL=79;
    public static final int PARTITION=80;
    public static final int PERCENT=81;
    public static final int PERIOD=82;
    public static final int PLUS=83;
    public static final int POUND=84;
    public static final int QMARK=85;
    public static final int QUOTEDSTRING=86;
    public static final int RETURNS=87;
    public static final int RIGHT=88;
    public static final int RIGHT_BRACKET=89;
    public static final int RIGHT_CURLY=90;
    public static final int RIGHT_PAREN=91;
    public static final int SAMPLE=92;
    public static final int SEMI_COLON=93;
    public static final int SHIP=94;
    public static final int SL_COMMENT=95;
    public static final int SPECIALCHAR=96;
    public static final int SPLIT=97;
    public static final int STAR=98;
    public static final int STDERROR=99;
    public static final int STDIN=100;
    public static final int STDOUT=101;
    public static final int STORE=102;
    public static final int STREAM=103;
    public static final int STR_OP_EQ=104;
    public static final int STR_OP_GT=105;
    public static final int STR_OP_GTE=106;
    public static final int STR_OP_LT=107;
    public static final int STR_OP_LTE=108;
    public static final int STR_OP_MATCHES=109;
    public static final int STR_OP_NE=110;
    public static final int THROUGH=111;
    public static final int TRUE=112;
    public static final int TUPLE=113;
    public static final int UNION=114;
    public static final int USING=115;
    public static final int VOID=116;
    public static final int WS=117;
    public static final int ANY=118;
    public static final int BAG_TYPE=119;
    public static final int BAG_TYPE_CAST=120;
    public static final int BAG_VAL=121;
    public static final int BIN_EXPR=122;
    public static final int BOOL=123;
    public static final int CAST_EXPR=124;
    public static final int COL_RANGE=125;
    public static final int EXPR_IN_PAREN=126;
    public static final int FIELD_DEF=127;
    public static final int FIELD_DEF_WITHOUT_IDENTIFIER=128;
    public static final int FOREACH_PLAN_COMPLEX=129;
    public static final int FOREACH_PLAN_SIMPLE=130;
    public static final int FUNC=131;
    public static final int FUNC_EVAL=132;
    public static final int FUNC_REF=133;
    public static final int IDENTIFIER=134;
    public static final int JOIN_ITEM=135;
    public static final int KEY_VAL_PAIR=136;
    public static final int MACRO_BODY=137;
    public static final int MACRO_DEF=138;
    public static final int MACRO_INLINE=139;
    public static final int MAP_TYPE=140;
    public static final int MAP_VAL=141;
    public static final int NEG=142;
    public static final int NESTED_CMD=143;
    public static final int NESTED_CMD_ASSI=144;
    public static final int NESTED_PROJ=145;
    public static final int NULL=146;
    public static final int PARAMS=147;
    public static final int QUERY=148;
    public static final int RETURN_VAL=149;
    public static final int SPLIT_BRANCH=150;
    public static final int STATEMENT=151;
    public static final int TOBAG=152;
    public static final int TOMAP=153;
    public static final int TOTUPLE=154;
    public static final int TUPLE_TYPE=155;
    public static final int TUPLE_TYPE_CAST=156;
    public static final int TUPLE_VAL=157;
    public static final int EVAL=158;
    public static final int MATCHES=159;

    // delegates
    public TreeParser[] getDelegates() {
        return new TreeParser[] {};
    }

    // delegators


    public AliasMasker(TreeNodeStream input) {
        this(input, new RecognizerSharedState());
    }
    public AliasMasker(TreeNodeStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return AliasMasker.tokenNames; }
    public String getGrammarFileName() { return "/nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g"; }



    @Override
    public String getErrorMessage(RecognitionException e, String[] tokenNames) {
    	if (e instanceof ParserValidationException) {
    		return e.toString();
    	} 
    	return super.getErrorMessage(e, tokenNames);
    }

    public void setParams(Set ps, String macro, long idx) {
        params = ps; 
        macroName = macro;
        index = idx;
    }

    private String getMask(String alias) {
        return params.contains( alias ) 
            ? alias 
            : "macro_" + macroName + "_" + alias + "_" + index;
    }

    private Set<String> params = new HashSet<String>();

    private Set<String> aliasSeen = new HashSet<String>();

    private String macroName = "";

    private long index = 0;

    private boolean inAsOrGenClause = false;



    public static class query_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:82:1: query : ^( QUERY ( statement )* ) ;
    public final AliasMasker.query_return query() throws RecognitionException {
        AliasMasker.query_return retval = new AliasMasker.query_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUERY1=null;
        AliasMasker.statement_return statement2 =null;


        CommonTree QUERY1_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:82:7: ( ^( QUERY ( statement )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:82:9: ^( QUERY ( statement )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            QUERY1=(CommonTree)match(input,QUERY,FOLLOW_QUERY_in_query81); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUERY1_tree = (CommonTree)adaptor.dupNode(QUERY1);


            root_1 = (CommonTree)adaptor.becomeRoot(QUERY1_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:82:18: ( statement )*
                loop1:
                do {
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==SPLIT||LA1_0==STATEMENT) ) {
                        alt1=1;
                    }


                    switch (alt1) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:82:18: statement
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_statement_in_query83);
                	    statement2=statement();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, statement2.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop1;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query"


    public static class statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:85:1: statement : ( general_statement | split_statement );
    public final AliasMasker.statement_return statement() throws RecognitionException {
        AliasMasker.statement_return retval = new AliasMasker.statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.general_statement_return general_statement3 =null;

        AliasMasker.split_statement_return split_statement4 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:85:11: ( general_statement | split_statement )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==STATEMENT) ) {
                alt2=1;
            }
            else if ( (LA2_0==SPLIT) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:85:13: general_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_general_statement_in_statement95);
                    general_statement3=general_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, general_statement3.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:86:13: split_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_statement_in_statement109);
                    split_statement4=split_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, split_statement4.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class split_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:89:1: split_statement : split_clause ;
    public final AliasMasker.split_statement_return split_statement() throws RecognitionException {
        AliasMasker.split_statement_return retval = new AliasMasker.split_statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.split_clause_return split_clause5 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:89:17: ( split_clause )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:89:19: split_clause
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_split_clause_in_split_statement118);
            split_clause5=split_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, split_clause5.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_statement"


    public static class general_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_statement"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:93:1: general_statement : ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) ;
    public final AliasMasker.general_statement_return general_statement() throws RecognitionException {
        AliasMasker.general_statement_return retval = new AliasMasker.general_statement_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STATEMENT6=null;
        AliasMasker.alias_return alias7 =null;

        AliasMasker.op_clause_return op_clause8 =null;

        AliasMasker.parallel_clause_return parallel_clause9 =null;


        CommonTree STATEMENT6_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:94:5: ( ^( STATEMENT ( alias )? op_clause ( parallel_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:94:7: ^( STATEMENT ( alias )? op_clause ( parallel_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STATEMENT6=(CommonTree)match(input,STATEMENT,FOLLOW_STATEMENT_in_general_statement135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STATEMENT6_tree = (CommonTree)adaptor.dupNode(STATEMENT6);


            root_1 = (CommonTree)adaptor.becomeRoot(STATEMENT6_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:94:20: ( alias )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==IDENTIFIER) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:94:22: alias
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_general_statement139);
                    alias7=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, alias7.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_op_clause_in_general_statement153);
            op_clause8=op_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, op_clause8.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:95:19: ( parallel_clause )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==PARALLEL) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:95:19: parallel_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_parallel_clause_in_general_statement155);
                    parallel_clause9=parallel_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, parallel_clause9.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_statement"


    public static class parallel_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:98:1: parallel_clause : ^( PARALLEL INTEGER ) ;
    public final AliasMasker.parallel_clause_return parallel_clause() throws RecognitionException {
        AliasMasker.parallel_clause_return retval = new AliasMasker.parallel_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PARALLEL10=null;
        CommonTree INTEGER11=null;

        CommonTree PARALLEL10_tree=null;
        CommonTree INTEGER11_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:99:5: ( ^( PARALLEL INTEGER ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:99:7: ^( PARALLEL INTEGER )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PARALLEL10=(CommonTree)match(input,PARALLEL,FOLLOW_PARALLEL_in_parallel_clause175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARALLEL10_tree = (CommonTree)adaptor.dupNode(PARALLEL10);


            root_1 = (CommonTree)adaptor.becomeRoot(PARALLEL10_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            INTEGER11=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_parallel_clause177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INTEGER11_tree = (CommonTree)adaptor.dupNode(INTEGER11);


            adaptor.addChild(root_1, INTEGER11_tree);
            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_clause"


    public static class alias_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:102:1: alias : IDENTIFIER ;
    public final AliasMasker.alias_return alias() throws RecognitionException {
        AliasMasker.alias_return retval = new AliasMasker.alias_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree IDENTIFIER12=null;

        CommonTree IDENTIFIER12_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:103:5: ( IDENTIFIER )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:103:7: IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            IDENTIFIER12=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER12_tree = (CommonTree)adaptor.dupNode(IDENTIFIER12);


            adaptor.addChild(root_0, IDENTIFIER12_tree);
            }


            if ( state.backtracking==0 ) { 
                        aliasSeen.add((IDENTIFIER12!=null?IDENTIFIER12.getText():null)); 
                        IDENTIFIER12.getToken().setText(getMask((IDENTIFIER12!=null?IDENTIFIER12.getText():null))); 
                    }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias"


    public static class op_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:110:1: op_clause : ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause | split_clause | foreach_clause );
    public final AliasMasker.op_clause_return op_clause() throws RecognitionException {
        AliasMasker.op_clause_return retval = new AliasMasker.op_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.define_clause_return define_clause13 =null;

        AliasMasker.load_clause_return load_clause14 =null;

        AliasMasker.group_clause_return group_clause15 =null;

        AliasMasker.store_clause_return store_clause16 =null;

        AliasMasker.filter_clause_return filter_clause17 =null;

        AliasMasker.distinct_clause_return distinct_clause18 =null;

        AliasMasker.limit_clause_return limit_clause19 =null;

        AliasMasker.sample_clause_return sample_clause20 =null;

        AliasMasker.order_clause_return order_clause21 =null;

        AliasMasker.cross_clause_return cross_clause22 =null;

        AliasMasker.join_clause_return join_clause23 =null;

        AliasMasker.union_clause_return union_clause24 =null;

        AliasMasker.stream_clause_return stream_clause25 =null;

        AliasMasker.mr_clause_return mr_clause26 =null;

        AliasMasker.split_clause_return split_clause27 =null;

        AliasMasker.foreach_clause_return foreach_clause28 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:110:11: ( define_clause | load_clause | group_clause | store_clause | filter_clause | distinct_clause | limit_clause | sample_clause | order_clause | cross_clause | join_clause | union_clause | stream_clause | mr_clause | split_clause | foreach_clause )
            int alt5=16;
            switch ( input.LA(1) ) {
            case DEFINE:
                {
                alt5=1;
                }
                break;
            case LOAD:
                {
                alt5=2;
                }
                break;
            case COGROUP:
            case GROUP:
                {
                alt5=3;
                }
                break;
            case STORE:
                {
                alt5=4;
                }
                break;
            case FILTER:
                {
                alt5=5;
                }
                break;
            case DISTINCT:
                {
                alt5=6;
                }
                break;
            case LIMIT:
                {
                alt5=7;
                }
                break;
            case SAMPLE:
                {
                alt5=8;
                }
                break;
            case ORDER:
                {
                alt5=9;
                }
                break;
            case CROSS:
                {
                alt5=10;
                }
                break;
            case JOIN:
                {
                alt5=11;
                }
                break;
            case UNION:
                {
                alt5=12;
                }
                break;
            case STREAM:
                {
                alt5=13;
                }
                break;
            case MAPREDUCE:
                {
                alt5=14;
                }
                break;
            case SPLIT:
                {
                alt5=15;
                }
                break;
            case FOREACH:
                {
                alt5=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:110:13: define_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_define_clause_in_op_clause214);
                    define_clause13=define_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, define_clause13.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:111:13: load_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_load_clause_in_op_clause229);
                    load_clause14=load_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, load_clause14.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:112:13: group_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_group_clause_in_op_clause243);
                    group_clause15=group_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, group_clause15.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:113:13: store_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_store_clause_in_op_clause257);
                    store_clause16=store_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, store_clause16.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:114:13: filter_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_filter_clause_in_op_clause271);
                    filter_clause17=filter_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, filter_clause17.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:115:13: distinct_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_distinct_clause_in_op_clause285);
                    distinct_clause18=distinct_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, distinct_clause18.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:116:13: limit_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_limit_clause_in_op_clause299);
                    limit_clause19=limit_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, limit_clause19.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:117:13: sample_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sample_clause_in_op_clause313);
                    sample_clause20=sample_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sample_clause20.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:118:13: order_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_order_clause_in_op_clause327);
                    order_clause21=order_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, order_clause21.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:119:13: cross_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cross_clause_in_op_clause341);
                    cross_clause22=cross_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cross_clause22.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:120:13: join_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_clause_in_op_clause355);
                    join_clause23=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_clause23.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:121:13: union_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_union_clause_in_op_clause369);
                    union_clause24=union_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, union_clause24.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:122:13: stream_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_stream_clause_in_op_clause383);
                    stream_clause25=stream_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, stream_clause25.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:123:13: mr_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_mr_clause_in_op_clause397);
                    mr_clause26=mr_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, mr_clause26.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:124:13: split_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_clause_in_op_clause411);
                    split_clause27=split_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, split_clause27.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:125:13: foreach_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_foreach_clause_in_op_clause425);
                    foreach_clause28=foreach_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, foreach_clause28.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_clause"


    public static class define_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:128:1: define_clause : ^( DEFINE IDENTIFIER ( cmd | func_clause ) ) ;
    public final AliasMasker.define_clause_return define_clause() throws RecognitionException {
        AliasMasker.define_clause_return retval = new AliasMasker.define_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DEFINE29=null;
        CommonTree IDENTIFIER30=null;
        AliasMasker.cmd_return cmd31 =null;

        AliasMasker.func_clause_return func_clause32 =null;


        CommonTree DEFINE29_tree=null;
        CommonTree IDENTIFIER30_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:129:5: ( ^( DEFINE IDENTIFIER ( cmd | func_clause ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:129:7: ^( DEFINE IDENTIFIER ( cmd | func_clause ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DEFINE29=(CommonTree)match(input,DEFINE,FOLLOW_DEFINE_in_define_clause441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFINE29_tree = (CommonTree)adaptor.dupNode(DEFINE29);


            root_1 = (CommonTree)adaptor.becomeRoot(DEFINE29_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            IDENTIFIER30=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_define_clause443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER30_tree = (CommonTree)adaptor.dupNode(IDENTIFIER30);


            adaptor.addChild(root_1, IDENTIFIER30_tree);
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:129:29: ( cmd | func_clause )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==EXECCOMMAND) ) {
                alt6=1;
            }
            else if ( (LA6_0==FUNC||LA6_0==FUNC_REF) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:129:31: cmd
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cmd_in_define_clause448);
                    cmd31=cmd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cmd31.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:129:37: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_define_clause452);
                    func_clause32=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause32.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_clause"


    public static class cmd_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:132:1: cmd : ^( EXECCOMMAND ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ) ;
    public final AliasMasker.cmd_return cmd() throws RecognitionException {
        AliasMasker.cmd_return retval = new AliasMasker.cmd_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree EXECCOMMAND33=null;
        AliasMasker.ship_clause_return ship_clause34 =null;

        AliasMasker.cache_clause_return cache_clause35 =null;

        AliasMasker.input_clause_return input_clause36 =null;

        AliasMasker.output_clause_return output_clause37 =null;

        AliasMasker.error_clause_return error_clause38 =null;


        CommonTree EXECCOMMAND33_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:133:5: ( ^( EXECCOMMAND ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:133:7: ^( EXECCOMMAND ( ship_clause | cache_clause | input_clause | output_clause | error_clause )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            EXECCOMMAND33=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_cmd472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXECCOMMAND33_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND33);


            root_1 = (CommonTree)adaptor.becomeRoot(EXECCOMMAND33_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:134:9: ( ship_clause | cache_clause | input_clause | output_clause | error_clause )*
                loop7:
                do {
                    int alt7=6;
                    switch ( input.LA(1) ) {
                    case SHIP:
                        {
                        alt7=1;
                        }
                        break;
                    case CACHE:
                        {
                        alt7=2;
                        }
                        break;
                    case INPUT:
                        {
                        alt7=3;
                        }
                        break;
                    case OUTPUT:
                        {
                        alt7=4;
                        }
                        break;
                    case STDERROR:
                        {
                        alt7=5;
                        }
                        break;

                    }

                    switch (alt7) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:134:11: ship_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_ship_clause_in_cmd485);
                	    ship_clause34=ship_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, ship_clause34.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 2 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:134:25: cache_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_cache_clause_in_cmd489);
                	    cache_clause35=cache_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, cache_clause35.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 3 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:134:40: input_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_input_clause_in_cmd493);
                	    input_clause36=input_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, input_clause36.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 4 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:134:55: output_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_output_clause_in_cmd497);
                	    output_clause37=output_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, output_clause37.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;
                	case 5 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:134:71: error_clause
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_error_clause_in_cmd501);
                	    error_clause38=error_clause();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, error_clause38.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop7;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmd"


    public static class ship_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ship_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:137:1: ship_clause : ^( SHIP ( path_list )? ) ;
    public final AliasMasker.ship_clause_return ship_clause() throws RecognitionException {
        AliasMasker.ship_clause_return retval = new AliasMasker.ship_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SHIP39=null;
        AliasMasker.path_list_return path_list40 =null;


        CommonTree SHIP39_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:138:5: ( ^( SHIP ( path_list )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:138:7: ^( SHIP ( path_list )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SHIP39=(CommonTree)match(input,SHIP,FOLLOW_SHIP_in_ship_clause522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SHIP39_tree = (CommonTree)adaptor.dupNode(SHIP39);


            root_1 = (CommonTree)adaptor.becomeRoot(SHIP39_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:138:15: ( path_list )?
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==QUOTEDSTRING) ) {
                    alt8=1;
                }
                switch (alt8) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:138:15: path_list
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_path_list_in_ship_clause524);
                        path_list40=path_list();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, path_list40.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ship_clause"


    public static class path_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:141:1: path_list : ( QUOTEDSTRING )+ ;
    public final AliasMasker.path_list_return path_list() throws RecognitionException {
        AliasMasker.path_list_return retval = new AliasMasker.path_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING41=null;

        CommonTree QUOTEDSTRING41_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:142:5: ( ( QUOTEDSTRING )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:142:7: ( QUOTEDSTRING )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:142:7: ( QUOTEDSTRING )+
            int cnt9=0;
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==QUOTEDSTRING) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:142:7: QUOTEDSTRING
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    QUOTEDSTRING41=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_path_list541); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    QUOTEDSTRING41_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING41);


            	    adaptor.addChild(root_0, QUOTEDSTRING41_tree);
            	    }


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt9 >= 1 ) break loop9;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(9, input);
                        throw eee;
                }
                cnt9++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_list"


    public static class cache_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:145:1: cache_clause : ^( CACHE path_list ) ;
    public final AliasMasker.cache_clause_return cache_clause() throws RecognitionException {
        AliasMasker.cache_clause_return retval = new AliasMasker.cache_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CACHE42=null;
        AliasMasker.path_list_return path_list43 =null;


        CommonTree CACHE42_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:146:5: ( ^( CACHE path_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:146:7: ^( CACHE path_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CACHE42=(CommonTree)match(input,CACHE,FOLLOW_CACHE_in_cache_clause559); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CACHE42_tree = (CommonTree)adaptor.dupNode(CACHE42);


            root_1 = (CommonTree)adaptor.becomeRoot(CACHE42_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_path_list_in_cache_clause561);
            path_list43=path_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, path_list43.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_clause"


    public static class input_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "input_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:149:1: input_clause : ^( INPUT ( stream_cmd )+ ) ;
    public final AliasMasker.input_clause_return input_clause() throws RecognitionException {
        AliasMasker.input_clause_return retval = new AliasMasker.input_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree INPUT44=null;
        AliasMasker.stream_cmd_return stream_cmd45 =null;


        CommonTree INPUT44_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:150:5: ( ^( INPUT ( stream_cmd )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:150:7: ^( INPUT ( stream_cmd )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            INPUT44=(CommonTree)match(input,INPUT,FOLLOW_INPUT_in_input_clause579); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INPUT44_tree = (CommonTree)adaptor.dupNode(INPUT44);


            root_1 = (CommonTree)adaptor.becomeRoot(INPUT44_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:150:16: ( stream_cmd )+
            int cnt10=0;
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==QUOTEDSTRING||(LA10_0 >= STDIN && LA10_0 <= STDOUT)) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:150:16: stream_cmd
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_stream_cmd_in_input_clause581);
            	    stream_cmd45=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, stream_cmd45.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt10 >= 1 ) break loop10;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(10, input);
                        throw eee;
                }
                cnt10++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "input_clause"


    public static class stream_cmd_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_cmd"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:153:1: stream_cmd : ( ^( STDIN ( func_clause )? ) | ^( STDOUT ( func_clause )? ) | ^( QUOTEDSTRING ( func_clause )? ) );
    public final AliasMasker.stream_cmd_return stream_cmd() throws RecognitionException {
        AliasMasker.stream_cmd_return retval = new AliasMasker.stream_cmd_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STDIN46=null;
        CommonTree STDOUT48=null;
        CommonTree QUOTEDSTRING50=null;
        AliasMasker.func_clause_return func_clause47 =null;

        AliasMasker.func_clause_return func_clause49 =null;

        AliasMasker.func_clause_return func_clause51 =null;


        CommonTree STDIN46_tree=null;
        CommonTree STDOUT48_tree=null;
        CommonTree QUOTEDSTRING50_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:154:5: ( ^( STDIN ( func_clause )? ) | ^( STDOUT ( func_clause )? ) | ^( QUOTEDSTRING ( func_clause )? ) )
            int alt14=3;
            switch ( input.LA(1) ) {
            case STDIN:
                {
                alt14=1;
                }
                break;
            case STDOUT:
                {
                alt14=2;
                }
                break;
            case QUOTEDSTRING:
                {
                alt14=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:154:7: ^( STDIN ( func_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STDIN46=(CommonTree)match(input,STDIN,FOLLOW_STDIN_in_stream_cmd600); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN46_tree = (CommonTree)adaptor.dupNode(STDIN46);


                    root_1 = (CommonTree)adaptor.becomeRoot(STDIN46_tree, root_1);
                    }


                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:154:16: ( func_clause )?
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==FUNC||LA11_0==FUNC_REF) ) {
                            alt11=1;
                        }
                        switch (alt11) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:154:16: func_clause
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd602);
                                func_clause47=func_clause();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause47.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:155:7: ^( STDOUT ( func_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STDOUT48=(CommonTree)match(input,STDOUT,FOLLOW_STDOUT_in_stream_cmd615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT48_tree = (CommonTree)adaptor.dupNode(STDOUT48);


                    root_1 = (CommonTree)adaptor.becomeRoot(STDOUT48_tree, root_1);
                    }


                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:155:17: ( func_clause )?
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==FUNC||LA12_0==FUNC_REF) ) {
                            alt12=1;
                        }
                        switch (alt12) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:155:17: func_clause
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd617);
                                func_clause49=func_clause();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause49.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:156:7: ^( QUOTEDSTRING ( func_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    QUOTEDSTRING50=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_stream_cmd630); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTEDSTRING50_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING50);


                    root_1 = (CommonTree)adaptor.becomeRoot(QUOTEDSTRING50_tree, root_1);
                    }


                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); if (state.failed) return retval;
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:156:23: ( func_clause )?
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==FUNC||LA13_0==FUNC_REF) ) {
                            alt13=1;
                        }
                        switch (alt13) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:156:23: func_clause
                                {
                                _last = (CommonTree)input.LT(1);
                                pushFollow(FOLLOW_func_clause_in_stream_cmd632);
                                func_clause51=func_clause();

                                state._fsp--;
                                if (state.failed) return retval;
                                if ( state.backtracking==0 ) 
                                adaptor.addChild(root_1, func_clause51.getTree());


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        match(input, Token.UP, null); if (state.failed) return retval;
                    }
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_cmd"


    public static class output_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "output_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:159:1: output_clause : ^( OUTPUT ( stream_cmd )+ ) ;
    public final AliasMasker.output_clause_return output_clause() throws RecognitionException {
        AliasMasker.output_clause_return retval = new AliasMasker.output_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OUTPUT52=null;
        AliasMasker.stream_cmd_return stream_cmd53 =null;


        CommonTree OUTPUT52_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:160:5: ( ^( OUTPUT ( stream_cmd )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:160:7: ^( OUTPUT ( stream_cmd )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            OUTPUT52=(CommonTree)match(input,OUTPUT,FOLLOW_OUTPUT_in_output_clause651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTPUT52_tree = (CommonTree)adaptor.dupNode(OUTPUT52);


            root_1 = (CommonTree)adaptor.becomeRoot(OUTPUT52_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:160:17: ( stream_cmd )+
            int cnt15=0;
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==QUOTEDSTRING||(LA15_0 >= STDIN && LA15_0 <= STDOUT)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:160:17: stream_cmd
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_stream_cmd_in_output_clause653);
            	    stream_cmd53=stream_cmd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, stream_cmd53.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt15 >= 1 ) break loop15;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(15, input);
                        throw eee;
                }
                cnt15++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "output_clause"


    public static class error_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:163:1: error_clause : ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? ) ;
    public final AliasMasker.error_clause_return error_clause() throws RecognitionException {
        AliasMasker.error_clause_return retval = new AliasMasker.error_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STDERROR54=null;
        CommonTree QUOTEDSTRING55=null;
        CommonTree INTEGER56=null;

        CommonTree STDERROR54_tree=null;
        CommonTree QUOTEDSTRING55_tree=null;
        CommonTree INTEGER56_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:164:5: ( ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:164:7: ^( STDERROR ( QUOTEDSTRING ( INTEGER )? )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STDERROR54=(CommonTree)match(input,STDERROR,FOLLOW_STDERROR_in_error_clause672); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STDERROR54_tree = (CommonTree)adaptor.dupNode(STDERROR54);


            root_1 = (CommonTree)adaptor.becomeRoot(STDERROR54_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:164:19: ( QUOTEDSTRING ( INTEGER )? )?
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==QUOTEDSTRING) ) {
                    alt17=1;
                }
                switch (alt17) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:164:21: QUOTEDSTRING ( INTEGER )?
                        {
                        _last = (CommonTree)input.LT(1);
                        QUOTEDSTRING55=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_error_clause676); if (state.failed) return retval;
                        if ( state.backtracking==0 ) {
                        QUOTEDSTRING55_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING55);


                        adaptor.addChild(root_1, QUOTEDSTRING55_tree);
                        }


                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:164:34: ( INTEGER )?
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==INTEGER) ) {
                            alt16=1;
                        }
                        switch (alt16) {
                            case 1 :
                                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:164:34: INTEGER
                                {
                                _last = (CommonTree)input.LT(1);
                                INTEGER56=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_error_clause678); if (state.failed) return retval;
                                if ( state.backtracking==0 ) {
                                INTEGER56_tree = (CommonTree)adaptor.dupNode(INTEGER56);


                                adaptor.addChild(root_1, INTEGER56_tree);
                                }


                                if ( state.backtracking==0 ) {
                                }
                                }
                                break;

                        }


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_clause"


    public static class load_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "load_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:167:1: load_clause : ^( LOAD filename ( func_clause )? ( as_clause )? ) ;
    public final AliasMasker.load_clause_return load_clause() throws RecognitionException {
        AliasMasker.load_clause_return retval = new AliasMasker.load_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LOAD57=null;
        AliasMasker.filename_return filename58 =null;

        AliasMasker.func_clause_return func_clause59 =null;

        AliasMasker.as_clause_return as_clause60 =null;


        CommonTree LOAD57_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:168:5: ( ^( LOAD filename ( func_clause )? ( as_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:168:7: ^( LOAD filename ( func_clause )? ( as_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LOAD57=(CommonTree)match(input,LOAD,FOLLOW_LOAD_in_load_clause700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LOAD57_tree = (CommonTree)adaptor.dupNode(LOAD57);


            root_1 = (CommonTree)adaptor.becomeRoot(LOAD57_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_filename_in_load_clause702);
            filename58=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, filename58.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:168:24: ( func_clause )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FUNC||LA18_0==FUNC_REF) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:168:24: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_load_clause704);
                    func_clause59=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause59.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:168:37: ( as_clause )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==AS) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:168:37: as_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_as_clause_in_load_clause707);
                    as_clause60=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, as_clause60.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "load_clause"


    public static class filename_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filename"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:171:1: filename : QUOTEDSTRING ;
    public final AliasMasker.filename_return filename() throws RecognitionException {
        AliasMasker.filename_return retval = new AliasMasker.filename_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING61=null;

        CommonTree QUOTEDSTRING61_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:172:5: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:172:7: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING61=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_filename724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING61_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING61);


            adaptor.addChild(root_0, QUOTEDSTRING61_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filename"


    public static class as_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:175:1: as_clause : ^( AS field_def_list ) ;
    public final AliasMasker.as_clause_return as_clause() throws RecognitionException {
        AliasMasker.as_clause_return retval = new AliasMasker.as_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree AS62=null;
        AliasMasker.field_def_list_return field_def_list63 =null;


        CommonTree AS62_tree=null;

         
        	inAsOrGenClause = true;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:182:5: ( ^( AS field_def_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:182:7: ^( AS field_def_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            AS62=(CommonTree)match(input,AS,FOLLOW_AS_in_as_clause750); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS62_tree = (CommonTree)adaptor.dupNode(AS62);


            root_1 = (CommonTree)adaptor.becomeRoot(AS62_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_field_def_list_in_as_clause752);
            field_def_list63=field_def_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, field_def_list63.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

            if ( state.backtracking==0 ) { 
            	inAsOrGenClause = false; 
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_clause"


    public static class field_def_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:185:1: field_def : ( ^( FIELD_DEF IDENTIFIER ( type )? ) | ^( FIELD_DEF_WITHOUT_IDENTIFIER type ) );
    public final AliasMasker.field_def_return field_def() throws RecognitionException {
        AliasMasker.field_def_return retval = new AliasMasker.field_def_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FIELD_DEF64=null;
        CommonTree IDENTIFIER65=null;
        CommonTree FIELD_DEF_WITHOUT_IDENTIFIER67=null;
        AliasMasker.type_return type66 =null;

        AliasMasker.type_return type68 =null;


        CommonTree FIELD_DEF64_tree=null;
        CommonTree IDENTIFIER65_tree=null;
        CommonTree FIELD_DEF_WITHOUT_IDENTIFIER67_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:186:5: ( ^( FIELD_DEF IDENTIFIER ( type )? ) | ^( FIELD_DEF_WITHOUT_IDENTIFIER type ) )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==FIELD_DEF) ) {
                alt21=1;
            }
            else if ( (LA21_0==FIELD_DEF_WITHOUT_IDENTIFIER) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }
            switch (alt21) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:186:7: ^( FIELD_DEF IDENTIFIER ( type )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FIELD_DEF64=(CommonTree)match(input,FIELD_DEF,FOLLOW_FIELD_DEF_in_field_def769); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIELD_DEF64_tree = (CommonTree)adaptor.dupNode(FIELD_DEF64);


                    root_1 = (CommonTree)adaptor.becomeRoot(FIELD_DEF64_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER65=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_field_def771); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER65_tree = (CommonTree)adaptor.dupNode(IDENTIFIER65);


                    adaptor.addChild(root_1, IDENTIFIER65_tree);
                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:186:31: ( type )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==BOOLEAN||LA20_0==BYTEARRAY||LA20_0==CHARARRAY||LA20_0==DOUBLE||LA20_0==FLOAT||LA20_0==INT||LA20_0==LONG||LA20_0==BAG_TYPE||LA20_0==MAP_TYPE||LA20_0==TUPLE_TYPE) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:186:31: type
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_type_in_field_def773);
                            type66=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, type66.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    	if (inAsOrGenClause) {
                    		if (aliasSeen.contains((IDENTIFIER65!=null?IDENTIFIER65.getText():null))) {
                    			throw new ParserValidationException(input, new SourceLocation((PigParserNode)((CommonTree)retval.start)), 
                    				"Macro doesn't support user defined schema that contains name that conflicts with alias name: " + (IDENTIFIER65!=null?IDENTIFIER65.getText():null));
                    		}
                    	}
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:194:7: ^( FIELD_DEF_WITHOUT_IDENTIFIER type )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FIELD_DEF_WITHOUT_IDENTIFIER67=(CommonTree)match(input,FIELD_DEF_WITHOUT_IDENTIFIER,FOLLOW_FIELD_DEF_WITHOUT_IDENTIFIER_in_field_def788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIELD_DEF_WITHOUT_IDENTIFIER67_tree = (CommonTree)adaptor.dupNode(FIELD_DEF_WITHOUT_IDENTIFIER67);


                    root_1 = (CommonTree)adaptor.becomeRoot(FIELD_DEF_WITHOUT_IDENTIFIER67_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_in_field_def790);
                    type68=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type68.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def"


    public static class field_def_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_def_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:197:1: field_def_list : ( field_def )+ ;
    public final AliasMasker.field_def_list_return field_def_list() throws RecognitionException {
        AliasMasker.field_def_list_return retval = new AliasMasker.field_def_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.field_def_return field_def69 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:198:5: ( ( field_def )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:198:7: ( field_def )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:198:7: ( field_def )+
            int cnt22=0;
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( ((LA22_0 >= FIELD_DEF && LA22_0 <= FIELD_DEF_WITHOUT_IDENTIFIER)) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:198:7: field_def
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_field_def_in_field_def_list805);
            	    field_def69=field_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, field_def69.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt22 >= 1 ) break loop22;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(22, input);
                        throw eee;
                }
                cnt22++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_def_list"


    public static class type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:201:1: type : ( simple_type | tuple_type | bag_type | map_type );
    public final AliasMasker.type_return type() throws RecognitionException {
        AliasMasker.type_return retval = new AliasMasker.type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.simple_type_return simple_type70 =null;

        AliasMasker.tuple_type_return tuple_type71 =null;

        AliasMasker.bag_type_return bag_type72 =null;

        AliasMasker.map_type_return map_type73 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:201:6: ( simple_type | tuple_type | bag_type | map_type )
            int alt23=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt23=1;
                }
                break;
            case TUPLE_TYPE:
                {
                alt23=2;
                }
                break;
            case BAG_TYPE:
                {
                alt23=3;
                }
                break;
            case MAP_TYPE:
                {
                alt23=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }

            switch (alt23) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:201:8: simple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_type_in_type816);
                    simple_type70=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_type70.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:201:22: tuple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_type_in_type820);
                    tuple_type71=tuple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple_type71.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:201:35: bag_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_type_in_type824);
                    bag_type72=bag_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag_type72.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:201:46: map_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_type_in_type828);
                    map_type73=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map_type73.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class simple_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:204:1: simple_type : ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY );
    public final AliasMasker.simple_type_return simple_type() throws RecognitionException {
        AliasMasker.simple_type_return retval = new AliasMasker.simple_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set74=null;

        CommonTree set74_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:205:5: ( BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set74=(CommonTree)input.LT(1);

            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTEARRAY||input.LA(1)==CHARARRAY||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set74_tree = (CommonTree)adaptor.dupNode(set74);


                adaptor.addChild(root_0, set74_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_type"


    public static class tuple_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:208:1: tuple_type : ^( TUPLE_TYPE ( field_def_list )? ) ;
    public final AliasMasker.tuple_type_return tuple_type() throws RecognitionException {
        AliasMasker.tuple_type_return retval = new AliasMasker.tuple_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_TYPE75=null;
        AliasMasker.field_def_list_return field_def_list76 =null;


        CommonTree TUPLE_TYPE75_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:209:5: ( ^( TUPLE_TYPE ( field_def_list )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:209:7: ^( TUPLE_TYPE ( field_def_list )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_TYPE75=(CommonTree)match(input,TUPLE_TYPE,FOLLOW_TUPLE_TYPE_in_tuple_type883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_TYPE75_tree = (CommonTree)adaptor.dupNode(TUPLE_TYPE75);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_TYPE75_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:209:21: ( field_def_list )?
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( ((LA24_0 >= FIELD_DEF && LA24_0 <= FIELD_DEF_WITHOUT_IDENTIFIER)) ) {
                    alt24=1;
                }
                switch (alt24) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:209:21: field_def_list
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_field_def_list_in_tuple_type885);
                        field_def_list76=field_def_list();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, field_def_list76.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type"


    public static class bag_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:212:1: bag_type : ^( BAG_TYPE ( IDENTIFIER )? ( tuple_type )? ) ;
    public final AliasMasker.bag_type_return bag_type() throws RecognitionException {
        AliasMasker.bag_type_return retval = new AliasMasker.bag_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_TYPE77=null;
        CommonTree IDENTIFIER78=null;
        AliasMasker.tuple_type_return tuple_type79 =null;


        CommonTree BAG_TYPE77_tree=null;
        CommonTree IDENTIFIER78_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:213:5: ( ^( BAG_TYPE ( IDENTIFIER )? ( tuple_type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:213:7: ^( BAG_TYPE ( IDENTIFIER )? ( tuple_type )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_TYPE77=(CommonTree)match(input,BAG_TYPE,FOLLOW_BAG_TYPE_in_bag_type904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_TYPE77_tree = (CommonTree)adaptor.dupNode(BAG_TYPE77);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_TYPE77_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:213:19: ( IDENTIFIER )?
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==IDENTIFIER) ) {
                    alt25=1;
                }
                switch (alt25) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:213:19: IDENTIFIER
                        {
                        _last = (CommonTree)input.LT(1);
                        IDENTIFIER78=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_bag_type906); if (state.failed) return retval;
                        if ( state.backtracking==0 ) {
                        IDENTIFIER78_tree = (CommonTree)adaptor.dupNode(IDENTIFIER78);


                        adaptor.addChild(root_1, IDENTIFIER78_tree);
                        }


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:213:31: ( tuple_type )?
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==TUPLE_TYPE) ) {
                    alt26=1;
                }
                switch (alt26) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:213:31: tuple_type
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_tuple_type_in_bag_type909);
                        tuple_type79=tuple_type();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, tuple_type79.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type"


    public static class map_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:216:1: map_type : ^( MAP_TYPE ( type )? ) ;
    public final AliasMasker.map_type_return map_type() throws RecognitionException {
        AliasMasker.map_type_return retval = new AliasMasker.map_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAP_TYPE80=null;
        AliasMasker.type_return type81 =null;


        CommonTree MAP_TYPE80_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:216:10: ( ^( MAP_TYPE ( type )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:216:12: ^( MAP_TYPE ( type )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAP_TYPE80=(CommonTree)match(input,MAP_TYPE,FOLLOW_MAP_TYPE_in_map_type923); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAP_TYPE80_tree = (CommonTree)adaptor.dupNode(MAP_TYPE80);


            root_1 = (CommonTree)adaptor.becomeRoot(MAP_TYPE80_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:216:24: ( type )?
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==BOOLEAN||LA27_0==BYTEARRAY||LA27_0==CHARARRAY||LA27_0==DOUBLE||LA27_0==FLOAT||LA27_0==INT||LA27_0==LONG||LA27_0==BAG_TYPE||LA27_0==MAP_TYPE||LA27_0==TUPLE_TYPE) ) {
                    alt27=1;
                }
                switch (alt27) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:216:24: type
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_type_in_map_type925);
                        type81=type();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, type81.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_type"


    public static class func_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:219:1: func_clause : ( ^( FUNC_REF func_name ) | ^( FUNC func_name ( func_args )? ) );
    public final AliasMasker.func_clause_return func_clause() throws RecognitionException {
        AliasMasker.func_clause_return retval = new AliasMasker.func_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FUNC_REF82=null;
        CommonTree FUNC84=null;
        AliasMasker.func_name_return func_name83 =null;

        AliasMasker.func_name_return func_name85 =null;

        AliasMasker.func_args_return func_args86 =null;


        CommonTree FUNC_REF82_tree=null;
        CommonTree FUNC84_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:220:5: ( ^( FUNC_REF func_name ) | ^( FUNC func_name ( func_args )? ) )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==FUNC_REF) ) {
                alt29=1;
            }
            else if ( (LA29_0==FUNC) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:220:7: ^( FUNC_REF func_name )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC_REF82=(CommonTree)match(input,FUNC_REF,FOLLOW_FUNC_REF_in_func_clause944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC_REF82_tree = (CommonTree)adaptor.dupNode(FUNC_REF82);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC_REF82_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_clause946);
                    func_name83=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name83.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:221:7: ^( FUNC func_name ( func_args )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FUNC84=(CommonTree)match(input,FUNC,FOLLOW_FUNC_in_func_clause958); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNC84_tree = (CommonTree)adaptor.dupNode(FUNC84);


                    root_1 = (CommonTree)adaptor.becomeRoot(FUNC84_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_name_in_func_clause960);
                    func_name85=func_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_name85.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:221:25: ( func_args )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==QUOTEDSTRING) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:221:25: func_args
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_func_args_in_func_clause962);
                            func_args86=func_args();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, func_args86.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_clause"


    public static class func_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_name"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:224:1: func_name : eid ( ( PERIOD | DOLLAR ) eid )* ;
    public final AliasMasker.func_name_return func_name() throws RecognitionException {
        AliasMasker.func_name_return retval = new AliasMasker.func_name_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set88=null;
        AliasMasker.eid_return eid87 =null;

        AliasMasker.eid_return eid89 =null;


        CommonTree set88_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:225:5: ( eid ( ( PERIOD | DOLLAR ) eid )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:225:7: eid ( ( PERIOD | DOLLAR ) eid )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_eid_in_func_name979);
            eid87=eid();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, eid87.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:225:11: ( ( PERIOD | DOLLAR ) eid )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==DOLLAR||LA30_0==PERIOD) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:225:13: ( PERIOD | DOLLAR ) eid
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    set88=(CommonTree)input.LT(1);

            	    if ( input.LA(1)==DOLLAR||input.LA(1)==PERIOD ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) {
            	        set88_tree = (CommonTree)adaptor.dupNode(set88);


            	        adaptor.addChild(root_0, set88_tree);
            	        }

            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_eid_in_func_name993);
            	    eid89=eid();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, eid89.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_name"


    public static class func_args_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_args"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:228:1: func_args : ( QUOTEDSTRING )+ ;
    public final AliasMasker.func_args_return func_args() throws RecognitionException {
        AliasMasker.func_args_return retval = new AliasMasker.func_args_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING90=null;

        CommonTree QUOTEDSTRING90_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:229:5: ( ( QUOTEDSTRING )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:229:7: ( QUOTEDSTRING )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:229:7: ( QUOTEDSTRING )+
            int cnt31=0;
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==QUOTEDSTRING) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:229:7: QUOTEDSTRING
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    QUOTEDSTRING90=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_func_args1010); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    QUOTEDSTRING90_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING90);


            	    adaptor.addChild(root_0, QUOTEDSTRING90_tree);
            	    }


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt31 >= 1 ) break loop31;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(31, input);
                        throw eee;
                }
                cnt31++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_args"


    public static class group_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:232:1: group_clause : ^( ( GROUP | COGROUP ) ( group_item )+ ( group_type )? ( partition_clause )? ) ;
    public final AliasMasker.group_clause_return group_clause() throws RecognitionException {
        AliasMasker.group_clause_return retval = new AliasMasker.group_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set91=null;
        AliasMasker.group_item_return group_item92 =null;

        AliasMasker.group_type_return group_type93 =null;

        AliasMasker.partition_clause_return partition_clause94 =null;


        CommonTree set91_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:233:5: ( ^( ( GROUP | COGROUP ) ( group_item )+ ( group_type )? ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:233:7: ^( ( GROUP | COGROUP ) ( group_item )+ ( group_type )? ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            set91=(CommonTree)input.LT(1);

            if ( input.LA(1)==COGROUP||input.LA(1)==GROUP ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set91_tree = (CommonTree)adaptor.dupNode(set91);


                root_1 = (CommonTree)adaptor.becomeRoot(set91_tree, root_1);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:233:30: ( group_item )+
            int cnt32=0;
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==COGROUP||LA32_0==CROSS||LA32_0==DEFINE||LA32_0==DISTINCT||LA32_0==FILTER||LA32_0==FOREACH||LA32_0==GROUP||LA32_0==JOIN||(LA32_0 >= LIMIT && LA32_0 <= LOAD)||LA32_0==MAPREDUCE||LA32_0==ORDER||LA32_0==SAMPLE||LA32_0==SPLIT||(LA32_0 >= STORE && LA32_0 <= STREAM)||LA32_0==UNION||LA32_0==IDENTIFIER) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:233:30: group_item
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_group_item_in_group_clause1037);
            	    group_item92=group_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, group_item92.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt32 >= 1 ) break loop32;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(32, input);
                        throw eee;
                }
                cnt32++;
            } while (true);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:233:42: ( group_type )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==QUOTEDSTRING) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:233:42: group_type
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_group_type_in_group_clause1040);
                    group_type93=group_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, group_type93.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:233:54: ( partition_clause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==PARTITION) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:233:54: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_group_clause1043);
                    partition_clause94=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause94.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_clause"


    public static class group_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:236:1: group_type : QUOTEDSTRING ;
    public final AliasMasker.group_type_return group_type() throws RecognitionException {
        AliasMasker.group_type_return retval = new AliasMasker.group_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING95=null;

        CommonTree QUOTEDSTRING95_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:236:12: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:236:14: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING95=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_group_type1055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING95_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING95);


            adaptor.addChild(root_0, QUOTEDSTRING95_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_type"


    public static class group_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:239:1: group_item : rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? ;
    public final AliasMasker.group_item_return group_item() throws RecognitionException {
        AliasMasker.group_item_return retval = new AliasMasker.group_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ALL98=null;
        CommonTree ANY99=null;
        CommonTree set100=null;
        AliasMasker.rel_return rel96 =null;

        AliasMasker.join_group_by_clause_return join_group_by_clause97 =null;


        CommonTree ALL98_tree=null;
        CommonTree ANY99_tree=null;
        CommonTree set100_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:240:5: ( rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:240:7: rel ( join_group_by_clause | ALL | ANY ) ( INNER | OUTER )?
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_group_item1069);
            rel96=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, rel96.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:240:11: ( join_group_by_clause | ALL | ANY )
            int alt35=3;
            switch ( input.LA(1) ) {
            case BY:
                {
                alt35=1;
                }
                break;
            case ALL:
                {
                alt35=2;
                }
                break;
            case ANY:
                {
                alt35=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }

            switch (alt35) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:240:13: join_group_by_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_group_by_clause_in_group_item1073);
                    join_group_by_clause97=join_group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_group_by_clause97.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:240:36: ALL
                    {
                    _last = (CommonTree)input.LT(1);
                    ALL98=(CommonTree)match(input,ALL,FOLLOW_ALL_in_group_item1077); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL98_tree = (CommonTree)adaptor.dupNode(ALL98);


                    adaptor.addChild(root_0, ALL98_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:240:42: ANY
                    {
                    _last = (CommonTree)input.LT(1);
                    ANY99=(CommonTree)match(input,ANY,FOLLOW_ANY_in_group_item1081); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANY99_tree = (CommonTree)adaptor.dupNode(ANY99);


                    adaptor.addChild(root_0, ANY99_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:240:48: ( INNER | OUTER )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==INNER||LA36_0==OUTER) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
                    {
                    _last = (CommonTree)input.LT(1);
                    set100=(CommonTree)input.LT(1);

                    if ( input.LA(1)==INNER||input.LA(1)==OUTER ) {
                        input.consume();
                        if ( state.backtracking==0 ) {
                        set100_tree = (CommonTree)adaptor.dupNode(set100);


                        adaptor.addChild(root_0, set100_tree);
                        }

                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_item"


    public static class rel_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:243:1: rel : ( alias | ( op_clause ( parallel_clause )? ) );
    public final AliasMasker.rel_return rel() throws RecognitionException {
        AliasMasker.rel_return retval = new AliasMasker.rel_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.alias_return alias101 =null;

        AliasMasker.op_clause_return op_clause102 =null;

        AliasMasker.parallel_clause_return parallel_clause103 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:244:5: ( alias | ( op_clause ( parallel_clause )? ) )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==IDENTIFIER) ) {
                alt38=1;
            }
            else if ( (LA38_0==COGROUP||LA38_0==CROSS||LA38_0==DEFINE||LA38_0==DISTINCT||LA38_0==FILTER||LA38_0==FOREACH||LA38_0==GROUP||LA38_0==JOIN||(LA38_0 >= LIMIT && LA38_0 <= LOAD)||LA38_0==MAPREDUCE||LA38_0==ORDER||LA38_0==SAMPLE||LA38_0==SPLIT||(LA38_0 >= STORE && LA38_0 <= STREAM)||LA38_0==UNION) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }
            switch (alt38) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:244:7: alias
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_rel1108);
                    alias101=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias101.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:244:15: ( op_clause ( parallel_clause )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:244:15: ( op_clause ( parallel_clause )? )
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:244:17: op_clause ( parallel_clause )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_op_clause_in_rel1114);
                    op_clause102=op_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, op_clause102.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:244:27: ( parallel_clause )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==PARALLEL) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:244:27: parallel_clause
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_parallel_clause_in_rel1116);
                            parallel_clause103=parallel_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, parallel_clause103.getTree());


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel"


    public static class flatten_generated_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_generated_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:247:1: flatten_generated_item : ( flatten_clause | col_range | expr | STAR ) ( field_def_list )? ;
    public final AliasMasker.flatten_generated_item_return flatten_generated_item() throws RecognitionException {
        AliasMasker.flatten_generated_item_return retval = new AliasMasker.flatten_generated_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR107=null;
        AliasMasker.flatten_clause_return flatten_clause104 =null;

        AliasMasker.col_range_return col_range105 =null;

        AliasMasker.expr_return expr106 =null;

        AliasMasker.field_def_list_return field_def_list108 =null;


        CommonTree STAR107_tree=null;


        	inAsOrGenClause = true;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:254:5: ( ( flatten_clause | col_range | expr | STAR ) ( field_def_list )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:254:7: ( flatten_clause | col_range | expr | STAR ) ( field_def_list )?
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:254:7: ( flatten_clause | col_range | expr | STAR )
            int alt39=4;
            switch ( input.LA(1) ) {
            case FLATTEN:
                {
                alt39=1;
                }
                break;
            case COL_RANGE:
                {
                alt39=2;
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt39=3;
                }
                break;
            case STAR:
                {
                int LA39_4 = input.LA(2);

                if ( (LA39_4==DOWN) ) {
                    alt39=3;
                }
                else if ( (LA39_4==EOF||LA39_4==UP||LA39_4==DIV||LA39_4==DOLLARVAR||LA39_4==DOUBLENUMBER||LA39_4==FALSE||LA39_4==FLATTEN||LA39_4==FLOATNUMBER||LA39_4==GROUP||LA39_4==INTEGER||LA39_4==LONGINTEGER||LA39_4==MINUS||LA39_4==PERCENT||LA39_4==PLUS||LA39_4==QUOTEDSTRING||LA39_4==STAR||LA39_4==TRUE||(LA39_4 >= BAG_VAL && LA39_4 <= BIN_EXPR)||(LA39_4 >= CAST_EXPR && LA39_4 <= FIELD_DEF_WITHOUT_IDENTIFIER)||LA39_4==FUNC_EVAL||LA39_4==IDENTIFIER||(LA39_4 >= MAP_VAL && LA39_4 <= NEG)||LA39_4==NULL||LA39_4==TUPLE_VAL) ) {
                    alt39=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:254:9: flatten_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_flatten_clause_in_flatten_generated_item1145);
                    flatten_clause104=flatten_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, flatten_clause104.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:254:26: col_range
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_flatten_generated_item1149);
                    col_range105=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range105.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:254:38: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_flatten_generated_item1153);
                    expr106=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr106.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:254:45: STAR
                    {
                    _last = (CommonTree)input.LT(1);
                    STAR107=(CommonTree)match(input,STAR,FOLLOW_STAR_in_flatten_generated_item1157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR107_tree = (CommonTree)adaptor.dupNode(STAR107);


                    adaptor.addChild(root_0, STAR107_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:254:52: ( field_def_list )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( ((LA40_0 >= FIELD_DEF && LA40_0 <= FIELD_DEF_WITHOUT_IDENTIFIER)) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:254:52: field_def_list
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_field_def_list_in_flatten_generated_item1161);
                    field_def_list108=field_def_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, field_def_list108.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

            if ( state.backtracking==0 ) {
            	inAsOrGenClause = false;
            }
        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_generated_item"


    public static class flatten_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flatten_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:257:1: flatten_clause : ^( FLATTEN expr ) ;
    public final AliasMasker.flatten_clause_return flatten_clause() throws RecognitionException {
        AliasMasker.flatten_clause_return retval = new AliasMasker.flatten_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FLATTEN109=null;
        AliasMasker.expr_return expr110 =null;


        CommonTree FLATTEN109_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:258:5: ( ^( FLATTEN expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:258:7: ^( FLATTEN expr )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FLATTEN109=(CommonTree)match(input,FLATTEN,FOLLOW_FLATTEN_in_flatten_clause1178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FLATTEN109_tree = (CommonTree)adaptor.dupNode(FLATTEN109);


            root_1 = (CommonTree)adaptor.becomeRoot(FLATTEN109_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_flatten_clause1180);
            expr110=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr110.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flatten_clause"


    public static class store_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "store_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:261:1: store_clause : ^( STORE alias filename ( func_clause )? ) ;
    public final AliasMasker.store_clause_return store_clause() throws RecognitionException {
        AliasMasker.store_clause_return retval = new AliasMasker.store_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STORE111=null;
        AliasMasker.alias_return alias112 =null;

        AliasMasker.filename_return filename113 =null;

        AliasMasker.func_clause_return func_clause114 =null;


        CommonTree STORE111_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:262:5: ( ^( STORE alias filename ( func_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:262:7: ^( STORE alias filename ( func_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STORE111=(CommonTree)match(input,STORE,FOLLOW_STORE_in_store_clause1198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STORE111_tree = (CommonTree)adaptor.dupNode(STORE111);


            root_1 = (CommonTree)adaptor.becomeRoot(STORE111_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_store_clause1200);
            alias112=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias112.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_filename_in_store_clause1202);
            filename113=filename();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, filename113.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:262:31: ( func_clause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==FUNC||LA41_0==FUNC_REF) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:262:31: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_store_clause1204);
                    func_clause114=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause114.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "store_clause"


    public static class filter_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "filter_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:265:1: filter_clause : ^( FILTER rel cond ) ;
    public final AliasMasker.filter_clause_return filter_clause() throws RecognitionException {
        AliasMasker.filter_clause_return retval = new AliasMasker.filter_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FILTER115=null;
        AliasMasker.rel_return rel116 =null;

        AliasMasker.cond_return cond117 =null;


        CommonTree FILTER115_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:266:5: ( ^( FILTER rel cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:266:7: ^( FILTER rel cond )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FILTER115=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_filter_clause1223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER115_tree = (CommonTree)adaptor.dupNode(FILTER115);


            root_1 = (CommonTree)adaptor.becomeRoot(FILTER115_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_filter_clause1225);
            rel116=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel116.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_filter_clause1227);
            cond117=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond117.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "filter_clause"


    public static class cond_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cond"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:269:1: cond : ( ^( OR cond cond ) | ^( AND cond cond ) | ^( NOT cond ) | ^( NULL expr ( NOT )? ) | ^( rel_op expr expr ) | func_eval );
    public final AliasMasker.cond_return cond() throws RecognitionException {
        AliasMasker.cond_return retval = new AliasMasker.cond_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OR118=null;
        CommonTree AND121=null;
        CommonTree NOT124=null;
        CommonTree NULL126=null;
        CommonTree NOT128=null;
        AliasMasker.cond_return cond119 =null;

        AliasMasker.cond_return cond120 =null;

        AliasMasker.cond_return cond122 =null;

        AliasMasker.cond_return cond123 =null;

        AliasMasker.cond_return cond125 =null;

        AliasMasker.expr_return expr127 =null;

        AliasMasker.rel_op_return rel_op129 =null;

        AliasMasker.expr_return expr130 =null;

        AliasMasker.expr_return expr131 =null;

        AliasMasker.func_eval_return func_eval132 =null;


        CommonTree OR118_tree=null;
        CommonTree AND121_tree=null;
        CommonTree NOT124_tree=null;
        CommonTree NULL126_tree=null;
        CommonTree NOT128_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:270:5: ( ^( OR cond cond ) | ^( AND cond cond ) | ^( NOT cond ) | ^( NULL expr ( NOT )? ) | ^( rel_op expr expr ) | func_eval )
            int alt43=6;
            switch ( input.LA(1) ) {
            case OR:
                {
                alt43=1;
                }
                break;
            case AND:
                {
                alt43=2;
                }
                break;
            case NOT:
                {
                alt43=3;
                }
                break;
            case NULL:
                {
                alt43=4;
                }
                break;
            case NUM_OP_EQ:
            case NUM_OP_GT:
            case NUM_OP_GTE:
            case NUM_OP_LT:
            case NUM_OP_LTE:
            case NUM_OP_NE:
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt43=5;
                }
                break;
            case FUNC_EVAL:
                {
                alt43=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }

            switch (alt43) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:270:7: ^( OR cond cond )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    OR118=(CommonTree)match(input,OR,FOLLOW_OR_in_cond1245); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR118_tree = (CommonTree)adaptor.dupNode(OR118);


                    root_1 = (CommonTree)adaptor.becomeRoot(OR118_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1247);
                    cond119=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond119.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1249);
                    cond120=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond120.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:271:7: ^( AND cond cond )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    AND121=(CommonTree)match(input,AND,FOLLOW_AND_in_cond1261); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND121_tree = (CommonTree)adaptor.dupNode(AND121);


                    root_1 = (CommonTree)adaptor.becomeRoot(AND121_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1263);
                    cond122=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond122.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1265);
                    cond123=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond123.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:272:7: ^( NOT cond )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NOT124=(CommonTree)match(input,NOT,FOLLOW_NOT_in_cond1277); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT124_tree = (CommonTree)adaptor.dupNode(NOT124);


                    root_1 = (CommonTree)adaptor.becomeRoot(NOT124_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cond_in_cond1279);
                    cond125=cond();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, cond125.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:273:7: ^( NULL expr ( NOT )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NULL126=(CommonTree)match(input,NULL,FOLLOW_NULL_in_cond1291); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL126_tree = (CommonTree)adaptor.dupNode(NULL126);


                    root_1 = (CommonTree)adaptor.becomeRoot(NULL126_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1293);
                    expr127=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr127.getTree());


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:273:20: ( NOT )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==NOT) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:273:20: NOT
                            {
                            _last = (CommonTree)input.LT(1);
                            NOT128=(CommonTree)match(input,NOT,FOLLOW_NOT_in_cond1295); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOT128_tree = (CommonTree)adaptor.dupNode(NOT128);


                            adaptor.addChild(root_1, NOT128_tree);
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:274:7: ^( rel_op expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_in_cond1308);
                    rel_op129=rel_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_1 = (CommonTree)adaptor.becomeRoot(rel_op129.getTree(), root_1);


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1310);
                    expr130=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr130.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_cond1312);
                    expr131=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr131.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:275:7: func_eval
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_eval_in_cond1322);
                    func_eval132=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, func_eval132.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cond"


    public static class func_eval_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_eval"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:278:1: func_eval : ^( FUNC_EVAL func_name ( real_arg )* ) ;
    public final AliasMasker.func_eval_return func_eval() throws RecognitionException {
        AliasMasker.func_eval_return retval = new AliasMasker.func_eval_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FUNC_EVAL133=null;
        AliasMasker.func_name_return func_name134 =null;

        AliasMasker.real_arg_return real_arg135 =null;


        CommonTree FUNC_EVAL133_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:279:5: ( ^( FUNC_EVAL func_name ( real_arg )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:279:7: ^( FUNC_EVAL func_name ( real_arg )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FUNC_EVAL133=(CommonTree)match(input,FUNC_EVAL,FOLLOW_FUNC_EVAL_in_func_eval1337); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FUNC_EVAL133_tree = (CommonTree)adaptor.dupNode(FUNC_EVAL133);


            root_1 = (CommonTree)adaptor.becomeRoot(FUNC_EVAL133_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_func_name_in_func_eval1339);
            func_name134=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, func_name134.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:279:30: ( real_arg )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==DIV||LA44_0==DOLLARVAR||LA44_0==DOUBLENUMBER||LA44_0==FALSE||LA44_0==FLOATNUMBER||LA44_0==GROUP||LA44_0==INTEGER||LA44_0==LONGINTEGER||LA44_0==MINUS||LA44_0==PERCENT||LA44_0==PLUS||LA44_0==QUOTEDSTRING||LA44_0==STAR||LA44_0==TRUE||(LA44_0 >= BAG_VAL && LA44_0 <= BIN_EXPR)||LA44_0==CAST_EXPR||LA44_0==EXPR_IN_PAREN||LA44_0==FUNC_EVAL||LA44_0==IDENTIFIER||(LA44_0 >= MAP_VAL && LA44_0 <= NEG)||LA44_0==NULL||LA44_0==TUPLE_VAL) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:279:30: real_arg
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_real_arg_in_func_eval1341);
            	    real_arg135=real_arg();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, real_arg135.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_eval"


    public static class real_arg_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_arg"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:282:1: real_arg : ( expr | STAR );
    public final AliasMasker.real_arg_return real_arg() throws RecognitionException {
        AliasMasker.real_arg_return retval = new AliasMasker.real_arg_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR137=null;
        AliasMasker.expr_return expr136 =null;


        CommonTree STAR137_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:283:5: ( expr | STAR )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==DIV||LA45_0==DOLLARVAR||LA45_0==DOUBLENUMBER||LA45_0==FALSE||LA45_0==FLOATNUMBER||LA45_0==GROUP||LA45_0==INTEGER||LA45_0==LONGINTEGER||LA45_0==MINUS||LA45_0==PERCENT||LA45_0==PLUS||LA45_0==QUOTEDSTRING||LA45_0==TRUE||(LA45_0 >= BAG_VAL && LA45_0 <= BIN_EXPR)||LA45_0==CAST_EXPR||LA45_0==EXPR_IN_PAREN||LA45_0==FUNC_EVAL||LA45_0==IDENTIFIER||(LA45_0 >= MAP_VAL && LA45_0 <= NEG)||LA45_0==NULL||LA45_0==TUPLE_VAL) ) {
                alt45=1;
            }
            else if ( (LA45_0==STAR) ) {
                int LA45_2 = input.LA(2);

                if ( (LA45_2==DOWN) ) {
                    alt45=1;
                }
                else if ( (LA45_2==EOF||LA45_2==UP||LA45_2==DIV||LA45_2==DOLLARVAR||LA45_2==DOUBLENUMBER||LA45_2==FALSE||LA45_2==FLOATNUMBER||LA45_2==GROUP||LA45_2==INTEGER||LA45_2==LONGINTEGER||LA45_2==MINUS||LA45_2==PERCENT||LA45_2==PLUS||LA45_2==QUOTEDSTRING||LA45_2==STAR||LA45_2==TRUE||(LA45_2 >= BAG_VAL && LA45_2 <= BIN_EXPR)||LA45_2==CAST_EXPR||LA45_2==EXPR_IN_PAREN||LA45_2==FUNC_EVAL||LA45_2==IDENTIFIER||(LA45_2 >= MAP_VAL && LA45_2 <= NEG)||LA45_2==NULL||LA45_2==TUPLE_VAL) ) {
                    alt45=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 45, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:283:7: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_real_arg1358);
                    expr136=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr136.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:283:14: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR137=(CommonTree)match(input,STAR,FOLLOW_STAR_in_real_arg1362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR137_tree = (CommonTree)adaptor.dupNode(STAR137);


                    adaptor.addChild(root_0, STAR137_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_arg"


    public static class expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:286:1: expr : ( ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( PERCENT expr expr ) | ^( CAST_EXPR type expr ) | const_expr | var_expr | ^( NEG expr ) | ^( CAST_EXPR type_cast expr ) | ^( EXPR_IN_PAREN expr ) );
    public final AliasMasker.expr_return expr() throws RecognitionException {
        AliasMasker.expr_return retval = new AliasMasker.expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PLUS138=null;
        CommonTree MINUS141=null;
        CommonTree STAR144=null;
        CommonTree DIV147=null;
        CommonTree PERCENT150=null;
        CommonTree CAST_EXPR153=null;
        CommonTree NEG158=null;
        CommonTree CAST_EXPR160=null;
        CommonTree EXPR_IN_PAREN163=null;
        AliasMasker.expr_return expr139 =null;

        AliasMasker.expr_return expr140 =null;

        AliasMasker.expr_return expr142 =null;

        AliasMasker.expr_return expr143 =null;

        AliasMasker.expr_return expr145 =null;

        AliasMasker.expr_return expr146 =null;

        AliasMasker.expr_return expr148 =null;

        AliasMasker.expr_return expr149 =null;

        AliasMasker.expr_return expr151 =null;

        AliasMasker.expr_return expr152 =null;

        AliasMasker.type_return type154 =null;

        AliasMasker.expr_return expr155 =null;

        AliasMasker.const_expr_return const_expr156 =null;

        AliasMasker.var_expr_return var_expr157 =null;

        AliasMasker.expr_return expr159 =null;

        AliasMasker.type_cast_return type_cast161 =null;

        AliasMasker.expr_return expr162 =null;

        AliasMasker.expr_return expr164 =null;


        CommonTree PLUS138_tree=null;
        CommonTree MINUS141_tree=null;
        CommonTree STAR144_tree=null;
        CommonTree DIV147_tree=null;
        CommonTree PERCENT150_tree=null;
        CommonTree CAST_EXPR153_tree=null;
        CommonTree NEG158_tree=null;
        CommonTree CAST_EXPR160_tree=null;
        CommonTree EXPR_IN_PAREN163_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:287:5: ( ^( PLUS expr expr ) | ^( MINUS expr expr ) | ^( STAR expr expr ) | ^( DIV expr expr ) | ^( PERCENT expr expr ) | ^( CAST_EXPR type expr ) | const_expr | var_expr | ^( NEG expr ) | ^( CAST_EXPR type_cast expr ) | ^( EXPR_IN_PAREN expr ) )
            int alt46=11;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt46=1;
                }
                break;
            case MINUS:
                {
                alt46=2;
                }
                break;
            case STAR:
                {
                alt46=3;
                }
                break;
            case DIV:
                {
                alt46=4;
                }
                break;
            case PERCENT:
                {
                alt46=5;
                }
                break;
            case CAST_EXPR:
                {
                int LA46_6 = input.LA(2);

                if ( (synpred88_AliasMasker()) ) {
                    alt46=6;
                }
                else if ( (synpred92_AliasMasker()) ) {
                    alt46=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 6, input);

                    throw nvae;

                }
                }
                break;
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case MAP_VAL:
            case NULL:
            case TUPLE_VAL:
                {
                alt46=7;
                }
                break;
            case DOLLARVAR:
            case GROUP:
            case BIN_EXPR:
            case FUNC_EVAL:
            case IDENTIFIER:
                {
                alt46=8;
                }
                break;
            case NEG:
                {
                alt46=9;
                }
                break;
            case EXPR_IN_PAREN:
                {
                alt46=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }

            switch (alt46) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:287:7: ^( PLUS expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    PLUS138=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_expr1378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS138_tree = (CommonTree)adaptor.dupNode(PLUS138);


                    root_1 = (CommonTree)adaptor.becomeRoot(PLUS138_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1380);
                    expr139=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr139.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1382);
                    expr140=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr140.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:288:7: ^( MINUS expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    MINUS141=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_expr1394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS141_tree = (CommonTree)adaptor.dupNode(MINUS141);


                    root_1 = (CommonTree)adaptor.becomeRoot(MINUS141_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1396);
                    expr142=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr142.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1398);
                    expr143=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr143.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:289:7: ^( STAR expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    STAR144=(CommonTree)match(input,STAR,FOLLOW_STAR_in_expr1410); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR144_tree = (CommonTree)adaptor.dupNode(STAR144);


                    root_1 = (CommonTree)adaptor.becomeRoot(STAR144_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1412);
                    expr145=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr145.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1414);
                    expr146=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr146.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:290:7: ^( DIV expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    DIV147=(CommonTree)match(input,DIV,FOLLOW_DIV_in_expr1426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV147_tree = (CommonTree)adaptor.dupNode(DIV147);


                    root_1 = (CommonTree)adaptor.becomeRoot(DIV147_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1428);
                    expr148=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr148.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1430);
                    expr149=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr149.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:291:7: ^( PERCENT expr expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    PERCENT150=(CommonTree)match(input,PERCENT,FOLLOW_PERCENT_in_expr1442); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PERCENT150_tree = (CommonTree)adaptor.dupNode(PERCENT150);


                    root_1 = (CommonTree)adaptor.becomeRoot(PERCENT150_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1444);
                    expr151=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr151.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1446);
                    expr152=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr152.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:292:7: ^( CAST_EXPR type expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    CAST_EXPR153=(CommonTree)match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_expr1458); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST_EXPR153_tree = (CommonTree)adaptor.dupNode(CAST_EXPR153);


                    root_1 = (CommonTree)adaptor.becomeRoot(CAST_EXPR153_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_in_expr1460);
                    type154=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type154.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1462);
                    expr155=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr155.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:293:7: const_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_const_expr_in_expr1472);
                    const_expr156=const_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, const_expr156.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:294:7: var_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_var_expr_in_expr1480);
                    var_expr157=var_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, var_expr157.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:295:7: ^( NEG expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NEG158=(CommonTree)match(input,NEG,FOLLOW_NEG_in_expr1490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEG158_tree = (CommonTree)adaptor.dupNode(NEG158);


                    root_1 = (CommonTree)adaptor.becomeRoot(NEG158_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1492);
                    expr159=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr159.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:296:7: ^( CAST_EXPR type_cast expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    CAST_EXPR160=(CommonTree)match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_expr1504); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST_EXPR160_tree = (CommonTree)adaptor.dupNode(CAST_EXPR160);


                    root_1 = (CommonTree)adaptor.becomeRoot(CAST_EXPR160_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_cast_in_expr1506);
                    type_cast161=type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, type_cast161.getTree());


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1508);
                    expr162=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr162.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:297:7: ^( EXPR_IN_PAREN expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    EXPR_IN_PAREN163=(CommonTree)match(input,EXPR_IN_PAREN,FOLLOW_EXPR_IN_PAREN_in_expr1520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXPR_IN_PAREN163_tree = (CommonTree)adaptor.dupNode(EXPR_IN_PAREN163);


                    root_1 = (CommonTree)adaptor.becomeRoot(EXPR_IN_PAREN163_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr1522);
                    expr164=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr164.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr"


    public static class type_cast_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:300:1: type_cast : ( simple_type | map_type | tuple_type_cast | bag_type_cast );
    public final AliasMasker.type_cast_return type_cast() throws RecognitionException {
        AliasMasker.type_cast_return retval = new AliasMasker.type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.simple_type_return simple_type165 =null;

        AliasMasker.map_type_return map_type166 =null;

        AliasMasker.tuple_type_cast_return tuple_type_cast167 =null;

        AliasMasker.bag_type_cast_return bag_type_cast168 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:301:5: ( simple_type | map_type | tuple_type_cast | bag_type_cast )
            int alt47=4;
            switch ( input.LA(1) ) {
            case BOOLEAN:
            case BYTEARRAY:
            case CHARARRAY:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
                {
                alt47=1;
                }
                break;
            case MAP_TYPE:
                {
                alt47=2;
                }
                break;
            case TUPLE_TYPE_CAST:
                {
                alt47=3;
                }
                break;
            case BAG_TYPE_CAST:
                {
                alt47=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }

            switch (alt47) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:301:7: simple_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_type_in_type_cast1538);
                    simple_type165=simple_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_type165.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:301:21: map_type
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_type_in_type_cast1542);
                    map_type166=map_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map_type166.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:301:32: tuple_type_cast
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_type_cast_in_type_cast1546);
                    tuple_type_cast167=tuple_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple_type_cast167.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:301:50: bag_type_cast
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_type_cast_in_type_cast1550);
                    bag_type_cast168=bag_type_cast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag_type_cast168.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast"


    public static class tuple_type_cast_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:304:1: tuple_type_cast : ^( TUPLE_TYPE_CAST ( type_cast )* ) ;
    public final AliasMasker.tuple_type_cast_return tuple_type_cast() throws RecognitionException {
        AliasMasker.tuple_type_cast_return retval = new AliasMasker.tuple_type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_TYPE_CAST169=null;
        AliasMasker.type_cast_return type_cast170 =null;


        CommonTree TUPLE_TYPE_CAST169_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:305:5: ( ^( TUPLE_TYPE_CAST ( type_cast )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:305:7: ^( TUPLE_TYPE_CAST ( type_cast )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_TYPE_CAST169=(CommonTree)match(input,TUPLE_TYPE_CAST,FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast1566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_TYPE_CAST169_tree = (CommonTree)adaptor.dupNode(TUPLE_TYPE_CAST169);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_TYPE_CAST169_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:305:26: ( type_cast )*
                loop48:
                do {
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==BOOLEAN||LA48_0==BYTEARRAY||LA48_0==CHARARRAY||LA48_0==DOUBLE||LA48_0==FLOAT||LA48_0==INT||LA48_0==LONG||LA48_0==BAG_TYPE_CAST||LA48_0==MAP_TYPE||LA48_0==TUPLE_TYPE_CAST) ) {
                        alt48=1;
                    }


                    switch (alt48) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:305:26: type_cast
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_type_cast_in_tuple_type_cast1568);
                	    type_cast170=type_cast();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, type_cast170.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop48;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple_type_cast"


    public static class bag_type_cast_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag_type_cast"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:308:1: bag_type_cast : ^( BAG_TYPE_CAST ( tuple_type_cast )? ) ;
    public final AliasMasker.bag_type_cast_return bag_type_cast() throws RecognitionException {
        AliasMasker.bag_type_cast_return retval = new AliasMasker.bag_type_cast_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_TYPE_CAST171=null;
        AliasMasker.tuple_type_cast_return tuple_type_cast172 =null;


        CommonTree BAG_TYPE_CAST171_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:309:5: ( ^( BAG_TYPE_CAST ( tuple_type_cast )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:309:7: ^( BAG_TYPE_CAST ( tuple_type_cast )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_TYPE_CAST171=(CommonTree)match(input,BAG_TYPE_CAST,FOLLOW_BAG_TYPE_CAST_in_bag_type_cast1587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_TYPE_CAST171_tree = (CommonTree)adaptor.dupNode(BAG_TYPE_CAST171);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_TYPE_CAST171_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:309:24: ( tuple_type_cast )?
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==TUPLE_TYPE_CAST) ) {
                    alt49=1;
                }
                switch (alt49) {
                    case 1 :
                        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:309:24: tuple_type_cast
                        {
                        _last = (CommonTree)input.LT(1);
                        pushFollow(FOLLOW_tuple_type_cast_in_bag_type_cast1589);
                        tuple_type_cast172=tuple_type_cast();

                        state._fsp--;
                        if (state.failed) return retval;
                        if ( state.backtracking==0 ) 
                        adaptor.addChild(root_1, tuple_type_cast172.getTree());


                        if ( state.backtracking==0 ) {
                        }
                        }
                        break;

                }


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag_type_cast"


    public static class var_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "var_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:312:1: var_expr : projectable_expr ( dot_proj | pound_proj )* ;
    public final AliasMasker.var_expr_return var_expr() throws RecognitionException {
        AliasMasker.var_expr_return retval = new AliasMasker.var_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.projectable_expr_return projectable_expr173 =null;

        AliasMasker.dot_proj_return dot_proj174 =null;

        AliasMasker.pound_proj_return pound_proj175 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:313:5: ( projectable_expr ( dot_proj | pound_proj )* )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:313:7: projectable_expr ( dot_proj | pound_proj )*
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_projectable_expr_in_var_expr1606);
            projectable_expr173=projectable_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, projectable_expr173.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:313:24: ( dot_proj | pound_proj )*
            loop50:
            do {
                int alt50=3;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==PERIOD) ) {
                    alt50=1;
                }
                else if ( (LA50_0==POUND) ) {
                    alt50=2;
                }


                switch (alt50) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:313:26: dot_proj
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_dot_proj_in_var_expr1610);
            	    dot_proj174=dot_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, dot_proj174.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:313:37: pound_proj
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_pound_proj_in_var_expr1614);
            	    pound_proj175=pound_proj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, pound_proj175.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "var_expr"


    public static class projectable_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "projectable_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:316:1: projectable_expr : ( func_eval | col_ref | bin_expr );
    public final AliasMasker.projectable_expr_return projectable_expr() throws RecognitionException {
        AliasMasker.projectable_expr_return retval = new AliasMasker.projectable_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.func_eval_return func_eval176 =null;

        AliasMasker.col_ref_return col_ref177 =null;

        AliasMasker.bin_expr_return bin_expr178 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:317:5: ( func_eval | col_ref | bin_expr )
            int alt51=3;
            switch ( input.LA(1) ) {
            case FUNC_EVAL:
                {
                alt51=1;
                }
                break;
            case DOLLARVAR:
            case GROUP:
            case IDENTIFIER:
                {
                alt51=2;
                }
                break;
            case BIN_EXPR:
                {
                alt51=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }

            switch (alt51) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:317:7: func_eval
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_eval_in_projectable_expr1630);
                    func_eval176=func_eval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, func_eval176.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:317:19: col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_projectable_expr1634);
                    col_ref177=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref177.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:317:29: bin_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bin_expr_in_projectable_expr1638);
                    bin_expr178=bin_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bin_expr178.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "projectable_expr"


    public static class dot_proj_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dot_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:320:1: dot_proj : ^( PERIOD ( col_alias_or_index )+ ) ;
    public final AliasMasker.dot_proj_return dot_proj() throws RecognitionException {
        AliasMasker.dot_proj_return retval = new AliasMasker.dot_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PERIOD179=null;
        AliasMasker.col_alias_or_index_return col_alias_or_index180 =null;


        CommonTree PERIOD179_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:321:5: ( ^( PERIOD ( col_alias_or_index )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:321:7: ^( PERIOD ( col_alias_or_index )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PERIOD179=(CommonTree)match(input,PERIOD,FOLLOW_PERIOD_in_dot_proj1654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PERIOD179_tree = (CommonTree)adaptor.dupNode(PERIOD179);


            root_1 = (CommonTree)adaptor.becomeRoot(PERIOD179_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:321:17: ( col_alias_or_index )+
            int cnt52=0;
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==DOLLARVAR||LA52_0==GROUP||LA52_0==IDENTIFIER) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:321:17: col_alias_or_index
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_col_alias_or_index_in_dot_proj1656);
            	    col_alias_or_index180=col_alias_or_index();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, col_alias_or_index180.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt52 >= 1 ) break loop52;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(52, input);
                        throw eee;
                }
                cnt52++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dot_proj"


    public static class col_alias_or_index_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias_or_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:324:1: col_alias_or_index : ( col_alias | col_index );
    public final AliasMasker.col_alias_or_index_return col_alias_or_index() throws RecognitionException {
        AliasMasker.col_alias_or_index_return retval = new AliasMasker.col_alias_or_index_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.col_alias_return col_alias181 =null;

        AliasMasker.col_index_return col_index182 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:324:20: ( col_alias | col_index )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==GROUP||LA53_0==IDENTIFIER) ) {
                alt53=1;
            }
            else if ( (LA53_0==DOLLARVAR) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:324:22: col_alias
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_alias_in_col_alias_or_index1668);
                    col_alias181=col_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_alias181.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:324:34: col_index
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_index_in_col_alias_or_index1672);
                    col_index182=col_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_index182.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias_or_index"


    public static class col_alias_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_alias"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:327:1: col_alias : ( GROUP | IDENTIFIER );
    public final AliasMasker.col_alias_return col_alias() throws RecognitionException {
        AliasMasker.col_alias_return retval = new AliasMasker.col_alias_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set183=null;

        CommonTree set183_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:328:5: ( GROUP | IDENTIFIER )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set183=(CommonTree)input.LT(1);

            if ( input.LA(1)==GROUP||input.LA(1)==IDENTIFIER ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set183_tree = (CommonTree)adaptor.dupNode(set183);


                adaptor.addChild(root_0, set183_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_alias"


    public static class col_index_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_index"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:332:1: col_index : DOLLARVAR ;
    public final AliasMasker.col_index_return col_index() throws RecognitionException {
        AliasMasker.col_index_return retval = new AliasMasker.col_index_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOLLARVAR184=null;

        CommonTree DOLLARVAR184_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:333:5: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:333:7: DOLLARVAR
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            DOLLARVAR184=(CommonTree)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_col_index1709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR184_tree = (CommonTree)adaptor.dupNode(DOLLARVAR184);


            adaptor.addChild(root_0, DOLLARVAR184_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_index"


    public static class col_range_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_range"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:336:1: col_range : ^( COL_RANGE ( col_ref )? DOUBLE_PERIOD ( col_ref )? ) ;
    public final AliasMasker.col_range_return col_range() throws RecognitionException {
        AliasMasker.col_range_return retval = new AliasMasker.col_range_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COL_RANGE185=null;
        CommonTree DOUBLE_PERIOD187=null;
        AliasMasker.col_ref_return col_ref186 =null;

        AliasMasker.col_ref_return col_ref188 =null;


        CommonTree COL_RANGE185_tree=null;
        CommonTree DOUBLE_PERIOD187_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:336:11: ( ^( COL_RANGE ( col_ref )? DOUBLE_PERIOD ( col_ref )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:336:14: ^( COL_RANGE ( col_ref )? DOUBLE_PERIOD ( col_ref )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            COL_RANGE185=(CommonTree)match(input,COL_RANGE,FOLLOW_COL_RANGE_in_col_range1720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COL_RANGE185_tree = (CommonTree)adaptor.dupNode(COL_RANGE185);


            root_1 = (CommonTree)adaptor.becomeRoot(COL_RANGE185_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:336:26: ( col_ref )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==DOLLARVAR||LA54_0==GROUP||LA54_0==IDENTIFIER) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:336:26: col_ref
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_col_range1722);
                    col_ref186=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, col_ref186.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            DOUBLE_PERIOD187=(CommonTree)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_col_range1725); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOUBLE_PERIOD187_tree = (CommonTree)adaptor.dupNode(DOUBLE_PERIOD187);


            adaptor.addChild(root_1, DOUBLE_PERIOD187_tree);
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:336:49: ( col_ref )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==DOLLARVAR||LA55_0==GROUP||LA55_0==IDENTIFIER) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:336:49: col_ref
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_col_range1727);
                    col_ref188=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, col_ref188.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_range"


    public static class pound_proj_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pound_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:339:1: pound_proj : ^( POUND ( QUOTEDSTRING | NULL ) ) ;
    public final AliasMasker.pound_proj_return pound_proj() throws RecognitionException {
        AliasMasker.pound_proj_return retval = new AliasMasker.pound_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree POUND189=null;
        CommonTree set190=null;

        CommonTree POUND189_tree=null;
        CommonTree set190_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:340:5: ( ^( POUND ( QUOTEDSTRING | NULL ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:340:7: ^( POUND ( QUOTEDSTRING | NULL ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            POUND189=(CommonTree)match(input,POUND,FOLLOW_POUND_in_pound_proj1745); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            POUND189_tree = (CommonTree)adaptor.dupNode(POUND189);


            root_1 = (CommonTree)adaptor.becomeRoot(POUND189_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            set190=(CommonTree)input.LT(1);

            if ( input.LA(1)==QUOTEDSTRING||input.LA(1)==NULL ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set190_tree = (CommonTree)adaptor.dupNode(set190);


                adaptor.addChild(root_1, set190_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pound_proj"


    public static class bin_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bin_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:343:1: bin_expr : ^( BIN_EXPR cond expr expr ) ;
    public final AliasMasker.bin_expr_return bin_expr() throws RecognitionException {
        AliasMasker.bin_expr_return retval = new AliasMasker.bin_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BIN_EXPR191=null;
        AliasMasker.cond_return cond192 =null;

        AliasMasker.expr_return expr193 =null;

        AliasMasker.expr_return expr194 =null;


        CommonTree BIN_EXPR191_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:344:5: ( ^( BIN_EXPR cond expr expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:344:7: ^( BIN_EXPR cond expr expr )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BIN_EXPR191=(CommonTree)match(input,BIN_EXPR,FOLLOW_BIN_EXPR_in_bin_expr1773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIN_EXPR191_tree = (CommonTree)adaptor.dupNode(BIN_EXPR191);


            root_1 = (CommonTree)adaptor.becomeRoot(BIN_EXPR191_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_bin_expr1775);
            cond192=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond192.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_bin_expr1777);
            expr193=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr193.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_in_bin_expr1779);
            expr194=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, expr194.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bin_expr"


    public static class limit_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:347:1: limit_clause : ^( LIMIT rel ( INTEGER | LONGINTEGER | expr ) ) ;
    public final AliasMasker.limit_clause_return limit_clause() throws RecognitionException {
        AliasMasker.limit_clause_return retval = new AliasMasker.limit_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LIMIT195=null;
        CommonTree INTEGER197=null;
        CommonTree LONGINTEGER198=null;
        AliasMasker.rel_return rel196 =null;

        AliasMasker.expr_return expr199 =null;


        CommonTree LIMIT195_tree=null;
        CommonTree INTEGER197_tree=null;
        CommonTree LONGINTEGER198_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:5: ( ^( LIMIT rel ( INTEGER | LONGINTEGER | expr ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:7: ^( LIMIT rel ( INTEGER | LONGINTEGER | expr ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LIMIT195=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause1802); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT195_tree = (CommonTree)adaptor.dupNode(LIMIT195);


            root_1 = (CommonTree)adaptor.becomeRoot(LIMIT195_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_limit_clause1804);
            rel196=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel196.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:20: ( INTEGER | LONGINTEGER | expr )
            int alt56=3;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                int LA56_1 = input.LA(2);

                if ( (synpred108_AliasMasker()) ) {
                    alt56=1;
                }
                else if ( (true) ) {
                    alt56=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 56, 1, input);

                    throw nvae;

                }
                }
                break;
            case LONGINTEGER:
                {
                int LA56_2 = input.LA(2);

                if ( (synpred109_AliasMasker()) ) {
                    alt56=2;
                }
                else if ( (true) ) {
                    alt56=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 56, 2, input);

                    throw nvae;

                }
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case STAR:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt56=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }

            switch (alt56) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:22: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER197=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_limit_clause1808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER197_tree = (CommonTree)adaptor.dupNode(INTEGER197);


                    adaptor.addChild(root_1, INTEGER197_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:32: LONGINTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    LONGINTEGER198=(CommonTree)match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_limit_clause1812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINTEGER198_tree = (CommonTree)adaptor.dupNode(LONGINTEGER198);


                    adaptor.addChild(root_1, LONGINTEGER198_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:46: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_limit_clause1816);
                    expr199=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr199.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_clause"


    public static class sample_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:351:1: sample_clause : ^( SAMPLE rel ( DOUBLENUMBER | expr ) ) ;
    public final AliasMasker.sample_clause_return sample_clause() throws RecognitionException {
        AliasMasker.sample_clause_return retval = new AliasMasker.sample_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SAMPLE200=null;
        CommonTree DOUBLENUMBER202=null;
        AliasMasker.rel_return rel201 =null;

        AliasMasker.expr_return expr203 =null;


        CommonTree SAMPLE200_tree=null;
        CommonTree DOUBLENUMBER202_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:352:5: ( ^( SAMPLE rel ( DOUBLENUMBER | expr ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:352:8: ^( SAMPLE rel ( DOUBLENUMBER | expr ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SAMPLE200=(CommonTree)match(input,SAMPLE,FOLLOW_SAMPLE_in_sample_clause1837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SAMPLE200_tree = (CommonTree)adaptor.dupNode(SAMPLE200);


            root_1 = (CommonTree)adaptor.becomeRoot(SAMPLE200_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_sample_clause1839);
            rel201=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel201.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:352:22: ( DOUBLENUMBER | expr )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==DOUBLENUMBER) ) {
                int LA57_1 = input.LA(2);

                if ( (synpred110_AliasMasker()) ) {
                    alt57=1;
                }
                else if ( (true) ) {
                    alt57=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA57_0==DIV||LA57_0==DOLLARVAR||LA57_0==FALSE||LA57_0==FLOATNUMBER||LA57_0==GROUP||LA57_0==INTEGER||LA57_0==LONGINTEGER||LA57_0==MINUS||LA57_0==PERCENT||LA57_0==PLUS||LA57_0==QUOTEDSTRING||LA57_0==STAR||LA57_0==TRUE||(LA57_0 >= BAG_VAL && LA57_0 <= BIN_EXPR)||LA57_0==CAST_EXPR||LA57_0==EXPR_IN_PAREN||LA57_0==FUNC_EVAL||LA57_0==IDENTIFIER||(LA57_0 >= MAP_VAL && LA57_0 <= NEG)||LA57_0==NULL||LA57_0==TUPLE_VAL) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }
            switch (alt57) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:352:24: DOUBLENUMBER
                    {
                    _last = (CommonTree)input.LT(1);
                    DOUBLENUMBER202=(CommonTree)match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_sample_clause1843); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLENUMBER202_tree = (CommonTree)adaptor.dupNode(DOUBLENUMBER202);


                    adaptor.addChild(root_1, DOUBLENUMBER202_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:352:39: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_sample_clause1847);
                    expr203=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr203.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class order_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:355:1: order_clause : ^( ORDER rel order_by_clause ( func_clause )? ) ;
    public final AliasMasker.order_clause_return order_clause() throws RecognitionException {
        AliasMasker.order_clause_return retval = new AliasMasker.order_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ORDER204=null;
        AliasMasker.rel_return rel205 =null;

        AliasMasker.order_by_clause_return order_by_clause206 =null;

        AliasMasker.func_clause_return func_clause207 =null;


        CommonTree ORDER204_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:356:5: ( ^( ORDER rel order_by_clause ( func_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:356:7: ^( ORDER rel order_by_clause ( func_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            ORDER204=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_order_clause1867); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER204_tree = (CommonTree)adaptor.dupNode(ORDER204);


            root_1 = (CommonTree)adaptor.becomeRoot(ORDER204_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_order_clause1869);
            rel205=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel205.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_clause_in_order_clause1871);
            order_by_clause206=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, order_by_clause206.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:356:36: ( func_clause )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==FUNC||LA58_0==FUNC_REF) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:356:36: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_order_clause1873);
                    func_clause207=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause207.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_clause"


    public static class order_by_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:359:1: order_by_clause : ( STAR ( ASC | DESC )? | ( order_col )+ );
    public final AliasMasker.order_by_clause_return order_by_clause() throws RecognitionException {
        AliasMasker.order_by_clause_return retval = new AliasMasker.order_by_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR208=null;
        CommonTree set209=null;
        AliasMasker.order_col_return order_col210 =null;


        CommonTree STAR208_tree=null;
        CommonTree set209_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:360:5: ( STAR ( ASC | DESC )? | ( order_col )+ )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==STAR) ) {
                alt61=1;
            }
            else if ( (LA61_0==DOLLARVAR||LA61_0==GROUP||LA61_0==COL_RANGE||LA61_0==IDENTIFIER) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:360:7: STAR ( ASC | DESC )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR208=(CommonTree)match(input,STAR,FOLLOW_STAR_in_order_by_clause1890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR208_tree = (CommonTree)adaptor.dupNode(STAR208);


                    adaptor.addChild(root_0, STAR208_tree);
                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:360:12: ( ASC | DESC )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==ASC||LA59_0==DESC) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
                            {
                            _last = (CommonTree)input.LT(1);
                            set209=(CommonTree)input.LT(1);

                            if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                                input.consume();
                                if ( state.backtracking==0 ) {
                                set209_tree = (CommonTree)adaptor.dupNode(set209);


                                adaptor.addChild(root_0, set209_tree);
                                }

                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:361:7: ( order_col )+
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:361:7: ( order_col )+
                    int cnt60=0;
                    loop60:
                    do {
                        int alt60=2;
                        int LA60_0 = input.LA(1);

                        if ( (LA60_0==DOLLARVAR||LA60_0==GROUP||LA60_0==COL_RANGE||LA60_0==IDENTIFIER) ) {
                            alt60=1;
                        }


                        switch (alt60) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:361:7: order_col
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_order_col_in_order_by_clause1909);
                    	    order_col210=order_col();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, order_col210.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt60 >= 1 ) break loop60;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(60, input);
                                throw eee;
                        }
                        cnt60++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_col_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_col"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:364:1: order_col : ( col_range | col_ref ) ( ASC | DESC )? ;
    public final AliasMasker.order_col_return order_col() throws RecognitionException {
        AliasMasker.order_col_return retval = new AliasMasker.order_col_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set213=null;
        AliasMasker.col_range_return col_range211 =null;

        AliasMasker.col_ref_return col_ref212 =null;


        CommonTree set213_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:365:5: ( ( col_range | col_ref ) ( ASC | DESC )? )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:365:7: ( col_range | col_ref ) ( ASC | DESC )?
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:365:7: ( col_range | col_ref )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==COL_RANGE) ) {
                alt62=1;
            }
            else if ( (LA62_0==DOLLARVAR||LA62_0==GROUP||LA62_0==IDENTIFIER) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:365:8: col_range
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_order_col1925);
                    col_range211=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range211.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:365:20: col_ref
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_order_col1929);
                    col_ref212=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref212.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:365:29: ( ASC | DESC )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==ASC||LA63_0==DESC) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
                    {
                    _last = (CommonTree)input.LT(1);
                    set213=(CommonTree)input.LT(1);

                    if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
                        input.consume();
                        if ( state.backtracking==0 ) {
                        set213_tree = (CommonTree)adaptor.dupNode(set213);


                        adaptor.addChild(root_0, set213_tree);
                        }

                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_col"


    public static class distinct_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:368:1: distinct_clause : ^( DISTINCT rel ( partition_clause )? ) ;
    public final AliasMasker.distinct_clause_return distinct_clause() throws RecognitionException {
        AliasMasker.distinct_clause_return retval = new AliasMasker.distinct_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DISTINCT214=null;
        AliasMasker.rel_return rel215 =null;

        AliasMasker.partition_clause_return partition_clause216 =null;


        CommonTree DISTINCT214_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:369:5: ( ^( DISTINCT rel ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:369:7: ^( DISTINCT rel ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DISTINCT214=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinct_clause1961); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT214_tree = (CommonTree)adaptor.dupNode(DISTINCT214);


            root_1 = (CommonTree)adaptor.becomeRoot(DISTINCT214_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_distinct_clause1963);
            rel215=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel215.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:369:23: ( partition_clause )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==PARTITION) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:369:23: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_distinct_clause1965);
                    partition_clause216=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause216.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_clause"


    public static class partition_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:372:1: partition_clause : ^( PARTITION func_name ) ;
    public final AliasMasker.partition_clause_return partition_clause() throws RecognitionException {
        AliasMasker.partition_clause_return retval = new AliasMasker.partition_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PARTITION217=null;
        AliasMasker.func_name_return func_name218 =null;


        CommonTree PARTITION217_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:373:5: ( ^( PARTITION func_name ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:373:7: ^( PARTITION func_name )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            PARTITION217=(CommonTree)match(input,PARTITION,FOLLOW_PARTITION_in_partition_clause1984); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PARTITION217_tree = (CommonTree)adaptor.dupNode(PARTITION217);


            root_1 = (CommonTree)adaptor.becomeRoot(PARTITION217_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_func_name_in_partition_clause1986);
            func_name218=func_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, func_name218.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_clause"


    public static class cross_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:376:1: cross_clause : ^( CROSS rel_list ( partition_clause )? ) ;
    public final AliasMasker.cross_clause_return cross_clause() throws RecognitionException {
        AliasMasker.cross_clause_return retval = new AliasMasker.cross_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CROSS219=null;
        AliasMasker.rel_list_return rel_list220 =null;

        AliasMasker.partition_clause_return partition_clause221 =null;


        CommonTree CROSS219_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:377:5: ( ^( CROSS rel_list ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:377:7: ^( CROSS rel_list ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CROSS219=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_cross_clause2008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS219_tree = (CommonTree)adaptor.dupNode(CROSS219);


            root_1 = (CommonTree)adaptor.becomeRoot(CROSS219_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_list_in_cross_clause2010);
            rel_list220=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel_list220.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:377:25: ( partition_clause )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==PARTITION) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:377:25: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_cross_clause2012);
                    partition_clause221=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause221.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_clause"


    public static class rel_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:380:1: rel_list : ( rel )+ ;
    public final AliasMasker.rel_list_return rel_list() throws RecognitionException {
        AliasMasker.rel_list_return retval = new AliasMasker.rel_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.rel_return rel222 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:381:5: ( ( rel )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:381:7: ( rel )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:381:7: ( rel )+
            int cnt66=0;
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==COGROUP||LA66_0==CROSS||LA66_0==DEFINE||LA66_0==DISTINCT||LA66_0==FILTER||LA66_0==FOREACH||LA66_0==GROUP||LA66_0==JOIN||(LA66_0 >= LIMIT && LA66_0 <= LOAD)||LA66_0==MAPREDUCE||LA66_0==ORDER||LA66_0==SAMPLE||LA66_0==SPLIT||(LA66_0 >= STORE && LA66_0 <= STREAM)||LA66_0==UNION||LA66_0==IDENTIFIER) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:381:7: rel
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_rel_in_rel_list2033);
            	    rel222=rel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, rel222.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt66 >= 1 ) break loop66;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(66, input);
                        throw eee;
                }
                cnt66++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_list"


    public static class join_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:384:1: join_clause : ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? ) ;
    public final AliasMasker.join_clause_return join_clause() throws RecognitionException {
        AliasMasker.join_clause_return retval = new AliasMasker.join_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree JOIN223=null;
        AliasMasker.join_sub_clause_return join_sub_clause224 =null;

        AliasMasker.join_type_return join_type225 =null;

        AliasMasker.partition_clause_return partition_clause226 =null;


        CommonTree JOIN223_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:385:5: ( ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:385:7: ^( JOIN join_sub_clause ( join_type )? ( partition_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            JOIN223=(CommonTree)match(input,JOIN,FOLLOW_JOIN_in_join_clause2049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN223_tree = (CommonTree)adaptor.dupNode(JOIN223);


            root_1 = (CommonTree)adaptor.becomeRoot(JOIN223_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_join_sub_clause_in_join_clause2051);
            join_sub_clause224=join_sub_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, join_sub_clause224.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:385:31: ( join_type )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==QUOTEDSTRING) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:385:31: join_type
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_type_in_join_clause2053);
                    join_type225=join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, join_type225.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:385:42: ( partition_clause )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==PARTITION) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:385:42: partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_partition_clause_in_join_clause2056);
                    partition_clause226=partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, partition_clause226.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_type"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:388:1: join_type : QUOTEDSTRING ;
    public final AliasMasker.join_type_return join_type() throws RecognitionException {
        AliasMasker.join_type_return retval = new AliasMasker.join_type_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING227=null;

        CommonTree QUOTEDSTRING227_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:388:11: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:388:13: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING227=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_join_type2068); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING227_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING227);


            adaptor.addChild(root_0, QUOTEDSTRING227_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_type"


    public static class join_sub_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_sub_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:391:1: join_sub_clause : ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item | ( join_item )+ );
    public final AliasMasker.join_sub_clause_return join_sub_clause() throws RecognitionException {
        AliasMasker.join_sub_clause_return retval = new AliasMasker.join_sub_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set229=null;
        CommonTree OUTER230=null;
        AliasMasker.join_item_return join_item228 =null;

        AliasMasker.join_item_return join_item231 =null;

        AliasMasker.join_item_return join_item232 =null;


        CommonTree set229_tree=null;
        CommonTree OUTER230_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:392:5: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item | ( join_item )+ )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==JOIN_ITEM) ) {
                int LA71_1 = input.LA(2);

                if ( (synpred127_AliasMasker()) ) {
                    alt71=1;
                }
                else if ( (true) ) {
                    alt71=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 71, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;

            }
            switch (alt71) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:392:7: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_item_in_join_sub_clause2081);
                    join_item228=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_item228.getTree());


                    _last = (CommonTree)input.LT(1);
                    set229=(CommonTree)input.LT(1);

                    if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
                        input.consume();
                        if ( state.backtracking==0 ) {
                        set229_tree = (CommonTree)adaptor.dupNode(set229);


                        adaptor.addChild(root_0, set229_tree);
                        }

                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:395:16: ( OUTER )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==OUTER) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:395:16: OUTER
                            {
                            _last = (CommonTree)input.LT(1);
                            OUTER230=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_join_sub_clause2139); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            OUTER230_tree = (CommonTree)adaptor.dupNode(OUTER230);


                            adaptor.addChild(root_0, OUTER230_tree);
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_item_in_join_sub_clause2142);
                    join_item231=join_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, join_item231.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:396:7: ( join_item )+
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:396:7: ( join_item )+
                    int cnt70=0;
                    loop70:
                    do {
                        int alt70=2;
                        int LA70_0 = input.LA(1);

                        if ( (LA70_0==JOIN_ITEM) ) {
                            alt70=1;
                        }


                        switch (alt70) {
                    	case 1 :
                    	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:396:7: join_item
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_join_item_in_join_sub_clause2150);
                    	    join_item232=join_item();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, join_item232.getTree());


                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt70 >= 1 ) break loop70;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(70, input);
                                throw eee;
                        }
                        cnt70++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_sub_clause"


    public static class join_item_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_item"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:399:1: join_item : ^( JOIN_ITEM rel join_group_by_clause ) ;
    public final AliasMasker.join_item_return join_item() throws RecognitionException {
        AliasMasker.join_item_return retval = new AliasMasker.join_item_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree JOIN_ITEM233=null;
        AliasMasker.rel_return rel234 =null;

        AliasMasker.join_group_by_clause_return join_group_by_clause235 =null;


        CommonTree JOIN_ITEM233_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:400:2: ( ^( JOIN_ITEM rel join_group_by_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:400:4: ^( JOIN_ITEM rel join_group_by_clause )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            JOIN_ITEM233=(CommonTree)match(input,JOIN_ITEM,FOLLOW_JOIN_ITEM_in_join_item2163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN_ITEM233_tree = (CommonTree)adaptor.dupNode(JOIN_ITEM233);


            root_1 = (CommonTree)adaptor.becomeRoot(JOIN_ITEM233_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_join_item2165);
            rel234=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel234.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_join_group_by_clause_in_join_item2167);
            join_group_by_clause235=join_group_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, join_group_by_clause235.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_item"


    public static class join_group_by_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:403:1: join_group_by_clause : ^( BY ( join_group_by_expr )+ ) ;
    public final AliasMasker.join_group_by_clause_return join_group_by_clause() throws RecognitionException {
        AliasMasker.join_group_by_clause_return retval = new AliasMasker.join_group_by_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BY236=null;
        AliasMasker.join_group_by_expr_return join_group_by_expr237 =null;


        CommonTree BY236_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:404:5: ( ^( BY ( join_group_by_expr )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:404:7: ^( BY ( join_group_by_expr )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BY236=(CommonTree)match(input,BY,FOLLOW_BY_in_join_group_by_clause2184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY236_tree = (CommonTree)adaptor.dupNode(BY236);


            root_1 = (CommonTree)adaptor.becomeRoot(BY236_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:404:13: ( join_group_by_expr )+
            int cnt72=0;
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==DIV||LA72_0==DOLLARVAR||LA72_0==DOUBLENUMBER||LA72_0==FALSE||LA72_0==FLOATNUMBER||LA72_0==GROUP||LA72_0==INTEGER||LA72_0==LONGINTEGER||LA72_0==MINUS||LA72_0==PERCENT||LA72_0==PLUS||LA72_0==QUOTEDSTRING||LA72_0==STAR||LA72_0==TRUE||(LA72_0 >= BAG_VAL && LA72_0 <= BIN_EXPR)||(LA72_0 >= CAST_EXPR && LA72_0 <= EXPR_IN_PAREN)||LA72_0==FUNC_EVAL||LA72_0==IDENTIFIER||(LA72_0 >= MAP_VAL && LA72_0 <= NEG)||LA72_0==NULL||LA72_0==TUPLE_VAL) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:404:13: join_group_by_expr
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_join_group_by_expr_in_join_group_by_clause2186);
            	    join_group_by_expr237=join_group_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, join_group_by_expr237.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        throw eee;
                }
                cnt72++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_clause"


    public static class join_group_by_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_group_by_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:407:1: join_group_by_expr : ( col_range | expr | STAR );
    public final AliasMasker.join_group_by_expr_return join_group_by_expr() throws RecognitionException {
        AliasMasker.join_group_by_expr_return retval = new AliasMasker.join_group_by_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STAR240=null;
        AliasMasker.col_range_return col_range238 =null;

        AliasMasker.expr_return expr239 =null;


        CommonTree STAR240_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:408:5: ( col_range | expr | STAR )
            int alt73=3;
            switch ( input.LA(1) ) {
            case COL_RANGE:
                {
                alt73=1;
                }
                break;
            case DIV:
            case DOLLARVAR:
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case GROUP:
            case INTEGER:
            case LONGINTEGER:
            case MINUS:
            case PERCENT:
            case PLUS:
            case QUOTEDSTRING:
            case TRUE:
            case BAG_VAL:
            case BIN_EXPR:
            case CAST_EXPR:
            case EXPR_IN_PAREN:
            case FUNC_EVAL:
            case IDENTIFIER:
            case MAP_VAL:
            case NEG:
            case NULL:
            case TUPLE_VAL:
                {
                alt73=2;
                }
                break;
            case STAR:
                {
                int LA73_3 = input.LA(2);

                if ( (LA73_3==DOWN) ) {
                    alt73=2;
                }
                else if ( (LA73_3==EOF||LA73_3==UP||LA73_3==DIV||LA73_3==DOLLARVAR||LA73_3==DOUBLENUMBER||LA73_3==FALSE||LA73_3==FLOATNUMBER||LA73_3==GROUP||LA73_3==INTEGER||LA73_3==LONGINTEGER||LA73_3==MINUS||LA73_3==PERCENT||LA73_3==PLUS||LA73_3==QUOTEDSTRING||LA73_3==STAR||LA73_3==TRUE||(LA73_3 >= BAG_VAL && LA73_3 <= BIN_EXPR)||(LA73_3 >= CAST_EXPR && LA73_3 <= EXPR_IN_PAREN)||LA73_3==FUNC_EVAL||LA73_3==IDENTIFIER||(LA73_3 >= MAP_VAL && LA73_3 <= NEG)||LA73_3==NULL||LA73_3==TUPLE_VAL) ) {
                    alt73=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }

            switch (alt73) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:408:7: col_range
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_range_in_join_group_by_expr2203);
                    col_range238=col_range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_range238.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:408:19: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_join_group_by_expr2207);
                    expr239=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr239.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:408:26: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STAR240=(CommonTree)match(input,STAR,FOLLOW_STAR_in_join_group_by_expr2211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR240_tree = (CommonTree)adaptor.dupNode(STAR240);


                    adaptor.addChild(root_0, STAR240_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_group_by_expr"


    public static class union_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:411:1: union_clause : ^( UNION ( ONSCHEMA )? rel_list ) ;
    public final AliasMasker.union_clause_return union_clause() throws RecognitionException {
        AliasMasker.union_clause_return retval = new AliasMasker.union_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree UNION241=null;
        CommonTree ONSCHEMA242=null;
        AliasMasker.rel_list_return rel_list243 =null;


        CommonTree UNION241_tree=null;
        CommonTree ONSCHEMA242_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:412:5: ( ^( UNION ( ONSCHEMA )? rel_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:412:7: ^( UNION ( ONSCHEMA )? rel_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            UNION241=(CommonTree)match(input,UNION,FOLLOW_UNION_in_union_clause2228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNION241_tree = (CommonTree)adaptor.dupNode(UNION241);


            root_1 = (CommonTree)adaptor.becomeRoot(UNION241_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:412:16: ( ONSCHEMA )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ONSCHEMA) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:412:16: ONSCHEMA
                    {
                    _last = (CommonTree)input.LT(1);
                    ONSCHEMA242=(CommonTree)match(input,ONSCHEMA,FOLLOW_ONSCHEMA_in_union_clause2230); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ONSCHEMA242_tree = (CommonTree)adaptor.dupNode(ONSCHEMA242);


                    adaptor.addChild(root_1, ONSCHEMA242_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_list_in_union_clause2233);
            rel_list243=rel_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel_list243.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_clause"


    public static class foreach_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:415:1: foreach_clause : ^( FOREACH rel foreach_plan ) ;
    public final AliasMasker.foreach_clause_return foreach_clause() throws RecognitionException {
        AliasMasker.foreach_clause_return retval = new AliasMasker.foreach_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH244=null;
        AliasMasker.rel_return rel245 =null;

        AliasMasker.foreach_plan_return foreach_plan246 =null;


        CommonTree FOREACH244_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:416:5: ( ^( FOREACH rel foreach_plan ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:416:7: ^( FOREACH rel foreach_plan )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FOREACH244=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_foreach_clause2255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH244_tree = (CommonTree)adaptor.dupNode(FOREACH244);


            root_1 = (CommonTree)adaptor.becomeRoot(FOREACH244_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_foreach_clause2257);
            rel245=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel245.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_foreach_plan_in_foreach_clause2259);
            foreach_plan246=foreach_plan();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, foreach_plan246.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_clause"


    public static class foreach_plan_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreach_plan"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:419:1: foreach_plan : ( ^( FOREACH_PLAN_SIMPLE generate_clause ) | ^( FOREACH_PLAN_COMPLEX nested_blk ) );
    public final AliasMasker.foreach_plan_return foreach_plan() throws RecognitionException {
        AliasMasker.foreach_plan_return retval = new AliasMasker.foreach_plan_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH_PLAN_SIMPLE247=null;
        CommonTree FOREACH_PLAN_COMPLEX249=null;
        AliasMasker.generate_clause_return generate_clause248 =null;

        AliasMasker.nested_blk_return nested_blk250 =null;


        CommonTree FOREACH_PLAN_SIMPLE247_tree=null;
        CommonTree FOREACH_PLAN_COMPLEX249_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:420:5: ( ^( FOREACH_PLAN_SIMPLE generate_clause ) | ^( FOREACH_PLAN_COMPLEX nested_blk ) )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==FOREACH_PLAN_SIMPLE) ) {
                alt75=1;
            }
            else if ( (LA75_0==FOREACH_PLAN_COMPLEX) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }
            switch (alt75) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:420:7: ^( FOREACH_PLAN_SIMPLE generate_clause )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FOREACH_PLAN_SIMPLE247=(CommonTree)match(input,FOREACH_PLAN_SIMPLE,FOLLOW_FOREACH_PLAN_SIMPLE_in_foreach_plan2281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH_PLAN_SIMPLE247_tree = (CommonTree)adaptor.dupNode(FOREACH_PLAN_SIMPLE247);


                    root_1 = (CommonTree)adaptor.becomeRoot(FOREACH_PLAN_SIMPLE247_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_generate_clause_in_foreach_plan2283);
                    generate_clause248=generate_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, generate_clause248.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:421:7: ^( FOREACH_PLAN_COMPLEX nested_blk )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    FOREACH_PLAN_COMPLEX249=(CommonTree)match(input,FOREACH_PLAN_COMPLEX,FOLLOW_FOREACH_PLAN_COMPLEX_in_foreach_plan2295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH_PLAN_COMPLEX249_tree = (CommonTree)adaptor.dupNode(FOREACH_PLAN_COMPLEX249);


                    root_1 = (CommonTree)adaptor.becomeRoot(FOREACH_PLAN_COMPLEX249_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_blk_in_foreach_plan2297);
                    nested_blk250=nested_blk();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, nested_blk250.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreach_plan"


    public static class nested_blk_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_blk"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:424:1: nested_blk : ( nested_command )* generate_clause ;
    public final AliasMasker.nested_blk_return nested_blk() throws RecognitionException {
        AliasMasker.nested_blk_return retval = new AliasMasker.nested_blk_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.nested_command_return nested_command251 =null;

        AliasMasker.generate_clause_return generate_clause252 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:425:5: ( ( nested_command )* generate_clause )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:425:7: ( nested_command )* generate_clause
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:425:7: ( nested_command )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( ((LA76_0 >= NESTED_CMD && LA76_0 <= NESTED_CMD_ASSI)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:425:7: nested_command
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_command_in_nested_blk2312);
            	    nested_command251=nested_command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_command251.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_generate_clause_in_nested_blk2315);
            generate_clause252=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, generate_clause252.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_blk"


    public static class generate_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generate_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:428:1: generate_clause : ^( GENERATE ( flatten_generated_item )+ ) ;
    public final AliasMasker.generate_clause_return generate_clause() throws RecognitionException {
        AliasMasker.generate_clause_return retval = new AliasMasker.generate_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GENERATE253=null;
        AliasMasker.flatten_generated_item_return flatten_generated_item254 =null;


        CommonTree GENERATE253_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:429:5: ( ^( GENERATE ( flatten_generated_item )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:429:7: ^( GENERATE ( flatten_generated_item )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            GENERATE253=(CommonTree)match(input,GENERATE,FOLLOW_GENERATE_in_generate_clause2331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GENERATE253_tree = (CommonTree)adaptor.dupNode(GENERATE253);


            root_1 = (CommonTree)adaptor.becomeRoot(GENERATE253_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:429:19: ( flatten_generated_item )+
            int cnt77=0;
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==DIV||LA77_0==DOLLARVAR||LA77_0==DOUBLENUMBER||LA77_0==FALSE||LA77_0==FLATTEN||LA77_0==FLOATNUMBER||LA77_0==GROUP||LA77_0==INTEGER||LA77_0==LONGINTEGER||LA77_0==MINUS||LA77_0==PERCENT||LA77_0==PLUS||LA77_0==QUOTEDSTRING||LA77_0==STAR||LA77_0==TRUE||(LA77_0 >= BAG_VAL && LA77_0 <= BIN_EXPR)||(LA77_0 >= CAST_EXPR && LA77_0 <= EXPR_IN_PAREN)||LA77_0==FUNC_EVAL||LA77_0==IDENTIFIER||(LA77_0 >= MAP_VAL && LA77_0 <= NEG)||LA77_0==NULL||LA77_0==TUPLE_VAL) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:429:19: flatten_generated_item
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_flatten_generated_item_in_generate_clause2333);
            	    flatten_generated_item254=flatten_generated_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, flatten_generated_item254.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt77 >= 1 ) break loop77;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(77, input);
                        throw eee;
                }
                cnt77++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generate_clause"


    public static class nested_command_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_command"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:432:1: nested_command : ( ^( NESTED_CMD IDENTIFIER nested_op ) | ^( NESTED_CMD_ASSI IDENTIFIER expr ) );
    public final AliasMasker.nested_command_return nested_command() throws RecognitionException {
        AliasMasker.nested_command_return retval = new AliasMasker.nested_command_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NESTED_CMD255=null;
        CommonTree IDENTIFIER256=null;
        CommonTree NESTED_CMD_ASSI258=null;
        CommonTree IDENTIFIER259=null;
        AliasMasker.nested_op_return nested_op257 =null;

        AliasMasker.expr_return expr260 =null;


        CommonTree NESTED_CMD255_tree=null;
        CommonTree IDENTIFIER256_tree=null;
        CommonTree NESTED_CMD_ASSI258_tree=null;
        CommonTree IDENTIFIER259_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:433:5: ( ^( NESTED_CMD IDENTIFIER nested_op ) | ^( NESTED_CMD_ASSI IDENTIFIER expr ) )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==NESTED_CMD) ) {
                alt78=1;
            }
            else if ( (LA78_0==NESTED_CMD_ASSI) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }
            switch (alt78) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:433:7: ^( NESTED_CMD IDENTIFIER nested_op )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NESTED_CMD255=(CommonTree)match(input,NESTED_CMD,FOLLOW_NESTED_CMD_in_nested_command2355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_CMD255_tree = (CommonTree)adaptor.dupNode(NESTED_CMD255);


                    root_1 = (CommonTree)adaptor.becomeRoot(NESTED_CMD255_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER256=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_nested_command2357); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER256_tree = (CommonTree)adaptor.dupNode(IDENTIFIER256);


                    adaptor.addChild(root_1, IDENTIFIER256_tree);
                    }


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_op_in_nested_command2359);
                    nested_op257=nested_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, nested_op257.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:434:7: ^( NESTED_CMD_ASSI IDENTIFIER expr )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    _last = (CommonTree)input.LT(1);
                    NESTED_CMD_ASSI258=(CommonTree)match(input,NESTED_CMD_ASSI,FOLLOW_NESTED_CMD_ASSI_in_nested_command2371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NESTED_CMD_ASSI258_tree = (CommonTree)adaptor.dupNode(NESTED_CMD_ASSI258);


                    root_1 = (CommonTree)adaptor.becomeRoot(NESTED_CMD_ASSI258_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER259=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_nested_command2373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER259_tree = (CommonTree)adaptor.dupNode(IDENTIFIER259);


                    adaptor.addChild(root_1, IDENTIFIER259_tree);
                    }


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_nested_command2375);
                    expr260=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr260.getTree());


                    match(input, Token.UP, null); if (state.failed) return retval;
                    adaptor.addChild(root_0, root_1);
                    _last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_command"


    public static class nested_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:437:1: nested_op : ( nested_proj | nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach );
    public final AliasMasker.nested_op_return nested_op() throws RecognitionException {
        AliasMasker.nested_op_return retval = new AliasMasker.nested_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.nested_proj_return nested_proj261 =null;

        AliasMasker.nested_filter_return nested_filter262 =null;

        AliasMasker.nested_sort_return nested_sort263 =null;

        AliasMasker.nested_distinct_return nested_distinct264 =null;

        AliasMasker.nested_limit_return nested_limit265 =null;

        AliasMasker.nested_cross_return nested_cross266 =null;

        AliasMasker.nested_foreach_return nested_foreach267 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:437:11: ( nested_proj | nested_filter | nested_sort | nested_distinct | nested_limit | nested_cross | nested_foreach )
            int alt79=7;
            switch ( input.LA(1) ) {
            case NESTED_PROJ:
                {
                alt79=1;
                }
                break;
            case FILTER:
                {
                alt79=2;
                }
                break;
            case ORDER:
                {
                alt79=3;
                }
                break;
            case DISTINCT:
                {
                alt79=4;
                }
                break;
            case LIMIT:
                {
                alt79=5;
                }
                break;
            case CROSS:
                {
                alt79=6;
                }
                break;
            case FOREACH:
                {
                alt79=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }

            switch (alt79) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:437:13: nested_proj
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_proj_in_nested_op2386);
                    nested_proj261=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_proj261.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:438:13: nested_filter
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_filter_in_nested_op2400);
                    nested_filter262=nested_filter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_filter262.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:439:13: nested_sort
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_sort_in_nested_op2414);
                    nested_sort263=nested_sort();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_sort263.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:440:13: nested_distinct
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_distinct_in_nested_op2428);
                    nested_distinct264=nested_distinct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_distinct264.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:441:13: nested_limit
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_limit_in_nested_op2442);
                    nested_limit265=nested_limit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_limit265.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:442:13: nested_cross
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_cross_in_nested_op2456);
                    nested_cross266=nested_cross();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_cross266.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:443:13: nested_foreach
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_foreach_in_nested_op2470);
                    nested_foreach267=nested_foreach();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_foreach267.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op"


    public static class nested_proj_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_proj"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:446:1: nested_proj : ^( NESTED_PROJ col_ref ( col_ref )+ ) ;
    public final AliasMasker.nested_proj_return nested_proj() throws RecognitionException {
        AliasMasker.nested_proj_return retval = new AliasMasker.nested_proj_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NESTED_PROJ268=null;
        AliasMasker.col_ref_return col_ref269 =null;

        AliasMasker.col_ref_return col_ref270 =null;


        CommonTree NESTED_PROJ268_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:447:5: ( ^( NESTED_PROJ col_ref ( col_ref )+ ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:447:7: ^( NESTED_PROJ col_ref ( col_ref )+ )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            NESTED_PROJ268=(CommonTree)match(input,NESTED_PROJ,FOLLOW_NESTED_PROJ_in_nested_proj2486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NESTED_PROJ268_tree = (CommonTree)adaptor.dupNode(NESTED_PROJ268);


            root_1 = (CommonTree)adaptor.becomeRoot(NESTED_PROJ268_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_col_ref_in_nested_proj2488);
            col_ref269=col_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, col_ref269.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:447:30: ( col_ref )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==DOLLARVAR||LA80_0==GROUP||LA80_0==IDENTIFIER) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:447:30: col_ref
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_col_ref_in_nested_proj2490);
            	    col_ref270=col_ref();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, col_ref270.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_proj"


    public static class nested_filter_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_filter"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:450:1: nested_filter : ^( FILTER nested_op_input cond ) ;
    public final AliasMasker.nested_filter_return nested_filter() throws RecognitionException {
        AliasMasker.nested_filter_return retval = new AliasMasker.nested_filter_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FILTER271=null;
        AliasMasker.nested_op_input_return nested_op_input272 =null;

        AliasMasker.cond_return cond273 =null;


        CommonTree FILTER271_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:451:5: ( ^( FILTER nested_op_input cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:451:7: ^( FILTER nested_op_input cond )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FILTER271=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_nested_filter2512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FILTER271_tree = (CommonTree)adaptor.dupNode(FILTER271);


            root_1 = (CommonTree)adaptor.becomeRoot(FILTER271_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_filter2514);
            nested_op_input272=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input272.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_nested_filter2516);
            cond273=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond273.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_filter"


    public static class nested_sort_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_sort"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:454:1: nested_sort : ^( ORDER nested_op_input order_by_clause ( func_clause )? ) ;
    public final AliasMasker.nested_sort_return nested_sort() throws RecognitionException {
        AliasMasker.nested_sort_return retval = new AliasMasker.nested_sort_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ORDER274=null;
        AliasMasker.nested_op_input_return nested_op_input275 =null;

        AliasMasker.order_by_clause_return order_by_clause276 =null;

        AliasMasker.func_clause_return func_clause277 =null;


        CommonTree ORDER274_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:455:5: ( ^( ORDER nested_op_input order_by_clause ( func_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:455:7: ^( ORDER nested_op_input order_by_clause ( func_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            ORDER274=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_nested_sort2538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER274_tree = (CommonTree)adaptor.dupNode(ORDER274);


            root_1 = (CommonTree)adaptor.becomeRoot(ORDER274_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_sort2540);
            nested_op_input275=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input275.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_clause_in_nested_sort2542);
            order_by_clause276=order_by_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, order_by_clause276.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:455:48: ( func_clause )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==FUNC||LA81_0==FUNC_REF) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:455:48: func_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_func_clause_in_nested_sort2544);
                    func_clause277=func_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, func_clause277.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_sort"


    public static class nested_distinct_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_distinct"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:458:1: nested_distinct : ^( DISTINCT nested_op_input ) ;
    public final AliasMasker.nested_distinct_return nested_distinct() throws RecognitionException {
        AliasMasker.nested_distinct_return retval = new AliasMasker.nested_distinct_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DISTINCT278=null;
        AliasMasker.nested_op_input_return nested_op_input279 =null;


        CommonTree DISTINCT278_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:459:5: ( ^( DISTINCT nested_op_input ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:459:7: ^( DISTINCT nested_op_input )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            DISTINCT278=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_nested_distinct2567); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DISTINCT278_tree = (CommonTree)adaptor.dupNode(DISTINCT278);


            root_1 = (CommonTree)adaptor.becomeRoot(DISTINCT278_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_distinct2569);
            nested_op_input279=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input279.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_distinct"


    public static class nested_limit_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_limit"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:462:1: nested_limit : ^( LIMIT nested_op_input ( INTEGER | expr ) ) ;
    public final AliasMasker.nested_limit_return nested_limit() throws RecognitionException {
        AliasMasker.nested_limit_return retval = new AliasMasker.nested_limit_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LIMIT280=null;
        CommonTree INTEGER282=null;
        AliasMasker.nested_op_input_return nested_op_input281 =null;

        AliasMasker.expr_return expr283 =null;


        CommonTree LIMIT280_tree=null;
        CommonTree INTEGER282_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:463:5: ( ^( LIMIT nested_op_input ( INTEGER | expr ) ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:463:7: ^( LIMIT nested_op_input ( INTEGER | expr ) )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            LIMIT280=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_nested_limit2591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LIMIT280_tree = (CommonTree)adaptor.dupNode(LIMIT280);


            root_1 = (CommonTree)adaptor.becomeRoot(LIMIT280_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_limit2593);
            nested_op_input281=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input281.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:463:32: ( INTEGER | expr )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==INTEGER) ) {
                int LA82_1 = input.LA(2);

                if ( (synpred145_AliasMasker()) ) {
                    alt82=1;
                }
                else if ( (true) ) {
                    alt82=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA82_0==DIV||LA82_0==DOLLARVAR||LA82_0==DOUBLENUMBER||LA82_0==FALSE||LA82_0==FLOATNUMBER||LA82_0==GROUP||LA82_0==LONGINTEGER||LA82_0==MINUS||LA82_0==PERCENT||LA82_0==PLUS||LA82_0==QUOTEDSTRING||LA82_0==STAR||LA82_0==TRUE||(LA82_0 >= BAG_VAL && LA82_0 <= BIN_EXPR)||LA82_0==CAST_EXPR||LA82_0==EXPR_IN_PAREN||LA82_0==FUNC_EVAL||LA82_0==IDENTIFIER||(LA82_0 >= MAP_VAL && LA82_0 <= NEG)||LA82_0==NULL||LA82_0==TUPLE_VAL) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }
            switch (alt82) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:463:34: INTEGER
                    {
                    _last = (CommonTree)input.LT(1);
                    INTEGER282=(CommonTree)match(input,INTEGER,FOLLOW_INTEGER_in_nested_limit2597); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER282_tree = (CommonTree)adaptor.dupNode(INTEGER282);


                    adaptor.addChild(root_1, INTEGER282_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:463:44: expr
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_nested_limit2601);
                    expr283=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr283.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_limit"


    public static class nested_cross_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_cross"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:466:1: nested_cross : ^( CROSS nested_op_input_list ) ;
    public final AliasMasker.nested_cross_return nested_cross() throws RecognitionException {
        AliasMasker.nested_cross_return retval = new AliasMasker.nested_cross_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree CROSS284=null;
        AliasMasker.nested_op_input_list_return nested_op_input_list285 =null;


        CommonTree CROSS284_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:466:14: ( ^( CROSS nested_op_input_list ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:466:16: ^( CROSS nested_op_input_list )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            CROSS284=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_nested_cross2616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CROSS284_tree = (CommonTree)adaptor.dupNode(CROSS284);


            root_1 = (CommonTree)adaptor.becomeRoot(CROSS284_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_list_in_nested_cross2618);
            nested_op_input_list285=nested_op_input_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input_list285.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_cross"


    public static class nested_foreach_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_foreach"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:469:1: nested_foreach : ^( FOREACH nested_op_input generate_clause ) ;
    public final AliasMasker.nested_foreach_return nested_foreach() throws RecognitionException {
        AliasMasker.nested_foreach_return retval = new AliasMasker.nested_foreach_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOREACH286=null;
        AliasMasker.nested_op_input_return nested_op_input287 =null;

        AliasMasker.generate_clause_return generate_clause288 =null;


        CommonTree FOREACH286_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:469:16: ( ^( FOREACH nested_op_input generate_clause ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:469:18: ^( FOREACH nested_op_input generate_clause )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            FOREACH286=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_nested_foreach2631); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOREACH286_tree = (CommonTree)adaptor.dupNode(FOREACH286);


            root_1 = (CommonTree)adaptor.becomeRoot(FOREACH286_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_op_input_in_nested_foreach2633);
            nested_op_input287=nested_op_input();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, nested_op_input287.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_generate_clause_in_nested_foreach2635);
            generate_clause288=generate_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, generate_clause288.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_foreach"


    public static class nested_op_input_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input_list"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:472:1: nested_op_input_list : ( nested_op_input )+ ;
    public final AliasMasker.nested_op_input_list_return nested_op_input_list() throws RecognitionException {
        AliasMasker.nested_op_input_list_return retval = new AliasMasker.nested_op_input_list_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.nested_op_input_return nested_op_input289 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:472:22: ( ( nested_op_input )+ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:472:24: ( nested_op_input )+
            {
            root_0 = (CommonTree)adaptor.nil();


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:472:24: ( nested_op_input )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==DOLLARVAR||LA83_0==GROUP||LA83_0==IDENTIFIER||LA83_0==NESTED_PROJ) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:472:24: nested_op_input
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_op_input_in_nested_op_input_list2646);
            	    nested_op_input289=nested_op_input();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_op_input289.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input_list"


    public static class nested_op_input_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_op_input"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:475:1: nested_op_input : ( col_ref | nested_proj );
    public final AliasMasker.nested_op_input_return nested_op_input() throws RecognitionException {
        AliasMasker.nested_op_input_return retval = new AliasMasker.nested_op_input_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.col_ref_return col_ref290 =null;

        AliasMasker.nested_proj_return nested_proj291 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:475:17: ( col_ref | nested_proj )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==DOLLARVAR||LA84_0==GROUP||LA84_0==IDENTIFIER) ) {
                alt84=1;
            }
            else if ( (LA84_0==NESTED_PROJ) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }
            switch (alt84) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:475:19: col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_col_ref_in_nested_op_input2656);
                    col_ref290=col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, col_ref290.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:475:29: nested_proj
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_proj_in_nested_op_input2660);
                    nested_proj291=nested_proj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_proj291.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_op_input"


    public static class stream_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stream_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:478:1: stream_clause : ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? ) ;
    public final AliasMasker.stream_clause_return stream_clause() throws RecognitionException {
        AliasMasker.stream_clause_return retval = new AliasMasker.stream_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STREAM292=null;
        CommonTree set294=null;
        AliasMasker.rel_return rel293 =null;

        AliasMasker.as_clause_return as_clause295 =null;


        CommonTree STREAM292_tree=null;
        CommonTree set294_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:479:5: ( ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:479:7: ^( STREAM rel ( EXECCOMMAND | IDENTIFIER ) ( as_clause )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            STREAM292=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_stream_clause2676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            STREAM292_tree = (CommonTree)adaptor.dupNode(STREAM292);


            root_1 = (CommonTree)adaptor.becomeRoot(STREAM292_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_stream_clause2678);
            rel293=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel293.getTree());


            _last = (CommonTree)input.LT(1);
            set294=(CommonTree)input.LT(1);

            if ( input.LA(1)==EXECCOMMAND||input.LA(1)==IDENTIFIER ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set294_tree = (CommonTree)adaptor.dupNode(set294);


                adaptor.addChild(root_1, set294_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:479:50: ( as_clause )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==AS) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:479:50: as_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_as_clause_in_stream_clause2690);
                    as_clause295=as_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, as_clause295.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stream_clause"


    public static class mr_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mr_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:482:1: mr_clause : ^( MAPREDUCE QUOTEDSTRING ( path_list )? store_clause load_clause ( EXECCOMMAND )? ) ;
    public final AliasMasker.mr_clause_return mr_clause() throws RecognitionException {
        AliasMasker.mr_clause_return retval = new AliasMasker.mr_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAPREDUCE296=null;
        CommonTree QUOTEDSTRING297=null;
        CommonTree EXECCOMMAND301=null;
        AliasMasker.path_list_return path_list298 =null;

        AliasMasker.store_clause_return store_clause299 =null;

        AliasMasker.load_clause_return load_clause300 =null;


        CommonTree MAPREDUCE296_tree=null;
        CommonTree QUOTEDSTRING297_tree=null;
        CommonTree EXECCOMMAND301_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:483:5: ( ^( MAPREDUCE QUOTEDSTRING ( path_list )? store_clause load_clause ( EXECCOMMAND )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:483:7: ^( MAPREDUCE QUOTEDSTRING ( path_list )? store_clause load_clause ( EXECCOMMAND )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAPREDUCE296=(CommonTree)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_mr_clause2709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAPREDUCE296_tree = (CommonTree)adaptor.dupNode(MAPREDUCE296);


            root_1 = (CommonTree)adaptor.becomeRoot(MAPREDUCE296_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING297=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_mr_clause2711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING297_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING297);


            adaptor.addChild(root_1, QUOTEDSTRING297_tree);
            }


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:483:33: ( path_list )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==QUOTEDSTRING) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:483:33: path_list
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_path_list_in_mr_clause2713);
                    path_list298=path_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, path_list298.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_store_clause_in_mr_clause2716);
            store_clause299=store_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, store_clause299.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_load_clause_in_mr_clause2718);
            load_clause300=load_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, load_clause300.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:483:69: ( EXECCOMMAND )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==EXECCOMMAND) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:483:69: EXECCOMMAND
                    {
                    _last = (CommonTree)input.LT(1);
                    EXECCOMMAND301=(CommonTree)match(input,EXECCOMMAND,FOLLOW_EXECCOMMAND_in_mr_clause2720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXECCOMMAND301_tree = (CommonTree)adaptor.dupNode(EXECCOMMAND301);


                    adaptor.addChild(root_1, EXECCOMMAND301_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mr_clause"


    public static class split_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_clause"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:486:1: split_clause : ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) ;
    public final AliasMasker.split_clause_return split_clause() throws RecognitionException {
        AliasMasker.split_clause_return retval = new AliasMasker.split_clause_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SPLIT302=null;
        AliasMasker.rel_return rel303 =null;

        AliasMasker.split_branch_return split_branch304 =null;

        AliasMasker.split_otherwise_return split_otherwise305 =null;


        CommonTree SPLIT302_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:487:5: ( ^( SPLIT rel ( split_branch )+ ( split_otherwise )? ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:487:7: ^( SPLIT rel ( split_branch )+ ( split_otherwise )? )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SPLIT302=(CommonTree)match(input,SPLIT,FOLLOW_SPLIT_in_split_clause2739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT302_tree = (CommonTree)adaptor.dupNode(SPLIT302);


            root_1 = (CommonTree)adaptor.becomeRoot(SPLIT302_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_rel_in_split_clause2741);
            rel303=rel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, rel303.getTree());


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:487:20: ( split_branch )+
            int cnt88=0;
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==SPLIT_BRANCH) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:487:20: split_branch
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_split_branch_in_split_clause2743);
            	    split_branch304=split_branch();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, split_branch304.getTree());


            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt88 >= 1 ) break loop88;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(88, input);
                        throw eee;
                }
                cnt88++;
            } while (true);


            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:487:34: ( split_otherwise )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==OTHERWISE) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:487:34: split_otherwise
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_split_otherwise_in_split_clause2746);
                    split_otherwise305=split_otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, split_otherwise305.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_clause"


    public static class split_branch_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_branch"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:490:1: split_branch : ^( SPLIT_BRANCH alias cond ) ;
    public final AliasMasker.split_branch_return split_branch() throws RecognitionException {
        AliasMasker.split_branch_return retval = new AliasMasker.split_branch_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SPLIT_BRANCH306=null;
        AliasMasker.alias_return alias307 =null;

        AliasMasker.cond_return cond308 =null;


        CommonTree SPLIT_BRANCH306_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:491:5: ( ^( SPLIT_BRANCH alias cond ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:491:7: ^( SPLIT_BRANCH alias cond )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            SPLIT_BRANCH306=(CommonTree)match(input,SPLIT_BRANCH,FOLLOW_SPLIT_BRANCH_in_split_branch2764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SPLIT_BRANCH306_tree = (CommonTree)adaptor.dupNode(SPLIT_BRANCH306);


            root_1 = (CommonTree)adaptor.becomeRoot(SPLIT_BRANCH306_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_split_branch2766);
            alias307=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias307.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cond_in_split_branch2768);
            cond308=cond();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, cond308.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_branch"


    public static class split_otherwise_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "split_otherwise"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:494:1: split_otherwise : ^( OTHERWISE alias ) ;
    public final AliasMasker.split_otherwise_return split_otherwise() throws RecognitionException {
        AliasMasker.split_otherwise_return retval = new AliasMasker.split_otherwise_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree OTHERWISE309=null;
        AliasMasker.alias_return alias310 =null;


        CommonTree OTHERWISE309_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:495:5: ( ^( OTHERWISE alias ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:495:7: ^( OTHERWISE alias )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            OTHERWISE309=(CommonTree)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_split_otherwise2786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OTHERWISE309_tree = (CommonTree)adaptor.dupNode(OTHERWISE309);


            root_1 = (CommonTree)adaptor.becomeRoot(OTHERWISE309_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_alias_in_split_otherwise2788);
            alias310=alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, alias310.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "split_otherwise"


    public static class col_ref_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:498:1: col_ref : ( alias_col_ref | dollar_col_ref );
    public final AliasMasker.col_ref_return col_ref() throws RecognitionException {
        AliasMasker.col_ref_return retval = new AliasMasker.col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.alias_col_ref_return alias_col_ref311 =null;

        AliasMasker.dollar_col_ref_return dollar_col_ref312 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:498:9: ( alias_col_ref | dollar_col_ref )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==GROUP||LA90_0==IDENTIFIER) ) {
                alt90=1;
            }
            else if ( (LA90_0==DOLLARVAR) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }
            switch (alt90) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:498:11: alias_col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_col_ref_in_col_ref2800);
                    alias_col_ref311=alias_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias_col_ref311.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:498:27: dollar_col_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_dollar_col_ref_in_col_ref2804);
                    dollar_col_ref312=dollar_col_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, dollar_col_ref312.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "col_ref"


    public static class alias_col_ref_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alias_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:501:1: alias_col_ref : ( GROUP | IDENTIFIER );
    public final AliasMasker.alias_col_ref_return alias_col_ref() throws RecognitionException {
        AliasMasker.alias_col_ref_return retval = new AliasMasker.alias_col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree GROUP313=null;
        CommonTree IDENTIFIER314=null;

        CommonTree GROUP313_tree=null;
        CommonTree IDENTIFIER314_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:502:5: ( GROUP | IDENTIFIER )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==GROUP) ) {
                alt91=1;
            }
            else if ( (LA91_0==IDENTIFIER) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }
            switch (alt91) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:502:7: GROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GROUP313=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_alias_col_ref2818); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP313_tree = (CommonTree)adaptor.dupNode(GROUP313);


                    adaptor.addChild(root_0, GROUP313_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:503:7: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER314=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_alias_col_ref2827); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER314_tree = (CommonTree)adaptor.dupNode(IDENTIFIER314);


                    adaptor.addChild(root_0, IDENTIFIER314_tree);
                    }


                    if ( state.backtracking==0 ) {
                              String alias = (IDENTIFIER314!=null?IDENTIFIER314.getText():null);
                              String[] names = alias.split( "::" );
                              StringBuilder sb = new StringBuilder();
                              for( int i = 0; i < names.length; i++ ) {
                                  String name = names[i];
                                  sb.append( aliasSeen.contains( name ) ? getMask( name ) : name );
                                  if( i < names.length - 1 )
                                      sb.append( "::" );
                              }
                              IDENTIFIER314.token.setText( sb.toString() );
                          }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alias_col_ref"


    public static class dollar_col_ref_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dollar_col_ref"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:518:1: dollar_col_ref : DOLLARVAR ;
    public final AliasMasker.dollar_col_ref_return dollar_col_ref() throws RecognitionException {
        AliasMasker.dollar_col_ref_return retval = new AliasMasker.dollar_col_ref_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOLLARVAR315=null;

        CommonTree DOLLARVAR315_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:519:5: ( DOLLARVAR )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:519:7: DOLLARVAR
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            DOLLARVAR315=(CommonTree)match(input,DOLLARVAR,FOLLOW_DOLLARVAR_in_dollar_col_ref2849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLARVAR315_tree = (CommonTree)adaptor.dupNode(DOLLARVAR315);


            adaptor.addChild(root_0, DOLLARVAR315_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dollar_col_ref"


    public static class const_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:522:1: const_expr : literal ;
    public final AliasMasker.const_expr_return const_expr() throws RecognitionException {
        AliasMasker.const_expr_return retval = new AliasMasker.const_expr_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.literal_return literal316 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:522:12: ( literal )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:522:14: literal
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_literal_in_const_expr2858);
            literal316=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, literal316.getTree());


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class literal_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "literal"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:525:1: literal : ( scalar | map | bag | tuple );
    public final AliasMasker.literal_return literal() throws RecognitionException {
        AliasMasker.literal_return retval = new AliasMasker.literal_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        AliasMasker.scalar_return scalar317 =null;

        AliasMasker.map_return map318 =null;

        AliasMasker.bag_return bag319 =null;

        AliasMasker.tuple_return tuple320 =null;



        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:525:9: ( scalar | map | bag | tuple )
            int alt92=4;
            switch ( input.LA(1) ) {
            case DOUBLENUMBER:
            case FALSE:
            case FLOATNUMBER:
            case INTEGER:
            case LONGINTEGER:
            case QUOTEDSTRING:
            case TRUE:
            case NULL:
                {
                alt92=1;
                }
                break;
            case MAP_VAL:
                {
                alt92=2;
                }
                break;
            case BAG_VAL:
                {
                alt92=3;
                }
                break;
            case TUPLE_VAL:
                {
                alt92=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }

            switch (alt92) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:525:11: scalar
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_scalar_in_literal2867);
                    scalar317=scalar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, scalar317.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:525:20: map
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_map_in_literal2871);
                    map318=map();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, map318.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:525:26: bag
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bag_in_literal2875);
                    bag319=bag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bag319.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:525:32: tuple
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_tuple_in_literal2879);
                    tuple320=tuple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, tuple320.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "literal"


    public static class scalar_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scalar"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:528:1: scalar : ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | QUOTEDSTRING | NULL | TRUE | FALSE );
    public final AliasMasker.scalar_return scalar() throws RecognitionException {
        AliasMasker.scalar_return retval = new AliasMasker.scalar_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set321=null;

        CommonTree set321_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:529:5: ( INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | QUOTEDSTRING | NULL | TRUE | FALSE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set321=(CommonTree)input.LT(1);

            if ( input.LA(1)==DOUBLENUMBER||input.LA(1)==FALSE||input.LA(1)==FLOATNUMBER||input.LA(1)==INTEGER||input.LA(1)==LONGINTEGER||input.LA(1)==QUOTEDSTRING||input.LA(1)==TRUE||input.LA(1)==NULL ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set321_tree = (CommonTree)adaptor.dupNode(set321);


                adaptor.addChild(root_0, set321_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scalar"


    public static class map_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:539:1: map : ^( MAP_VAL ( keyvalue )* ) ;
    public final AliasMasker.map_return map() throws RecognitionException {
        AliasMasker.map_return retval = new AliasMasker.map_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree MAP_VAL322=null;
        AliasMasker.keyvalue_return keyvalue323 =null;


        CommonTree MAP_VAL322_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:540:5: ( ^( MAP_VAL ( keyvalue )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:540:7: ^( MAP_VAL ( keyvalue )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            MAP_VAL322=(CommonTree)match(input,MAP_VAL,FOLLOW_MAP_VAL_in_map2965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MAP_VAL322_tree = (CommonTree)adaptor.dupNode(MAP_VAL322);


            root_1 = (CommonTree)adaptor.becomeRoot(MAP_VAL322_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:540:18: ( keyvalue )*
                loop93:
                do {
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==KEY_VAL_PAIR) ) {
                        alt93=1;
                    }


                    switch (alt93) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:540:18: keyvalue
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_keyvalue_in_map2967);
                	    keyvalue323=keyvalue();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, keyvalue323.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop93;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map"


    public static class keyvalue_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyvalue"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:543:1: keyvalue : ^( KEY_VAL_PAIR map_key const_expr ) ;
    public final AliasMasker.keyvalue_return keyvalue() throws RecognitionException {
        AliasMasker.keyvalue_return retval = new AliasMasker.keyvalue_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree KEY_VAL_PAIR324=null;
        AliasMasker.map_key_return map_key325 =null;

        AliasMasker.const_expr_return const_expr326 =null;


        CommonTree KEY_VAL_PAIR324_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:544:5: ( ^( KEY_VAL_PAIR map_key const_expr ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:544:7: ^( KEY_VAL_PAIR map_key const_expr )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            KEY_VAL_PAIR324=(CommonTree)match(input,KEY_VAL_PAIR,FOLLOW_KEY_VAL_PAIR_in_keyvalue2986); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            KEY_VAL_PAIR324_tree = (CommonTree)adaptor.dupNode(KEY_VAL_PAIR324);


            root_1 = (CommonTree)adaptor.becomeRoot(KEY_VAL_PAIR324_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_map_key_in_keyvalue2988);
            map_key325=map_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, map_key325.getTree());


            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_const_expr_in_keyvalue2990);
            const_expr326=const_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, const_expr326.getTree());


            match(input, Token.UP, null); if (state.failed) return retval;
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyvalue"


    public static class map_key_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_key"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:547:1: map_key : QUOTEDSTRING ;
    public final AliasMasker.map_key_return map_key() throws RecognitionException {
        AliasMasker.map_key_return retval = new AliasMasker.map_key_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRING327=null;

        CommonTree QUOTEDSTRING327_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:547:9: ( QUOTEDSTRING )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:547:11: QUOTEDSTRING
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            QUOTEDSTRING327=(CommonTree)match(input,QUOTEDSTRING,FOLLOW_QUOTEDSTRING_in_map_key3005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRING327_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRING327);


            adaptor.addChild(root_0, QUOTEDSTRING327_tree);
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_key"


    public static class bag_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bag"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:550:1: bag : ^( BAG_VAL ( tuple )* ) ;
    public final AliasMasker.bag_return bag() throws RecognitionException {
        AliasMasker.bag_return retval = new AliasMasker.bag_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BAG_VAL328=null;
        AliasMasker.tuple_return tuple329 =null;


        CommonTree BAG_VAL328_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:551:5: ( ^( BAG_VAL ( tuple )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:551:7: ^( BAG_VAL ( tuple )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            BAG_VAL328=(CommonTree)match(input,BAG_VAL,FOLLOW_BAG_VAL_in_bag3021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BAG_VAL328_tree = (CommonTree)adaptor.dupNode(BAG_VAL328);


            root_1 = (CommonTree)adaptor.becomeRoot(BAG_VAL328_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:551:18: ( tuple )*
                loop94:
                do {
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==TUPLE_VAL) ) {
                        alt94=1;
                    }


                    switch (alt94) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:551:18: tuple
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_tuple_in_bag3023);
                	    tuple329=tuple();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, tuple329.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop94;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bag"


    public static class tuple_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tuple"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:554:1: tuple : ^( TUPLE_VAL ( literal )* ) ;
    public final AliasMasker.tuple_return tuple() throws RecognitionException {
        AliasMasker.tuple_return retval = new AliasMasker.tuple_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TUPLE_VAL330=null;
        AliasMasker.literal_return literal331 =null;


        CommonTree TUPLE_VAL330_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:555:5: ( ^( TUPLE_VAL ( literal )* ) )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:555:7: ^( TUPLE_VAL ( literal )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();
            _last = (CommonTree)input.LT(1);
            TUPLE_VAL330=(CommonTree)match(input,TUPLE_VAL,FOLLOW_TUPLE_VAL_in_tuple3042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TUPLE_VAL330_tree = (CommonTree)adaptor.dupNode(TUPLE_VAL330);


            root_1 = (CommonTree)adaptor.becomeRoot(TUPLE_VAL330_tree, root_1);
            }


            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); if (state.failed) return retval;
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:555:20: ( literal )*
                loop95:
                do {
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==DOUBLENUMBER||LA95_0==FALSE||LA95_0==FLOATNUMBER||LA95_0==INTEGER||LA95_0==LONGINTEGER||LA95_0==QUOTEDSTRING||LA95_0==TRUE||LA95_0==BAG_VAL||LA95_0==MAP_VAL||LA95_0==NULL||LA95_0==TUPLE_VAL) ) {
                        alt95=1;
                    }


                    switch (alt95) {
                	case 1 :
                	    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:555:20: literal
                	    {
                	    _last = (CommonTree)input.LT(1);
                	    pushFollow(FOLLOW_literal_in_tuple3044);
                	    literal331=literal();

                	    state._fsp--;
                	    if (state.failed) return retval;
                	    if ( state.backtracking==0 ) 
                	    adaptor.addChild(root_1, literal331.getTree());


                	    if ( state.backtracking==0 ) {
                	    }
                	    }
                	    break;

                	default :
                	    break loop95;
                    }
                } while (true);


                match(input, Token.UP, null); if (state.failed) return retval;
            }
            adaptor.addChild(root_0, root_1);
            _last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tuple"


    public static class eid_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "eid"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:559:1: eid : ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | MATCHES | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | EVAL | ASC | DESC | BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | NULL | TRUE | FALSE | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | IDENTIFIER | TOBAG | TOMAP | TOTUPLE );
    public final AliasMasker.eid_return eid() throws RecognitionException {
        AliasMasker.eid_return retval = new AliasMasker.eid_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree IMPORT333=null;
        CommonTree RETURNS334=null;
        CommonTree DEFINE335=null;
        CommonTree LOAD336=null;
        CommonTree FILTER337=null;
        CommonTree FOREACH338=null;
        CommonTree MATCHES339=null;
        CommonTree ORDER340=null;
        CommonTree DISTINCT341=null;
        CommonTree COGROUP342=null;
        CommonTree JOIN343=null;
        CommonTree CROSS344=null;
        CommonTree UNION345=null;
        CommonTree SPLIT346=null;
        CommonTree INTO347=null;
        CommonTree IF348=null;
        CommonTree ALL349=null;
        CommonTree AS350=null;
        CommonTree BY351=null;
        CommonTree USING352=null;
        CommonTree INNER353=null;
        CommonTree OUTER354=null;
        CommonTree PARALLEL355=null;
        CommonTree PARTITION356=null;
        CommonTree GROUP357=null;
        CommonTree AND358=null;
        CommonTree OR359=null;
        CommonTree NOT360=null;
        CommonTree GENERATE361=null;
        CommonTree FLATTEN362=null;
        CommonTree EVAL363=null;
        CommonTree ASC364=null;
        CommonTree DESC365=null;
        CommonTree BOOLEAN366=null;
        CommonTree INT367=null;
        CommonTree LONG368=null;
        CommonTree FLOAT369=null;
        CommonTree DOUBLE370=null;
        CommonTree CHARARRAY371=null;
        CommonTree BYTEARRAY372=null;
        CommonTree BAG373=null;
        CommonTree TUPLE374=null;
        CommonTree MAP375=null;
        CommonTree IS376=null;
        CommonTree NULL377=null;
        CommonTree TRUE378=null;
        CommonTree FALSE379=null;
        CommonTree STREAM380=null;
        CommonTree THROUGH381=null;
        CommonTree STORE382=null;
        CommonTree MAPREDUCE383=null;
        CommonTree SHIP384=null;
        CommonTree CACHE385=null;
        CommonTree INPUT386=null;
        CommonTree OUTPUT387=null;
        CommonTree STDERROR388=null;
        CommonTree STDIN389=null;
        CommonTree STDOUT390=null;
        CommonTree LIMIT391=null;
        CommonTree SAMPLE392=null;
        CommonTree LEFT393=null;
        CommonTree RIGHT394=null;
        CommonTree FULL395=null;
        CommonTree IDENTIFIER396=null;
        CommonTree TOBAG397=null;
        CommonTree TOMAP398=null;
        CommonTree TOTUPLE399=null;
        AliasMasker.rel_str_op_return rel_str_op332 =null;


        CommonTree IMPORT333_tree=null;
        CommonTree RETURNS334_tree=null;
        CommonTree DEFINE335_tree=null;
        CommonTree LOAD336_tree=null;
        CommonTree FILTER337_tree=null;
        CommonTree FOREACH338_tree=null;
        CommonTree MATCHES339_tree=null;
        CommonTree ORDER340_tree=null;
        CommonTree DISTINCT341_tree=null;
        CommonTree COGROUP342_tree=null;
        CommonTree JOIN343_tree=null;
        CommonTree CROSS344_tree=null;
        CommonTree UNION345_tree=null;
        CommonTree SPLIT346_tree=null;
        CommonTree INTO347_tree=null;
        CommonTree IF348_tree=null;
        CommonTree ALL349_tree=null;
        CommonTree AS350_tree=null;
        CommonTree BY351_tree=null;
        CommonTree USING352_tree=null;
        CommonTree INNER353_tree=null;
        CommonTree OUTER354_tree=null;
        CommonTree PARALLEL355_tree=null;
        CommonTree PARTITION356_tree=null;
        CommonTree GROUP357_tree=null;
        CommonTree AND358_tree=null;
        CommonTree OR359_tree=null;
        CommonTree NOT360_tree=null;
        CommonTree GENERATE361_tree=null;
        CommonTree FLATTEN362_tree=null;
        CommonTree EVAL363_tree=null;
        CommonTree ASC364_tree=null;
        CommonTree DESC365_tree=null;
        CommonTree BOOLEAN366_tree=null;
        CommonTree INT367_tree=null;
        CommonTree LONG368_tree=null;
        CommonTree FLOAT369_tree=null;
        CommonTree DOUBLE370_tree=null;
        CommonTree CHARARRAY371_tree=null;
        CommonTree BYTEARRAY372_tree=null;
        CommonTree BAG373_tree=null;
        CommonTree TUPLE374_tree=null;
        CommonTree MAP375_tree=null;
        CommonTree IS376_tree=null;
        CommonTree NULL377_tree=null;
        CommonTree TRUE378_tree=null;
        CommonTree FALSE379_tree=null;
        CommonTree STREAM380_tree=null;
        CommonTree THROUGH381_tree=null;
        CommonTree STORE382_tree=null;
        CommonTree MAPREDUCE383_tree=null;
        CommonTree SHIP384_tree=null;
        CommonTree CACHE385_tree=null;
        CommonTree INPUT386_tree=null;
        CommonTree OUTPUT387_tree=null;
        CommonTree STDERROR388_tree=null;
        CommonTree STDIN389_tree=null;
        CommonTree STDOUT390_tree=null;
        CommonTree LIMIT391_tree=null;
        CommonTree SAMPLE392_tree=null;
        CommonTree LEFT393_tree=null;
        CommonTree RIGHT394_tree=null;
        CommonTree FULL395_tree=null;
        CommonTree IDENTIFIER396_tree=null;
        CommonTree TOBAG397_tree=null;
        CommonTree TOMAP398_tree=null;
        CommonTree TOTUPLE399_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:559:5: ( rel_str_op | IMPORT | RETURNS | DEFINE | LOAD | FILTER | FOREACH | MATCHES | ORDER | DISTINCT | COGROUP | JOIN | CROSS | UNION | SPLIT | INTO | IF | ALL | AS | BY | USING | INNER | OUTER | PARALLEL | PARTITION | GROUP | AND | OR | NOT | GENERATE | FLATTEN | EVAL | ASC | DESC | BOOLEAN | INT | LONG | FLOAT | DOUBLE | CHARARRAY | BYTEARRAY | BAG | TUPLE | MAP | IS | NULL | TRUE | FALSE | STREAM | THROUGH | STORE | MAPREDUCE | SHIP | CACHE | INPUT | OUTPUT | STDERROR | STDIN | STDOUT | LIMIT | SAMPLE | LEFT | RIGHT | FULL | IDENTIFIER | TOBAG | TOMAP | TOTUPLE )
            int alt96=68;
            switch ( input.LA(1) ) {
            case STR_OP_EQ:
            case STR_OP_GT:
            case STR_OP_GTE:
            case STR_OP_LT:
            case STR_OP_LTE:
            case STR_OP_MATCHES:
            case STR_OP_NE:
                {
                alt96=1;
                }
                break;
            case IMPORT:
                {
                alt96=2;
                }
                break;
            case RETURNS:
                {
                alt96=3;
                }
                break;
            case DEFINE:
                {
                alt96=4;
                }
                break;
            case LOAD:
                {
                alt96=5;
                }
                break;
            case FILTER:
                {
                alt96=6;
                }
                break;
            case FOREACH:
                {
                alt96=7;
                }
                break;
            case MATCHES:
                {
                alt96=8;
                }
                break;
            case ORDER:
                {
                alt96=9;
                }
                break;
            case DISTINCT:
                {
                alt96=10;
                }
                break;
            case COGROUP:
                {
                alt96=11;
                }
                break;
            case JOIN:
                {
                alt96=12;
                }
                break;
            case CROSS:
                {
                alt96=13;
                }
                break;
            case UNION:
                {
                alt96=14;
                }
                break;
            case SPLIT:
                {
                alt96=15;
                }
                break;
            case INTO:
                {
                alt96=16;
                }
                break;
            case IF:
                {
                alt96=17;
                }
                break;
            case ALL:
                {
                alt96=18;
                }
                break;
            case AS:
                {
                alt96=19;
                }
                break;
            case BY:
                {
                alt96=20;
                }
                break;
            case USING:
                {
                alt96=21;
                }
                break;
            case INNER:
                {
                alt96=22;
                }
                break;
            case OUTER:
                {
                alt96=23;
                }
                break;
            case PARALLEL:
                {
                alt96=24;
                }
                break;
            case PARTITION:
                {
                alt96=25;
                }
                break;
            case GROUP:
                {
                alt96=26;
                }
                break;
            case AND:
                {
                alt96=27;
                }
                break;
            case OR:
                {
                alt96=28;
                }
                break;
            case NOT:
                {
                alt96=29;
                }
                break;
            case GENERATE:
                {
                alt96=30;
                }
                break;
            case FLATTEN:
                {
                alt96=31;
                }
                break;
            case EVAL:
                {
                alt96=32;
                }
                break;
            case ASC:
                {
                alt96=33;
                }
                break;
            case DESC:
                {
                alt96=34;
                }
                break;
            case BOOLEAN:
                {
                alt96=35;
                }
                break;
            case INT:
                {
                alt96=36;
                }
                break;
            case LONG:
                {
                alt96=37;
                }
                break;
            case FLOAT:
                {
                alt96=38;
                }
                break;
            case DOUBLE:
                {
                alt96=39;
                }
                break;
            case CHARARRAY:
                {
                alt96=40;
                }
                break;
            case BYTEARRAY:
                {
                alt96=41;
                }
                break;
            case BAG:
                {
                alt96=42;
                }
                break;
            case TUPLE:
                {
                alt96=43;
                }
                break;
            case MAP:
                {
                alt96=44;
                }
                break;
            case IS:
                {
                alt96=45;
                }
                break;
            case NULL:
                {
                alt96=46;
                }
                break;
            case TRUE:
                {
                alt96=47;
                }
                break;
            case FALSE:
                {
                alt96=48;
                }
                break;
            case STREAM:
                {
                alt96=49;
                }
                break;
            case THROUGH:
                {
                alt96=50;
                }
                break;
            case STORE:
                {
                alt96=51;
                }
                break;
            case MAPREDUCE:
                {
                alt96=52;
                }
                break;
            case SHIP:
                {
                alt96=53;
                }
                break;
            case CACHE:
                {
                alt96=54;
                }
                break;
            case INPUT:
                {
                alt96=55;
                }
                break;
            case OUTPUT:
                {
                alt96=56;
                }
                break;
            case STDERROR:
                {
                alt96=57;
                }
                break;
            case STDIN:
                {
                alt96=58;
                }
                break;
            case STDOUT:
                {
                alt96=59;
                }
                break;
            case LIMIT:
                {
                alt96=60;
                }
                break;
            case SAMPLE:
                {
                alt96=61;
                }
                break;
            case LEFT:
                {
                alt96=62;
                }
                break;
            case RIGHT:
                {
                alt96=63;
                }
                break;
            case FULL:
                {
                alt96=64;
                }
                break;
            case IDENTIFIER:
                {
                alt96=65;
                }
                break;
            case TOBAG:
                {
                alt96=66;
                }
                break;
            case TOMAP:
                {
                alt96=67;
                }
                break;
            case TOTUPLE:
                {
                alt96=68;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }

            switch (alt96) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:559:7: rel_str_op
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_str_op_in_eid3057);
                    rel_str_op332=rel_str_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_str_op332.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:560:7: IMPORT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IMPORT333=(CommonTree)match(input,IMPORT,FOLLOW_IMPORT_in_eid3065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IMPORT333_tree = (CommonTree)adaptor.dupNode(IMPORT333);


                    adaptor.addChild(root_0, IMPORT333_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:561:7: RETURNS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    RETURNS334=(CommonTree)match(input,RETURNS,FOLLOW_RETURNS_in_eid3073); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURNS334_tree = (CommonTree)adaptor.dupNode(RETURNS334);


                    adaptor.addChild(root_0, RETURNS334_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:562:7: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DEFINE335=(CommonTree)match(input,DEFINE,FOLLOW_DEFINE_in_eid3081); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE335_tree = (CommonTree)adaptor.dupNode(DEFINE335);


                    adaptor.addChild(root_0, DEFINE335_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:563:7: LOAD
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LOAD336=(CommonTree)match(input,LOAD,FOLLOW_LOAD_in_eid3089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOAD336_tree = (CommonTree)adaptor.dupNode(LOAD336);


                    adaptor.addChild(root_0, LOAD336_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:564:7: FILTER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FILTER337=(CommonTree)match(input,FILTER,FOLLOW_FILTER_in_eid3097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FILTER337_tree = (CommonTree)adaptor.dupNode(FILTER337);


                    adaptor.addChild(root_0, FILTER337_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:565:7: FOREACH
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FOREACH338=(CommonTree)match(input,FOREACH,FOLLOW_FOREACH_in_eid3105); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOREACH338_tree = (CommonTree)adaptor.dupNode(FOREACH338);


                    adaptor.addChild(root_0, FOREACH338_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:566:7: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MATCHES339=(CommonTree)match(input,MATCHES,FOLLOW_MATCHES_in_eid3113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES339_tree = (CommonTree)adaptor.dupNode(MATCHES339);


                    adaptor.addChild(root_0, MATCHES339_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:567:7: ORDER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ORDER340=(CommonTree)match(input,ORDER,FOLLOW_ORDER_in_eid3121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORDER340_tree = (CommonTree)adaptor.dupNode(ORDER340);


                    adaptor.addChild(root_0, ORDER340_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:568:7: DISTINCT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DISTINCT341=(CommonTree)match(input,DISTINCT,FOLLOW_DISTINCT_in_eid3129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT341_tree = (CommonTree)adaptor.dupNode(DISTINCT341);


                    adaptor.addChild(root_0, DISTINCT341_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:569:7: COGROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    COGROUP342=(CommonTree)match(input,COGROUP,FOLLOW_COGROUP_in_eid3137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COGROUP342_tree = (CommonTree)adaptor.dupNode(COGROUP342);


                    adaptor.addChild(root_0, COGROUP342_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:570:7: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    JOIN343=(CommonTree)match(input,JOIN,FOLLOW_JOIN_in_eid3145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN343_tree = (CommonTree)adaptor.dupNode(JOIN343);


                    adaptor.addChild(root_0, JOIN343_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:571:7: CROSS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CROSS344=(CommonTree)match(input,CROSS,FOLLOW_CROSS_in_eid3153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CROSS344_tree = (CommonTree)adaptor.dupNode(CROSS344);


                    adaptor.addChild(root_0, CROSS344_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:572:7: UNION
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    UNION345=(CommonTree)match(input,UNION,FOLLOW_UNION_in_eid3161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNION345_tree = (CommonTree)adaptor.dupNode(UNION345);


                    adaptor.addChild(root_0, UNION345_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:573:7: SPLIT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SPLIT346=(CommonTree)match(input,SPLIT,FOLLOW_SPLIT_in_eid3169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SPLIT346_tree = (CommonTree)adaptor.dupNode(SPLIT346);


                    adaptor.addChild(root_0, SPLIT346_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:574:7: INTO
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INTO347=(CommonTree)match(input,INTO,FOLLOW_INTO_in_eid3177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTO347_tree = (CommonTree)adaptor.dupNode(INTO347);


                    adaptor.addChild(root_0, INTO347_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 17 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:575:7: IF
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IF348=(CommonTree)match(input,IF,FOLLOW_IF_in_eid3185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IF348_tree = (CommonTree)adaptor.dupNode(IF348);


                    adaptor.addChild(root_0, IF348_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 18 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:576:7: ALL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ALL349=(CommonTree)match(input,ALL,FOLLOW_ALL_in_eid3193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALL349_tree = (CommonTree)adaptor.dupNode(ALL349);


                    adaptor.addChild(root_0, ALL349_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 19 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:577:7: AS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    AS350=(CommonTree)match(input,AS,FOLLOW_AS_in_eid3201); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS350_tree = (CommonTree)adaptor.dupNode(AS350);


                    adaptor.addChild(root_0, AS350_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 20 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:578:7: BY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BY351=(CommonTree)match(input,BY,FOLLOW_BY_in_eid3209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BY351_tree = (CommonTree)adaptor.dupNode(BY351);


                    adaptor.addChild(root_0, BY351_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 21 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:579:7: USING
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    USING352=(CommonTree)match(input,USING,FOLLOW_USING_in_eid3217); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    USING352_tree = (CommonTree)adaptor.dupNode(USING352);


                    adaptor.addChild(root_0, USING352_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 22 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:580:7: INNER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INNER353=(CommonTree)match(input,INNER,FOLLOW_INNER_in_eid3225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INNER353_tree = (CommonTree)adaptor.dupNode(INNER353);


                    adaptor.addChild(root_0, INNER353_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 23 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:581:7: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OUTER354=(CommonTree)match(input,OUTER,FOLLOW_OUTER_in_eid3233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER354_tree = (CommonTree)adaptor.dupNode(OUTER354);


                    adaptor.addChild(root_0, OUTER354_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 24 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:582:7: PARALLEL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    PARALLEL355=(CommonTree)match(input,PARALLEL,FOLLOW_PARALLEL_in_eid3241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARALLEL355_tree = (CommonTree)adaptor.dupNode(PARALLEL355);


                    adaptor.addChild(root_0, PARALLEL355_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 25 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:583:7: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    PARTITION356=(CommonTree)match(input,PARTITION,FOLLOW_PARTITION_in_eid3249); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION356_tree = (CommonTree)adaptor.dupNode(PARTITION356);


                    adaptor.addChild(root_0, PARTITION356_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 26 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:584:7: GROUP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GROUP357=(CommonTree)match(input,GROUP,FOLLOW_GROUP_in_eid3257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GROUP357_tree = (CommonTree)adaptor.dupNode(GROUP357);


                    adaptor.addChild(root_0, GROUP357_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 27 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:585:7: AND
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    AND358=(CommonTree)match(input,AND,FOLLOW_AND_in_eid3265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND358_tree = (CommonTree)adaptor.dupNode(AND358);


                    adaptor.addChild(root_0, AND358_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 28 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:586:7: OR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OR359=(CommonTree)match(input,OR,FOLLOW_OR_in_eid3273); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR359_tree = (CommonTree)adaptor.dupNode(OR359);


                    adaptor.addChild(root_0, OR359_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 29 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:587:7: NOT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NOT360=(CommonTree)match(input,NOT,FOLLOW_NOT_in_eid3281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT360_tree = (CommonTree)adaptor.dupNode(NOT360);


                    adaptor.addChild(root_0, NOT360_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 30 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:588:7: GENERATE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    GENERATE361=(CommonTree)match(input,GENERATE,FOLLOW_GENERATE_in_eid3289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GENERATE361_tree = (CommonTree)adaptor.dupNode(GENERATE361);


                    adaptor.addChild(root_0, GENERATE361_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 31 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:589:7: FLATTEN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLATTEN362=(CommonTree)match(input,FLATTEN,FOLLOW_FLATTEN_in_eid3297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLATTEN362_tree = (CommonTree)adaptor.dupNode(FLATTEN362);


                    adaptor.addChild(root_0, FLATTEN362_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 32 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:590:7: EVAL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    EVAL363=(CommonTree)match(input,EVAL,FOLLOW_EVAL_in_eid3305); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVAL363_tree = (CommonTree)adaptor.dupNode(EVAL363);


                    adaptor.addChild(root_0, EVAL363_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 33 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:591:7: ASC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    ASC364=(CommonTree)match(input,ASC,FOLLOW_ASC_in_eid3313); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASC364_tree = (CommonTree)adaptor.dupNode(ASC364);


                    adaptor.addChild(root_0, ASC364_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 34 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:592:7: DESC
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DESC365=(CommonTree)match(input,DESC,FOLLOW_DESC_in_eid3321); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESC365_tree = (CommonTree)adaptor.dupNode(DESC365);


                    adaptor.addChild(root_0, DESC365_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 35 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:593:7: BOOLEAN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BOOLEAN366=(CommonTree)match(input,BOOLEAN,FOLLOW_BOOLEAN_in_eid3329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLEAN366_tree = (CommonTree)adaptor.dupNode(BOOLEAN366);


                    adaptor.addChild(root_0, BOOLEAN366_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 36 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:594:7: INT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INT367=(CommonTree)match(input,INT,FOLLOW_INT_in_eid3337); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT367_tree = (CommonTree)adaptor.dupNode(INT367);


                    adaptor.addChild(root_0, INT367_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 37 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:595:7: LONG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LONG368=(CommonTree)match(input,LONG,FOLLOW_LONG_in_eid3345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONG368_tree = (CommonTree)adaptor.dupNode(LONG368);


                    adaptor.addChild(root_0, LONG368_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 38 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:596:7: FLOAT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FLOAT369=(CommonTree)match(input,FLOAT,FOLLOW_FLOAT_in_eid3353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT369_tree = (CommonTree)adaptor.dupNode(FLOAT369);


                    adaptor.addChild(root_0, FLOAT369_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 39 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:597:7: DOUBLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    DOUBLE370=(CommonTree)match(input,DOUBLE,FOLLOW_DOUBLE_in_eid3361); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLE370_tree = (CommonTree)adaptor.dupNode(DOUBLE370);


                    adaptor.addChild(root_0, DOUBLE370_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 40 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:598:7: CHARARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CHARARRAY371=(CommonTree)match(input,CHARARRAY,FOLLOW_CHARARRAY_in_eid3369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHARARRAY371_tree = (CommonTree)adaptor.dupNode(CHARARRAY371);


                    adaptor.addChild(root_0, CHARARRAY371_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 41 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:599:7: BYTEARRAY
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BYTEARRAY372=(CommonTree)match(input,BYTEARRAY,FOLLOW_BYTEARRAY_in_eid3377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BYTEARRAY372_tree = (CommonTree)adaptor.dupNode(BYTEARRAY372);


                    adaptor.addChild(root_0, BYTEARRAY372_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 42 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:600:7: BAG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    BAG373=(CommonTree)match(input,BAG,FOLLOW_BAG_in_eid3385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BAG373_tree = (CommonTree)adaptor.dupNode(BAG373);


                    adaptor.addChild(root_0, BAG373_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 43 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:601:7: TUPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TUPLE374=(CommonTree)match(input,TUPLE,FOLLOW_TUPLE_in_eid3393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TUPLE374_tree = (CommonTree)adaptor.dupNode(TUPLE374);


                    adaptor.addChild(root_0, TUPLE374_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 44 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:602:7: MAP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MAP375=(CommonTree)match(input,MAP,FOLLOW_MAP_in_eid3401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAP375_tree = (CommonTree)adaptor.dupNode(MAP375);


                    adaptor.addChild(root_0, MAP375_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 45 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:603:7: IS
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IS376=(CommonTree)match(input,IS,FOLLOW_IS_in_eid3409); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS376_tree = (CommonTree)adaptor.dupNode(IS376);


                    adaptor.addChild(root_0, IS376_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 46 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:604:7: NULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    NULL377=(CommonTree)match(input,NULL,FOLLOW_NULL_in_eid3417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NULL377_tree = (CommonTree)adaptor.dupNode(NULL377);


                    adaptor.addChild(root_0, NULL377_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 47 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:605:7: TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TRUE378=(CommonTree)match(input,TRUE,FOLLOW_TRUE_in_eid3425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRUE378_tree = (CommonTree)adaptor.dupNode(TRUE378);


                    adaptor.addChild(root_0, TRUE378_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 48 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:606:7: FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FALSE379=(CommonTree)match(input,FALSE,FOLLOW_FALSE_in_eid3433); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FALSE379_tree = (CommonTree)adaptor.dupNode(FALSE379);


                    adaptor.addChild(root_0, FALSE379_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 49 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:607:7: STREAM
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STREAM380=(CommonTree)match(input,STREAM,FOLLOW_STREAM_in_eid3441); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STREAM380_tree = (CommonTree)adaptor.dupNode(STREAM380);


                    adaptor.addChild(root_0, STREAM380_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 50 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:608:7: THROUGH
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    THROUGH381=(CommonTree)match(input,THROUGH,FOLLOW_THROUGH_in_eid3449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    THROUGH381_tree = (CommonTree)adaptor.dupNode(THROUGH381);


                    adaptor.addChild(root_0, THROUGH381_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 51 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:609:7: STORE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STORE382=(CommonTree)match(input,STORE,FOLLOW_STORE_in_eid3457); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STORE382_tree = (CommonTree)adaptor.dupNode(STORE382);


                    adaptor.addChild(root_0, STORE382_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 52 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:610:7: MAPREDUCE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    MAPREDUCE383=(CommonTree)match(input,MAPREDUCE,FOLLOW_MAPREDUCE_in_eid3465); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAPREDUCE383_tree = (CommonTree)adaptor.dupNode(MAPREDUCE383);


                    adaptor.addChild(root_0, MAPREDUCE383_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 53 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:611:7: SHIP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SHIP384=(CommonTree)match(input,SHIP,FOLLOW_SHIP_in_eid3473); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SHIP384_tree = (CommonTree)adaptor.dupNode(SHIP384);


                    adaptor.addChild(root_0, SHIP384_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 54 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:612:7: CACHE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    CACHE385=(CommonTree)match(input,CACHE,FOLLOW_CACHE_in_eid3481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CACHE385_tree = (CommonTree)adaptor.dupNode(CACHE385);


                    adaptor.addChild(root_0, CACHE385_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 55 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:613:7: INPUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    INPUT386=(CommonTree)match(input,INPUT,FOLLOW_INPUT_in_eid3489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INPUT386_tree = (CommonTree)adaptor.dupNode(INPUT386);


                    adaptor.addChild(root_0, INPUT386_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 56 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:614:7: OUTPUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    OUTPUT387=(CommonTree)match(input,OUTPUT,FOLLOW_OUTPUT_in_eid3497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTPUT387_tree = (CommonTree)adaptor.dupNode(OUTPUT387);


                    adaptor.addChild(root_0, OUTPUT387_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 57 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:615:7: STDERROR
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDERROR388=(CommonTree)match(input,STDERROR,FOLLOW_STDERROR_in_eid3505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDERROR388_tree = (CommonTree)adaptor.dupNode(STDERROR388);


                    adaptor.addChild(root_0, STDERROR388_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 58 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:616:7: STDIN
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDIN389=(CommonTree)match(input,STDIN,FOLLOW_STDIN_in_eid3513); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDIN389_tree = (CommonTree)adaptor.dupNode(STDIN389);


                    adaptor.addChild(root_0, STDIN389_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 59 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:617:7: STDOUT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STDOUT390=(CommonTree)match(input,STDOUT,FOLLOW_STDOUT_in_eid3521); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDOUT390_tree = (CommonTree)adaptor.dupNode(STDOUT390);


                    adaptor.addChild(root_0, STDOUT390_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 60 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:618:7: LIMIT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LIMIT391=(CommonTree)match(input,LIMIT,FOLLOW_LIMIT_in_eid3529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LIMIT391_tree = (CommonTree)adaptor.dupNode(LIMIT391);


                    adaptor.addChild(root_0, LIMIT391_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 61 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:619:7: SAMPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    SAMPLE392=(CommonTree)match(input,SAMPLE,FOLLOW_SAMPLE_in_eid3537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SAMPLE392_tree = (CommonTree)adaptor.dupNode(SAMPLE392);


                    adaptor.addChild(root_0, SAMPLE392_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 62 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:620:7: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    LEFT393=(CommonTree)match(input,LEFT,FOLLOW_LEFT_in_eid3545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT393_tree = (CommonTree)adaptor.dupNode(LEFT393);


                    adaptor.addChild(root_0, LEFT393_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 63 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:621:7: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    RIGHT394=(CommonTree)match(input,RIGHT,FOLLOW_RIGHT_in_eid3553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT394_tree = (CommonTree)adaptor.dupNode(RIGHT394);


                    adaptor.addChild(root_0, RIGHT394_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 64 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:622:7: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    FULL395=(CommonTree)match(input,FULL,FOLLOW_FULL_in_eid3561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL395_tree = (CommonTree)adaptor.dupNode(FULL395);


                    adaptor.addChild(root_0, FULL395_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 65 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:623:7: IDENTIFIER
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    IDENTIFIER396=(CommonTree)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_eid3569); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER396_tree = (CommonTree)adaptor.dupNode(IDENTIFIER396);


                    adaptor.addChild(root_0, IDENTIFIER396_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 66 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:624:7: TOBAG
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOBAG397=(CommonTree)match(input,TOBAG,FOLLOW_TOBAG_in_eid3577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOBAG397_tree = (CommonTree)adaptor.dupNode(TOBAG397);


                    adaptor.addChild(root_0, TOBAG397_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 67 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:625:7: TOMAP
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOMAP398=(CommonTree)match(input,TOMAP,FOLLOW_TOMAP_in_eid3585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOMAP398_tree = (CommonTree)adaptor.dupNode(TOMAP398);


                    adaptor.addChild(root_0, TOMAP398_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 68 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:626:7: TOTUPLE
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    TOTUPLE399=(CommonTree)match(input,TOTUPLE,FOLLOW_TOTUPLE_in_eid3593); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TOTUPLE399_tree = (CommonTree)adaptor.dupNode(TOTUPLE399);


                    adaptor.addChild(root_0, TOTUPLE399_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "eid"


    public static class rel_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:630:1: rel_op : ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES );
    public final AliasMasker.rel_op_return rel_op() throws RecognitionException {
        AliasMasker.rel_op_return retval = new AliasMasker.rel_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree STR_OP_MATCHES406=null;
        AliasMasker.rel_op_eq_return rel_op_eq400 =null;

        AliasMasker.rel_op_ne_return rel_op_ne401 =null;

        AliasMasker.rel_op_gt_return rel_op_gt402 =null;

        AliasMasker.rel_op_gte_return rel_op_gte403 =null;

        AliasMasker.rel_op_lt_return rel_op_lt404 =null;

        AliasMasker.rel_op_lte_return rel_op_lte405 =null;


        CommonTree STR_OP_MATCHES406_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:631:5: ( rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | STR_OP_MATCHES )
            int alt97=7;
            switch ( input.LA(1) ) {
            case NUM_OP_EQ:
            case STR_OP_EQ:
                {
                alt97=1;
                }
                break;
            case NUM_OP_NE:
            case STR_OP_NE:
                {
                alt97=2;
                }
                break;
            case NUM_OP_GT:
            case STR_OP_GT:
                {
                alt97=3;
                }
                break;
            case NUM_OP_GTE:
            case STR_OP_GTE:
                {
                alt97=4;
                }
                break;
            case NUM_OP_LT:
            case STR_OP_LT:
                {
                alt97=5;
                }
                break;
            case NUM_OP_LTE:
            case STR_OP_LTE:
                {
                alt97=6;
                }
                break;
            case STR_OP_MATCHES:
                {
                alt97=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }

            switch (alt97) {
                case 1 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:631:7: rel_op_eq
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_eq_in_rel_op3607);
                    rel_op_eq400=rel_op_eq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_eq400.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:632:7: rel_op_ne
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_ne_in_rel_op3615);
                    rel_op_ne401=rel_op_ne();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_ne401.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:633:7: rel_op_gt
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gt_in_rel_op3623);
                    rel_op_gt402=rel_op_gt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_gt402.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:634:7: rel_op_gte
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_gte_in_rel_op3631);
                    rel_op_gte403=rel_op_gte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_gte403.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:635:7: rel_op_lt
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lt_in_rel_op3639);
                    rel_op_lt404=rel_op_lt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_lt404.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:636:7: rel_op_lte
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rel_op_lte_in_rel_op3647);
                    rel_op_lte405=rel_op_lte();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rel_op_lte405.getTree());


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:637:7: STR_OP_MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    _last = (CommonTree)input.LT(1);
                    STR_OP_MATCHES406=(CommonTree)match(input,STR_OP_MATCHES,FOLLOW_STR_OP_MATCHES_in_rel_op3655); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STR_OP_MATCHES406_tree = (CommonTree)adaptor.dupNode(STR_OP_MATCHES406);


                    adaptor.addChild(root_0, STR_OP_MATCHES406_tree);
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op"


    public static class rel_op_eq_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_eq"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:640:1: rel_op_eq : ( STR_OP_EQ | NUM_OP_EQ );
    public final AliasMasker.rel_op_eq_return rel_op_eq() throws RecognitionException {
        AliasMasker.rel_op_eq_return retval = new AliasMasker.rel_op_eq_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set407=null;

        CommonTree set407_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:641:5: ( STR_OP_EQ | NUM_OP_EQ )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set407=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_EQ||input.LA(1)==STR_OP_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set407_tree = (CommonTree)adaptor.dupNode(set407);


                adaptor.addChild(root_0, set407_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_eq"


    public static class rel_op_ne_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_ne"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:645:1: rel_op_ne : ( STR_OP_NE | NUM_OP_NE );
    public final AliasMasker.rel_op_ne_return rel_op_ne() throws RecognitionException {
        AliasMasker.rel_op_ne_return retval = new AliasMasker.rel_op_ne_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set408=null;

        CommonTree set408_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:646:5: ( STR_OP_NE | NUM_OP_NE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set408=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_NE||input.LA(1)==STR_OP_NE ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set408_tree = (CommonTree)adaptor.dupNode(set408);


                adaptor.addChild(root_0, set408_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_ne"


    public static class rel_op_gt_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:650:1: rel_op_gt : ( STR_OP_GT | NUM_OP_GT );
    public final AliasMasker.rel_op_gt_return rel_op_gt() throws RecognitionException {
        AliasMasker.rel_op_gt_return retval = new AliasMasker.rel_op_gt_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set409=null;

        CommonTree set409_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:651:5: ( STR_OP_GT | NUM_OP_GT )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set409=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_GT||input.LA(1)==STR_OP_GT ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set409_tree = (CommonTree)adaptor.dupNode(set409);


                adaptor.addChild(root_0, set409_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gt"


    public static class rel_op_gte_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_gte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:655:1: rel_op_gte : ( STR_OP_GTE | NUM_OP_GTE );
    public final AliasMasker.rel_op_gte_return rel_op_gte() throws RecognitionException {
        AliasMasker.rel_op_gte_return retval = new AliasMasker.rel_op_gte_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set410=null;

        CommonTree set410_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:656:5: ( STR_OP_GTE | NUM_OP_GTE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set410=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_GTE||input.LA(1)==STR_OP_GTE ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set410_tree = (CommonTree)adaptor.dupNode(set410);


                adaptor.addChild(root_0, set410_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_gte"


    public static class rel_op_lt_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lt"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:660:1: rel_op_lt : ( STR_OP_LT | NUM_OP_LT );
    public final AliasMasker.rel_op_lt_return rel_op_lt() throws RecognitionException {
        AliasMasker.rel_op_lt_return retval = new AliasMasker.rel_op_lt_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set411=null;

        CommonTree set411_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:661:5: ( STR_OP_LT | NUM_OP_LT )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set411=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_LT||input.LA(1)==STR_OP_LT ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set411_tree = (CommonTree)adaptor.dupNode(set411);


                adaptor.addChild(root_0, set411_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lt"


    public static class rel_op_lte_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_op_lte"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:665:1: rel_op_lte : ( STR_OP_LTE | NUM_OP_LTE );
    public final AliasMasker.rel_op_lte_return rel_op_lte() throws RecognitionException {
        AliasMasker.rel_op_lte_return retval = new AliasMasker.rel_op_lte_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set412=null;

        CommonTree set412_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:666:5: ( STR_OP_LTE | NUM_OP_LTE )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set412=(CommonTree)input.LT(1);

            if ( input.LA(1)==NUM_OP_LTE||input.LA(1)==STR_OP_LTE ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set412_tree = (CommonTree)adaptor.dupNode(set412);


                adaptor.addChild(root_0, set412_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_op_lte"


    public static class rel_str_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rel_str_op"
    // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:670:1: rel_str_op : ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES );
    public final AliasMasker.rel_str_op_return rel_str_op() throws RecognitionException {
        AliasMasker.rel_str_op_return retval = new AliasMasker.rel_str_op_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set413=null;

        CommonTree set413_tree=null;

        try {
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:671:5: ( STR_OP_EQ | STR_OP_NE | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_MATCHES )
            // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            _last = (CommonTree)input.LT(1);
            set413=(CommonTree)input.LT(1);

            if ( (input.LA(1) >= STR_OP_EQ && input.LA(1) <= STR_OP_NE) ) {
                input.consume();
                if ( state.backtracking==0 ) {
                set413_tree = (CommonTree)adaptor.dupNode(set413);


                adaptor.addChild(root_0, set413_tree);
                }

                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }

        }

        catch(RecognitionException re) {
            throw re;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rel_str_op"

    // $ANTLR start synpred88_AliasMasker
    public final void synpred88_AliasMasker_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:292:7: ( ^( CAST_EXPR type expr ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:292:7: ^( CAST_EXPR type expr )
        {
        match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_synpred88_AliasMasker1458); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred88_AliasMasker1460);
        type();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred88_AliasMasker1462);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred88_AliasMasker

    // $ANTLR start synpred92_AliasMasker
    public final void synpred92_AliasMasker_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:296:7: ( ^( CAST_EXPR type_cast expr ) )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:296:7: ^( CAST_EXPR type_cast expr )
        {
        match(input,CAST_EXPR,FOLLOW_CAST_EXPR_in_synpred92_AliasMasker1504); if (state.failed) return ;

        match(input, Token.DOWN, null); if (state.failed) return ;
        pushFollow(FOLLOW_type_cast_in_synpred92_AliasMasker1506);
        type_cast();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_expr_in_synpred92_AliasMasker1508);
        expr();

        state._fsp--;
        if (state.failed) return ;

        match(input, Token.UP, null); if (state.failed) return ;


        }

    }
    // $ANTLR end synpred92_AliasMasker

    // $ANTLR start synpred108_AliasMasker
    public final void synpred108_AliasMasker_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:22: ( INTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:22: INTEGER
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred108_AliasMasker1808); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred108_AliasMasker

    // $ANTLR start synpred109_AliasMasker
    public final void synpred109_AliasMasker_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:32: ( LONGINTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:348:32: LONGINTEGER
        {
        match(input,LONGINTEGER,FOLLOW_LONGINTEGER_in_synpred109_AliasMasker1812); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred109_AliasMasker

    // $ANTLR start synpred110_AliasMasker
    public final void synpred110_AliasMasker_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:352:24: ( DOUBLENUMBER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:352:24: DOUBLENUMBER
        {
        match(input,DOUBLENUMBER,FOLLOW_DOUBLENUMBER_in_synpred110_AliasMasker1843); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred110_AliasMasker

    // $ANTLR start synpred127_AliasMasker
    public final void synpred127_AliasMasker_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:392:7: ( join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:392:7: join_item ( LEFT | RIGHT | FULL ) ( OUTER )? join_item
        {
        pushFollow(FOLLOW_join_item_in_synpred127_AliasMasker2081);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==FULL||input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:395:16: ( OUTER )?
        int alt104=2;
        int LA104_0 = input.LA(1);

        if ( (LA104_0==OUTER) ) {
            alt104=1;
        }
        switch (alt104) {
            case 1 :
                // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:395:16: OUTER
                {
                match(input,OUTER,FOLLOW_OUTER_in_synpred127_AliasMasker2139); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_join_item_in_synpred127_AliasMasker2142);
        join_item();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred127_AliasMasker

    // $ANTLR start synpred145_AliasMasker
    public final void synpred145_AliasMasker_fragment() throws RecognitionException {
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:463:34: ( INTEGER )
        // /nfs/ktl/home1/kaituo/Code/PigLatin4/trunk/src/org/apache/pig/parser/AliasMasker.g:463:34: INTEGER
        {
        match(input,INTEGER,FOLLOW_INTEGER_in_synpred145_AliasMasker2597); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred145_AliasMasker

    // Delegated rules

    public final boolean synpred145_AliasMasker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_AliasMasker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_AliasMasker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_AliasMasker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_AliasMasker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_AliasMasker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_AliasMasker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_AliasMasker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_AliasMasker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_AliasMasker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_AliasMasker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_AliasMasker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_AliasMasker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_AliasMasker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_QUERY_in_query81 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_in_query83 = new BitSet(new long[]{0x0000000000000008L,0x0000000200000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_general_statement_in_statement95 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_statement_in_statement109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_split_statement118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATEMENT_in_general_statement135 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_general_statement139 = new BitSet(new long[]{0x46080121004A4000L,0x000400C210000800L});
    public static final BitSet FOLLOW_op_clause_in_general_statement153 = new BitSet(new long[]{0x0000000000000008L,0x0000000000008000L});
    public static final BitSet FOLLOW_parallel_clause_in_general_statement155 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARALLEL_in_parallel_clause175 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_INTEGER_in_parallel_clause177 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_clause_in_op_clause214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_load_clause_in_op_clause229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_clause_in_op_clause243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_store_clause_in_op_clause257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filter_clause_in_op_clause271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_clause_in_op_clause285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limit_clause_in_op_clause299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_clause_in_op_clause313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_clause_in_op_clause327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cross_clause_in_op_clause341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_op_clause355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_clause_in_op_clause369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stream_clause_in_op_clause383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mr_clause_in_op_clause397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_split_clause_in_op_clause411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreach_clause_in_op_clause425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_define_clause441 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_define_clause443 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_cmd_in_define_clause448 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_func_clause_in_define_clause452 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_cmd472 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ship_clause_in_cmd485 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_cache_clause_in_cmd489 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_input_clause_in_cmd493 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_output_clause_in_cmd497 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_error_clause_in_cmd501 = new BitSet(new long[]{0x0000400000001008L,0x0000000840004000L});
    public static final BitSet FOLLOW_SHIP_in_ship_clause522 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_path_list_in_ship_clause524 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_path_list541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_CACHE_in_cache_clause559 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_path_list_in_cache_clause561 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INPUT_in_input_clause579 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stream_cmd_in_input_clause581 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_STDIN_in_stream_cmd600 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd602 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STDOUT_in_stream_cmd615 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd617 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_stream_cmd630 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_clause_in_stream_cmd632 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OUTPUT_in_output_clause651 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_stream_cmd_in_output_clause653 = new BitSet(new long[]{0x0000000000000008L,0x0000003000400000L});
    public static final BitSet FOLLOW_STDERROR_in_error_clause672 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_error_clause676 = new BitSet(new long[]{0x0001000000000008L});
    public static final BitSet FOLLOW_INTEGER_in_error_clause678 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOAD_in_load_clause700 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_filename_in_load_clause702 = new BitSet(new long[]{0x0000000000000048L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_load_clause704 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_as_clause_in_load_clause707 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_filename724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_as_clause750 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_field_def_list_in_as_clause752 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIELD_DEF_in_field_def769 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_field_def771 = new BitSet(new long[]{0x0800800404002A08L,0x0080000000000000L,0x0000000008001000L});
    public static final BitSet FOLLOW_type_in_field_def773 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FIELD_DEF_WITHOUT_IDENTIFIER_in_field_def788 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_field_def790 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_field_def_in_field_def_list805 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_simple_type_in_type816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_in_type820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_in_type824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_TYPE_in_tuple_type883 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_field_def_list_in_tuple_type885 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BAG_TYPE_in_bag_type904 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_bag_type906 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_tuple_type_in_bag_type909 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAP_TYPE_in_map_type923 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_map_type925 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNC_REF_in_func_clause944 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_clause946 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNC_in_func_clause958 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_clause960 = new BitSet(new long[]{0x0000000000000008L,0x0000000000400000L});
    public static final BitSet FOLLOW_func_args_in_func_clause962 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_eid_in_func_name979 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_set_in_func_name983 = new BitSet(new long[]{0x6E1EF9E7845A7FF0L,0x000FFFFA5181EC04L,0x00000000C7040040L});
    public static final BitSet FOLLOW_eid_in_func_name993 = new BitSet(new long[]{0x0000000001000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_func_args1010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_set_in_group_clause1027 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_group_item_in_group_clause1037 = new BitSet(new long[]{0x46080121004A4008L,0x000400C210410800L,0x0000000000000040L});
    public static final BitSet FOLLOW_group_type_in_group_clause1040 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_group_clause1043 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_group_type1055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_in_group_item1069 = new BitSet(new long[]{0x0000000000000410L,0x0040000000000000L});
    public static final BitSet FOLLOW_join_group_by_clause_in_group_item1073 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ALL_in_group_item1077 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ANY_in_group_item1081 = new BitSet(new long[]{0x0000200000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_alias_in_rel1108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_clause_in_rel1114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_parallel_clause_in_rel1116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flatten_clause_in_flatten_generated_item1145 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_col_range_in_flatten_generated_item1149 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_in_flatten_generated_item1153 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_flatten_generated_item1157 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_field_def_list_in_flatten_generated_item1161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_flatten_clause1178 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_flatten_clause1180 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STORE_in_store_clause1198 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_store_clause1200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_filename_in_store_clause1202 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_store_clause1204 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FILTER_in_filter_clause1223 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_filter_clause1225 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_filter_clause1227 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OR_in_cond1245 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1247 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_cond1249 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AND_in_cond1261 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1263 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_cond1265 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_in_cond1277 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_cond1279 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NULL_in_cond1291 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1293 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L});
    public static final BitSet FOLLOW_NOT_in_cond1295 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_op_in_cond1308 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_cond1310 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_cond1312 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_func_eval_in_cond1322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNC_EVAL_in_func_eval1337 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_func_eval1339 = new BitSet(new long[]{0x900101108A800008L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_real_arg_in_func_eval1341 = new BitSet(new long[]{0x900101108A800008L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_real_arg1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_real_arg1362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_expr1378 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1380 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1382 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_expr1394 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1396 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1398 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_expr1410 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1412 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1414 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIV_in_expr1426 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1428 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1430 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PERCENT_in_expr1442 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1444 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1446 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_expr1458 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_expr1460 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1462 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_const_expr_in_expr1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_var_expr_in_expr1480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEG_in_expr1490 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1492 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_expr1504 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_expr1506 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_expr1508 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPR_IN_PAREN_in_expr1520 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr1522 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_simple_type_in_type_cast1538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_type_in_type_cast1542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_type_cast_in_type_cast1546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_type_cast_in_type_cast1550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_TYPE_CAST_in_tuple_type_cast1566 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_tuple_type_cast1568 = new BitSet(new long[]{0x0800800404002A08L,0x0100000000000000L,0x0000000010001000L});
    public static final BitSet FOLLOW_BAG_TYPE_CAST_in_bag_type_cast1587 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tuple_type_cast_in_bag_type_cast1589 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_projectable_expr_in_var_expr1606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_dot_proj_in_var_expr1610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_pound_proj_in_var_expr1614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000140000L});
    public static final BitSet FOLLOW_func_eval_in_projectable_expr1630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_ref_in_projectable_expr1634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bin_expr_in_projectable_expr1638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERIOD_in_dot_proj1654 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_alias_or_index_in_dot_proj1656 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_alias_in_col_alias_or_index1668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_col_index_in_col_alias_or_index1672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_col_index1709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COL_RANGE_in_col_range1720 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_ref_in_col_range1722 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_col_range1725 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_ref_in_col_range1727 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_POUND_in_pound_proj1745 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_pound_proj1747 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BIN_EXPR_in_bin_expr1773 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cond_in_bin_expr1775 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_bin_expr1777 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_bin_expr1779 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIMIT_in_limit_clause1802 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_limit_clause1804 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_INTEGER_in_limit_clause1808 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LONGINTEGER_in_limit_clause1812 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_limit_clause1816 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SAMPLE_in_sample_clause1837 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_sample_clause1839 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_sample_clause1843 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_sample_clause1847 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ORDER_in_order_clause1867 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_order_clause1869 = new BitSet(new long[]{0x0000010002000000L,0x2000000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_order_by_clause_in_order_clause1871 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_order_clause1873 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STAR_in_order_by_clause1890 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_order_col_in_order_by_clause1909 = new BitSet(new long[]{0x0000010002000002L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_range_in_order_col1925 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_col_ref_in_order_col1929 = new BitSet(new long[]{0x0000000000100082L});
    public static final BitSet FOLLOW_DISTINCT_in_distinct_clause1961 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_distinct_clause1963 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_distinct_clause1965 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARTITION_in_partition_clause1984 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_func_name_in_partition_clause1986 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CROSS_in_cross_clause2008 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_list_in_cross_clause2010 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_cross_clause2012 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_rel_in_rel_list2033 = new BitSet(new long[]{0x46080121004A4002L,0x000400C210000800L,0x0000000000000040L});
    public static final BitSet FOLLOW_JOIN_in_join_clause2049 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_join_sub_clause_in_join_clause2051 = new BitSet(new long[]{0x0000000000000008L,0x0000000000410000L});
    public static final BitSet FOLLOW_join_type_in_join_clause2053 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
    public static final BitSet FOLLOW_partition_clause_in_join_clause2056 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_join_type2068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2081 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_join_sub_clause2083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_OUTER_in_join_sub_clause2139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_join_sub_clause2150 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_JOIN_ITEM_in_join_item2163 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_join_item2165 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_join_group_by_clause_in_join_item2167 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BY_in_join_group_by_clause2184 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_join_group_by_expr_in_join_group_by_clause2186 = new BitSet(new long[]{0x900101108A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_col_range_in_join_group_by_expr2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_join_group_by_expr2207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_join_group_by_expr2211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_union_clause2228 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ONSCHEMA_in_union_clause2230 = new BitSet(new long[]{0x46080121004A4000L,0x000400C210000800L,0x0000000000000040L});
    public static final BitSet FOLLOW_rel_list_in_union_clause2233 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_in_foreach_clause2255 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_foreach_clause2257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_foreach_plan_in_foreach_clause2259 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_PLAN_SIMPLE_in_foreach_plan2281 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_generate_clause_in_foreach_plan2283 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_PLAN_COMPLEX_in_foreach_plan2295 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_blk_in_foreach_plan2297 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_command_in_nested_blk2312 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_blk2315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_generate_clause2331 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_flatten_generated_item_in_generate_clause2333 = new BitSet(new long[]{0x900101128A800008L,0x76010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_NESTED_CMD_in_nested_command2355 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_nested_command2357 = new BitSet(new long[]{0x0200002100420000L,0x0000000000000800L,0x0000000000020000L});
    public static final BitSet FOLLOW_nested_op_in_nested_command2359 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NESTED_CMD_ASSI_in_nested_command2371 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_IDENTIFIER_in_nested_command2373 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_nested_command2375 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op2386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_filter_in_nested_op2400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_sort_in_nested_op2414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_distinct_in_nested_op2428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_limit_in_nested_op2442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_cross_in_nested_op2456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_foreach_in_nested_op2470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NESTED_PROJ_in_nested_proj2486 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj2488 = new BitSet(new long[]{0x0000010002000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_col_ref_in_nested_proj2490 = new BitSet(new long[]{0x0000010002000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_FILTER_in_nested_filter2512 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_filter2514 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_nested_filter2516 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ORDER_in_nested_sort2538 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_sort2540 = new BitSet(new long[]{0x0000010002000000L,0x2000000400000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_order_by_clause_in_nested_sort2542 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_func_clause_in_nested_sort2544 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DISTINCT_in_nested_distinct2567 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_distinct2569 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIMIT_in_nested_limit2591 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_limit2593 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_INTEGER_in_nested_limit2597 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expr_in_nested_limit2601 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CROSS_in_nested_cross2616 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_list_in_nested_cross2618 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOREACH_in_nested_foreach2631 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_foreach2633 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_generate_clause_in_nested_foreach2635 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_op_input_in_nested_op_input_list2646 = new BitSet(new long[]{0x0000010002000002L,0x0000000000000000L,0x0000000000020040L});
    public static final BitSet FOLLOW_col_ref_in_nested_op_input2656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_proj_in_nested_op_input2660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_stream_clause2676 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_stream_clause2678 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_set_in_stream_clause2680 = new BitSet(new long[]{0x0000000000000048L});
    public static final BitSet FOLLOW_as_clause_in_stream_clause2690 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAPREDUCE_in_mr_clause2709 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_mr_clause2711 = new BitSet(new long[]{0x0000000000000000L,0x0000004000400000L});
    public static final BitSet FOLLOW_path_list_in_mr_clause2713 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_store_clause_in_mr_clause2716 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_load_clause_in_mr_clause2718 = new BitSet(new long[]{0x0000000040000008L});
    public static final BitSet FOLLOW_EXECCOMMAND_in_mr_clause2720 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SPLIT_in_split_clause2739 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rel_in_split_clause2741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_split_branch_in_split_clause2743 = new BitSet(new long[]{0x0000000000000008L,0x0000000000001000L,0x0000000000400000L});
    public static final BitSet FOLLOW_split_otherwise_in_split_clause2746 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SPLIT_BRANCH_in_split_branch2764 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_split_branch2766 = new BitSet(new long[]{0x0000000000000020L,0x00007F00000005FCL,0x0000000000040010L});
    public static final BitSet FOLLOW_cond_in_split_branch2768 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OTHERWISE_in_split_otherwise2786 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_split_otherwise2788 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_alias_col_ref_in_col_ref2800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dollar_col_ref_in_col_ref2804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_alias_col_ref2818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_alias_col_ref2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARVAR_in_dollar_col_ref2849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_const_expr2858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scalar_in_literal2867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_in_literal2871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bag_in_literal2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tuple_in_literal2879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_VAL_in_map2965 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_keyvalue_in_map2967 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KEY_VAL_PAIR_in_keyvalue2986 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_map_key_in_keyvalue2988 = new BitSet(new long[]{0x1001001088000000L,0x0201000000400000L,0x0000000020042000L});
    public static final BitSet FOLLOW_const_expr_in_keyvalue2990 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUOTEDSTRING_in_map_key3005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_VAL_in_bag3021 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tuple_in_bag3023 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_TUPLE_VAL_in_tuple3042 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_literal_in_tuple3044 = new BitSet(new long[]{0x1001001088000008L,0x0201000000400000L,0x0000000020042000L});
    public static final BitSet FOLLOW_rel_str_op_in_eid3057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_eid3065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURNS_in_eid3073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_eid3081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOAD_in_eid3089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTER_in_eid3097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_eid3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_eid3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_eid3121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eid3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COGROUP_in_eid3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_eid3145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CROSS_in_eid3153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_eid3161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SPLIT_in_eid3169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTO_in_eid3177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_eid3185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_eid3193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_eid3201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_eid3209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_eid3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INNER_in_eid3225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_eid3233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARALLEL_in_eid3241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_eid3249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_eid3257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_eid3265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_eid3273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_eid3281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GENERATE_in_eid3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLATTEN_in_eid3297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVAL_in_eid3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASC_in_eid3313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_eid3321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_in_eid3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_eid3337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_in_eid3345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_eid3353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_in_eid3361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARARRAY_in_eid3369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BYTEARRAY_in_eid3377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAG_in_eid3385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUPLE_in_eid3393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAP_in_eid3401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_eid3409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_eid3417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_eid3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_eid3433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STREAM_in_eid3441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROUGH_in_eid3449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STORE_in_eid3457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAPREDUCE_in_eid3465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIP_in_eid3473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CACHE_in_eid3481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INPUT_in_eid3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_eid3497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDERROR_in_eid3505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDIN_in_eid3513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDOUT_in_eid3521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIMIT_in_eid3529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAMPLE_in_eid3537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_eid3545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_eid3553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_eid3561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_eid3569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOBAG_in_eid3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOMAP_in_eid3585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOTUPLE_in_eid3593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_eq_in_rel_op3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_ne_in_rel_op3615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gt_in_rel_op3623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_gte_in_rel_op3631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lt_in_rel_op3639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rel_op_lte_in_rel_op3647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STR_OP_MATCHES_in_rel_op3655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_EXPR_in_synpred88_AliasMasker1458 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_in_synpred88_AliasMasker1460 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_synpred88_AliasMasker1462 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CAST_EXPR_in_synpred92_AliasMasker1504 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_cast_in_synpred92_AliasMasker1506 = new BitSet(new long[]{0x900101108A800000L,0x56010004004A0000L,0x0000000020046050L});
    public static final BitSet FOLLOW_expr_in_synpred92_AliasMasker1508 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INTEGER_in_synpred108_AliasMasker1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINTEGER_in_synpred109_AliasMasker1812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLENUMBER_in_synpred110_AliasMasker1843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_item_in_synpred127_AliasMasker2081 = new BitSet(new long[]{0x0010004000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_synpred127_AliasMasker2083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000080L});
    public static final BitSet FOLLOW_OUTER_in_synpred127_AliasMasker2139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_join_item_in_synpred127_AliasMasker2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_synpred145_AliasMasker2597 = new BitSet(new long[]{0x0000000000000002L});

}